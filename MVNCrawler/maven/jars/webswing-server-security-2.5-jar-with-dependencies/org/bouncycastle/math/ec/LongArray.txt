class org.bouncycastle.math.ec.LongArray {
  private static final int[] INTERLEAVE2_TABLE;

  private static final int[] INTERLEAVE3_TABLE;

  private static final int[] INTERLEAVE4_TABLE;

  private static final int[] INTERLEAVE5_TABLE;

  private static final long[] INTERLEAVE7_TABLE;

  private static final java.lang.String ZEROES;

  static final byte[] bitLengths;

  private long[] m_ints;

  public org.bouncycastle.math.ec.LongArray(int);
    Code:
       0: aload_0
       1: invokespecial #1718               // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iload_1
       6: newarray       long
       8: putfield      #1712               // Field m_ints:[J
      11: return

  public org.bouncycastle.math.ec.LongArray(long[]);
    Code:
       0: aload_0
       1: invokespecial #1718               // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #1712               // Field m_ints:[J
       9: return

  public org.bouncycastle.math.ec.LongArray(long[], int, int);
    Code:
       0: aload_0
       1: invokespecial #1718               // Method java/lang/Object."<init>":()V
       4: iload_2
       5: ifne          22
       8: iload_3
       9: aload_1
      10: arraylength
      11: if_icmpne     22
      14: aload_0
      15: aload_1
      16: putfield      #1712               // Field m_ints:[J
      19: goto          40
      22: aload_0
      23: iload_3
      24: newarray       long
      26: putfield      #1712               // Field m_ints:[J
      29: aload_1
      30: iload_2
      31: aload_0
      32: getfield      #1712               // Field m_ints:[J
      35: iconst_0
      36: iload_3
      37: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      40: return

  public org.bouncycastle.math.ec.LongArray(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokespecial #1718               // Method java/lang/Object."<init>":()V
       4: aload_1
       5: ifnull        15
       8: aload_1
       9: invokevirtual #1725               // Method java/math/BigInteger.signum:()I
      12: ifge          25
      15: new           #1607               // class java/lang/IllegalArgumentException
      18: dup
      19: ldc           #177                // String invalid F2m field value
      21: invokespecial #1713               // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      24: athrow
      25: aload_1
      26: invokevirtual #1725               // Method java/math/BigInteger.signum:()I
      29: ifne          44
      32: aload_0
      33: iconst_1
      34: newarray       long
      36: dup
      37: iconst_0
      38: lconst_0
      39: lastore
      40: putfield      #1712               // Field m_ints:[J
      43: return
      44: aload_1
      45: invokevirtual #1726               // Method java/math/BigInteger.toByteArray:()[B
      48: astore_2
      49: aload_2
      50: arraylength
      51: istore_3
      52: iconst_0
      53: istore        4
      55: aload_2
      56: iconst_0
      57: baload
      58: ifne          67
      61: iinc          3, -1
      64: iconst_1
      65: istore        4
      67: iload_3
      68: bipush        7
      70: iadd
      71: bipush        8
      73: idiv
      74: istore        5
      76: aload_0
      77: iload         5
      79: newarray       long
      81: putfield      #1712               // Field m_ints:[J
      84: iload         5
      86: iconst_1
      87: isub
      88: istore        6
      90: iload_3
      91: bipush        8
      93: irem
      94: iload         4
      96: iadd
      97: istore        7
      99: lconst_0
     100: lstore        8
     102: iload         4
     104: istore        10
     106: iload         4
     108: iload         7
     110: if_icmpge     163
     113: iload         10
     115: iload         7
     117: if_icmpge     151
     120: lload         8
     122: bipush        8
     124: lshl
     125: lstore        8
     127: aload_2
     128: iload         10
     130: baload
     131: sipush        255
     134: iand
     135: istore        11
     137: lload         8
     139: iload         11
     141: i2l
     142: lor
     143: lstore        8
     145: iinc          10, 1
     148: goto          113
     151: aload_0
     152: getfield      #1712               // Field m_ints:[J
     155: iload         6
     157: iinc          6, -1
     160: lload         8
     162: lastore
     163: iload         6
     165: iflt          230
     168: lconst_0
     169: lstore        8
     171: iconst_0
     172: istore        11
     174: iload         11
     176: bipush        8
     178: if_icmpge     215
     181: lload         8
     183: bipush        8
     185: lshl
     186: lstore        8
     188: aload_2
     189: iload         10
     191: iinc          10, 1
     194: baload
     195: sipush        255
     198: iand
     199: istore        12
     201: lload         8
     203: iload         12
     205: i2l
     206: lor
     207: lstore        8
     209: iinc          11, 1
     212: goto          174
     215: aload_0
     216: getfield      #1712               // Field m_ints:[J
     219: iload         6
     221: lload         8
     223: lastore
     224: iinc          6, -1
     227: goto          163
     230: return

  public boolean isOne();
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: astore_1
       5: aload_1
       6: iconst_0
       7: laload
       8: lconst_1
       9: lcmp
      10: ifeq          15
      13: iconst_0
      14: ireturn
      15: iconst_1
      16: istore_2
      17: iload_2
      18: aload_1
      19: arraylength
      20: if_icmpge     39
      23: aload_1
      24: iload_2
      25: laload
      26: lconst_0
      27: lcmp
      28: ifeq          33
      31: iconst_0
      32: ireturn
      33: iinc          2, 1
      36: goto          17
      39: iconst_1
      40: ireturn

  public boolean isZero();
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: astore_1
       5: iconst_0
       6: istore_2
       7: iload_2
       8: aload_1
       9: arraylength
      10: if_icmpge     29
      13: aload_1
      14: iload_2
      15: laload
      16: lconst_0
      17: lcmp
      18: ifeq          23
      21: iconst_0
      22: ireturn
      23: iinc          2, 1
      26: goto          7
      29: iconst_1
      30: ireturn

  public int getUsedLength();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #1712               // Field m_ints:[J
       5: arraylength
       6: invokevirtual #1731               // Method getUsedLengthFrom:(I)I
       9: ireturn

  public int getUsedLengthFrom(int);
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: astore_2
       5: iload_1
       6: aload_2
       7: arraylength
       8: invokestatic  #1717               // Method java/lang/Math.min:(II)I
      11: istore_1
      12: iload_1
      13: iconst_1
      14: if_icmpge     19
      17: iconst_0
      18: ireturn
      19: aload_2
      20: iconst_0
      21: laload
      22: lconst_0
      23: lcmp
      24: ifeq          45
      27: aload_2
      28: iinc          1, -1
      31: iload_1
      32: laload
      33: lconst_0
      34: lcmp
      35: ifne          41
      38: goto          27
      41: iload_1
      42: iconst_1
      43: iadd
      44: ireturn
      45: aload_2
      46: iinc          1, -1
      49: iload_1
      50: laload
      51: lconst_0
      52: lcmp
      53: ifeq          60
      56: iload_1
      57: iconst_1
      58: iadd
      59: ireturn
      60: iload_1
      61: ifgt          45
      64: iconst_0
      65: ireturn

  public int degree();
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: arraylength
       5: istore_1
       6: iload_1
       7: ifne          12
      10: iconst_0
      11: ireturn
      12: aload_0
      13: getfield      #1712               // Field m_ints:[J
      16: iinc          1, -1
      19: iload_1
      20: laload
      21: lstore_2
      22: lload_2
      23: lconst_0
      24: lcmp
      25: ifeq          6
      28: iload_1
      29: bipush        6
      31: ishl
      32: lload_2
      33: invokestatic  #1738               // Method bitLength:(J)I
      36: iadd
      37: ireturn

  private int degreeFrom(int);
    Code:
       0: iload_1
       1: bipush        62
       3: iadd
       4: bipush        6
       6: iushr
       7: istore_2
       8: iload_2
       9: ifne          14
      12: iconst_0
      13: ireturn
      14: aload_0
      15: getfield      #1712               // Field m_ints:[J
      18: iinc          2, -1
      21: iload_2
      22: laload
      23: lstore_3
      24: lload_3
      25: lconst_0
      26: lcmp
      27: ifeq          8
      30: iload_2
      31: bipush        6
      33: ishl
      34: lload_3
      35: invokestatic  #1738               // Method bitLength:(J)I
      38: iadd
      39: ireturn

  private static int bitLength(long);
    Code:
       0: lload_0
       1: bipush        32
       3: lushr
       4: l2i
       5: istore_2
       6: iload_2
       7: ifne          18
      10: lload_0
      11: l2i
      12: istore_2
      13: iconst_0
      14: istore_3
      15: goto          21
      18: bipush        32
      20: istore_3
      21: iload_2
      22: bipush        16
      24: iushr
      25: istore        4
      27: iload         4
      29: ifne          65
      32: iload_2
      33: bipush        8
      35: iushr
      36: istore        4
      38: iload         4
      40: ifne          51
      43: getstatic     #1706               // Field bitLengths:[B
      46: iload_2
      47: baload
      48: goto          60
      51: bipush        8
      53: getstatic     #1706               // Field bitLengths:[B
      56: iload         4
      58: baload
      59: iadd
      60: istore        5
      62: goto          100
      65: iload         4
      67: bipush        8
      69: iushr
      70: istore        6
      72: iload         6
      74: ifne          89
      77: bipush        16
      79: getstatic     #1706               // Field bitLengths:[B
      82: iload         4
      84: baload
      85: iadd
      86: goto          98
      89: bipush        24
      91: getstatic     #1706               // Field bitLengths:[B
      94: iload         6
      96: baload
      97: iadd
      98: istore        5
     100: iload_3
     101: iload         5
     103: iadd
     104: ireturn

  private long[] resizedInts(int);
    Code:
       0: iload_1
       1: newarray       long
       3: astore_2
       4: aload_0
       5: getfield      #1712               // Field m_ints:[J
       8: iconst_0
       9: aload_2
      10: iconst_0
      11: aload_0
      12: getfield      #1712               // Field m_ints:[J
      15: arraylength
      16: iload_1
      17: invokestatic  #1717               // Method java/lang/Math.min:(II)I
      20: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      23: aload_2
      24: areturn

  public java.math.BigInteger toBigInteger();
    Code:
       0: aload_0
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore_1
       5: iload_1
       6: ifne          13
       9: getstatic     #1705               // Field org/bouncycastle/math/ec/ECConstants.ZERO:Ljava/math/BigInteger;
      12: areturn
      13: aload_0
      14: getfield      #1712               // Field m_ints:[J
      17: iload_1
      18: iconst_1
      19: isub
      20: laload
      21: lstore_2
      22: bipush        8
      24: newarray       byte
      26: astore        4
      28: iconst_0
      29: istore        5
      31: iconst_0
      32: istore        6
      34: bipush        7
      36: istore        7
      38: iload         7
      40: iflt          83
      43: lload_2
      44: bipush        8
      46: iload         7
      48: imul
      49: lushr
      50: l2i
      51: i2b
      52: istore        8
      54: iload         6
      56: ifne          64
      59: iload         8
      61: ifeq          77
      64: iconst_1
      65: istore        6
      67: aload         4
      69: iload         5
      71: iinc          5, 1
      74: iload         8
      76: bastore
      77: iinc          7, -1
      80: goto          38
      83: bipush        8
      85: iload_1
      86: iconst_1
      87: isub
      88: imul
      89: iload         5
      91: iadd
      92: istore        7
      94: iload         7
      96: newarray       byte
      98: astore        8
     100: iconst_0
     101: istore        9
     103: iload         9
     105: iload         5
     107: if_icmpge     126
     110: aload         8
     112: iload         9
     114: aload         4
     116: iload         9
     118: baload
     119: bastore
     120: iinc          9, 1
     123: goto          103
     126: iload_1
     127: iconst_2
     128: isub
     129: istore        9
     131: iload         9
     133: iflt          184
     136: aload_0
     137: getfield      #1712               // Field m_ints:[J
     140: iload         9
     142: laload
     143: lstore        10
     145: bipush        7
     147: istore        12
     149: iload         12
     151: iflt          178
     154: aload         8
     156: iload         5
     158: iinc          5, 1
     161: lload         10
     163: bipush        8
     165: iload         12
     167: imul
     168: lushr
     169: l2i
     170: i2b
     171: bastore
     172: iinc          12, -1
     175: goto          149
     178: iinc          9, -1
     181: goto          131
     184: new           #1615               // class java/math/BigInteger
     187: dup
     188: iconst_1
     189: aload         8
     191: invokespecial #1727               // Method java/math/BigInteger."<init>":(I[B)V
     194: areturn

  private static long shiftUp(long[], int, int, int);
    Code:
       0: bipush        64
       2: iload_3
       3: isub
       4: istore        4
       6: lconst_0
       7: lstore        5
       9: iconst_0
      10: istore        7
      12: iload         7
      14: iload_2
      15: if_icmpge     52
      18: aload_0
      19: iload_1
      20: iload         7
      22: iadd
      23: laload
      24: lstore        8
      26: aload_0
      27: iload_1
      28: iload         7
      30: iadd
      31: lload         8
      33: iload_3
      34: lshl
      35: lload         5
      37: lor
      38: lastore
      39: lload         8
      41: iload         4
      43: lushr
      44: lstore        5
      46: iinc          7, 1
      49: goto          12
      52: lload         5
      54: lreturn

  private static long shiftUp(long[], int, long[], int, int, int);
    Code:
       0: bipush        64
       2: iload         5
       4: isub
       5: istore        6
       7: lconst_0
       8: lstore        7
      10: iconst_0
      11: istore        9
      13: iload         9
      15: iload         4
      17: if_icmpge     55
      20: aload_0
      21: iload_1
      22: iload         9
      24: iadd
      25: laload
      26: lstore        10
      28: aload_2
      29: iload_3
      30: iload         9
      32: iadd
      33: lload         10
      35: iload         5
      37: lshl
      38: lload         7
      40: lor
      41: lastore
      42: lload         10
      44: iload         6
      46: lushr
      47: lstore        7
      49: iinc          9, 1
      52: goto          13
      55: lload         7
      57: lreturn

  public org.bouncycastle.math.ec.LongArray addOne();
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: arraylength
       5: ifne          23
       8: new           #1617               // class org/bouncycastle/math/ec/LongArray
      11: dup
      12: iconst_1
      13: newarray       long
      15: dup
      16: iconst_0
      17: lconst_1
      18: lastore
      19: invokespecial #1744               // Method "<init>":([J)V
      22: areturn
      23: iconst_1
      24: aload_0
      25: invokevirtual #1729               // Method getUsedLength:()I
      28: invokestatic  #1716               // Method java/lang/Math.max:(II)I
      31: istore_1
      32: aload_0
      33: iload_1
      34: invokespecial #1737               // Method resizedInts:(I)[J
      37: astore_2
      38: aload_2
      39: iconst_0
      40: dup2
      41: laload
      42: lconst_1
      43: lxor
      44: lastore
      45: new           #1617               // class org/bouncycastle/math/ec/LongArray
      48: dup
      49: aload_2
      50: invokespecial #1744               // Method "<init>":([J)V
      53: areturn

  private void addShiftedByBitsSafe(org.bouncycastle.math.ec.LongArray, int, int);
    Code:
       0: iload_2
       1: bipush        63
       3: iadd
       4: bipush        6
       6: iushr
       7: istore        4
       9: iload_3
      10: bipush        6
      12: iushr
      13: istore        5
      15: iload_3
      16: bipush        63
      18: iand
      19: istore        6
      21: iload         6
      23: ifne          43
      26: aload_0
      27: getfield      #1712               // Field m_ints:[J
      30: iload         5
      32: aload_1
      33: getfield      #1712               // Field m_ints:[J
      36: iconst_0
      37: iload         4
      39: invokestatic  #1758               // Method add:([JI[JII)V
      42: return
      43: aload_0
      44: getfield      #1712               // Field m_ints:[J
      47: iload         5
      49: aload_1
      50: getfield      #1712               // Field m_ints:[J
      53: iconst_0
      54: iload         4
      56: iload         6
      58: invokestatic  #1763               // Method addShiftedUp:([JI[JIII)J
      61: lstore        7
      63: lload         7
      65: lconst_0
      66: lcmp
      67: ifeq          85
      70: aload_0
      71: getfield      #1712               // Field m_ints:[J
      74: iload         4
      76: iload         5
      78: iadd
      79: dup2
      80: laload
      81: lload         7
      83: lxor
      84: lastore
      85: return

  private static long addShiftedUp(long[], int, long[], int, int, int);
    Code:
       0: bipush        64
       2: iload         5
       4: isub
       5: istore        6
       7: lconst_0
       8: lstore        7
      10: iconst_0
      11: istore        9
      13: iload         9
      15: iload         4
      17: if_icmpge     58
      20: aload_2
      21: iload_3
      22: iload         9
      24: iadd
      25: laload
      26: lstore        10
      28: aload_0
      29: iload_1
      30: iload         9
      32: iadd
      33: dup2
      34: laload
      35: lload         10
      37: iload         5
      39: lshl
      40: lload         7
      42: lor
      43: lxor
      44: lastore
      45: lload         10
      47: iload         6
      49: lushr
      50: lstore        7
      52: iinc          9, 1
      55: goto          13
      58: lload         7
      60: lreturn

  private static long addShiftedDown(long[], int, long[], int, int, int);
    Code:
       0: bipush        64
       2: iload         5
       4: isub
       5: istore        6
       7: lconst_0
       8: lstore        7
      10: iload         4
      12: istore        9
      14: iinc          9, -1
      17: iload         9
      19: iflt          57
      22: aload_2
      23: iload_3
      24: iload         9
      26: iadd
      27: laload
      28: lstore        10
      30: aload_0
      31: iload_1
      32: iload         9
      34: iadd
      35: dup2
      36: laload
      37: lload         10
      39: iload         5
      41: lushr
      42: lload         7
      44: lor
      45: lxor
      46: lastore
      47: lload         10
      49: iload         6
      51: lshl
      52: lstore        7
      54: goto          14
      57: lload         7
      59: lreturn

  public void addShiftedByWords(org.bouncycastle.math.ec.LongArray, int);
    Code:
       0: aload_1
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore_3
       5: iload_3
       6: ifne          10
       9: return
      10: iload_3
      11: iload_2
      12: iadd
      13: istore        4
      15: iload         4
      17: aload_0
      18: getfield      #1712               // Field m_ints:[J
      21: arraylength
      22: if_icmple     35
      25: aload_0
      26: aload_0
      27: iload         4
      29: invokespecial #1737               // Method resizedInts:(I)[J
      32: putfield      #1712               // Field m_ints:[J
      35: aload_0
      36: getfield      #1712               // Field m_ints:[J
      39: iload_2
      40: aload_1
      41: getfield      #1712               // Field m_ints:[J
      44: iconst_0
      45: iload_3
      46: invokestatic  #1758               // Method add:([JI[JII)V
      49: return

  private static void add(long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload         4
       7: if_icmpge     31
      10: aload_0
      11: iload_1
      12: iload         5
      14: iadd
      15: dup2
      16: laload
      17: aload_2
      18: iload_3
      19: iload         5
      21: iadd
      22: laload
      23: lxor
      24: lastore
      25: iinc          5, 1
      28: goto          3
      31: return

  private static void add(long[], int, long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        7
       3: iload         7
       5: iload         6
       7: if_icmpge     37
      10: aload         4
      12: iload         5
      14: iload         7
      16: iadd
      17: aload_0
      18: iload_1
      19: iload         7
      21: iadd
      22: laload
      23: aload_2
      24: iload_3
      25: iload         7
      27: iadd
      28: laload
      29: lxor
      30: lastore
      31: iinc          7, 1
      34: goto          3
      37: return

  private static void addBoth(long[], int, long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        7
       3: iload         7
       5: iload         6
       7: if_icmpge     40
      10: aload_0
      11: iload_1
      12: iload         7
      14: iadd
      15: dup2
      16: laload
      17: aload_2
      18: iload_3
      19: iload         7
      21: iadd
      22: laload
      23: aload         4
      25: iload         5
      27: iload         7
      29: iadd
      30: laload
      31: lxor
      32: lxor
      33: lastore
      34: iinc          7, 1
      37: goto          3
      40: return

  private static void distribute(long[], int, int, int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload         4
       7: if_icmpge     46
      10: aload_0
      11: iload_1
      12: iload         5
      14: iadd
      15: laload
      16: lstore        6
      18: aload_0
      19: iload_2
      20: iload         5
      22: iadd
      23: dup2
      24: laload
      25: lload         6
      27: lxor
      28: lastore
      29: aload_0
      30: iload_3
      31: iload         5
      33: iadd
      34: dup2
      35: laload
      36: lload         6
      38: lxor
      39: lastore
      40: iinc          5, 1
      43: goto          3
      46: return

  public int getLength();
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: arraylength
       5: ireturn

  private static void flipWord(long[], int, int, long);
    Code:
       0: iload_1
       1: iload_2
       2: bipush        6
       4: iushr
       5: iadd
       6: istore        5
       8: iload_2
       9: bipush        63
      11: iand
      12: istore        6
      14: iload         6
      16: ifne          30
      19: aload_0
      20: iload         5
      22: dup2
      23: laload
      24: lload_3
      25: lxor
      26: lastore
      27: goto          66
      30: aload_0
      31: iload         5
      33: dup2
      34: laload
      35: lload_3
      36: iload         6
      38: lshl
      39: lxor
      40: lastore
      41: lload_3
      42: bipush        64
      44: iload         6
      46: isub
      47: lushr
      48: lstore_3
      49: lload_3
      50: lconst_0
      51: lcmp
      52: ifeq          66
      55: aload_0
      56: iinc          5, 1
      59: iload         5
      61: dup2
      62: laload
      63: lload_3
      64: lxor
      65: lastore
      66: return

  public boolean testBitZero();
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: arraylength
       5: ifle          25
       8: aload_0
       9: getfield      #1712               // Field m_ints:[J
      12: iconst_0
      13: laload
      14: lconst_1
      15: land
      16: lconst_0
      17: lcmp
      18: ifeq          25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  private static boolean testBit(long[], int, int);
    Code:
       0: iload_2
       1: bipush        6
       3: iushr
       4: istore_3
       5: iload_2
       6: bipush        63
       8: iand
       9: istore        4
      11: lconst_1
      12: iload         4
      14: lshl
      15: lstore        5
      17: aload_0
      18: iload_1
      19: iload_3
      20: iadd
      21: laload
      22: lload         5
      24: land
      25: lconst_0
      26: lcmp
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  private static void flipBit(long[], int, int);
    Code:
       0: iload_2
       1: bipush        6
       3: iushr
       4: istore_3
       5: iload_2
       6: bipush        63
       8: iand
       9: istore        4
      11: lconst_1
      12: iload         4
      14: lshl
      15: lstore        5
      17: aload_0
      18: iload_1
      19: iload_3
      20: iadd
      21: dup2
      22: laload
      23: lload         5
      25: lxor
      26: lastore
      27: return

  private static void multiplyWord(long, long[], int, long[], int);
    Code:
       0: lload_0
       1: lconst_1
       2: land
       3: lconst_0
       4: lcmp
       5: ifeq          18
       8: aload         4
      10: iload         5
      12: aload_2
      13: iconst_0
      14: iload_3
      15: invokestatic  #1758               // Method add:([JI[JII)V
      18: iconst_1
      19: istore        6
      21: lload_0
      22: iconst_1
      23: lushr
      24: dup2
      25: lstore_0
      26: lconst_0
      27: lcmp
      28: ifeq          78
      31: lload_0
      32: lconst_1
      33: land
      34: lconst_0
      35: lcmp
      36: ifeq          72
      39: aload         4
      41: iload         5
      43: aload_2
      44: iconst_0
      45: iload_3
      46: iload         6
      48: invokestatic  #1763               // Method addShiftedUp:([JI[JIII)J
      51: lstore        7
      53: lload         7
      55: lconst_0
      56: lcmp
      57: ifeq          72
      60: aload         4
      62: iload         5
      64: iload_3
      65: iadd
      66: dup2
      67: laload
      68: lload         7
      70: lxor
      71: lastore
      72: iinc          6, 1
      75: goto          21
      78: return

  public org.bouncycastle.math.ec.LongArray modMultiplyLD(org.bouncycastle.math.ec.LongArray, int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1728               // Method degree:()I
       4: istore        4
       6: iload         4
       8: ifne          13
      11: aload_0
      12: areturn
      13: aload_1
      14: invokevirtual #1728               // Method degree:()I
      17: istore        5
      19: iload         5
      21: ifne          26
      24: aload_1
      25: areturn
      26: aload_0
      27: astore        6
      29: aload_1
      30: astore        7
      32: iload         4
      34: iload         5
      36: if_icmple     57
      39: aload_1
      40: astore        6
      42: aload_0
      43: astore        7
      45: iload         4
      47: istore        8
      49: iload         5
      51: istore        4
      53: iload         8
      55: istore        5
      57: iload         4
      59: bipush        63
      61: iadd
      62: bipush        6
      64: iushr
      65: istore        8
      67: iload         5
      69: bipush        63
      71: iadd
      72: bipush        6
      74: iushr
      75: istore        9
      77: iload         4
      79: iload         5
      81: iadd
      82: bipush        62
      84: iadd
      85: bipush        6
      87: iushr
      88: istore        10
      90: iload         8
      92: iconst_1
      93: if_icmpne     147
      96: aload         6
      98: getfield      #1712               // Field m_ints:[J
     101: iconst_0
     102: laload
     103: lstore        11
     105: lload         11
     107: lconst_1
     108: lcmp
     109: ifne          115
     112: aload         7
     114: areturn
     115: iload         10
     117: newarray       long
     119: astore        13
     121: lload         11
     123: aload         7
     125: getfield      #1712               // Field m_ints:[J
     128: iload         9
     130: aload         13
     132: iconst_0
     133: invokestatic  #1743               // Method multiplyWord:(J[JI[JI)V
     136: aload         13
     138: iconst_0
     139: iload         10
     141: iload_2
     142: aload_3
     143: invokestatic  #1772               // Method reduceResult:([JIII[I)Lorg/bouncycastle/math/ec/LongArray;
     146: areturn
     147: iload         5
     149: bipush        7
     151: iadd
     152: bipush        63
     154: iadd
     155: bipush        6
     157: iushr
     158: istore        11
     160: bipush        16
     162: newarray       int
     164: astore        12
     166: iload         11
     168: iconst_4
     169: ishl
     170: newarray       long
     172: astore        13
     174: iload         11
     176: istore        14
     178: aload         12
     180: iconst_1
     181: iload         14
     183: iastore
     184: aload         7
     186: getfield      #1712               // Field m_ints:[J
     189: iconst_0
     190: aload         13
     192: iload         14
     194: iload         9
     196: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     199: iconst_2
     200: istore        15
     202: iload         15
     204: bipush        16
     206: if_icmpge     275
     209: aload         12
     211: iload         15
     213: iload         14
     215: iload         11
     217: iadd
     218: dup
     219: istore        14
     221: iastore
     222: iload         15
     224: iconst_1
     225: iand
     226: ifne          249
     229: aload         13
     231: iload         14
     233: iconst_1
     234: iushr
     235: aload         13
     237: iload         14
     239: iload         11
     241: iconst_1
     242: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     245: pop2
     246: goto          269
     249: aload         13
     251: iload         11
     253: aload         13
     255: iload         14
     257: iload         11
     259: isub
     260: aload         13
     262: iload         14
     264: iload         11
     266: invokestatic  #1768               // Method add:([JI[JI[JII)V
     269: iinc          15, 1
     272: goto          202
     275: aload         13
     277: arraylength
     278: newarray       long
     280: astore        15
     282: aload         13
     284: iconst_0
     285: aload         15
     287: iconst_0
     288: aload         13
     290: arraylength
     291: iconst_4
     292: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     295: pop2
     296: aload         6
     298: getfield      #1712               // Field m_ints:[J
     301: astore        16
     303: iload         10
     305: newarray       long
     307: astore        17
     309: bipush        15
     311: istore        18
     313: bipush        56
     315: istore        19
     317: iload         19
     319: iflt          407
     322: iconst_1
     323: istore        20
     325: iload         20
     327: iload         8
     329: if_icmpge     390
     332: aload         16
     334: iload         20
     336: laload
     337: iload         19
     339: lushr
     340: l2i
     341: istore        21
     343: iload         21
     345: iload         18
     347: iand
     348: istore        22
     350: iload         21
     352: iconst_4
     353: iushr
     354: iload         18
     356: iand
     357: istore        23
     359: aload         17
     361: iload         20
     363: iconst_1
     364: isub
     365: aload         13
     367: aload         12
     369: iload         22
     371: iaload
     372: aload         15
     374: aload         12
     376: iload         23
     378: iaload
     379: iload         11
     381: invokestatic  #1769               // Method addBoth:([JI[JI[JII)V
     384: iinc          20, 2
     387: goto          325
     390: aload         17
     392: iconst_0
     393: iload         10
     395: bipush        8
     397: invokestatic  #1748               // Method shiftUp:([JIII)J
     400: pop2
     401: iinc          19, -8
     404: goto          317
     407: bipush        56
     409: istore        19
     411: iload         19
     413: iflt          504
     416: iconst_0
     417: istore        20
     419: iload         20
     421: iload         8
     423: if_icmpge     482
     426: aload         16
     428: iload         20
     430: laload
     431: iload         19
     433: lushr
     434: l2i
     435: istore        21
     437: iload         21
     439: iload         18
     441: iand
     442: istore        22
     444: iload         21
     446: iconst_4
     447: iushr
     448: iload         18
     450: iand
     451: istore        23
     453: aload         17
     455: iload         20
     457: aload         13
     459: aload         12
     461: iload         22
     463: iaload
     464: aload         15
     466: aload         12
     468: iload         23
     470: iaload
     471: iload         11
     473: invokestatic  #1769               // Method addBoth:([JI[JI[JII)V
     476: iinc          20, 2
     479: goto          419
     482: iload         19
     484: ifle          498
     487: aload         17
     489: iconst_0
     490: iload         10
     492: bipush        8
     494: invokestatic  #1748               // Method shiftUp:([JIII)J
     497: pop2
     498: iinc          19, -8
     501: goto          411
     504: aload         17
     506: iconst_0
     507: iload         10
     509: iload_2
     510: aload_3
     511: invokestatic  #1772               // Method reduceResult:([JIII[I)Lorg/bouncycastle/math/ec/LongArray;
     514: areturn

  public org.bouncycastle.math.ec.LongArray modMultiply(org.bouncycastle.math.ec.LongArray, int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1728               // Method degree:()I
       4: istore        4
       6: iload         4
       8: ifne          13
      11: aload_0
      12: areturn
      13: aload_1
      14: invokevirtual #1728               // Method degree:()I
      17: istore        5
      19: iload         5
      21: ifne          26
      24: aload_1
      25: areturn
      26: aload_0
      27: astore        6
      29: aload_1
      30: astore        7
      32: iload         4
      34: iload         5
      36: if_icmple     57
      39: aload_1
      40: astore        6
      42: aload_0
      43: astore        7
      45: iload         4
      47: istore        8
      49: iload         5
      51: istore        4
      53: iload         8
      55: istore        5
      57: iload         4
      59: bipush        63
      61: iadd
      62: bipush        6
      64: iushr
      65: istore        8
      67: iload         5
      69: bipush        63
      71: iadd
      72: bipush        6
      74: iushr
      75: istore        9
      77: iload         4
      79: iload         5
      81: iadd
      82: bipush        62
      84: iadd
      85: bipush        6
      87: iushr
      88: istore        10
      90: iload         8
      92: iconst_1
      93: if_icmpne     147
      96: aload         6
      98: getfield      #1712               // Field m_ints:[J
     101: iconst_0
     102: laload
     103: lstore        11
     105: lload         11
     107: lconst_1
     108: lcmp
     109: ifne          115
     112: aload         7
     114: areturn
     115: iload         10
     117: newarray       long
     119: astore        13
     121: lload         11
     123: aload         7
     125: getfield      #1712               // Field m_ints:[J
     128: iload         9
     130: aload         13
     132: iconst_0
     133: invokestatic  #1743               // Method multiplyWord:(J[JI[JI)V
     136: aload         13
     138: iconst_0
     139: iload         10
     141: iload_2
     142: aload_3
     143: invokestatic  #1772               // Method reduceResult:([JIII[I)Lorg/bouncycastle/math/ec/LongArray;
     146: areturn
     147: iload         5
     149: bipush        7
     151: iadd
     152: bipush        63
     154: iadd
     155: bipush        6
     157: iushr
     158: istore        11
     160: bipush        16
     162: newarray       int
     164: astore        12
     166: iload         11
     168: iconst_4
     169: ishl
     170: newarray       long
     172: astore        13
     174: iload         11
     176: istore        14
     178: aload         12
     180: iconst_1
     181: iload         14
     183: iastore
     184: aload         7
     186: getfield      #1712               // Field m_ints:[J
     189: iconst_0
     190: aload         13
     192: iload         14
     194: iload         9
     196: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     199: iconst_2
     200: istore        15
     202: iload         15
     204: bipush        16
     206: if_icmpge     275
     209: aload         12
     211: iload         15
     213: iload         14
     215: iload         11
     217: iadd
     218: dup
     219: istore        14
     221: iastore
     222: iload         15
     224: iconst_1
     225: iand
     226: ifne          249
     229: aload         13
     231: iload         14
     233: iconst_1
     234: iushr
     235: aload         13
     237: iload         14
     239: iload         11
     241: iconst_1
     242: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     245: pop2
     246: goto          269
     249: aload         13
     251: iload         11
     253: aload         13
     255: iload         14
     257: iload         11
     259: isub
     260: aload         13
     262: iload         14
     264: iload         11
     266: invokestatic  #1768               // Method add:([JI[JI[JII)V
     269: iinc          15, 1
     272: goto          202
     275: aload         13
     277: arraylength
     278: newarray       long
     280: astore        15
     282: aload         13
     284: iconst_0
     285: aload         15
     287: iconst_0
     288: aload         13
     290: arraylength
     291: iconst_4
     292: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     295: pop2
     296: aload         6
     298: getfield      #1712               // Field m_ints:[J
     301: astore        16
     303: iload         10
     305: iconst_3
     306: ishl
     307: newarray       long
     309: astore        17
     311: bipush        15
     313: istore        18
     315: iconst_0
     316: istore        19
     318: iload         19
     320: iload         8
     322: if_icmpge     413
     325: aload         16
     327: iload         19
     329: laload
     330: lstore        20
     332: iload         19
     334: istore        22
     336: lload         20
     338: l2i
     339: iload         18
     341: iand
     342: istore        23
     344: lload         20
     346: iconst_4
     347: lushr
     348: lstore        20
     350: lload         20
     352: l2i
     353: iload         18
     355: iand
     356: istore        24
     358: aload         17
     360: iload         22
     362: aload         13
     364: aload         12
     366: iload         23
     368: iaload
     369: aload         15
     371: aload         12
     373: iload         24
     375: iaload
     376: iload         11
     378: invokestatic  #1769               // Method addBoth:([JI[JI[JII)V
     381: lload         20
     383: iconst_4
     384: lushr
     385: lstore        20
     387: lload         20
     389: lconst_0
     390: lcmp
     391: ifne          397
     394: goto          407
     397: iload         22
     399: iload         10
     401: iadd
     402: istore        22
     404: goto          336
     407: iinc          19, 1
     410: goto          318
     413: aload         17
     415: arraylength
     416: istore        19
     418: iload         19
     420: iload         10
     422: isub
     423: dup
     424: istore        19
     426: ifeq          451
     429: aload         17
     431: iload         19
     433: iload         10
     435: isub
     436: aload         17
     438: iload         19
     440: iload         10
     442: bipush        8
     444: invokestatic  #1763               // Method addShiftedUp:([JI[JIII)J
     447: pop2
     448: goto          418
     451: aload         17
     453: iconst_0
     454: iload         10
     456: iload_2
     457: aload_3
     458: invokestatic  #1772               // Method reduceResult:([JIII[I)Lorg/bouncycastle/math/ec/LongArray;
     461: areturn

  public org.bouncycastle.math.ec.LongArray modMultiplyAlt(org.bouncycastle.math.ec.LongArray, int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1728               // Method degree:()I
       4: istore        4
       6: iload         4
       8: ifne          13
      11: aload_0
      12: areturn
      13: aload_1
      14: invokevirtual #1728               // Method degree:()I
      17: istore        5
      19: iload         5
      21: ifne          26
      24: aload_1
      25: areturn
      26: aload_0
      27: astore        6
      29: aload_1
      30: astore        7
      32: iload         4
      34: iload         5
      36: if_icmple     57
      39: aload_1
      40: astore        6
      42: aload_0
      43: astore        7
      45: iload         4
      47: istore        8
      49: iload         5
      51: istore        4
      53: iload         8
      55: istore        5
      57: iload         4
      59: bipush        63
      61: iadd
      62: bipush        6
      64: iushr
      65: istore        8
      67: iload         5
      69: bipush        63
      71: iadd
      72: bipush        6
      74: iushr
      75: istore        9
      77: iload         4
      79: iload         5
      81: iadd
      82: bipush        62
      84: iadd
      85: bipush        6
      87: iushr
      88: istore        10
      90: iload         8
      92: iconst_1
      93: if_icmpne     147
      96: aload         6
      98: getfield      #1712               // Field m_ints:[J
     101: iconst_0
     102: laload
     103: lstore        11
     105: lload         11
     107: lconst_1
     108: lcmp
     109: ifne          115
     112: aload         7
     114: areturn
     115: iload         10
     117: newarray       long
     119: astore        13
     121: lload         11
     123: aload         7
     125: getfield      #1712               // Field m_ints:[J
     128: iload         9
     130: aload         13
     132: iconst_0
     133: invokestatic  #1743               // Method multiplyWord:(J[JI[JI)V
     136: aload         13
     138: iconst_0
     139: iload         10
     141: iload_2
     142: aload_3
     143: invokestatic  #1772               // Method reduceResult:([JIII[I)Lorg/bouncycastle/math/ec/LongArray;
     146: areturn
     147: iconst_4
     148: istore        11
     150: bipush        16
     152: istore        12
     154: bipush        64
     156: istore        13
     158: bipush        8
     160: istore        14
     162: iload         13
     164: bipush        64
     166: if_icmpge     174
     169: iload         12
     171: goto          178
     174: iload         12
     176: iconst_1
     177: isub
     178: istore        15
     180: iload         5
     182: iload         15
     184: iadd
     185: bipush        63
     187: iadd
     188: bipush        6
     190: iushr
     191: istore        16
     193: iload         16
     195: iload         14
     197: imul
     198: istore        17
     200: iload         11
     202: iload         14
     204: imul
     205: istore        18
     207: iconst_1
     208: iload         11
     210: ishl
     211: newarray       int
     213: astore        19
     215: iload         8
     217: istore        20
     219: aload         19
     221: iconst_0
     222: iload         20
     224: iastore
     225: iload         20
     227: iload         17
     229: iadd
     230: istore        20
     232: aload         19
     234: iconst_1
     235: iload         20
     237: iastore
     238: iconst_2
     239: istore        21
     241: iload         21
     243: aload         19
     245: arraylength
     246: if_icmpge     269
     249: iload         20
     251: iload         10
     253: iadd
     254: istore        20
     256: aload         19
     258: iload         21
     260: iload         20
     262: iastore
     263: iinc          21, 1
     266: goto          241
     269: iload         20
     271: iload         10
     273: iadd
     274: istore        20
     276: iinc          20, 1
     279: iload         20
     281: newarray       long
     283: astore        21
     285: aload         6
     287: getfield      #1712               // Field m_ints:[J
     290: iconst_0
     291: aload         21
     293: iconst_0
     294: iload         8
     296: iload         11
     298: invokestatic  #1766               // Method interleave:([JI[JIII)V
     301: iload         8
     303: istore        22
     305: aload         7
     307: getfield      #1712               // Field m_ints:[J
     310: iconst_0
     311: aload         21
     313: iload         22
     315: iload         9
     317: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     320: iconst_1
     321: istore        23
     323: iload         23
     325: iload         14
     327: if_icmpge     358
     330: aload         21
     332: iload         8
     334: aload         21
     336: iload         22
     338: iload         16
     340: iadd
     341: dup
     342: istore        22
     344: iload         16
     346: iload         23
     348: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     351: pop2
     352: iinc          23, 1
     355: goto          323
     358: iconst_1
     359: iload         11
     361: ishl
     362: iconst_1
     363: isub
     364: istore        22
     366: iconst_0
     367: istore        23
     369: iconst_0
     370: istore        24
     372: aload         21
     374: iload         24
     376: laload
     377: iload         23
     379: lushr
     380: lstore        25
     382: iconst_0
     383: istore        27
     385: iload         8
     387: istore        28
     389: lload         25
     391: l2i
     392: iload         22
     394: iand
     395: istore        29
     397: iload         29
     399: ifeq          421
     402: aload         21
     404: iload         24
     406: aload         19
     408: iload         29
     410: iaload
     411: iadd
     412: aload         21
     414: iload         28
     416: iload         16
     418: invokestatic  #1758               // Method add:([JI[JII)V
     421: iinc          27, 1
     424: iload         27
     426: iload         14
     428: if_icmpne     434
     431: goto          451
     434: iload         28
     436: iload         16
     438: iadd
     439: istore        28
     441: lload         25
     443: iload         11
     445: lushr
     446: lstore        25
     448: goto          389
     451: iinc          24, 1
     454: iload         24
     456: iload         8
     458: if_icmplt     372
     461: iload         23
     463: iload         18
     465: iadd
     466: dup
     467: istore        23
     469: iload         13
     471: if_icmplt     504
     474: iload         23
     476: bipush        64
     478: if_icmplt     484
     481: goto          519
     484: bipush        64
     486: iload         11
     488: isub
     489: istore        23
     491: iload         22
     493: iload         22
     495: iload         13
     497: iload         23
     499: isub
     500: ishl
     501: iand
     502: istore        22
     504: aload         21
     506: iload         8
     508: iload         17
     510: iload         14
     512: invokestatic  #1748               // Method shiftUp:([JIII)J
     515: pop2
     516: goto          369
     519: aload         19
     521: arraylength
     522: istore        24
     524: iinc          24, -1
     527: iload         24
     529: iconst_1
     530: if_icmple     596
     533: iload         24
     535: i2l
     536: lconst_1
     537: land
     538: lconst_0
     539: lcmp
     540: ifne          570
     543: aload         21
     545: aload         19
     547: iload         24
     549: iconst_1
     550: iushr
     551: iaload
     552: aload         21
     554: aload         19
     556: iload         24
     558: iaload
     559: iload         10
     561: iload         12
     563: invokestatic  #1763               // Method addShiftedUp:([JI[JIII)J
     566: pop2
     567: goto          524
     570: aload         21
     572: aload         19
     574: iload         24
     576: iaload
     577: aload         19
     579: iload         24
     581: iconst_1
     582: isub
     583: iaload
     584: aload         19
     586: iconst_1
     587: iaload
     588: iload         10
     590: invokestatic  #1749               // Method distribute:([JIIII)V
     593: goto          524
     596: aload         21
     598: aload         19
     600: iconst_1
     601: iaload
     602: iload         10
     604: iload_2
     605: aload_3
     606: invokestatic  #1772               // Method reduceResult:([JIII[I)Lorg/bouncycastle/math/ec/LongArray;
     609: areturn

  public org.bouncycastle.math.ec.LongArray modReduce(int, int[]);
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: invokestatic  #1773               // Method org/bouncycastle/util/Arrays.clone:([J)[J
       7: astore_3
       8: aload_3
       9: iconst_0
      10: aload_3
      11: arraylength
      12: iload_1
      13: aload_2
      14: invokestatic  #1752               // Method reduceInPlace:([JIII[I)I
      17: istore        4
      19: new           #1617               // class org/bouncycastle/math/ec/LongArray
      22: dup
      23: aload_3
      24: iconst_0
      25: iload         4
      27: invokespecial #1745               // Method "<init>":([JII)V
      30: areturn

  public org.bouncycastle.math.ec.LongArray multiply(org.bouncycastle.math.ec.LongArray, int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1728               // Method degree:()I
       4: istore        4
       6: iload         4
       8: ifne          13
      11: aload_0
      12: areturn
      13: aload_1
      14: invokevirtual #1728               // Method degree:()I
      17: istore        5
      19: iload         5
      21: ifne          26
      24: aload_1
      25: areturn
      26: aload_0
      27: astore        6
      29: aload_1
      30: astore        7
      32: iload         4
      34: iload         5
      36: if_icmple     57
      39: aload_1
      40: astore        6
      42: aload_0
      43: astore        7
      45: iload         4
      47: istore        8
      49: iload         5
      51: istore        4
      53: iload         8
      55: istore        5
      57: iload         4
      59: bipush        63
      61: iadd
      62: bipush        6
      64: iushr
      65: istore        8
      67: iload         5
      69: bipush        63
      71: iadd
      72: bipush        6
      74: iushr
      75: istore        9
      77: iload         4
      79: iload         5
      81: iadd
      82: bipush        62
      84: iadd
      85: bipush        6
      87: iushr
      88: istore        10
      90: iload         8
      92: iconst_1
      93: if_icmpne     149
      96: aload         6
      98: getfield      #1712               // Field m_ints:[J
     101: iconst_0
     102: laload
     103: lstore        11
     105: lload         11
     107: lconst_1
     108: lcmp
     109: ifne          115
     112: aload         7
     114: areturn
     115: iload         10
     117: newarray       long
     119: astore        13
     121: lload         11
     123: aload         7
     125: getfield      #1712               // Field m_ints:[J
     128: iload         9
     130: aload         13
     132: iconst_0
     133: invokestatic  #1743               // Method multiplyWord:(J[JI[JI)V
     136: new           #1617               // class org/bouncycastle/math/ec/LongArray
     139: dup
     140: aload         13
     142: iconst_0
     143: iload         10
     145: invokespecial #1745               // Method "<init>":([JII)V
     148: areturn
     149: iload         5
     151: bipush        7
     153: iadd
     154: bipush        63
     156: iadd
     157: bipush        6
     159: iushr
     160: istore        11
     162: bipush        16
     164: newarray       int
     166: astore        12
     168: iload         11
     170: iconst_4
     171: ishl
     172: newarray       long
     174: astore        13
     176: iload         11
     178: istore        14
     180: aload         12
     182: iconst_1
     183: iload         14
     185: iastore
     186: aload         7
     188: getfield      #1712               // Field m_ints:[J
     191: iconst_0
     192: aload         13
     194: iload         14
     196: iload         9
     198: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     201: iconst_2
     202: istore        15
     204: iload         15
     206: bipush        16
     208: if_icmpge     277
     211: aload         12
     213: iload         15
     215: iload         14
     217: iload         11
     219: iadd
     220: dup
     221: istore        14
     223: iastore
     224: iload         15
     226: iconst_1
     227: iand
     228: ifne          251
     231: aload         13
     233: iload         14
     235: iconst_1
     236: iushr
     237: aload         13
     239: iload         14
     241: iload         11
     243: iconst_1
     244: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     247: pop2
     248: goto          271
     251: aload         13
     253: iload         11
     255: aload         13
     257: iload         14
     259: iload         11
     261: isub
     262: aload         13
     264: iload         14
     266: iload         11
     268: invokestatic  #1768               // Method add:([JI[JI[JII)V
     271: iinc          15, 1
     274: goto          204
     277: aload         13
     279: arraylength
     280: newarray       long
     282: astore        15
     284: aload         13
     286: iconst_0
     287: aload         15
     289: iconst_0
     290: aload         13
     292: arraylength
     293: iconst_4
     294: invokestatic  #1764               // Method shiftUp:([JI[JIII)J
     297: pop2
     298: aload         6
     300: getfield      #1712               // Field m_ints:[J
     303: astore        16
     305: iload         10
     307: iconst_3
     308: ishl
     309: newarray       long
     311: astore        17
     313: bipush        15
     315: istore        18
     317: iconst_0
     318: istore        19
     320: iload         19
     322: iload         8
     324: if_icmpge     415
     327: aload         16
     329: iload         19
     331: laload
     332: lstore        20
     334: iload         19
     336: istore        22
     338: lload         20
     340: l2i
     341: iload         18
     343: iand
     344: istore        23
     346: lload         20
     348: iconst_4
     349: lushr
     350: lstore        20
     352: lload         20
     354: l2i
     355: iload         18
     357: iand
     358: istore        24
     360: aload         17
     362: iload         22
     364: aload         13
     366: aload         12
     368: iload         23
     370: iaload
     371: aload         15
     373: aload         12
     375: iload         24
     377: iaload
     378: iload         11
     380: invokestatic  #1769               // Method addBoth:([JI[JI[JII)V
     383: lload         20
     385: iconst_4
     386: lushr
     387: lstore        20
     389: lload         20
     391: lconst_0
     392: lcmp
     393: ifne          399
     396: goto          409
     399: iload         22
     401: iload         10
     403: iadd
     404: istore        22
     406: goto          338
     409: iinc          19, 1
     412: goto          320
     415: aload         17
     417: arraylength
     418: istore        19
     420: iload         19
     422: iload         10
     424: isub
     425: dup
     426: istore        19
     428: ifeq          453
     431: aload         17
     433: iload         19
     435: iload         10
     437: isub
     438: aload         17
     440: iload         19
     442: iload         10
     444: bipush        8
     446: invokestatic  #1763               // Method addShiftedUp:([JI[JIII)J
     449: pop2
     450: goto          420
     453: new           #1617               // class org/bouncycastle/math/ec/LongArray
     456: dup
     457: aload         17
     459: iconst_0
     460: iload         10
     462: invokespecial #1745               // Method "<init>":([JII)V
     465: areturn

  public void reduce(int, int[]);
    Code:
       0: aload_0
       1: getfield      #1712               // Field m_ints:[J
       4: astore_3
       5: aload_3
       6: iconst_0
       7: aload_3
       8: arraylength
       9: iload_1
      10: aload_2
      11: invokestatic  #1752               // Method reduceInPlace:([JIII[I)I
      14: istore        4
      16: iload         4
      18: aload_3
      19: arraylength
      20: if_icmpge     43
      23: aload_0
      24: iload         4
      26: newarray       long
      28: putfield      #1712               // Field m_ints:[J
      31: aload_3
      32: iconst_0
      33: aload_0
      34: getfield      #1712               // Field m_ints:[J
      37: iconst_0
      38: iload         4
      40: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      43: return

  private static org.bouncycastle.math.ec.LongArray reduceResult(long[], int, int, int, int[]);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: iload_3
       4: aload         4
       6: invokestatic  #1752               // Method reduceInPlace:([JIII[I)I
       9: istore        5
      11: new           #1617               // class org/bouncycastle/math/ec/LongArray
      14: dup
      15: aload_0
      16: iload_1
      17: iload         5
      19: invokespecial #1745               // Method "<init>":([JII)V
      22: areturn

  private static int reduceInPlace(long[], int, int, int, int[]);
    Code:
       0: iload_3
       1: bipush        63
       3: iadd
       4: bipush        6
       6: iushr
       7: istore        5
       9: iload_2
      10: iload         5
      12: if_icmpge     17
      15: iload_2
      16: ireturn
      17: iload_2
      18: bipush        6
      20: ishl
      21: iload_3
      22: iconst_1
      23: ishl
      24: iconst_1
      25: isub
      26: invokestatic  #1717               // Method java/lang/Math.min:(II)I
      29: istore        6
      31: iload_2
      32: bipush        6
      34: ishl
      35: iload         6
      37: isub
      38: istore        7
      40: iload         7
      42: bipush        64
      44: if_icmplt     56
      47: iinc          2, -1
      50: iinc          7, -64
      53: goto          40
      56: aload         4
      58: arraylength
      59: istore        8
      61: aload         4
      63: iload         8
      65: iconst_1
      66: isub
      67: iaload
      68: istore        9
      70: iload         8
      72: iconst_1
      73: if_icmple     86
      76: aload         4
      78: iload         8
      80: iconst_2
      81: isub
      82: iaload
      83: goto          87
      86: iconst_0
      87: istore        10
      89: iload_3
      90: iload         9
      92: bipush        64
      94: iadd
      95: invokestatic  #1716               // Method java/lang/Math.max:(II)I
      98: istore        11
     100: iload         7
     102: iload         6
     104: iload         11
     106: isub
     107: iload_3
     108: iload         10
     110: isub
     111: invokestatic  #1717               // Method java/lang/Math.min:(II)I
     114: iadd
     115: bipush        6
     117: ishr
     118: istore        12
     120: iload         12
     122: iconst_1
     123: if_icmple     168
     126: iload_2
     127: iload         12
     129: isub
     130: istore        13
     132: aload_0
     133: iload_1
     134: iload_2
     135: iload         13
     137: iload_3
     138: aload         4
     140: invokestatic  #1750               // Method reduceVectorWise:([JIIII[I)V
     143: iload_2
     144: iload         13
     146: if_icmple     161
     149: aload_0
     150: iload_1
     151: iinc          2, -1
     154: iload_2
     155: iadd
     156: lconst_0
     157: lastore
     158: goto          143
     161: iload         13
     163: bipush        6
     165: ishl
     166: istore        6
     168: iload         6
     170: iload         11
     172: if_icmple     190
     175: aload_0
     176: iload_1
     177: iload_2
     178: iload         11
     180: iload_3
     181: aload         4
     183: invokestatic  #1751               // Method reduceWordWise:([JIIII[I)V
     186: iload         11
     188: istore        6
     190: iload         6
     192: iload_3
     193: if_icmple     206
     196: aload_0
     197: iload_1
     198: iload         6
     200: iload_3
     201: aload         4
     203: invokestatic  #1754               // Method reduceBitWise:([JIII[I)V
     206: iload         5
     208: ireturn

  private static void reduceBitWise(long[], int, int, int, int[]);
    Code:
       0: iinc          2, -1
       3: iload_2
       4: iload_3
       5: if_icmplt     29
       8: aload_0
       9: iload_1
      10: iload_2
      11: invokestatic  #1747               // Method testBit:([JII)Z
      14: ifeq          0
      17: aload_0
      18: iload_1
      19: iload_2
      20: iload_3
      21: aload         4
      23: invokestatic  #1753               // Method reduceBit:([JIII[I)V
      26: goto          0
      29: return

  private static void reduceBit(long[], int, int, int, int[]);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #1746               // Method flipBit:([JII)V
       6: iload_2
       7: iload_3
       8: isub
       9: istore        5
      11: aload         4
      13: arraylength
      14: istore        6
      16: iinc          6, -1
      19: iload         6
      21: iflt          40
      24: aload_0
      25: iload_1
      26: aload         4
      28: iload         6
      30: iaload
      31: iload         5
      33: iadd
      34: invokestatic  #1746               // Method flipBit:([JII)V
      37: goto          16
      40: aload_0
      41: iload_1
      42: iload         5
      44: invokestatic  #1746               // Method flipBit:([JII)V
      47: return

  private static void reduceWordWise(long[], int, int, int, int, int[]);
    Code:
       0: iload_3
       1: bipush        6
       3: iushr
       4: istore        6
       6: iinc          2, -1
       9: iload_2
      10: iload         6
      12: if_icmple     53
      15: aload_0
      16: iload_1
      17: iload_2
      18: iadd
      19: laload
      20: lstore        7
      22: lload         7
      24: lconst_0
      25: lcmp
      26: ifeq          50
      29: aload_0
      30: iload_1
      31: iload_2
      32: iadd
      33: lconst_0
      34: lastore
      35: aload_0
      36: iload_1
      37: iload_2
      38: bipush        6
      40: ishl
      41: lload         7
      43: iload         4
      45: aload         5
      47: invokestatic  #1756               // Method reduceWord:([JIIJI[I)V
      50: goto          6
      53: iload_3
      54: bipush        63
      56: iand
      57: istore        7
      59: aload_0
      60: iload_1
      61: iload         6
      63: iadd
      64: laload
      65: iload         7
      67: lushr
      68: lstore        8
      70: lload         8
      72: lconst_0
      73: lcmp
      74: ifeq          103
      77: aload_0
      78: iload_1
      79: iload         6
      81: iadd
      82: dup2
      83: laload
      84: lload         8
      86: iload         7
      88: lshl
      89: lxor
      90: lastore
      91: aload_0
      92: iload_1
      93: iload_3
      94: lload         8
      96: iload         4
      98: aload         5
     100: invokestatic  #1756               // Method reduceWord:([JIIJI[I)V
     103: return

  private static void reduceWord(long[], int, int, long, int, int[]);
    Code:
       0: iload_2
       1: iload         5
       3: isub
       4: istore        7
       6: aload         6
       8: arraylength
       9: istore        8
      11: iinc          8, -1
      14: iload         8
      16: iflt          36
      19: aload_0
      20: iload_1
      21: iload         7
      23: aload         6
      25: iload         8
      27: iaload
      28: iadd
      29: lload_3
      30: invokestatic  #1755               // Method flipWord:([JIIJ)V
      33: goto          11
      36: aload_0
      37: iload_1
      38: iload         7
      40: lload_3
      41: invokestatic  #1755               // Method flipWord:([JIIJ)V
      44: return

  private static void reduceVectorWise(long[], int, int, int, int, int[]);
    Code:
       0: iload_3
       1: bipush        6
       3: ishl
       4: iload         4
       6: isub
       7: istore        6
       9: aload         5
      11: arraylength
      12: istore        7
      14: iinc          7, -1
      17: iload         7
      19: iflt          45
      22: aload_0
      23: iload_1
      24: aload_0
      25: iload_1
      26: iload_3
      27: iadd
      28: iload_2
      29: iload_3
      30: isub
      31: iload         6
      33: aload         5
      35: iload         7
      37: iaload
      38: iadd
      39: invokestatic  #1765               // Method flipVector:([JI[JIII)V
      42: goto          14
      45: aload_0
      46: iload_1
      47: aload_0
      48: iload_1
      49: iload_3
      50: iadd
      51: iload_2
      52: iload_3
      53: isub
      54: iload         6
      56: invokestatic  #1765               // Method flipVector:([JI[JIII)V
      59: return

  private static void flipVector(long[], int, long[], int, int, int);
    Code:
       0: iload_1
       1: iload         5
       3: bipush        6
       5: iushr
       6: iadd
       7: istore_1
       8: iload         5
      10: bipush        63
      12: iand
      13: istore        5
      15: iload         5
      17: ifne          32
      20: aload_0
      21: iload_1
      22: aload_2
      23: iload_3
      24: iload         4
      26: invokestatic  #1758               // Method add:([JI[JII)V
      29: goto          58
      32: aload_0
      33: iload_1
      34: iconst_1
      35: iadd
      36: aload_2
      37: iload_3
      38: iload         4
      40: bipush        64
      42: iload         5
      44: isub
      45: invokestatic  #1762               // Method addShiftedDown:([JI[JIII)J
      48: lstore        6
      50: aload_0
      51: iload_1
      52: dup2
      53: laload
      54: lload         6
      56: lxor
      57: lastore
      58: return

  public org.bouncycastle.math.ec.LongArray modSquare(int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore_3
       5: iload_3
       6: ifne          11
       9: aload_0
      10: areturn
      11: iload_3
      12: iconst_1
      13: ishl
      14: istore        4
      16: iload         4
      18: newarray       long
      20: astore        5
      22: iconst_0
      23: istore        6
      25: iload         6
      27: iload         4
      29: if_icmpge     77
      32: aload_0
      33: getfield      #1712               // Field m_ints:[J
      36: iload         6
      38: iconst_1
      39: iushr
      40: laload
      41: lstore        7
      43: aload         5
      45: iload         6
      47: iinc          6, 1
      50: lload         7
      52: l2i
      53: invokestatic  #1732               // Method interleave2_32to64:(I)J
      56: lastore
      57: aload         5
      59: iload         6
      61: iinc          6, 1
      64: lload         7
      66: bipush        32
      68: lushr
      69: l2i
      70: invokestatic  #1732               // Method interleave2_32to64:(I)J
      73: lastore
      74: goto          25
      77: new           #1617               // class org/bouncycastle/math/ec/LongArray
      80: dup
      81: aload         5
      83: iconst_0
      84: aload         5
      86: iconst_0
      87: aload         5
      89: arraylength
      90: iload_1
      91: aload_2
      92: invokestatic  #1752               // Method reduceInPlace:([JIII[I)I
      95: invokespecial #1745               // Method "<init>":([JII)V
      98: areturn

  public org.bouncycastle.math.ec.LongArray modSquareN(int, int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore        4
       6: iload         4
       8: ifne          13
      11: aload_0
      12: areturn
      13: iload_2
      14: bipush        63
      16: iadd
      17: bipush        6
      19: iushr
      20: istore        5
      22: iload         5
      24: iconst_1
      25: ishl
      26: newarray       long
      28: astore        6
      30: aload_0
      31: getfield      #1712               // Field m_ints:[J
      34: iconst_0
      35: aload         6
      37: iconst_0
      38: iload         4
      40: invokestatic  #1724               // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      43: iinc          1, -1
      46: iload_1
      47: iflt          75
      50: aload         6
      52: iload         4
      54: iload_2
      55: aload_3
      56: invokestatic  #1757               // Method squareInPlace:([JII[I)V
      59: aload         6
      61: iconst_0
      62: aload         6
      64: arraylength
      65: iload_2
      66: aload_3
      67: invokestatic  #1752               // Method reduceInPlace:([JIII[I)I
      70: istore        4
      72: goto          43
      75: new           #1617               // class org/bouncycastle/math/ec/LongArray
      78: dup
      79: aload         6
      81: iconst_0
      82: iload         4
      84: invokespecial #1745               // Method "<init>":([JII)V
      87: areturn

  public org.bouncycastle.math.ec.LongArray square(int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore_3
       5: iload_3
       6: ifne          11
       9: aload_0
      10: areturn
      11: iload_3
      12: iconst_1
      13: ishl
      14: istore        4
      16: iload         4
      18: newarray       long
      20: astore        5
      22: iconst_0
      23: istore        6
      25: iload         6
      27: iload         4
      29: if_icmpge     77
      32: aload_0
      33: getfield      #1712               // Field m_ints:[J
      36: iload         6
      38: iconst_1
      39: iushr
      40: laload
      41: lstore        7
      43: aload         5
      45: iload         6
      47: iinc          6, 1
      50: lload         7
      52: l2i
      53: invokestatic  #1732               // Method interleave2_32to64:(I)J
      56: lastore
      57: aload         5
      59: iload         6
      61: iinc          6, 1
      64: lload         7
      66: bipush        32
      68: lushr
      69: l2i
      70: invokestatic  #1732               // Method interleave2_32to64:(I)J
      73: lastore
      74: goto          25
      77: new           #1617               // class org/bouncycastle/math/ec/LongArray
      80: dup
      81: aload         5
      83: iconst_0
      84: aload         5
      86: arraylength
      87: invokespecial #1745               // Method "<init>":([JII)V
      90: areturn

  private static void squareInPlace(long[], int, int, int[]);
    Code:
       0: iload_1
       1: iconst_1
       2: ishl
       3: istore        4
       5: iinc          1, -1
       8: iload_1
       9: iflt          49
      12: aload_0
      13: iload_1
      14: laload
      15: lstore        5
      17: aload_0
      18: iinc          4, -1
      21: iload         4
      23: lload         5
      25: bipush        32
      27: lushr
      28: l2i
      29: invokestatic  #1732               // Method interleave2_32to64:(I)J
      32: lastore
      33: aload_0
      34: iinc          4, -1
      37: iload         4
      39: lload         5
      41: l2i
      42: invokestatic  #1732               // Method interleave2_32to64:(I)J
      45: lastore
      46: goto          5
      49: return

  private static void interleave(long[], int, long[], int, int, int);
    Code:
       0: iload         5
       2: tableswitch   { // 3 to 7
                     3: 36
                     4: 72
                     5: 48
                     6: 72
                     7: 60
               default: 72
          }
      36: aload_0
      37: iload_1
      38: aload_2
      39: iload_3
      40: iload         4
      42: invokestatic  #1759               // Method interleave3:([JI[JII)V
      45: goto          89
      48: aload_0
      49: iload_1
      50: aload_2
      51: iload_3
      52: iload         4
      54: invokestatic  #1760               // Method interleave5:([JI[JII)V
      57: goto          89
      60: aload_0
      61: iload_1
      62: aload_2
      63: iload_3
      64: iload         4
      66: invokestatic  #1761               // Method interleave7:([JI[JII)V
      69: goto          89
      72: aload_0
      73: iload_1
      74: aload_2
      75: iload_3
      76: iload         4
      78: getstatic     #1706               // Field bitLengths:[B
      81: iload         5
      83: baload
      84: iconst_1
      85: isub
      86: invokestatic  #1767               // Method interleave2_n:([JI[JIII)V
      89: return

  private static void interleave3(long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload         4
       7: if_icmpge     31
      10: aload_2
      11: iload_3
      12: iload         5
      14: iadd
      15: aload_0
      16: iload_1
      17: iload         5
      19: iadd
      20: laload
      21: invokestatic  #1739               // Method interleave3:(J)J
      24: lastore
      25: iinc          5, 1
      28: goto          3
      31: return

  private static long interleave3(long);
    Code:
       0: lload_0
       1: ldc2_w        #583                // long -9223372036854775808l
       4: land
       5: lstore_2
       6: lload_2
       7: lload_0
       8: l2i
       9: ldc           #146                // int 2097151
      11: iand
      12: invokestatic  #1734               // Method interleave3_21to63:(I)J
      15: lor
      16: lload_0
      17: bipush        21
      19: lushr
      20: l2i
      21: ldc           #146                // int 2097151
      23: iand
      24: invokestatic  #1734               // Method interleave3_21to63:(I)J
      27: iconst_1
      28: lshl
      29: lor
      30: lload_0
      31: bipush        42
      33: lushr
      34: l2i
      35: ldc           #146                // int 2097151
      37: iand
      38: invokestatic  #1734               // Method interleave3_21to63:(I)J
      41: iconst_2
      42: lshl
      43: lor
      44: lreturn

  private static long interleave3_21to63(int);
    Code:
       0: getstatic     #1708               // Field INTERLEAVE3_TABLE:[I
       3: iload_0
       4: bipush        127
       6: iand
       7: iaload
       8: istore_1
       9: getstatic     #1708               // Field INTERLEAVE3_TABLE:[I
      12: iload_0
      13: bipush        7
      15: iushr
      16: bipush        127
      18: iand
      19: iaload
      20: istore_2
      21: getstatic     #1708               // Field INTERLEAVE3_TABLE:[I
      24: iload_0
      25: bipush        14
      27: iushr
      28: iaload
      29: istore_3
      30: iload_3
      31: i2l
      32: ldc2_w        #645                // long 4294967295l
      35: land
      36: bipush        42
      38: lshl
      39: iload_2
      40: i2l
      41: ldc2_w        #645                // long 4294967295l
      44: land
      45: bipush        21
      47: lshl
      48: lor
      49: iload_1
      50: i2l
      51: ldc2_w        #645                // long 4294967295l
      54: land
      55: lor
      56: lreturn

  private static void interleave5(long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload         4
       7: if_icmpge     31
      10: aload_2
      11: iload_3
      12: iload         5
      14: iadd
      15: aload_0
      16: iload_1
      17: iload         5
      19: iadd
      20: laload
      21: invokestatic  #1740               // Method interleave5:(J)J
      24: lastore
      25: iinc          5, 1
      28: goto          3
      31: return

  private static long interleave5(long);
    Code:
       0: lload_0
       1: l2i
       2: sipush        8191
       5: iand
       6: invokestatic  #1733               // Method interleave3_13to65:(I)J
       9: lload_0
      10: bipush        13
      12: lushr
      13: l2i
      14: sipush        8191
      17: iand
      18: invokestatic  #1733               // Method interleave3_13to65:(I)J
      21: iconst_1
      22: lshl
      23: lor
      24: lload_0
      25: bipush        26
      27: lushr
      28: l2i
      29: sipush        8191
      32: iand
      33: invokestatic  #1733               // Method interleave3_13to65:(I)J
      36: iconst_2
      37: lshl
      38: lor
      39: lload_0
      40: bipush        39
      42: lushr
      43: l2i
      44: sipush        8191
      47: iand
      48: invokestatic  #1733               // Method interleave3_13to65:(I)J
      51: iconst_3
      52: lshl
      53: lor
      54: lload_0
      55: bipush        52
      57: lushr
      58: l2i
      59: sipush        8191
      62: iand
      63: invokestatic  #1733               // Method interleave3_13to65:(I)J
      66: iconst_4
      67: lshl
      68: lor
      69: lreturn

  private static long interleave3_13to65(int);
    Code:
       0: getstatic     #1710               // Field INTERLEAVE5_TABLE:[I
       3: iload_0
       4: bipush        127
       6: iand
       7: iaload
       8: istore_1
       9: getstatic     #1710               // Field INTERLEAVE5_TABLE:[I
      12: iload_0
      13: bipush        7
      15: iushr
      16: iaload
      17: istore_2
      18: iload_2
      19: i2l
      20: ldc2_w        #645                // long 4294967295l
      23: land
      24: bipush        35
      26: lshl
      27: iload_1
      28: i2l
      29: ldc2_w        #645                // long 4294967295l
      32: land
      33: lor
      34: lreturn

  private static void interleave7(long[], int, long[], int, int);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload         4
       7: if_icmpge     31
      10: aload_2
      11: iload_3
      12: iload         5
      14: iadd
      15: aload_0
      16: iload_1
      17: iload         5
      19: iadd
      20: laload
      21: invokestatic  #1741               // Method interleave7:(J)J
      24: lastore
      25: iinc          5, 1
      28: goto          3
      31: return

  private static long interleave7(long);
    Code:
       0: lload_0
       1: ldc2_w        #583                // long -9223372036854775808l
       4: land
       5: lstore_2
       6: lload_2
       7: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
      10: lload_0
      11: l2i
      12: sipush        511
      15: iand
      16: laload
      17: lor
      18: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
      21: lload_0
      22: bipush        9
      24: lushr
      25: l2i
      26: sipush        511
      29: iand
      30: laload
      31: iconst_1
      32: lshl
      33: lor
      34: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
      37: lload_0
      38: bipush        18
      40: lushr
      41: l2i
      42: sipush        511
      45: iand
      46: laload
      47: iconst_2
      48: lshl
      49: lor
      50: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
      53: lload_0
      54: bipush        27
      56: lushr
      57: l2i
      58: sipush        511
      61: iand
      62: laload
      63: iconst_3
      64: lshl
      65: lor
      66: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
      69: lload_0
      70: bipush        36
      72: lushr
      73: l2i
      74: sipush        511
      77: iand
      78: laload
      79: iconst_4
      80: lshl
      81: lor
      82: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
      85: lload_0
      86: bipush        45
      88: lushr
      89: l2i
      90: sipush        511
      93: iand
      94: laload
      95: iconst_5
      96: lshl
      97: lor
      98: getstatic     #1711               // Field INTERLEAVE7_TABLE:[J
     101: lload_0
     102: bipush        54
     104: lushr
     105: l2i
     106: sipush        511
     109: iand
     110: laload
     111: bipush        6
     113: lshl
     114: lor
     115: lreturn

  private static void interleave2_n(long[], int, long[], int, int, int);
    Code:
       0: iconst_0
       1: istore        6
       3: iload         6
       5: iload         4
       7: if_icmpge     33
      10: aload_2
      11: iload_3
      12: iload         6
      14: iadd
      15: aload_0
      16: iload_1
      17: iload         6
      19: iadd
      20: laload
      21: iload         5
      23: invokestatic  #1742               // Method interleave2_n:(JI)J
      26: lastore
      27: iinc          6, 1
      30: goto          3
      33: return

  private static long interleave2_n(long, int);
    Code:
       0: iload_2
       1: iconst_1
       2: if_icmple     62
       5: iinc          2, -2
       8: lload_0
       9: l2i
      10: ldc           #33                 // int 65535
      12: iand
      13: invokestatic  #1735               // Method interleave4_16to64:(I)J
      16: lload_0
      17: bipush        16
      19: lushr
      20: l2i
      21: ldc           #33                 // int 65535
      23: iand
      24: invokestatic  #1735               // Method interleave4_16to64:(I)J
      27: iconst_1
      28: lshl
      29: lor
      30: lload_0
      31: bipush        32
      33: lushr
      34: l2i
      35: ldc           #33                 // int 65535
      37: iand
      38: invokestatic  #1735               // Method interleave4_16to64:(I)J
      41: iconst_2
      42: lshl
      43: lor
      44: lload_0
      45: bipush        48
      47: lushr
      48: l2i
      49: ldc           #33                 // int 65535
      51: iand
      52: invokestatic  #1735               // Method interleave4_16to64:(I)J
      55: iconst_3
      56: lshl
      57: lor
      58: lstore_0
      59: goto          0
      62: iload_2
      63: ifle          83
      66: lload_0
      67: l2i
      68: invokestatic  #1732               // Method interleave2_32to64:(I)J
      71: lload_0
      72: bipush        32
      74: lushr
      75: l2i
      76: invokestatic  #1732               // Method interleave2_32to64:(I)J
      79: iconst_1
      80: lshl
      81: lor
      82: lstore_0
      83: lload_0
      84: lreturn

  private static long interleave4_16to64(int);
    Code:
       0: getstatic     #1709               // Field INTERLEAVE4_TABLE:[I
       3: iload_0
       4: sipush        255
       7: iand
       8: iaload
       9: istore_1
      10: getstatic     #1709               // Field INTERLEAVE4_TABLE:[I
      13: iload_0
      14: bipush        8
      16: iushr
      17: iaload
      18: istore_2
      19: iload_2
      20: i2l
      21: ldc2_w        #645                // long 4294967295l
      24: land
      25: bipush        32
      27: lshl
      28: iload_1
      29: i2l
      30: ldc2_w        #645                // long 4294967295l
      33: land
      34: lor
      35: lreturn

  private static long interleave2_32to64(int);
    Code:
       0: getstatic     #1707               // Field INTERLEAVE2_TABLE:[I
       3: iload_0
       4: sipush        255
       7: iand
       8: iaload
       9: getstatic     #1707               // Field INTERLEAVE2_TABLE:[I
      12: iload_0
      13: bipush        8
      15: iushr
      16: sipush        255
      19: iand
      20: iaload
      21: bipush        16
      23: ishl
      24: ior
      25: istore_1
      26: getstatic     #1707               // Field INTERLEAVE2_TABLE:[I
      29: iload_0
      30: bipush        16
      32: iushr
      33: sipush        255
      36: iand
      37: iaload
      38: getstatic     #1707               // Field INTERLEAVE2_TABLE:[I
      41: iload_0
      42: bipush        24
      44: iushr
      45: iaload
      46: bipush        16
      48: ishl
      49: ior
      50: istore_2
      51: iload_2
      52: i2l
      53: ldc2_w        #645                // long 4294967295l
      56: land
      57: bipush        32
      59: lshl
      60: iload_1
      61: i2l
      62: ldc2_w        #645                // long 4294967295l
      65: land
      66: lor
      67: lreturn

  public org.bouncycastle.math.ec.LongArray modInverse(int, int[]);
    Code:
       0: aload_0
       1: invokevirtual #1728               // Method degree:()I
       4: istore_3
       5: iload_3
       6: ifne          17
       9: new           #1608               // class java/lang/IllegalStateException
      12: dup
      13: invokespecial #1714               // Method java/lang/IllegalStateException."<init>":()V
      16: athrow
      17: iload_3
      18: iconst_1
      19: if_icmpne     24
      22: aload_0
      23: areturn
      24: aload_0
      25: invokevirtual #1770               // Method clone:()Ljava/lang/Object;
      28: checkcast     #1617               // class org/bouncycastle/math/ec/LongArray
      31: astore        4
      33: iload_1
      34: bipush        63
      36: iadd
      37: bipush        6
      39: iushr
      40: istore        5
      42: new           #1617               // class org/bouncycastle/math/ec/LongArray
      45: dup
      46: iload         5
      48: invokespecial #1736               // Method "<init>":(I)V
      51: astore        6
      53: aload         6
      55: getfield      #1712               // Field m_ints:[J
      58: iconst_0
      59: iload_1
      60: iload_1
      61: aload_2
      62: invokestatic  #1753               // Method reduceBit:([JIII[I)V
      65: new           #1617               // class org/bouncycastle/math/ec/LongArray
      68: dup
      69: iload         5
      71: invokespecial #1736               // Method "<init>":(I)V
      74: astore        7
      76: aload         7
      78: getfield      #1712               // Field m_ints:[J
      81: iconst_0
      82: lconst_1
      83: lastore
      84: new           #1617               // class org/bouncycastle/math/ec/LongArray
      87: dup
      88: iload         5
      90: invokespecial #1736               // Method "<init>":(I)V
      93: astore        8
      95: iconst_2
      96: newarray       int
      98: dup
      99: iconst_0
     100: iload_3
     101: iastore
     102: dup
     103: iconst_1
     104: iload_1
     105: iconst_1
     106: iadd
     107: iastore
     108: astore        9
     110: iconst_2
     111: anewarray     #1617               // class org/bouncycastle/math/ec/LongArray
     114: dup
     115: iconst_0
     116: aload         4
     118: aastore
     119: dup
     120: iconst_1
     121: aload         6
     123: aastore
     124: astore        10
     126: iconst_2
     127: newarray       int
     129: dup
     130: iconst_0
     131: iconst_1
     132: iastore
     133: dup
     134: iconst_1
     135: iconst_0
     136: iastore
     137: astore        11
     139: iconst_2
     140: anewarray     #1617               // class org/bouncycastle/math/ec/LongArray
     143: dup
     144: iconst_0
     145: aload         7
     147: aastore
     148: dup
     149: iconst_1
     150: aload         8
     152: aastore
     153: astore        12
     155: iconst_1
     156: istore        13
     158: aload         9
     160: iload         13
     162: iaload
     163: istore        14
     165: aload         11
     167: iload         13
     169: iaload
     170: istore        15
     172: iload         14
     174: aload         9
     176: iconst_1
     177: iload         13
     179: isub
     180: iaload
     181: isub
     182: istore        16
     184: iload         16
     186: ifge          228
     189: iload         16
     191: ineg
     192: istore        16
     194: aload         9
     196: iload         13
     198: iload         14
     200: iastore
     201: aload         11
     203: iload         13
     205: iload         15
     207: iastore
     208: iconst_1
     209: iload         13
     211: isub
     212: istore        13
     214: aload         9
     216: iload         13
     218: iaload
     219: istore        14
     221: aload         11
     223: iload         13
     225: iaload
     226: istore        15
     228: aload         10
     230: iload         13
     232: aaload
     233: aload         10
     235: iconst_1
     236: iload         13
     238: isub
     239: aaload
     240: aload         9
     242: iconst_1
     243: iload         13
     245: isub
     246: iaload
     247: iload         16
     249: invokespecial #1771               // Method addShiftedByBitsSafe:(Lorg/bouncycastle/math/ec/LongArray;II)V
     252: aload         10
     254: iload         13
     256: aaload
     257: iload         14
     259: invokespecial #1730               // Method degreeFrom:(I)I
     262: istore        17
     264: iload         17
     266: ifne          277
     269: aload         12
     271: iconst_1
     272: iload         13
     274: isub
     275: aaload
     276: areturn
     277: aload         11
     279: iconst_1
     280: iload         13
     282: isub
     283: iaload
     284: istore        18
     286: aload         12
     288: iload         13
     290: aaload
     291: aload         12
     293: iconst_1
     294: iload         13
     296: isub
     297: aaload
     298: iload         18
     300: iload         16
     302: invokespecial #1771               // Method addShiftedByBitsSafe:(Lorg/bouncycastle/math/ec/LongArray;II)V
     305: iload         18
     307: iload         16
     309: iadd
     310: istore        18
     312: iload         18
     314: iload         15
     316: if_icmple     326
     319: iload         18
     321: istore        15
     323: goto          345
     326: iload         18
     328: iload         15
     330: if_icmpne     345
     333: aload         12
     335: iload         13
     337: aaload
     338: iload         15
     340: invokespecial #1730               // Method degreeFrom:(I)I
     343: istore        15
     345: iload         16
     347: iload         17
     349: iload         14
     351: isub
     352: iadd
     353: istore        16
     355: iload         17
     357: istore        14
     359: goto          184

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #1617               // class org/bouncycastle/math/ec/LongArray
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #1617               // class org/bouncycastle/math/ec/LongArray
      13: astore_2
      14: aload_0
      15: invokevirtual #1729               // Method getUsedLength:()I
      18: istore_3
      19: aload_2
      20: invokevirtual #1729               // Method getUsedLength:()I
      23: iload_3
      24: if_icmpeq     29
      27: iconst_0
      28: ireturn
      29: iconst_0
      30: istore        4
      32: iload         4
      34: iload_3
      35: if_icmpge     64
      38: aload_0
      39: getfield      #1712               // Field m_ints:[J
      42: iload         4
      44: laload
      45: aload_2
      46: getfield      #1712               // Field m_ints:[J
      49: iload         4
      51: laload
      52: lcmp
      53: ifeq          58
      56: iconst_0
      57: ireturn
      58: iinc          4, 1
      61: goto          32
      64: iconst_1
      65: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore_1
       5: iconst_1
       6: istore_2
       7: iconst_0
       8: istore_3
       9: iload_3
      10: iload_1
      11: if_icmpge     53
      14: aload_0
      15: getfield      #1712               // Field m_ints:[J
      18: iload_3
      19: laload
      20: lstore        4
      22: iload_2
      23: bipush        31
      25: imul
      26: istore_2
      27: iload_2
      28: lload         4
      30: l2i
      31: ixor
      32: istore_2
      33: iload_2
      34: bipush        31
      36: imul
      37: istore_2
      38: iload_2
      39: lload         4
      41: bipush        32
      43: lushr
      44: l2i
      45: ixor
      46: istore_2
      47: iinc          3, 1
      50: goto          9
      53: iload_2
      54: ireturn

  public java.lang.Object clone();
    Code:
       0: new           #1617               // class org/bouncycastle/math/ec/LongArray
       3: dup
       4: aload_0
       5: getfield      #1712               // Field m_ints:[J
       8: invokestatic  #1773               // Method org/bouncycastle/util/Arrays.clone:([J)[J
      11: invokespecial #1744               // Method "<init>":([J)V
      14: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #1729               // Method getUsedLength:()I
       4: istore_1
       5: iload_1
       6: ifne          12
       9: ldc           #175                // String 0
      11: areturn
      12: new           #1613               // class java/lang/StringBuffer
      15: dup
      16: aload_0
      17: getfield      #1712               // Field m_ints:[J
      20: iinc          1, -1
      23: iload_1
      24: laload
      25: invokestatic  #1715               // Method java/lang/Long.toBinaryString:(J)Ljava/lang/String;
      28: invokespecial #1722               // Method java/lang/StringBuffer."<init>":(Ljava/lang/String;)V
      31: astore_2
      32: iinc          1, -1
      35: iload_1
      36: iflt          83
      39: aload_0
      40: getfield      #1712               // Field m_ints:[J
      43: iload_1
      44: laload
      45: invokestatic  #1715               // Method java/lang/Long.toBinaryString:(J)Ljava/lang/String;
      48: astore_3
      49: aload_3
      50: invokevirtual #1719               // Method java/lang/String.length:()I
      53: istore        4
      55: iload         4
      57: bipush        64
      59: if_icmpge     74
      62: aload_2
      63: ldc           #176                // String 0000000000000000000000000000000000000000000000000000000000000000
      65: iload         4
      67: invokevirtual #1720               // Method java/lang/String.substring:(I)Ljava/lang/String;
      70: invokevirtual #1723               // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      73: pop
      74: aload_2
      75: aload_3
      76: invokevirtual #1723               // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      79: pop
      80: goto          32
      83: aload_2
      84: invokevirtual #1721               // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      87: areturn

  static {};
    Code:
       0: sipush        256
       3: newarray       int
       5: dup
       6: iconst_0
       7: iconst_0
       8: iastore
       9: dup
      10: iconst_1
      11: iconst_1
      12: iastore
      13: dup
      14: iconst_2
      15: iconst_4
      16: iastore
      17: dup
      18: iconst_3
      19: iconst_5
      20: iastore
      21: dup
      22: iconst_4
      23: bipush        16
      25: iastore
      26: dup
      27: iconst_5
      28: bipush        17
      30: iastore
      31: dup
      32: bipush        6
      34: bipush        20
      36: iastore
      37: dup
      38: bipush        7
      40: bipush        21
      42: iastore
      43: dup
      44: bipush        8
      46: bipush        64
      48: iastore
      49: dup
      50: bipush        9
      52: bipush        65
      54: iastore
      55: dup
      56: bipush        10
      58: bipush        68
      60: iastore
      61: dup
      62: bipush        11
      64: bipush        69
      66: iastore
      67: dup
      68: bipush        12
      70: bipush        80
      72: iastore
      73: dup
      74: bipush        13
      76: bipush        81
      78: iastore
      79: dup
      80: bipush        14
      82: bipush        84
      84: iastore
      85: dup
      86: bipush        15
      88: bipush        85
      90: iastore
      91: dup
      92: bipush        16
      94: sipush        256
      97: iastore
      98: dup
      99: bipush        17
     101: sipush        257
     104: iastore
     105: dup
     106: bipush        18
     108: sipush        260
     111: iastore
     112: dup
     113: bipush        19
     115: sipush        261
     118: iastore
     119: dup
     120: bipush        20
     122: sipush        272
     125: iastore
     126: dup
     127: bipush        21
     129: sipush        273
     132: iastore
     133: dup
     134: bipush        22
     136: sipush        276
     139: iastore
     140: dup
     141: bipush        23
     143: sipush        277
     146: iastore
     147: dup
     148: bipush        24
     150: sipush        320
     153: iastore
     154: dup
     155: bipush        25
     157: sipush        321
     160: iastore
     161: dup
     162: bipush        26
     164: sipush        324
     167: iastore
     168: dup
     169: bipush        27
     171: sipush        325
     174: iastore
     175: dup
     176: bipush        28
     178: sipush        336
     181: iastore
     182: dup
     183: bipush        29
     185: sipush        337
     188: iastore
     189: dup
     190: bipush        30
     192: sipush        340
     195: iastore
     196: dup
     197: bipush        31
     199: sipush        341
     202: iastore
     203: dup
     204: bipush        32
     206: sipush        1024
     209: iastore
     210: dup
     211: bipush        33
     213: sipush        1025
     216: iastore
     217: dup
     218: bipush        34
     220: sipush        1028
     223: iastore
     224: dup
     225: bipush        35
     227: sipush        1029
     230: iastore
     231: dup
     232: bipush        36
     234: sipush        1040
     237: iastore
     238: dup
     239: bipush        37
     241: sipush        1041
     244: iastore
     245: dup
     246: bipush        38
     248: sipush        1044
     251: iastore
     252: dup
     253: bipush        39
     255: sipush        1045
     258: iastore
     259: dup
     260: bipush        40
     262: sipush        1088
     265: iastore
     266: dup
     267: bipush        41
     269: sipush        1089
     272: iastore
     273: dup
     274: bipush        42
     276: sipush        1092
     279: iastore
     280: dup
     281: bipush        43
     283: sipush        1093
     286: iastore
     287: dup
     288: bipush        44
     290: sipush        1104
     293: iastore
     294: dup
     295: bipush        45
     297: sipush        1105
     300: iastore
     301: dup
     302: bipush        46
     304: sipush        1108
     307: iastore
     308: dup
     309: bipush        47
     311: sipush        1109
     314: iastore
     315: dup
     316: bipush        48
     318: sipush        1280
     321: iastore
     322: dup
     323: bipush        49
     325: sipush        1281
     328: iastore
     329: dup
     330: bipush        50
     332: sipush        1284
     335: iastore
     336: dup
     337: bipush        51
     339: sipush        1285
     342: iastore
     343: dup
     344: bipush        52
     346: sipush        1296
     349: iastore
     350: dup
     351: bipush        53
     353: sipush        1297
     356: iastore
     357: dup
     358: bipush        54
     360: sipush        1300
     363: iastore
     364: dup
     365: bipush        55
     367: sipush        1301
     370: iastore
     371: dup
     372: bipush        56
     374: sipush        1344
     377: iastore
     378: dup
     379: bipush        57
     381: sipush        1345
     384: iastore
     385: dup
     386: bipush        58
     388: sipush        1348
     391: iastore
     392: dup
     393: bipush        59
     395: sipush        1349
     398: iastore
     399: dup
     400: bipush        60
     402: sipush        1360
     405: iastore
     406: dup
     407: bipush        61
     409: sipush        1361
     412: iastore
     413: dup
     414: bipush        62
     416: sipush        1364
     419: iastore
     420: dup
     421: bipush        63
     423: sipush        1365
     426: iastore
     427: dup
     428: bipush        64
     430: sipush        4096
     433: iastore
     434: dup
     435: bipush        65
     437: sipush        4097
     440: iastore
     441: dup
     442: bipush        66
     444: sipush        4100
     447: iastore
     448: dup
     449: bipush        67
     451: sipush        4101
     454: iastore
     455: dup
     456: bipush        68
     458: sipush        4112
     461: iastore
     462: dup
     463: bipush        69
     465: sipush        4113
     468: iastore
     469: dup
     470: bipush        70
     472: sipush        4116
     475: iastore
     476: dup
     477: bipush        71
     479: sipush        4117
     482: iastore
     483: dup
     484: bipush        72
     486: sipush        4160
     489: iastore
     490: dup
     491: bipush        73
     493: sipush        4161
     496: iastore
     497: dup
     498: bipush        74
     500: sipush        4164
     503: iastore
     504: dup
     505: bipush        75
     507: sipush        4165
     510: iastore
     511: dup
     512: bipush        76
     514: sipush        4176
     517: iastore
     518: dup
     519: bipush        77
     521: sipush        4177
     524: iastore
     525: dup
     526: bipush        78
     528: sipush        4180
     531: iastore
     532: dup
     533: bipush        79
     535: sipush        4181
     538: iastore
     539: dup
     540: bipush        80
     542: sipush        4352
     545: iastore
     546: dup
     547: bipush        81
     549: sipush        4353
     552: iastore
     553: dup
     554: bipush        82
     556: sipush        4356
     559: iastore
     560: dup
     561: bipush        83
     563: sipush        4357
     566: iastore
     567: dup
     568: bipush        84
     570: sipush        4368
     573: iastore
     574: dup
     575: bipush        85
     577: sipush        4369
     580: iastore
     581: dup
     582: bipush        86
     584: sipush        4372
     587: iastore
     588: dup
     589: bipush        87
     591: sipush        4373
     594: iastore
     595: dup
     596: bipush        88
     598: sipush        4416
     601: iastore
     602: dup
     603: bipush        89
     605: sipush        4417
     608: iastore
     609: dup
     610: bipush        90
     612: sipush        4420
     615: iastore
     616: dup
     617: bipush        91
     619: sipush        4421
     622: iastore
     623: dup
     624: bipush        92
     626: sipush        4432
     629: iastore
     630: dup
     631: bipush        93
     633: sipush        4433
     636: iastore
     637: dup
     638: bipush        94
     640: sipush        4436
     643: iastore
     644: dup
     645: bipush        95
     647: sipush        4437
     650: iastore
     651: dup
     652: bipush        96
     654: sipush        5120
     657: iastore
     658: dup
     659: bipush        97
     661: sipush        5121
     664: iastore
     665: dup
     666: bipush        98
     668: sipush        5124
     671: iastore
     672: dup
     673: bipush        99
     675: sipush        5125
     678: iastore
     679: dup
     680: bipush        100
     682: sipush        5136
     685: iastore
     686: dup
     687: bipush        101
     689: sipush        5137
     692: iastore
     693: dup
     694: bipush        102
     696: sipush        5140
     699: iastore
     700: dup
     701: bipush        103
     703: sipush        5141
     706: iastore
     707: dup
     708: bipush        104
     710: sipush        5184
     713: iastore
     714: dup
     715: bipush        105
     717: sipush        5185
     720: iastore
     721: dup
     722: bipush        106
     724: sipush        5188
     727: iastore
     728: dup
     729: bipush        107
     731: sipush        5189
     734: iastore
     735: dup
     736: bipush        108
     738: sipush        5200
     741: iastore
     742: dup
     743: bipush        109
     745: sipush        5201
     748: iastore
     749: dup
     750: bipush        110
     752: sipush        5204
     755: iastore
     756: dup
     757: bipush        111
     759: sipush        5205
     762: iastore
     763: dup
     764: bipush        112
     766: sipush        5376
     769: iastore
     770: dup
     771: bipush        113
     773: sipush        5377
     776: iastore
     777: dup
     778: bipush        114
     780: sipush        5380
     783: iastore
     784: dup
     785: bipush        115
     787: sipush        5381
     790: iastore
     791: dup
     792: bipush        116
     794: sipush        5392
     797: iastore
     798: dup
     799: bipush        117
     801: sipush        5393
     804: iastore
     805: dup
     806: bipush        118
     808: sipush        5396
     811: iastore
     812: dup
     813: bipush        119
     815: sipush        5397
     818: iastore
     819: dup
     820: bipush        120
     822: sipush        5440
     825: iastore
     826: dup
     827: bipush        121
     829: sipush        5441
     832: iastore
     833: dup
     834: bipush        122
     836: sipush        5444
     839: iastore
     840: dup
     841: bipush        123
     843: sipush        5445
     846: iastore
     847: dup
     848: bipush        124
     850: sipush        5456
     853: iastore
     854: dup
     855: bipush        125
     857: sipush        5457
     860: iastore
     861: dup
     862: bipush        126
     864: sipush        5460
     867: iastore
     868: dup
     869: bipush        127
     871: sipush        5461
     874: iastore
     875: dup
     876: sipush        128
     879: sipush        16384
     882: iastore
     883: dup
     884: sipush        129
     887: sipush        16385
     890: iastore
     891: dup
     892: sipush        130
     895: sipush        16388
     898: iastore
     899: dup
     900: sipush        131
     903: sipush        16389
     906: iastore
     907: dup
     908: sipush        132
     911: sipush        16400
     914: iastore
     915: dup
     916: sipush        133
     919: sipush        16401
     922: iastore
     923: dup
     924: sipush        134
     927: sipush        16404
     930: iastore
     931: dup
     932: sipush        135
     935: sipush        16405
     938: iastore
     939: dup
     940: sipush        136
     943: sipush        16448
     946: iastore
     947: dup
     948: sipush        137
     951: sipush        16449
     954: iastore
     955: dup
     956: sipush        138
     959: sipush        16452
     962: iastore
     963: dup
     964: sipush        139
     967: sipush        16453
     970: iastore
     971: dup
     972: sipush        140
     975: sipush        16464
     978: iastore
     979: dup
     980: sipush        141
     983: sipush        16465
     986: iastore
     987: dup
     988: sipush        142
     991: sipush        16468
     994: iastore
     995: dup
     996: sipush        143
     999: sipush        16469
    1002: iastore
    1003: dup
    1004: sipush        144
    1007: sipush        16640
    1010: iastore
    1011: dup
    1012: sipush        145
    1015: sipush        16641
    1018: iastore
    1019: dup
    1020: sipush        146
    1023: sipush        16644
    1026: iastore
    1027: dup
    1028: sipush        147
    1031: sipush        16645
    1034: iastore
    1035: dup
    1036: sipush        148
    1039: sipush        16656
    1042: iastore
    1043: dup
    1044: sipush        149
    1047: sipush        16657
    1050: iastore
    1051: dup
    1052: sipush        150
    1055: sipush        16660
    1058: iastore
    1059: dup
    1060: sipush        151
    1063: sipush        16661
    1066: iastore
    1067: dup
    1068: sipush        152
    1071: sipush        16704
    1074: iastore
    1075: dup
    1076: sipush        153
    1079: sipush        16705
    1082: iastore
    1083: dup
    1084: sipush        154
    1087: sipush        16708
    1090: iastore
    1091: dup
    1092: sipush        155
    1095: sipush        16709
    1098: iastore
    1099: dup
    1100: sipush        156
    1103: sipush        16720
    1106: iastore
    1107: dup
    1108: sipush        157
    1111: sipush        16721
    1114: iastore
    1115: dup
    1116: sipush        158
    1119: sipush        16724
    1122: iastore
    1123: dup
    1124: sipush        159
    1127: sipush        16725
    1130: iastore
    1131: dup
    1132: sipush        160
    1135: sipush        17408
    1138: iastore
    1139: dup
    1140: sipush        161
    1143: sipush        17409
    1146: iastore
    1147: dup
    1148: sipush        162
    1151: sipush        17412
    1154: iastore
    1155: dup
    1156: sipush        163
    1159: sipush        17413
    1162: iastore
    1163: dup
    1164: sipush        164
    1167: sipush        17424
    1170: iastore
    1171: dup
    1172: sipush        165
    1175: sipush        17425
    1178: iastore
    1179: dup
    1180: sipush        166
    1183: sipush        17428
    1186: iastore
    1187: dup
    1188: sipush        167
    1191: sipush        17429
    1194: iastore
    1195: dup
    1196: sipush        168
    1199: sipush        17472
    1202: iastore
    1203: dup
    1204: sipush        169
    1207: sipush        17473
    1210: iastore
    1211: dup
    1212: sipush        170
    1215: sipush        17476
    1218: iastore
    1219: dup
    1220: sipush        171
    1223: sipush        17477
    1226: iastore
    1227: dup
    1228: sipush        172
    1231: sipush        17488
    1234: iastore
    1235: dup
    1236: sipush        173
    1239: sipush        17489
    1242: iastore
    1243: dup
    1244: sipush        174
    1247: sipush        17492
    1250: iastore
    1251: dup
    1252: sipush        175
    1255: sipush        17493
    1258: iastore
    1259: dup
    1260: sipush        176
    1263: sipush        17664
    1266: iastore
    1267: dup
    1268: sipush        177
    1271: sipush        17665
    1274: iastore
    1275: dup
    1276: sipush        178
    1279: sipush        17668
    1282: iastore
    1283: dup
    1284: sipush        179
    1287: sipush        17669
    1290: iastore
    1291: dup
    1292: sipush        180
    1295: sipush        17680
    1298: iastore
    1299: dup
    1300: sipush        181
    1303: sipush        17681
    1306: iastore
    1307: dup
    1308: sipush        182
    1311: sipush        17684
    1314: iastore
    1315: dup
    1316: sipush        183
    1319: sipush        17685
    1322: iastore
    1323: dup
    1324: sipush        184
    1327: sipush        17728
    1330: iastore
    1331: dup
    1332: sipush        185
    1335: sipush        17729
    1338: iastore
    1339: dup
    1340: sipush        186
    1343: sipush        17732
    1346: iastore
    1347: dup
    1348: sipush        187
    1351: sipush        17733
    1354: iastore
    1355: dup
    1356: sipush        188
    1359: sipush        17744
    1362: iastore
    1363: dup
    1364: sipush        189
    1367: sipush        17745
    1370: iastore
    1371: dup
    1372: sipush        190
    1375: sipush        17748
    1378: iastore
    1379: dup
    1380: sipush        191
    1383: sipush        17749
    1386: iastore
    1387: dup
    1388: sipush        192
    1391: sipush        20480
    1394: iastore
    1395: dup
    1396: sipush        193
    1399: sipush        20481
    1402: iastore
    1403: dup
    1404: sipush        194
    1407: sipush        20484
    1410: iastore
    1411: dup
    1412: sipush        195
    1415: sipush        20485
    1418: iastore
    1419: dup
    1420: sipush        196
    1423: sipush        20496
    1426: iastore
    1427: dup
    1428: sipush        197
    1431: sipush        20497
    1434: iastore
    1435: dup
    1436: sipush        198
    1439: sipush        20500
    1442: iastore
    1443: dup
    1444: sipush        199
    1447: sipush        20501
    1450: iastore
    1451: dup
    1452: sipush        200
    1455: sipush        20544
    1458: iastore
    1459: dup
    1460: sipush        201
    1463: sipush        20545
    1466: iastore
    1467: dup
    1468: sipush        202
    1471: sipush        20548
    1474: iastore
    1475: dup
    1476: sipush        203
    1479: sipush        20549
    1482: iastore
    1483: dup
    1484: sipush        204
    1487: sipush        20560
    1490: iastore
    1491: dup
    1492: sipush        205
    1495: sipush        20561
    1498: iastore
    1499: dup
    1500: sipush        206
    1503: sipush        20564
    1506: iastore
    1507: dup
    1508: sipush        207
    1511: sipush        20565
    1514: iastore
    1515: dup
    1516: sipush        208
    1519: sipush        20736
    1522: iastore
    1523: dup
    1524: sipush        209
    1527: sipush        20737
    1530: iastore
    1531: dup
    1532: sipush        210
    1535: sipush        20740
    1538: iastore
    1539: dup
    1540: sipush        211
    1543: sipush        20741
    1546: iastore
    1547: dup
    1548: sipush        212
    1551: sipush        20752
    1554: iastore
    1555: dup
    1556: sipush        213
    1559: sipush        20753
    1562: iastore
    1563: dup
    1564: sipush        214
    1567: sipush        20756
    1570: iastore
    1571: dup
    1572: sipush        215
    1575: sipush        20757
    1578: iastore
    1579: dup
    1580: sipush        216
    1583: sipush        20800
    1586: iastore
    1587: dup
    1588: sipush        217
    1591: sipush        20801
    1594: iastore
    1595: dup
    1596: sipush        218
    1599: sipush        20804
    1602: iastore
    1603: dup
    1604: sipush        219
    1607: sipush        20805
    1610: iastore
    1611: dup
    1612: sipush        220
    1615: sipush        20816
    1618: iastore
    1619: dup
    1620: sipush        221
    1623: sipush        20817
    1626: iastore
    1627: dup
    1628: sipush        222
    1631: sipush        20820
    1634: iastore
    1635: dup
    1636: sipush        223
    1639: sipush        20821
    1642: iastore
    1643: dup
    1644: sipush        224
    1647: sipush        21504
    1650: iastore
    1651: dup
    1652: sipush        225
    1655: sipush        21505
    1658: iastore
    1659: dup
    1660: sipush        226
    1663: sipush        21508
    1666: iastore
    1667: dup
    1668: sipush        227
    1671: sipush        21509
    1674: iastore
    1675: dup
    1676: sipush        228
    1679: sipush        21520
    1682: iastore
    1683: dup
    1684: sipush        229
    1687: sipush        21521
    1690: iastore
    1691: dup
    1692: sipush        230
    1695: sipush        21524
    1698: iastore
    1699: dup
    1700: sipush        231
    1703: sipush        21525
    1706: iastore
    1707: dup
    1708: sipush        232
    1711: sipush        21568
    1714: iastore
    1715: dup
    1716: sipush        233
    1719: sipush        21569
    1722: iastore
    1723: dup
    1724: sipush        234
    1727: sipush        21572
    1730: iastore
    1731: dup
    1732: sipush        235
    1735: sipush        21573
    1738: iastore
    1739: dup
    1740: sipush        236
    1743: sipush        21584
    1746: iastore
    1747: dup
    1748: sipush        237
    1751: sipush        21585
    1754: iastore
    1755: dup
    1756: sipush        238
    1759: sipush        21588
    1762: iastore
    1763: dup
    1764: sipush        239
    1767: sipush        21589
    1770: iastore
    1771: dup
    1772: sipush        240
    1775: sipush        21760
    1778: iastore
    1779: dup
    1780: sipush        241
    1783: sipush        21761
    1786: iastore
    1787: dup
    1788: sipush        242
    1791: sipush        21764
    1794: iastore
    1795: dup
    1796: sipush        243
    1799: sipush        21765
    1802: iastore
    1803: dup
    1804: sipush        244
    1807: sipush        21776
    1810: iastore
    1811: dup
    1812: sipush        245
    1815: sipush        21777
    1818: iastore
    1819: dup
    1820: sipush        246
    1823: sipush        21780
    1826: iastore
    1827: dup
    1828: sipush        247
    1831: sipush        21781
    1834: iastore
    1835: dup
    1836: sipush        248
    1839: sipush        21824
    1842: iastore
    1843: dup
    1844: sipush        249
    1847: sipush        21825
    1850: iastore
    1851: dup
    1852: sipush        250
    1855: sipush        21828
    1858: iastore
    1859: dup
    1860: sipush        251
    1863: sipush        21829
    1866: iastore
    1867: dup
    1868: sipush        252
    1871: sipush        21840
    1874: iastore
    1875: dup
    1876: sipush        253
    1879: sipush        21841
    1882: iastore
    1883: dup
    1884: sipush        254
    1887: sipush        21844
    1890: iastore
    1891: dup
    1892: sipush        255
    1895: sipush        21845
    1898: iastore
    1899: putstatic     #1707               // Field INTERLEAVE2_TABLE:[I
    1902: sipush        128
    1905: newarray       int
    1907: dup
    1908: iconst_0
    1909: iconst_0
    1910: iastore
    1911: dup
    1912: iconst_1
    1913: iconst_1
    1914: iastore
    1915: dup
    1916: iconst_2
    1917: bipush        8
    1919: iastore
    1920: dup
    1921: iconst_3
    1922: bipush        9
    1924: iastore
    1925: dup
    1926: iconst_4
    1927: bipush        64
    1929: iastore
    1930: dup
    1931: iconst_5
    1932: bipush        65
    1934: iastore
    1935: dup
    1936: bipush        6
    1938: bipush        72
    1940: iastore
    1941: dup
    1942: bipush        7
    1944: bipush        73
    1946: iastore
    1947: dup
    1948: bipush        8
    1950: sipush        512
    1953: iastore
    1954: dup
    1955: bipush        9
    1957: sipush        513
    1960: iastore
    1961: dup
    1962: bipush        10
    1964: sipush        520
    1967: iastore
    1968: dup
    1969: bipush        11
    1971: sipush        521
    1974: iastore
    1975: dup
    1976: bipush        12
    1978: sipush        576
    1981: iastore
    1982: dup
    1983: bipush        13
    1985: sipush        577
    1988: iastore
    1989: dup
    1990: bipush        14
    1992: sipush        584
    1995: iastore
    1996: dup
    1997: bipush        15
    1999: sipush        585
    2002: iastore
    2003: dup
    2004: bipush        16
    2006: sipush        4096
    2009: iastore
    2010: dup
    2011: bipush        17
    2013: sipush        4097
    2016: iastore
    2017: dup
    2018: bipush        18
    2020: sipush        4104
    2023: iastore
    2024: dup
    2025: bipush        19
    2027: sipush        4105
    2030: iastore
    2031: dup
    2032: bipush        20
    2034: sipush        4160
    2037: iastore
    2038: dup
    2039: bipush        21
    2041: sipush        4161
    2044: iastore
    2045: dup
    2046: bipush        22
    2048: sipush        4168
    2051: iastore
    2052: dup
    2053: bipush        23
    2055: sipush        4169
    2058: iastore
    2059: dup
    2060: bipush        24
    2062: sipush        4608
    2065: iastore
    2066: dup
    2067: bipush        25
    2069: sipush        4609
    2072: iastore
    2073: dup
    2074: bipush        26
    2076: sipush        4616
    2079: iastore
    2080: dup
    2081: bipush        27
    2083: sipush        4617
    2086: iastore
    2087: dup
    2088: bipush        28
    2090: sipush        4672
    2093: iastore
    2094: dup
    2095: bipush        29
    2097: sipush        4673
    2100: iastore
    2101: dup
    2102: bipush        30
    2104: sipush        4680
    2107: iastore
    2108: dup
    2109: bipush        31
    2111: sipush        4681
    2114: iastore
    2115: dup
    2116: bipush        32
    2118: ldc           #1                  // int 32768
    2120: iastore
    2121: dup
    2122: bipush        33
    2124: ldc           #2                  // int 32769
    2126: iastore
    2127: dup
    2128: bipush        34
    2130: ldc           #3                  // int 32776
    2132: iastore
    2133: dup
    2134: bipush        35
    2136: ldc           #4                  // int 32777
    2138: iastore
    2139: dup
    2140: bipush        36
    2142: ldc           #5                  // int 32832
    2144: iastore
    2145: dup
    2146: bipush        37
    2148: ldc           #6                  // int 32833
    2150: iastore
    2151: dup
    2152: bipush        38
    2154: ldc           #7                  // int 32840
    2156: iastore
    2157: dup
    2158: bipush        39
    2160: ldc           #8                  // int 32841
    2162: iastore
    2163: dup
    2164: bipush        40
    2166: ldc           #9                  // int 33280
    2168: iastore
    2169: dup
    2170: bipush        41
    2172: ldc           #10                 // int 33281
    2174: iastore
    2175: dup
    2176: bipush        42
    2178: ldc           #11                 // int 33288
    2180: iastore
    2181: dup
    2182: bipush        43
    2184: ldc           #12                 // int 33289
    2186: iastore
    2187: dup
    2188: bipush        44
    2190: ldc           #13                 // int 33344
    2192: iastore
    2193: dup
    2194: bipush        45
    2196: ldc           #14                 // int 33345
    2198: iastore
    2199: dup
    2200: bipush        46
    2202: ldc           #15                 // int 33352
    2204: iastore
    2205: dup
    2206: bipush        47
    2208: ldc           #16                 // int 33353
    2210: iastore
    2211: dup
    2212: bipush        48
    2214: ldc           #17                 // int 36864
    2216: iastore
    2217: dup
    2218: bipush        49
    2220: ldc           #18                 // int 36865
    2222: iastore
    2223: dup
    2224: bipush        50
    2226: ldc           #19                 // int 36872
    2228: iastore
    2229: dup
    2230: bipush        51
    2232: ldc           #20                 // int 36873
    2234: iastore
    2235: dup
    2236: bipush        52
    2238: ldc           #21                 // int 36928
    2240: iastore
    2241: dup
    2242: bipush        53
    2244: ldc           #22                 // int 36929
    2246: iastore
    2247: dup
    2248: bipush        54
    2250: ldc           #23                 // int 36936
    2252: iastore
    2253: dup
    2254: bipush        55
    2256: ldc           #24                 // int 36937
    2258: iastore
    2259: dup
    2260: bipush        56
    2262: ldc           #25                 // int 37376
    2264: iastore
    2265: dup
    2266: bipush        57
    2268: ldc           #26                 // int 37377
    2270: iastore
    2271: dup
    2272: bipush        58
    2274: ldc           #27                 // int 37384
    2276: iastore
    2277: dup
    2278: bipush        59
    2280: ldc           #28                 // int 37385
    2282: iastore
    2283: dup
    2284: bipush        60
    2286: ldc           #29                 // int 37440
    2288: iastore
    2289: dup
    2290: bipush        61
    2292: ldc           #30                 // int 37441
    2294: iastore
    2295: dup
    2296: bipush        62
    2298: ldc           #31                 // int 37448
    2300: iastore
    2301: dup
    2302: bipush        63
    2304: ldc           #32                 // int 37449
    2306: iastore
    2307: dup
    2308: bipush        64
    2310: ldc           #50                 // int 262144
    2312: iastore
    2313: dup
    2314: bipush        65
    2316: ldc           #51                 // int 262145
    2318: iastore
    2319: dup
    2320: bipush        66
    2322: ldc           #52                 // int 262152
    2324: iastore
    2325: dup
    2326: bipush        67
    2328: ldc           #53                 // int 262153
    2330: iastore
    2331: dup
    2332: bipush        68
    2334: ldc           #54                 // int 262208
    2336: iastore
    2337: dup
    2338: bipush        69
    2340: ldc           #55                 // int 262209
    2342: iastore
    2343: dup
    2344: bipush        70
    2346: ldc           #56                 // int 262216
    2348: iastore
    2349: dup
    2350: bipush        71
    2352: ldc           #57                 // int 262217
    2354: iastore
    2355: dup
    2356: bipush        72
    2358: ldc           #58                 // int 262656
    2360: iastore
    2361: dup
    2362: bipush        73
    2364: ldc           #59                 // int 262657
    2366: iastore
    2367: dup
    2368: bipush        74
    2370: ldc           #60                 // int 262664
    2372: iastore
    2373: dup
    2374: bipush        75
    2376: ldc           #61                 // int 262665
    2378: iastore
    2379: dup
    2380: bipush        76
    2382: ldc           #62                 // int 262720
    2384: iastore
    2385: dup
    2386: bipush        77
    2388: ldc           #63                 // int 262721
    2390: iastore
    2391: dup
    2392: bipush        78
    2394: ldc           #64                 // int 262728
    2396: iastore
    2397: dup
    2398: bipush        79
    2400: ldc           #65                 // int 262729
    2402: iastore
    2403: dup
    2404: bipush        80
    2406: ldc           #66                 // int 266240
    2408: iastore
    2409: dup
    2410: bipush        81
    2412: ldc           #67                 // int 266241
    2414: iastore
    2415: dup
    2416: bipush        82
    2418: ldc           #68                 // int 266248
    2420: iastore
    2421: dup
    2422: bipush        83
    2424: ldc           #69                 // int 266249
    2426: iastore
    2427: dup
    2428: bipush        84
    2430: ldc           #70                 // int 266304
    2432: iastore
    2433: dup
    2434: bipush        85
    2436: ldc           #71                 // int 266305
    2438: iastore
    2439: dup
    2440: bipush        86
    2442: ldc           #72                 // int 266312
    2444: iastore
    2445: dup
    2446: bipush        87
    2448: ldc           #73                 // int 266313
    2450: iastore
    2451: dup
    2452: bipush        88
    2454: ldc           #74                 // int 266752
    2456: iastore
    2457: dup
    2458: bipush        89
    2460: ldc           #75                 // int 266753
    2462: iastore
    2463: dup
    2464: bipush        90
    2466: ldc           #76                 // int 266760
    2468: iastore
    2469: dup
    2470: bipush        91
    2472: ldc           #77                 // int 266761
    2474: iastore
    2475: dup
    2476: bipush        92
    2478: ldc           #78                 // int 266816
    2480: iastore
    2481: dup
    2482: bipush        93
    2484: ldc           #79                 // int 266817
    2486: iastore
    2487: dup
    2488: bipush        94
    2490: ldc           #80                 // int 266824
    2492: iastore
    2493: dup
    2494: bipush        95
    2496: ldc           #81                 // int 266825
    2498: iastore
    2499: dup
    2500: bipush        96
    2502: ldc           #82                 // int 294912
    2504: iastore
    2505: dup
    2506: bipush        97
    2508: ldc           #83                 // int 294913
    2510: iastore
    2511: dup
    2512: bipush        98
    2514: ldc           #84                 // int 294920
    2516: iastore
    2517: dup
    2518: bipush        99
    2520: ldc           #85                 // int 294921
    2522: iastore
    2523: dup
    2524: bipush        100
    2526: ldc           #86                 // int 294976
    2528: iastore
    2529: dup
    2530: bipush        101
    2532: ldc           #87                 // int 294977
    2534: iastore
    2535: dup
    2536: bipush        102
    2538: ldc           #88                 // int 294984
    2540: iastore
    2541: dup
    2542: bipush        103
    2544: ldc           #89                 // int 294985
    2546: iastore
    2547: dup
    2548: bipush        104
    2550: ldc           #90                 // int 295424
    2552: iastore
    2553: dup
    2554: bipush        105
    2556: ldc           #91                 // int 295425
    2558: iastore
    2559: dup
    2560: bipush        106
    2562: ldc           #92                 // int 295432
    2564: iastore
    2565: dup
    2566: bipush        107
    2568: ldc           #93                 // int 295433
    2570: iastore
    2571: dup
    2572: bipush        108
    2574: ldc           #94                 // int 295488
    2576: iastore
    2577: dup
    2578: bipush        109
    2580: ldc           #95                 // int 295489
    2582: iastore
    2583: dup
    2584: bipush        110
    2586: ldc           #96                 // int 295496
    2588: iastore
    2589: dup
    2590: bipush        111
    2592: ldc           #97                 // int 295497
    2594: iastore
    2595: dup
    2596: bipush        112
    2598: ldc           #98                 // int 299008
    2600: iastore
    2601: dup
    2602: bipush        113
    2604: ldc           #99                 // int 299009
    2606: iastore
    2607: dup
    2608: bipush        114
    2610: ldc           #100                // int 299016
    2612: iastore
    2613: dup
    2614: bipush        115
    2616: ldc           #101                // int 299017
    2618: iastore
    2619: dup
    2620: bipush        116
    2622: ldc           #102                // int 299072
    2624: iastore
    2625: dup
    2626: bipush        117
    2628: ldc           #103                // int 299073
    2630: iastore
    2631: dup
    2632: bipush        118
    2634: ldc           #104                // int 299080
    2636: iastore
    2637: dup
    2638: bipush        119
    2640: ldc           #105                // int 299081
    2642: iastore
    2643: dup
    2644: bipush        120
    2646: ldc           #106                // int 299520
    2648: iastore
    2649: dup
    2650: bipush        121
    2652: ldc           #107                // int 299521
    2654: iastore
    2655: dup
    2656: bipush        122
    2658: ldc           #108                // int 299528
    2660: iastore
    2661: dup
    2662: bipush        123
    2664: ldc           #109                // int 299529
    2666: iastore
    2667: dup
    2668: bipush        124
    2670: ldc           #110                // int 299584
    2672: iastore
    2673: dup
    2674: bipush        125
    2676: ldc           #111                // int 299585
    2678: iastore
    2679: dup
    2680: bipush        126
    2682: ldc           #112                // int 299592
    2684: iastore
    2685: dup
    2686: bipush        127
    2688: ldc           #113                // int 299593
    2690: iastore
    2691: putstatic     #1708               // Field INTERLEAVE3_TABLE:[I
    2694: sipush        256
    2697: newarray       int
    2699: dup
    2700: iconst_0
    2701: iconst_0
    2702: iastore
    2703: dup
    2704: iconst_1
    2705: iconst_1
    2706: iastore
    2707: dup
    2708: iconst_2
    2709: bipush        16
    2711: iastore
    2712: dup
    2713: iconst_3
    2714: bipush        17
    2716: iastore
    2717: dup
    2718: iconst_4
    2719: sipush        256
    2722: iastore
    2723: dup
    2724: iconst_5
    2725: sipush        257
    2728: iastore
    2729: dup
    2730: bipush        6
    2732: sipush        272
    2735: iastore
    2736: dup
    2737: bipush        7
    2739: sipush        273
    2742: iastore
    2743: dup
    2744: bipush        8
    2746: sipush        4096
    2749: iastore
    2750: dup
    2751: bipush        9
    2753: sipush        4097
    2756: iastore
    2757: dup
    2758: bipush        10
    2760: sipush        4112
    2763: iastore
    2764: dup
    2765: bipush        11
    2767: sipush        4113
    2770: iastore
    2771: dup
    2772: bipush        12
    2774: sipush        4352
    2777: iastore
    2778: dup
    2779: bipush        13
    2781: sipush        4353
    2784: iastore
    2785: dup
    2786: bipush        14
    2788: sipush        4368
    2791: iastore
    2792: dup
    2793: bipush        15
    2795: sipush        4369
    2798: iastore
    2799: dup
    2800: bipush        16
    2802: ldc           #34                 // int 65536
    2804: iastore
    2805: dup
    2806: bipush        17
    2808: ldc           #35                 // int 65537
    2810: iastore
    2811: dup
    2812: bipush        18
    2814: ldc           #36                 // int 65552
    2816: iastore
    2817: dup
    2818: bipush        19
    2820: ldc           #37                 // int 65553
    2822: iastore
    2823: dup
    2824: bipush        20
    2826: ldc           #38                 // int 65792
    2828: iastore
    2829: dup
    2830: bipush        21
    2832: ldc           #39                 // int 65793
    2834: iastore
    2835: dup
    2836: bipush        22
    2838: ldc           #40                 // int 65808
    2840: iastore
    2841: dup
    2842: bipush        23
    2844: ldc           #41                 // int 65809
    2846: iastore
    2847: dup
    2848: bipush        24
    2850: ldc           #42                 // int 69632
    2852: iastore
    2853: dup
    2854: bipush        25
    2856: ldc           #43                 // int 69633
    2858: iastore
    2859: dup
    2860: bipush        26
    2862: ldc           #44                 // int 69648
    2864: iastore
    2865: dup
    2866: bipush        27
    2868: ldc           #45                 // int 69649
    2870: iastore
    2871: dup
    2872: bipush        28
    2874: ldc           #46                 // int 69888
    2876: iastore
    2877: dup
    2878: bipush        29
    2880: ldc           #47                 // int 69889
    2882: iastore
    2883: dup
    2884: bipush        30
    2886: ldc           #48                 // int 69904
    2888: iastore
    2889: dup
    2890: bipush        31
    2892: ldc           #49                 // int 69905
    2894: iastore
    2895: dup
    2896: bipush        32
    2898: ldc           #114                // int 1048576
    2900: iastore
    2901: dup
    2902: bipush        33
    2904: ldc           #115                // int 1048577
    2906: iastore
    2907: dup
    2908: bipush        34
    2910: ldc           #116                // int 1048592
    2912: iastore
    2913: dup
    2914: bipush        35
    2916: ldc           #117                // int 1048593
    2918: iastore
    2919: dup
    2920: bipush        36
    2922: ldc           #118                // int 1048832
    2924: iastore
    2925: dup
    2926: bipush        37
    2928: ldc           #119                // int 1048833
    2930: iastore
    2931: dup
    2932: bipush        38
    2934: ldc           #120                // int 1048848
    2936: iastore
    2937: dup
    2938: bipush        39
    2940: ldc           #121                // int 1048849
    2942: iastore
    2943: dup
    2944: bipush        40
    2946: ldc           #122                // int 1052672
    2948: iastore
    2949: dup
    2950: bipush        41
    2952: ldc           #123                // int 1052673
    2954: iastore
    2955: dup
    2956: bipush        42
    2958: ldc           #124                // int 1052688
    2960: iastore
    2961: dup
    2962: bipush        43
    2964: ldc           #125                // int 1052689
    2966: iastore
    2967: dup
    2968: bipush        44
    2970: ldc           #126                // int 1052928
    2972: iastore
    2973: dup
    2974: bipush        45
    2976: ldc           #127                // int 1052929
    2978: iastore
    2979: dup
    2980: bipush        46
    2982: ldc           #128                // int 1052944
    2984: iastore
    2985: dup
    2986: bipush        47
    2988: ldc           #129                // int 1052945
    2990: iastore
    2991: dup
    2992: bipush        48
    2994: ldc           #130                // int 1114112
    2996: iastore
    2997: dup
    2998: bipush        49
    3000: ldc           #131                // int 1114113
    3002: iastore
    3003: dup
    3004: bipush        50
    3006: ldc           #132                // int 1114128
    3008: iastore
    3009: dup
    3010: bipush        51
    3012: ldc           #133                // int 1114129
    3014: iastore
    3015: dup
    3016: bipush        52
    3018: ldc           #134                // int 1114368
    3020: iastore
    3021: dup
    3022: bipush        53
    3024: ldc           #135                // int 1114369
    3026: iastore
    3027: dup
    3028: bipush        54
    3030: ldc           #136                // int 1114384
    3032: iastore
    3033: dup
    3034: bipush        55
    3036: ldc           #137                // int 1114385
    3038: iastore
    3039: dup
    3040: bipush        56
    3042: ldc           #138                // int 1118208
    3044: iastore
    3045: dup
    3046: bipush        57
    3048: ldc           #139                // int 1118209
    3050: iastore
    3051: dup
    3052: bipush        58
    3054: ldc           #140                // int 1118224
    3056: iastore
    3057: dup
    3058: bipush        59
    3060: ldc           #141                // int 1118225
    3062: iastore
    3063: dup
    3064: bipush        60
    3066: ldc           #142                // int 1118464
    3068: iastore
    3069: dup
    3070: bipush        61
    3072: ldc           #143                // int 1118465
    3074: iastore
    3075: dup
    3076: bipush        62
    3078: ldc           #144                // int 1118480
    3080: iastore
    3081: dup
    3082: bipush        63
    3084: ldc           #145                // int 1118481
    3086: iastore
    3087: dup
    3088: bipush        64
    3090: ldc           #147                // int 16777216
    3092: iastore
    3093: dup
    3094: bipush        65
    3096: ldc           #148                // int 16777217
    3098: iastore
    3099: dup
    3100: bipush        66
    3102: ldc           #149                // int 16777232
    3104: iastore
    3105: dup
    3106: bipush        67
    3108: ldc           #150                // int 16777233
    3110: iastore
    3111: dup
    3112: bipush        68
    3114: ldc           #151                // int 16777472
    3116: iastore
    3117: dup
    3118: bipush        69
    3120: ldc           #152                // int 16777473
    3122: iastore
    3123: dup
    3124: bipush        70
    3126: ldc           #153                // int 16777488
    3128: iastore
    3129: dup
    3130: bipush        71
    3132: ldc           #154                // int 16777489
    3134: iastore
    3135: dup
    3136: bipush        72
    3138: ldc           #155                // int 16781312
    3140: iastore
    3141: dup
    3142: bipush        73
    3144: ldc           #156                // int 16781313
    3146: iastore
    3147: dup
    3148: bipush        74
    3150: ldc           #157                // int 16781328
    3152: iastore
    3153: dup
    3154: bipush        75
    3156: ldc           #158                // int 16781329
    3158: iastore
    3159: dup
    3160: bipush        76
    3162: ldc           #159                // int 16781568
    3164: iastore
    3165: dup
    3166: bipush        77
    3168: ldc           #160                // int 16781569
    3170: iastore
    3171: dup
    3172: bipush        78
    3174: ldc           #161                // int 16781584
    3176: iastore
    3177: dup
    3178: bipush        79
    3180: ldc           #162                // int 16781585
    3182: iastore
    3183: dup
    3184: bipush        80
    3186: ldc           #163                // int 16842752
    3188: iastore
    3189: dup
    3190: bipush        81
    3192: ldc           #164                // int 16842753
    3194: iastore
    3195: dup
    3196: bipush        82
    3198: ldc           #165                // int 16842768
    3200: iastore
    3201: dup
    3202: bipush        83
    3204: ldc           #166                // int 16842769
    3206: iastore
    3207: dup
    3208: bipush        84
    3210: ldc           #167                // int 16843008
    3212: iastore
    3213: dup
    3214: bipush        85
    3216: ldc           #168                // int 16843009
    3218: iastore
    3219: dup
    3220: bipush        86
    3222: ldc           #169                // int 16843024
    3224: iastore
    3225: dup
    3226: bipush        87
    3228: ldc           #170                // int 16843025
    3230: iastore
    3231: dup
    3232: bipush        88
    3234: ldc           #171                // int 16846848
    3236: iastore
    3237: dup
    3238: bipush        89
    3240: ldc           #172                // int 16846849
    3242: iastore
    3243: dup
    3244: bipush        90
    3246: ldc           #173                // int 16846864
    3248: iastore
    3249: dup
    3250: bipush        91
    3252: ldc           #174                // int 16846865
    3254: iastore
    3255: dup
    3256: bipush        92
    3258: ldc_w         #323                // int 16847104
    3261: iastore
    3262: dup
    3263: bipush        93
    3265: ldc_w         #324                // int 16847105
    3268: iastore
    3269: dup
    3270: bipush        94
    3272: ldc_w         #325                // int 16847120
    3275: iastore
    3276: dup
    3277: bipush        95
    3279: ldc_w         #326                // int 16847121
    3282: iastore
    3283: dup
    3284: bipush        96
    3286: ldc_w         #327                // int 17825792
    3289: iastore
    3290: dup
    3291: bipush        97
    3293: ldc_w         #328                // int 17825793
    3296: iastore
    3297: dup
    3298: bipush        98
    3300: ldc_w         #329                // int 17825808
    3303: iastore
    3304: dup
    3305: bipush        99
    3307: ldc_w         #330                // int 17825809
    3310: iastore
    3311: dup
    3312: bipush        100
    3314: ldc_w         #331                // int 17826048
    3317: iastore
    3318: dup
    3319: bipush        101
    3321: ldc_w         #332                // int 17826049
    3324: iastore
    3325: dup
    3326: bipush        102
    3328: ldc_w         #333                // int 17826064
    3331: iastore
    3332: dup
    3333: bipush        103
    3335: ldc_w         #334                // int 17826065
    3338: iastore
    3339: dup
    3340: bipush        104
    3342: ldc_w         #335                // int 17829888
    3345: iastore
    3346: dup
    3347: bipush        105
    3349: ldc_w         #336                // int 17829889
    3352: iastore
    3353: dup
    3354: bipush        106
    3356: ldc_w         #337                // int 17829904
    3359: iastore
    3360: dup
    3361: bipush        107
    3363: ldc_w         #338                // int 17829905
    3366: iastore
    3367: dup
    3368: bipush        108
    3370: ldc_w         #339                // int 17830144
    3373: iastore
    3374: dup
    3375: bipush        109
    3377: ldc_w         #340                // int 17830145
    3380: iastore
    3381: dup
    3382: bipush        110
    3384: ldc_w         #341                // int 17830160
    3387: iastore
    3388: dup
    3389: bipush        111
    3391: ldc_w         #342                // int 17830161
    3394: iastore
    3395: dup
    3396: bipush        112
    3398: ldc_w         #343                // int 17891328
    3401: iastore
    3402: dup
    3403: bipush        113
    3405: ldc_w         #344                // int 17891329
    3408: iastore
    3409: dup
    3410: bipush        114
    3412: ldc_w         #345                // int 17891344
    3415: iastore
    3416: dup
    3417: bipush        115
    3419: ldc_w         #346                // int 17891345
    3422: iastore
    3423: dup
    3424: bipush        116
    3426: ldc_w         #347                // int 17891584
    3429: iastore
    3430: dup
    3431: bipush        117
    3433: ldc_w         #348                // int 17891585
    3436: iastore
    3437: dup
    3438: bipush        118
    3440: ldc_w         #349                // int 17891600
    3443: iastore
    3444: dup
    3445: bipush        119
    3447: ldc_w         #350                // int 17891601
    3450: iastore
    3451: dup
    3452: bipush        120
    3454: ldc_w         #351                // int 17895424
    3457: iastore
    3458: dup
    3459: bipush        121
    3461: ldc_w         #352                // int 17895425
    3464: iastore
    3465: dup
    3466: bipush        122
    3468: ldc_w         #353                // int 17895440
    3471: iastore
    3472: dup
    3473: bipush        123
    3475: ldc_w         #354                // int 17895441
    3478: iastore
    3479: dup
    3480: bipush        124
    3482: ldc_w         #355                // int 17895680
    3485: iastore
    3486: dup
    3487: bipush        125
    3489: ldc_w         #356                // int 17895681
    3492: iastore
    3493: dup
    3494: bipush        126
    3496: ldc_w         #357                // int 17895696
    3499: iastore
    3500: dup
    3501: bipush        127
    3503: ldc_w         #358                // int 17895697
    3506: iastore
    3507: dup
    3508: sipush        128
    3511: ldc_w         #391                // int 268435456
    3514: iastore
    3515: dup
    3516: sipush        129
    3519: ldc_w         #392                // int 268435457
    3522: iastore
    3523: dup
    3524: sipush        130
    3527: ldc_w         #393                // int 268435472
    3530: iastore
    3531: dup
    3532: sipush        131
    3535: ldc_w         #394                // int 268435473
    3538: iastore
    3539: dup
    3540: sipush        132
    3543: ldc_w         #395                // int 268435712
    3546: iastore
    3547: dup
    3548: sipush        133
    3551: ldc_w         #396                // int 268435713
    3554: iastore
    3555: dup
    3556: sipush        134
    3559: ldc_w         #397                // int 268435728
    3562: iastore
    3563: dup
    3564: sipush        135
    3567: ldc_w         #398                // int 268435729
    3570: iastore
    3571: dup
    3572: sipush        136
    3575: ldc_w         #399                // int 268439552
    3578: iastore
    3579: dup
    3580: sipush        137
    3583: ldc_w         #400                // int 268439553
    3586: iastore
    3587: dup
    3588: sipush        138
    3591: ldc_w         #401                // int 268439568
    3594: iastore
    3595: dup
    3596: sipush        139
    3599: ldc_w         #402                // int 268439569
    3602: iastore
    3603: dup
    3604: sipush        140
    3607: ldc_w         #403                // int 268439808
    3610: iastore
    3611: dup
    3612: sipush        141
    3615: ldc_w         #404                // int 268439809
    3618: iastore
    3619: dup
    3620: sipush        142
    3623: ldc_w         #405                // int 268439824
    3626: iastore
    3627: dup
    3628: sipush        143
    3631: ldc_w         #406                // int 268439825
    3634: iastore
    3635: dup
    3636: sipush        144
    3639: ldc_w         #407                // int 268500992
    3642: iastore
    3643: dup
    3644: sipush        145
    3647: ldc_w         #408                // int 268500993
    3650: iastore
    3651: dup
    3652: sipush        146
    3655: ldc_w         #409                // int 268501008
    3658: iastore
    3659: dup
    3660: sipush        147
    3663: ldc_w         #410                // int 268501009
    3666: iastore
    3667: dup
    3668: sipush        148
    3671: ldc_w         #411                // int 268501248
    3674: iastore
    3675: dup
    3676: sipush        149
    3679: ldc_w         #412                // int 268501249
    3682: iastore
    3683: dup
    3684: sipush        150
    3687: ldc_w         #413                // int 268501264
    3690: iastore
    3691: dup
    3692: sipush        151
    3695: ldc_w         #414                // int 268501265
    3698: iastore
    3699: dup
    3700: sipush        152
    3703: ldc_w         #415                // int 268505088
    3706: iastore
    3707: dup
    3708: sipush        153
    3711: ldc_w         #416                // int 268505089
    3714: iastore
    3715: dup
    3716: sipush        154
    3719: ldc_w         #417                // int 268505104
    3722: iastore
    3723: dup
    3724: sipush        155
    3727: ldc_w         #418                // int 268505105
    3730: iastore
    3731: dup
    3732: sipush        156
    3735: ldc_w         #419                // int 268505344
    3738: iastore
    3739: dup
    3740: sipush        157
    3743: ldc_w         #420                // int 268505345
    3746: iastore
    3747: dup
    3748: sipush        158
    3751: ldc_w         #421                // int 268505360
    3754: iastore
    3755: dup
    3756: sipush        159
    3759: ldc_w         #422                // int 268505361
    3762: iastore
    3763: dup
    3764: sipush        160
    3767: ldc_w         #423                // int 269484032
    3770: iastore
    3771: dup
    3772: sipush        161
    3775: ldc_w         #424                // int 269484033
    3778: iastore
    3779: dup
    3780: sipush        162
    3783: ldc_w         #425                // int 269484048
    3786: iastore
    3787: dup
    3788: sipush        163
    3791: ldc_w         #426                // int 269484049
    3794: iastore
    3795: dup
    3796: sipush        164
    3799: ldc_w         #427                // int 269484288
    3802: iastore
    3803: dup
    3804: sipush        165
    3807: ldc_w         #428                // int 269484289
    3810: iastore
    3811: dup
    3812: sipush        166
    3815: ldc_w         #429                // int 269484304
    3818: iastore
    3819: dup
    3820: sipush        167
    3823: ldc_w         #430                // int 269484305
    3826: iastore
    3827: dup
    3828: sipush        168
    3831: ldc_w         #431                // int 269488128
    3834: iastore
    3835: dup
    3836: sipush        169
    3839: ldc_w         #432                // int 269488129
    3842: iastore
    3843: dup
    3844: sipush        170
    3847: ldc_w         #433                // int 269488144
    3850: iastore
    3851: dup
    3852: sipush        171
    3855: ldc_w         #434                // int 269488145
    3858: iastore
    3859: dup
    3860: sipush        172
    3863: ldc_w         #435                // int 269488384
    3866: iastore
    3867: dup
    3868: sipush        173
    3871: ldc_w         #436                // int 269488385
    3874: iastore
    3875: dup
    3876: sipush        174
    3879: ldc_w         #437                // int 269488400
    3882: iastore
    3883: dup
    3884: sipush        175
    3887: ldc_w         #438                // int 269488401
    3890: iastore
    3891: dup
    3892: sipush        176
    3895: ldc_w         #439                // int 269549568
    3898: iastore
    3899: dup
    3900: sipush        177
    3903: ldc_w         #440                // int 269549569
    3906: iastore
    3907: dup
    3908: sipush        178
    3911: ldc_w         #441                // int 269549584
    3914: iastore
    3915: dup
    3916: sipush        179
    3919: ldc_w         #442                // int 269549585
    3922: iastore
    3923: dup
    3924: sipush        180
    3927: ldc_w         #443                // int 269549824
    3930: iastore
    3931: dup
    3932: sipush        181
    3935: ldc_w         #444                // int 269549825
    3938: iastore
    3939: dup
    3940: sipush        182
    3943: ldc_w         #445                // int 269549840
    3946: iastore
    3947: dup
    3948: sipush        183
    3951: ldc_w         #446                // int 269549841
    3954: iastore
    3955: dup
    3956: sipush        184
    3959: ldc_w         #447                // int 269553664
    3962: iastore
    3963: dup
    3964: sipush        185
    3967: ldc_w         #448                // int 269553665
    3970: iastore
    3971: dup
    3972: sipush        186
    3975: ldc_w         #449                // int 269553680
    3978: iastore
    3979: dup
    3980: sipush        187
    3983: ldc_w         #450                // int 269553681
    3986: iastore
    3987: dup
    3988: sipush        188
    3991: ldc_w         #451                // int 269553920
    3994: iastore
    3995: dup
    3996: sipush        189
    3999: ldc_w         #452                // int 269553921
    4002: iastore
    4003: dup
    4004: sipush        190
    4007: ldc_w         #453                // int 269553936
    4010: iastore
    4011: dup
    4012: sipush        191
    4015: ldc_w         #454                // int 269553937
    4018: iastore
    4019: dup
    4020: sipush        192
    4023: ldc_w         #455                // int 285212672
    4026: iastore
    4027: dup
    4028: sipush        193
    4031: ldc_w         #456                // int 285212673
    4034: iastore
    4035: dup
    4036: sipush        194
    4039: ldc_w         #457                // int 285212688
    4042: iastore
    4043: dup
    4044: sipush        195
    4047: ldc_w         #458                // int 285212689
    4050: iastore
    4051: dup
    4052: sipush        196
    4055: ldc_w         #459                // int 285212928
    4058: iastore
    4059: dup
    4060: sipush        197
    4063: ldc_w         #460                // int 285212929
    4066: iastore
    4067: dup
    4068: sipush        198
    4071: ldc_w         #461                // int 285212944
    4074: iastore
    4075: dup
    4076: sipush        199
    4079: ldc_w         #462                // int 285212945
    4082: iastore
    4083: dup
    4084: sipush        200
    4087: ldc_w         #463                // int 285216768
    4090: iastore
    4091: dup
    4092: sipush        201
    4095: ldc_w         #464                // int 285216769
    4098: iastore
    4099: dup
    4100: sipush        202
    4103: ldc_w         #465                // int 285216784
    4106: iastore
    4107: dup
    4108: sipush        203
    4111: ldc_w         #466                // int 285216785
    4114: iastore
    4115: dup
    4116: sipush        204
    4119: ldc_w         #467                // int 285217024
    4122: iastore
    4123: dup
    4124: sipush        205
    4127: ldc_w         #468                // int 285217025
    4130: iastore
    4131: dup
    4132: sipush        206
    4135: ldc_w         #469                // int 285217040
    4138: iastore
    4139: dup
    4140: sipush        207
    4143: ldc_w         #470                // int 285217041
    4146: iastore
    4147: dup
    4148: sipush        208
    4151: ldc_w         #471                // int 285278208
    4154: iastore
    4155: dup
    4156: sipush        209
    4159: ldc_w         #472                // int 285278209
    4162: iastore
    4163: dup
    4164: sipush        210
    4167: ldc_w         #473                // int 285278224
    4170: iastore
    4171: dup
    4172: sipush        211
    4175: ldc_w         #474                // int 285278225
    4178: iastore
    4179: dup
    4180: sipush        212
    4183: ldc_w         #475                // int 285278464
    4186: iastore
    4187: dup
    4188: sipush        213
    4191: ldc_w         #476                // int 285278465
    4194: iastore
    4195: dup
    4196: sipush        214
    4199: ldc_w         #477                // int 285278480
    4202: iastore
    4203: dup
    4204: sipush        215
    4207: ldc_w         #478                // int 285278481
    4210: iastore
    4211: dup
    4212: sipush        216
    4215: ldc_w         #479                // int 285282304
    4218: iastore
    4219: dup
    4220: sipush        217
    4223: ldc_w         #480                // int 285282305
    4226: iastore
    4227: dup
    4228: sipush        218
    4231: ldc_w         #481                // int 285282320
    4234: iastore
    4235: dup
    4236: sipush        219
    4239: ldc_w         #482                // int 285282321
    4242: iastore
    4243: dup
    4244: sipush        220
    4247: ldc_w         #483                // int 285282560
    4250: iastore
    4251: dup
    4252: sipush        221
    4255: ldc_w         #484                // int 285282561
    4258: iastore
    4259: dup
    4260: sipush        222
    4263: ldc_w         #485                // int 285282576
    4266: iastore
    4267: dup
    4268: sipush        223
    4271: ldc_w         #486                // int 285282577
    4274: iastore
    4275: dup
    4276: sipush        224
    4279: ldc_w         #487                // int 286261248
    4282: iastore
    4283: dup
    4284: sipush        225
    4287: ldc_w         #488                // int 286261249
    4290: iastore
    4291: dup
    4292: sipush        226
    4295: ldc_w         #489                // int 286261264
    4298: iastore
    4299: dup
    4300: sipush        227
    4303: ldc_w         #490                // int 286261265
    4306: iastore
    4307: dup
    4308: sipush        228
    4311: ldc_w         #491                // int 286261504
    4314: iastore
    4315: dup
    4316: sipush        229
    4319: ldc_w         #492                // int 286261505
    4322: iastore
    4323: dup
    4324: sipush        230
    4327: ldc_w         #493                // int 286261520
    4330: iastore
    4331: dup
    4332: sipush        231
    4335: ldc_w         #494                // int 286261521
    4338: iastore
    4339: dup
    4340: sipush        232
    4343: ldc_w         #495                // int 286265344
    4346: iastore
    4347: dup
    4348: sipush        233
    4351: ldc_w         #496                // int 286265345
    4354: iastore
    4355: dup
    4356: sipush        234
    4359: ldc_w         #497                // int 286265360
    4362: iastore
    4363: dup
    4364: sipush        235
    4367: ldc_w         #498                // int 286265361
    4370: iastore
    4371: dup
    4372: sipush        236
    4375: ldc_w         #499                // int 286265600
    4378: iastore
    4379: dup
    4380: sipush        237
    4383: ldc_w         #500                // int 286265601
    4386: iastore
    4387: dup
    4388: sipush        238
    4391: ldc_w         #501                // int 286265616
    4394: iastore
    4395: dup
    4396: sipush        239
    4399: ldc_w         #502                // int 286265617
    4402: iastore
    4403: dup
    4404: sipush        240
    4407: ldc_w         #503                // int 286326784
    4410: iastore
    4411: dup
    4412: sipush        241
    4415: ldc_w         #504                // int 286326785
    4418: iastore
    4419: dup
    4420: sipush        242
    4423: ldc_w         #505                // int 286326800
    4426: iastore
    4427: dup
    4428: sipush        243
    4431: ldc_w         #506                // int 286326801
    4434: iastore
    4435: dup
    4436: sipush        244
    4439: ldc_w         #507                // int 286327040
    4442: iastore
    4443: dup
    4444: sipush        245
    4447: ldc_w         #508                // int 286327041
    4450: iastore
    4451: dup
    4452: sipush        246
    4455: ldc_w         #509                // int 286327056
    4458: iastore
    4459: dup
    4460: sipush        247
    4463: ldc_w         #510                // int 286327057
    4466: iastore
    4467: dup
    4468: sipush        248
    4471: ldc_w         #511                // int 286330880
    4474: iastore
    4475: dup
    4476: sipush        249
    4479: ldc_w         #512                // int 286330881
    4482: iastore
    4483: dup
    4484: sipush        250
    4487: ldc_w         #513                // int 286330896
    4490: iastore
    4491: dup
    4492: sipush        251
    4495: ldc_w         #514                // int 286330897
    4498: iastore
    4499: dup
    4500: sipush        252
    4503: ldc_w         #515                // int 286331136
    4506: iastore
    4507: dup
    4508: sipush        253
    4511: ldc_w         #516                // int 286331137
    4514: iastore
    4515: dup
    4516: sipush        254
    4519: ldc_w         #517                // int 286331152
    4522: iastore
    4523: dup
    4524: sipush        255
    4527: ldc_w         #518                // int 286331153
    4530: iastore
    4531: putstatic     #1709               // Field INTERLEAVE4_TABLE:[I
    4534: sipush        128
    4537: newarray       int
    4539: dup
    4540: iconst_0
    4541: iconst_0
    4542: iastore
    4543: dup
    4544: iconst_1
    4545: iconst_1
    4546: iastore
    4547: dup
    4548: iconst_2
    4549: bipush        32
    4551: iastore
    4552: dup
    4553: iconst_3
    4554: bipush        33
    4556: iastore
    4557: dup
    4558: iconst_4
    4559: sipush        1024
    4562: iastore
    4563: dup
    4564: iconst_5
    4565: sipush        1025
    4568: iastore
    4569: dup
    4570: bipush        6
    4572: sipush        1056
    4575: iastore
    4576: dup
    4577: bipush        7
    4579: sipush        1057
    4582: iastore
    4583: dup
    4584: bipush        8
    4586: ldc           #1                  // int 32768
    4588: iastore
    4589: dup
    4590: bipush        9
    4592: ldc           #2                  // int 32769
    4594: iastore
    4595: dup
    4596: bipush        10
    4598: ldc_w         #303                // int 32800
    4601: iastore
    4602: dup
    4603: bipush        11
    4605: ldc_w         #304                // int 32801
    4608: iastore
    4609: dup
    4610: bipush        12
    4612: ldc_w         #305                // int 33792
    4615: iastore
    4616: dup
    4617: bipush        13
    4619: ldc_w         #306                // int 33793
    4622: iastore
    4623: dup
    4624: bipush        14
    4626: ldc_w         #307                // int 33824
    4629: iastore
    4630: dup
    4631: bipush        15
    4633: ldc_w         #308                // int 33825
    4636: iastore
    4637: dup
    4638: bipush        16
    4640: ldc           #114                // int 1048576
    4642: iastore
    4643: dup
    4644: bipush        17
    4646: ldc           #115                // int 1048577
    4648: iastore
    4649: dup
    4650: bipush        18
    4652: ldc_w         #309                // int 1048608
    4655: iastore
    4656: dup
    4657: bipush        19
    4659: ldc_w         #310                // int 1048609
    4662: iastore
    4663: dup
    4664: bipush        20
    4666: ldc_w         #311                // int 1049600
    4669: iastore
    4670: dup
    4671: bipush        21
    4673: ldc_w         #312                // int 1049601
    4676: iastore
    4677: dup
    4678: bipush        22
    4680: ldc_w         #313                // int 1049632
    4683: iastore
    4684: dup
    4685: bipush        23
    4687: ldc_w         #314                // int 1049633
    4690: iastore
    4691: dup
    4692: bipush        24
    4694: ldc_w         #315                // int 1081344
    4697: iastore
    4698: dup
    4699: bipush        25
    4701: ldc_w         #316                // int 1081345
    4704: iastore
    4705: dup
    4706: bipush        26
    4708: ldc_w         #317                // int 1081376
    4711: iastore
    4712: dup
    4713: bipush        27
    4715: ldc_w         #318                // int 1081377
    4718: iastore
    4719: dup
    4720: bipush        28
    4722: ldc_w         #319                // int 1082368
    4725: iastore
    4726: dup
    4727: bipush        29
    4729: ldc_w         #320                // int 1082369
    4732: iastore
    4733: dup
    4734: bipush        30
    4736: ldc_w         #321                // int 1082400
    4739: iastore
    4740: dup
    4741: bipush        31
    4743: ldc_w         #322                // int 1082401
    4746: iastore
    4747: dup
    4748: bipush        32
    4750: ldc_w         #359                // int 33554432
    4753: iastore
    4754: dup
    4755: bipush        33
    4757: ldc_w         #360                // int 33554433
    4760: iastore
    4761: dup
    4762: bipush        34
    4764: ldc_w         #361                // int 33554464
    4767: iastore
    4768: dup
    4769: bipush        35
    4771: ldc_w         #362                // int 33554465
    4774: iastore
    4775: dup
    4776: bipush        36
    4778: ldc_w         #363                // int 33555456
    4781: iastore
    4782: dup
    4783: bipush        37
    4785: ldc_w         #364                // int 33555457
    4788: iastore
    4789: dup
    4790: bipush        38
    4792: ldc_w         #365                // int 33555488
    4795: iastore
    4796: dup
    4797: bipush        39
    4799: ldc_w         #366                // int 33555489
    4802: iastore
    4803: dup
    4804: bipush        40
    4806: ldc_w         #367                // int 33587200
    4809: iastore
    4810: dup
    4811: bipush        41
    4813: ldc_w         #368                // int 33587201
    4816: iastore
    4817: dup
    4818: bipush        42
    4820: ldc_w         #369                // int 33587232
    4823: iastore
    4824: dup
    4825: bipush        43
    4827: ldc_w         #370                // int 33587233
    4830: iastore
    4831: dup
    4832: bipush        44
    4834: ldc_w         #371                // int 33588224
    4837: iastore
    4838: dup
    4839: bipush        45
    4841: ldc_w         #372                // int 33588225
    4844: iastore
    4845: dup
    4846: bipush        46
    4848: ldc_w         #373                // int 33588256
    4851: iastore
    4852: dup
    4853: bipush        47
    4855: ldc_w         #374                // int 33588257
    4858: iastore
    4859: dup
    4860: bipush        48
    4862: ldc_w         #375                // int 34603008
    4865: iastore
    4866: dup
    4867: bipush        49
    4869: ldc_w         #376                // int 34603009
    4872: iastore
    4873: dup
    4874: bipush        50
    4876: ldc_w         #377                // int 34603040
    4879: iastore
    4880: dup
    4881: bipush        51
    4883: ldc_w         #378                // int 34603041
    4886: iastore
    4887: dup
    4888: bipush        52
    4890: ldc_w         #379                // int 34604032
    4893: iastore
    4894: dup
    4895: bipush        53
    4897: ldc_w         #380                // int 34604033
    4900: iastore
    4901: dup
    4902: bipush        54
    4904: ldc_w         #381                // int 34604064
    4907: iastore
    4908: dup
    4909: bipush        55
    4911: ldc_w         #382                // int 34604065
    4914: iastore
    4915: dup
    4916: bipush        56
    4918: ldc_w         #383                // int 34635776
    4921: iastore
    4922: dup
    4923: bipush        57
    4925: ldc_w         #384                // int 34635777
    4928: iastore
    4929: dup
    4930: bipush        58
    4932: ldc_w         #385                // int 34635808
    4935: iastore
    4936: dup
    4937: bipush        59
    4939: ldc_w         #386                // int 34635809
    4942: iastore
    4943: dup
    4944: bipush        60
    4946: ldc_w         #387                // int 34636800
    4949: iastore
    4950: dup
    4951: bipush        61
    4953: ldc_w         #388                // int 34636801
    4956: iastore
    4957: dup
    4958: bipush        62
    4960: ldc_w         #389                // int 34636832
    4963: iastore
    4964: dup
    4965: bipush        63
    4967: ldc_w         #390                // int 34636833
    4970: iastore
    4971: dup
    4972: bipush        64
    4974: ldc_w         #519                // int 1073741824
    4977: iastore
    4978: dup
    4979: bipush        65
    4981: ldc_w         #520                // int 1073741825
    4984: iastore
    4985: dup
    4986: bipush        66
    4988: ldc_w         #521                // int 1073741856
    4991: iastore
    4992: dup
    4993: bipush        67
    4995: ldc_w         #522                // int 1073741857
    4998: iastore
    4999: dup
    5000: bipush        68
    5002: ldc_w         #523                // int 1073742848
    5005: iastore
    5006: dup
    5007: bipush        69
    5009: ldc_w         #524                // int 1073742849
    5012: iastore
    5013: dup
    5014: bipush        70
    5016: ldc_w         #525                // int 1073742880
    5019: iastore
    5020: dup
    5021: bipush        71
    5023: ldc_w         #526                // int 1073742881
    5026: iastore
    5027: dup
    5028: bipush        72
    5030: ldc_w         #527                // int 1073774592
    5033: iastore
    5034: dup
    5035: bipush        73
    5037: ldc_w         #528                // int 1073774593
    5040: iastore
    5041: dup
    5042: bipush        74
    5044: ldc_w         #529                // int 1073774624
    5047: iastore
    5048: dup
    5049: bipush        75
    5051: ldc_w         #530                // int 1073774625
    5054: iastore
    5055: dup
    5056: bipush        76
    5058: ldc_w         #531                // int 1073775616
    5061: iastore
    5062: dup
    5063: bipush        77
    5065: ldc_w         #532                // int 1073775617
    5068: iastore
    5069: dup
    5070: bipush        78
    5072: ldc_w         #533                // int 1073775648
    5075: iastore
    5076: dup
    5077: bipush        79
    5079: ldc_w         #534                // int 1073775649
    5082: iastore
    5083: dup
    5084: bipush        80
    5086: ldc_w         #535                // int 1074790400
    5089: iastore
    5090: dup
    5091: bipush        81
    5093: ldc_w         #536                // int 1074790401
    5096: iastore
    5097: dup
    5098: bipush        82
    5100: ldc_w         #537                // int 1074790432
    5103: iastore
    5104: dup
    5105: bipush        83
    5107: ldc_w         #538                // int 1074790433
    5110: iastore
    5111: dup
    5112: bipush        84
    5114: ldc_w         #539                // int 1074791424
    5117: iastore
    5118: dup
    5119: bipush        85
    5121: ldc_w         #540                // int 1074791425
    5124: iastore
    5125: dup
    5126: bipush        86
    5128: ldc_w         #541                // int 1074791456
    5131: iastore
    5132: dup
    5133: bipush        87
    5135: ldc_w         #542                // int 1074791457
    5138: iastore
    5139: dup
    5140: bipush        88
    5142: ldc_w         #543                // int 1074823168
    5145: iastore
    5146: dup
    5147: bipush        89
    5149: ldc_w         #544                // int 1074823169
    5152: iastore
    5153: dup
    5154: bipush        90
    5156: ldc_w         #545                // int 1074823200
    5159: iastore
    5160: dup
    5161: bipush        91
    5163: ldc_w         #546                // int 1074823201
    5166: iastore
    5167: dup
    5168: bipush        92
    5170: ldc_w         #547                // int 1074824192
    5173: iastore
    5174: dup
    5175: bipush        93
    5177: ldc_w         #548                // int 1074824193
    5180: iastore
    5181: dup
    5182: bipush        94
    5184: ldc_w         #549                // int 1074824224
    5187: iastore
    5188: dup
    5189: bipush        95
    5191: ldc_w         #550                // int 1074824225
    5194: iastore
    5195: dup
    5196: bipush        96
    5198: ldc_w         #551                // int 1107296256
    5201: iastore
    5202: dup
    5203: bipush        97
    5205: ldc_w         #552                // int 1107296257
    5208: iastore
    5209: dup
    5210: bipush        98
    5212: ldc_w         #553                // int 1107296288
    5215: iastore
    5216: dup
    5217: bipush        99
    5219: ldc_w         #554                // int 1107296289
    5222: iastore
    5223: dup
    5224: bipush        100
    5226: ldc_w         #555                // int 1107297280
    5229: iastore
    5230: dup
    5231: bipush        101
    5233: ldc_w         #556                // int 1107297281
    5236: iastore
    5237: dup
    5238: bipush        102
    5240: ldc_w         #557                // int 1107297312
    5243: iastore
    5244: dup
    5245: bipush        103
    5247: ldc_w         #558                // int 1107297313
    5250: iastore
    5251: dup
    5252: bipush        104
    5254: ldc_w         #559                // int 1107329024
    5257: iastore
    5258: dup
    5259: bipush        105
    5261: ldc_w         #560                // int 1107329025
    5264: iastore
    5265: dup
    5266: bipush        106
    5268: ldc_w         #561                // int 1107329056
    5271: iastore
    5272: dup
    5273: bipush        107
    5275: ldc_w         #562                // int 1107329057
    5278: iastore
    5279: dup
    5280: bipush        108
    5282: ldc_w         #563                // int 1107330048
    5285: iastore
    5286: dup
    5287: bipush        109
    5289: ldc_w         #564                // int 1107330049
    5292: iastore
    5293: dup
    5294: bipush        110
    5296: ldc_w         #565                // int 1107330080
    5299: iastore
    5300: dup
    5301: bipush        111
    5303: ldc_w         #566                // int 1107330081
    5306: iastore
    5307: dup
    5308: bipush        112
    5310: ldc_w         #567                // int 1108344832
    5313: iastore
    5314: dup
    5315: bipush        113
    5317: ldc_w         #568                // int 1108344833
    5320: iastore
    5321: dup
    5322: bipush        114
    5324: ldc_w         #569                // int 1108344864
    5327: iastore
    5328: dup
    5329: bipush        115
    5331: ldc_w         #570                // int 1108344865
    5334: iastore
    5335: dup
    5336: bipush        116
    5338: ldc_w         #571                // int 1108345856
    5341: iastore
    5342: dup
    5343: bipush        117
    5345: ldc_w         #572                // int 1108345857
    5348: iastore
    5349: dup
    5350: bipush        118
    5352: ldc_w         #573                // int 1108345888
    5355: iastore
    5356: dup
    5357: bipush        119
    5359: ldc_w         #574                // int 1108345889
    5362: iastore
    5363: dup
    5364: bipush        120
    5366: ldc_w         #575                // int 1108377600
    5369: iastore
    5370: dup
    5371: bipush        121
    5373: ldc_w         #576                // int 1108377601
    5376: iastore
    5377: dup
    5378: bipush        122
    5380: ldc_w         #577                // int 1108377632
    5383: iastore
    5384: dup
    5385: bipush        123
    5387: ldc_w         #578                // int 1108377633
    5390: iastore
    5391: dup
    5392: bipush        124
    5394: ldc_w         #579                // int 1108378624
    5397: iastore
    5398: dup
    5399: bipush        125
    5401: ldc_w         #580                // int 1108378625
    5404: iastore
    5405: dup
    5406: bipush        126
    5408: ldc_w         #581                // int 1108378656
    5411: iastore
    5412: dup
    5413: bipush        127
    5415: ldc_w         #582                // int 1108378657
    5418: iastore
    5419: putstatic     #1710               // Field INTERLEAVE5_TABLE:[I
    5422: sipush        512
    5425: newarray       long
    5427: dup
    5428: iconst_0
    5429: lconst_0
    5430: lastore
    5431: dup
    5432: iconst_1
    5433: lconst_1
    5434: lastore
    5435: dup
    5436: iconst_2
    5437: ldc2_w        #585                // long 128l
    5440: lastore
    5441: dup
    5442: iconst_3
    5443: ldc2_w        #587                // long 129l
    5446: lastore
    5447: dup
    5448: iconst_4
    5449: ldc2_w        #589                // long 16384l
    5452: lastore
    5453: dup
    5454: iconst_5
    5455: ldc2_w        #591                // long 16385l
    5458: lastore
    5459: dup
    5460: bipush        6
    5462: ldc2_w        #593                // long 16512l
    5465: lastore
    5466: dup
    5467: bipush        7
    5469: ldc2_w        #595                // long 16513l
    5472: lastore
    5473: dup
    5474: bipush        8
    5476: ldc2_w        #597                // long 2097152l
    5479: lastore
    5480: dup
    5481: bipush        9
    5483: ldc2_w        #599                // long 2097153l
    5486: lastore
    5487: dup
    5488: bipush        10
    5490: ldc2_w        #601                // long 2097280l
    5493: lastore
    5494: dup
    5495: bipush        11
    5497: ldc2_w        #603                // long 2097281l
    5500: lastore
    5501: dup
    5502: bipush        12
    5504: ldc2_w        #605                // long 2113536l
    5507: lastore
    5508: dup
    5509: bipush        13
    5511: ldc2_w        #607                // long 2113537l
    5514: lastore
    5515: dup
    5516: bipush        14
    5518: ldc2_w        #609                // long 2113664l
    5521: lastore
    5522: dup
    5523: bipush        15
    5525: ldc2_w        #611                // long 2113665l
    5528: lastore
    5529: dup
    5530: bipush        16
    5532: ldc2_w        #613                // long 268435456l
    5535: lastore
    5536: dup
    5537: bipush        17
    5539: ldc2_w        #615                // long 268435457l
    5542: lastore
    5543: dup
    5544: bipush        18
    5546: ldc2_w        #617                // long 268435584l
    5549: lastore
    5550: dup
    5551: bipush        19
    5553: ldc2_w        #619                // long 268435585l
    5556: lastore
    5557: dup
    5558: bipush        20
    5560: ldc2_w        #621                // long 268451840l
    5563: lastore
    5564: dup
    5565: bipush        21
    5567: ldc2_w        #623                // long 268451841l
    5570: lastore
    5571: dup
    5572: bipush        22
    5574: ldc2_w        #625                // long 268451968l
    5577: lastore
    5578: dup
    5579: bipush        23
    5581: ldc2_w        #627                // long 268451969l
    5584: lastore
    5585: dup
    5586: bipush        24
    5588: ldc2_w        #629                // long 270532608l
    5591: lastore
    5592: dup
    5593: bipush        25
    5595: ldc2_w        #631                // long 270532609l
    5598: lastore
    5599: dup
    5600: bipush        26
    5602: ldc2_w        #633                // long 270532736l
    5605: lastore
    5606: dup
    5607: bipush        27
    5609: ldc2_w        #635                // long 270532737l
    5612: lastore
    5613: dup
    5614: bipush        28
    5616: ldc2_w        #637                // long 270548992l
    5619: lastore
    5620: dup
    5621: bipush        29
    5623: ldc2_w        #639                // long 270548993l
    5626: lastore
    5627: dup
    5628: bipush        30
    5630: ldc2_w        #641                // long 270549120l
    5633: lastore
    5634: dup
    5635: bipush        31
    5637: ldc2_w        #643                // long 270549121l
    5640: lastore
    5641: dup
    5642: bipush        32
    5644: ldc2_w        #647                // long 34359738368l
    5647: lastore
    5648: dup
    5649: bipush        33
    5651: ldc2_w        #649                // long 34359738369l
    5654: lastore
    5655: dup
    5656: bipush        34
    5658: ldc2_w        #651                // long 34359738496l
    5661: lastore
    5662: dup
    5663: bipush        35
    5665: ldc2_w        #653                // long 34359738497l
    5668: lastore
    5669: dup
    5670: bipush        36
    5672: ldc2_w        #655                // long 34359754752l
    5675: lastore
    5676: dup
    5677: bipush        37
    5679: ldc2_w        #657                // long 34359754753l
    5682: lastore
    5683: dup
    5684: bipush        38
    5686: ldc2_w        #659                // long 34359754880l
    5689: lastore
    5690: dup
    5691: bipush        39
    5693: ldc2_w        #661                // long 34359754881l
    5696: lastore
    5697: dup
    5698: bipush        40
    5700: ldc2_w        #663                // long 34361835520l
    5703: lastore
    5704: dup
    5705: bipush        41
    5707: ldc2_w        #665                // long 34361835521l
    5710: lastore
    5711: dup
    5712: bipush        42
    5714: ldc2_w        #667                // long 34361835648l
    5717: lastore
    5718: dup
    5719: bipush        43
    5721: ldc2_w        #669                // long 34361835649l
    5724: lastore
    5725: dup
    5726: bipush        44
    5728: ldc2_w        #671                // long 34361851904l
    5731: lastore
    5732: dup
    5733: bipush        45
    5735: ldc2_w        #673                // long 34361851905l
    5738: lastore
    5739: dup
    5740: bipush        46
    5742: ldc2_w        #675                // long 34361852032l
    5745: lastore
    5746: dup
    5747: bipush        47
    5749: ldc2_w        #677                // long 34361852033l
    5752: lastore
    5753: dup
    5754: bipush        48
    5756: ldc2_w        #679                // long 34628173824l
    5759: lastore
    5760: dup
    5761: bipush        49
    5763: ldc2_w        #681                // long 34628173825l
    5766: lastore
    5767: dup
    5768: bipush        50
    5770: ldc2_w        #683                // long 34628173952l
    5773: lastore
    5774: dup
    5775: bipush        51
    5777: ldc2_w        #685                // long 34628173953l
    5780: lastore
    5781: dup
    5782: bipush        52
    5784: ldc2_w        #687                // long 34628190208l
    5787: lastore
    5788: dup
    5789: bipush        53
    5791: ldc2_w        #689                // long 34628190209l
    5794: lastore
    5795: dup
    5796: bipush        54
    5798: ldc2_w        #691                // long 34628190336l
    5801: lastore
    5802: dup
    5803: bipush        55
    5805: ldc2_w        #693                // long 34628190337l
    5808: lastore
    5809: dup
    5810: bipush        56
    5812: ldc2_w        #695                // long 34630270976l
    5815: lastore
    5816: dup
    5817: bipush        57
    5819: ldc2_w        #697                // long 34630270977l
    5822: lastore
    5823: dup
    5824: bipush        58
    5826: ldc2_w        #699                // long 34630271104l
    5829: lastore
    5830: dup
    5831: bipush        59
    5833: ldc2_w        #701                // long 34630271105l
    5836: lastore
    5837: dup
    5838: bipush        60
    5840: ldc2_w        #703                // long 34630287360l
    5843: lastore
    5844: dup
    5845: bipush        61
    5847: ldc2_w        #705                // long 34630287361l
    5850: lastore
    5851: dup
    5852: bipush        62
    5854: ldc2_w        #707                // long 34630287488l
    5857: lastore
    5858: dup
    5859: bipush        63
    5861: ldc2_w        #709                // long 34630287489l
    5864: lastore
    5865: dup
    5866: bipush        64
    5868: ldc2_w        #711                // long 4398046511104l
    5871: lastore
    5872: dup
    5873: bipush        65
    5875: ldc2_w        #713                // long 4398046511105l
    5878: lastore
    5879: dup
    5880: bipush        66
    5882: ldc2_w        #715                // long 4398046511232l
    5885: lastore
    5886: dup
    5887: bipush        67
    5889: ldc2_w        #717                // long 4398046511233l
    5892: lastore
    5893: dup
    5894: bipush        68
    5896: ldc2_w        #719                // long 4398046527488l
    5899: lastore
    5900: dup
    5901: bipush        69
    5903: ldc2_w        #721                // long 4398046527489l
    5906: lastore
    5907: dup
    5908: bipush        70
    5910: ldc2_w        #723                // long 4398046527616l
    5913: lastore
    5914: dup
    5915: bipush        71
    5917: ldc2_w        #725                // long 4398046527617l
    5920: lastore
    5921: dup
    5922: bipush        72
    5924: ldc2_w        #727                // long 4398048608256l
    5927: lastore
    5928: dup
    5929: bipush        73
    5931: ldc2_w        #729                // long 4398048608257l
    5934: lastore
    5935: dup
    5936: bipush        74
    5938: ldc2_w        #731                // long 4398048608384l
    5941: lastore
    5942: dup
    5943: bipush        75
    5945: ldc2_w        #733                // long 4398048608385l
    5948: lastore
    5949: dup
    5950: bipush        76
    5952: ldc2_w        #735                // long 4398048624640l
    5955: lastore
    5956: dup
    5957: bipush        77
    5959: ldc2_w        #737                // long 4398048624641l
    5962: lastore
    5963: dup
    5964: bipush        78
    5966: ldc2_w        #739                // long 4398048624768l
    5969: lastore
    5970: dup
    5971: bipush        79
    5973: ldc2_w        #741                // long 4398048624769l
    5976: lastore
    5977: dup
    5978: bipush        80
    5980: ldc2_w        #743                // long 4398314946560l
    5983: lastore
    5984: dup
    5985: bipush        81
    5987: ldc2_w        #745                // long 4398314946561l
    5990: lastore
    5991: dup
    5992: bipush        82
    5994: ldc2_w        #747                // long 4398314946688l
    5997: lastore
    5998: dup
    5999: bipush        83
    6001: ldc2_w        #749                // long 4398314946689l
    6004: lastore
    6005: dup
    6006: bipush        84
    6008: ldc2_w        #751                // long 4398314962944l
    6011: lastore
    6012: dup
    6013: bipush        85
    6015: ldc2_w        #753                // long 4398314962945l
    6018: lastore
    6019: dup
    6020: bipush        86
    6022: ldc2_w        #755                // long 4398314963072l
    6025: lastore
    6026: dup
    6027: bipush        87
    6029: ldc2_w        #757                // long 4398314963073l
    6032: lastore
    6033: dup
    6034: bipush        88
    6036: ldc2_w        #759                // long 4398317043712l
    6039: lastore
    6040: dup
    6041: bipush        89
    6043: ldc2_w        #761                // long 4398317043713l
    6046: lastore
    6047: dup
    6048: bipush        90
    6050: ldc2_w        #763                // long 4398317043840l
    6053: lastore
    6054: dup
    6055: bipush        91
    6057: ldc2_w        #765                // long 4398317043841l
    6060: lastore
    6061: dup
    6062: bipush        92
    6064: ldc2_w        #767                // long 4398317060096l
    6067: lastore
    6068: dup
    6069: bipush        93
    6071: ldc2_w        #769                // long 4398317060097l
    6074: lastore
    6075: dup
    6076: bipush        94
    6078: ldc2_w        #771                // long 4398317060224l
    6081: lastore
    6082: dup
    6083: bipush        95
    6085: ldc2_w        #773                // long 4398317060225l
    6088: lastore
    6089: dup
    6090: bipush        96
    6092: ldc2_w        #775                // long 4432406249472l
    6095: lastore
    6096: dup
    6097: bipush        97
    6099: ldc2_w        #777                // long 4432406249473l
    6102: lastore
    6103: dup
    6104: bipush        98
    6106: ldc2_w        #779                // long 4432406249600l
    6109: lastore
    6110: dup
    6111: bipush        99
    6113: ldc2_w        #781                // long 4432406249601l
    6116: lastore
    6117: dup
    6118: bipush        100
    6120: ldc2_w        #783                // long 4432406265856l
    6123: lastore
    6124: dup
    6125: bipush        101
    6127: ldc2_w        #785                // long 4432406265857l
    6130: lastore
    6131: dup
    6132: bipush        102
    6134: ldc2_w        #787                // long 4432406265984l
    6137: lastore
    6138: dup
    6139: bipush        103
    6141: ldc2_w        #789                // long 4432406265985l
    6144: lastore
    6145: dup
    6146: bipush        104
    6148: ldc2_w        #791                // long 4432408346624l
    6151: lastore
    6152: dup
    6153: bipush        105
    6155: ldc2_w        #793                // long 4432408346625l
    6158: lastore
    6159: dup
    6160: bipush        106
    6162: ldc2_w        #795                // long 4432408346752l
    6165: lastore
    6166: dup
    6167: bipush        107
    6169: ldc2_w        #797                // long 4432408346753l
    6172: lastore
    6173: dup
    6174: bipush        108
    6176: ldc2_w        #799                // long 4432408363008l
    6179: lastore
    6180: dup
    6181: bipush        109
    6183: ldc2_w        #801                // long 4432408363009l
    6186: lastore
    6187: dup
    6188: bipush        110
    6190: ldc2_w        #803                // long 4432408363136l
    6193: lastore
    6194: dup
    6195: bipush        111
    6197: ldc2_w        #805                // long 4432408363137l
    6200: lastore
    6201: dup
    6202: bipush        112
    6204: ldc2_w        #807                // long 4432674684928l
    6207: lastore
    6208: dup
    6209: bipush        113
    6211: ldc2_w        #809                // long 4432674684929l
    6214: lastore
    6215: dup
    6216: bipush        114
    6218: ldc2_w        #811                // long 4432674685056l
    6221: lastore
    6222: dup
    6223: bipush        115
    6225: ldc2_w        #813                // long 4432674685057l
    6228: lastore
    6229: dup
    6230: bipush        116
    6232: ldc2_w        #815                // long 4432674701312l
    6235: lastore
    6236: dup
    6237: bipush        117
    6239: ldc2_w        #817                // long 4432674701313l
    6242: lastore
    6243: dup
    6244: bipush        118
    6246: ldc2_w        #819                // long 4432674701440l
    6249: lastore
    6250: dup
    6251: bipush        119
    6253: ldc2_w        #821                // long 4432674701441l
    6256: lastore
    6257: dup
    6258: bipush        120
    6260: ldc2_w        #823                // long 4432676782080l
    6263: lastore
    6264: dup
    6265: bipush        121
    6267: ldc2_w        #825                // long 4432676782081l
    6270: lastore
    6271: dup
    6272: bipush        122
    6274: ldc2_w        #827                // long 4432676782208l
    6277: lastore
    6278: dup
    6279: bipush        123
    6281: ldc2_w        #829                // long 4432676782209l
    6284: lastore
    6285: dup
    6286: bipush        124
    6288: ldc2_w        #831                // long 4432676798464l
    6291: lastore
    6292: dup
    6293: bipush        125
    6295: ldc2_w        #833                // long 4432676798465l
    6298: lastore
    6299: dup
    6300: bipush        126
    6302: ldc2_w        #835                // long 4432676798592l
    6305: lastore
    6306: dup
    6307: bipush        127
    6309: ldc2_w        #837                // long 4432676798593l
    6312: lastore
    6313: dup
    6314: sipush        128
    6317: ldc2_w        #839                // long 562949953421312l
    6320: lastore
    6321: dup
    6322: sipush        129
    6325: ldc2_w        #841                // long 562949953421313l
    6328: lastore
    6329: dup
    6330: sipush        130
    6333: ldc2_w        #843                // long 562949953421440l
    6336: lastore
    6337: dup
    6338: sipush        131
    6341: ldc2_w        #845                // long 562949953421441l
    6344: lastore
    6345: dup
    6346: sipush        132
    6349: ldc2_w        #847                // long 562949953437696l
    6352: lastore
    6353: dup
    6354: sipush        133
    6357: ldc2_w        #849                // long 562949953437697l
    6360: lastore
    6361: dup
    6362: sipush        134
    6365: ldc2_w        #851                // long 562949953437824l
    6368: lastore
    6369: dup
    6370: sipush        135
    6373: ldc2_w        #853                // long 562949953437825l
    6376: lastore
    6377: dup
    6378: sipush        136
    6381: ldc2_w        #855                // long 562949955518464l
    6384: lastore
    6385: dup
    6386: sipush        137
    6389: ldc2_w        #857                // long 562949955518465l
    6392: lastore
    6393: dup
    6394: sipush        138
    6397: ldc2_w        #859                // long 562949955518592l
    6400: lastore
    6401: dup
    6402: sipush        139
    6405: ldc2_w        #861                // long 562949955518593l
    6408: lastore
    6409: dup
    6410: sipush        140
    6413: ldc2_w        #863                // long 562949955534848l
    6416: lastore
    6417: dup
    6418: sipush        141
    6421: ldc2_w        #865                // long 562949955534849l
    6424: lastore
    6425: dup
    6426: sipush        142
    6429: ldc2_w        #867                // long 562949955534976l
    6432: lastore
    6433: dup
    6434: sipush        143
    6437: ldc2_w        #869                // long 562949955534977l
    6440: lastore
    6441: dup
    6442: sipush        144
    6445: ldc2_w        #871                // long 562950221856768l
    6448: lastore
    6449: dup
    6450: sipush        145
    6453: ldc2_w        #873                // long 562950221856769l
    6456: lastore
    6457: dup
    6458: sipush        146
    6461: ldc2_w        #875                // long 562950221856896l
    6464: lastore
    6465: dup
    6466: sipush        147
    6469: ldc2_w        #877                // long 562950221856897l
    6472: lastore
    6473: dup
    6474: sipush        148
    6477: ldc2_w        #879                // long 562950221873152l
    6480: lastore
    6481: dup
    6482: sipush        149
    6485: ldc2_w        #881                // long 562950221873153l
    6488: lastore
    6489: dup
    6490: sipush        150
    6493: ldc2_w        #883                // long 562950221873280l
    6496: lastore
    6497: dup
    6498: sipush        151
    6501: ldc2_w        #885                // long 562950221873281l
    6504: lastore
    6505: dup
    6506: sipush        152
    6509: ldc2_w        #887                // long 562950223953920l
    6512: lastore
    6513: dup
    6514: sipush        153
    6517: ldc2_w        #889                // long 562950223953921l
    6520: lastore
    6521: dup
    6522: sipush        154
    6525: ldc2_w        #891                // long 562950223954048l
    6528: lastore
    6529: dup
    6530: sipush        155
    6533: ldc2_w        #893                // long 562950223954049l
    6536: lastore
    6537: dup
    6538: sipush        156
    6541: ldc2_w        #895                // long 562950223970304l
    6544: lastore
    6545: dup
    6546: sipush        157
    6549: ldc2_w        #897                // long 562950223970305l
    6552: lastore
    6553: dup
    6554: sipush        158
    6557: ldc2_w        #899                // long 562950223970432l
    6560: lastore
    6561: dup
    6562: sipush        159
    6565: ldc2_w        #901                // long 562950223970433l
    6568: lastore
    6569: dup
    6570: sipush        160
    6573: ldc2_w        #903                // long 562984313159680l
    6576: lastore
    6577: dup
    6578: sipush        161
    6581: ldc2_w        #905                // long 562984313159681l
    6584: lastore
    6585: dup
    6586: sipush        162
    6589: ldc2_w        #907                // long 562984313159808l
    6592: lastore
    6593: dup
    6594: sipush        163
    6597: ldc2_w        #909                // long 562984313159809l
    6600: lastore
    6601: dup
    6602: sipush        164
    6605: ldc2_w        #911                // long 562984313176064l
    6608: lastore
    6609: dup
    6610: sipush        165
    6613: ldc2_w        #913                // long 562984313176065l
    6616: lastore
    6617: dup
    6618: sipush        166
    6621: ldc2_w        #915                // long 562984313176192l
    6624: lastore
    6625: dup
    6626: sipush        167
    6629: ldc2_w        #917                // long 562984313176193l
    6632: lastore
    6633: dup
    6634: sipush        168
    6637: ldc2_w        #919                // long 562984315256832l
    6640: lastore
    6641: dup
    6642: sipush        169
    6645: ldc2_w        #921                // long 562984315256833l
    6648: lastore
    6649: dup
    6650: sipush        170
    6653: ldc2_w        #923                // long 562984315256960l
    6656: lastore
    6657: dup
    6658: sipush        171
    6661: ldc2_w        #925                // long 562984315256961l
    6664: lastore
    6665: dup
    6666: sipush        172
    6669: ldc2_w        #927                // long 562984315273216l
    6672: lastore
    6673: dup
    6674: sipush        173
    6677: ldc2_w        #929                // long 562984315273217l
    6680: lastore
    6681: dup
    6682: sipush        174
    6685: ldc2_w        #931                // long 562984315273344l
    6688: lastore
    6689: dup
    6690: sipush        175
    6693: ldc2_w        #933                // long 562984315273345l
    6696: lastore
    6697: dup
    6698: sipush        176
    6701: ldc2_w        #935                // long 562984581595136l
    6704: lastore
    6705: dup
    6706: sipush        177
    6709: ldc2_w        #937                // long 562984581595137l
    6712: lastore
    6713: dup
    6714: sipush        178
    6717: ldc2_w        #939                // long 562984581595264l
    6720: lastore
    6721: dup
    6722: sipush        179
    6725: ldc2_w        #941                // long 562984581595265l
    6728: lastore
    6729: dup
    6730: sipush        180
    6733: ldc2_w        #943                // long 562984581611520l
    6736: lastore
    6737: dup
    6738: sipush        181
    6741: ldc2_w        #945                // long 562984581611521l
    6744: lastore
    6745: dup
    6746: sipush        182
    6749: ldc2_w        #947                // long 562984581611648l
    6752: lastore
    6753: dup
    6754: sipush        183
    6757: ldc2_w        #949                // long 562984581611649l
    6760: lastore
    6761: dup
    6762: sipush        184
    6765: ldc2_w        #951                // long 562984583692288l
    6768: lastore
    6769: dup
    6770: sipush        185
    6773: ldc2_w        #953                // long 562984583692289l
    6776: lastore
    6777: dup
    6778: sipush        186
    6781: ldc2_w        #955                // long 562984583692416l
    6784: lastore
    6785: dup
    6786: sipush        187
    6789: ldc2_w        #957                // long 562984583692417l
    6792: lastore
    6793: dup
    6794: sipush        188
    6797: ldc2_w        #959                // long 562984583708672l
    6800: lastore
    6801: dup
    6802: sipush        189
    6805: ldc2_w        #961                // long 562984583708673l
    6808: lastore
    6809: dup
    6810: sipush        190
    6813: ldc2_w        #963                // long 562984583708800l
    6816: lastore
    6817: dup
    6818: sipush        191
    6821: ldc2_w        #965                // long 562984583708801l
    6824: lastore
    6825: dup
    6826: sipush        192
    6829: ldc2_w        #967                // long 567347999932416l
    6832: lastore
    6833: dup
    6834: sipush        193
    6837: ldc2_w        #969                // long 567347999932417l
    6840: lastore
    6841: dup
    6842: sipush        194
    6845: ldc2_w        #971                // long 567347999932544l
    6848: lastore
    6849: dup
    6850: sipush        195
    6853: ldc2_w        #973                // long 567347999932545l
    6856: lastore
    6857: dup
    6858: sipush        196
    6861: ldc2_w        #975                // long 567347999948800l
    6864: lastore
    6865: dup
    6866: sipush        197
    6869: ldc2_w        #977                // long 567347999948801l
    6872: lastore
    6873: dup
    6874: sipush        198
    6877: ldc2_w        #979                // long 567347999948928l
    6880: lastore
    6881: dup
    6882: sipush        199
    6885: ldc2_w        #981                // long 567347999948929l
    6888: lastore
    6889: dup
    6890: sipush        200
    6893: ldc2_w        #983                // long 567348002029568l
    6896: lastore
    6897: dup
    6898: sipush        201
    6901: ldc2_w        #985                // long 567348002029569l
    6904: lastore
    6905: dup
    6906: sipush        202
    6909: ldc2_w        #987                // long 567348002029696l
    6912: lastore
    6913: dup
    6914: sipush        203
    6917: ldc2_w        #989                // long 567348002029697l
    6920: lastore
    6921: dup
    6922: sipush        204
    6925: ldc2_w        #991                // long 567348002045952l
    6928: lastore
    6929: dup
    6930: sipush        205
    6933: ldc2_w        #993                // long 567348002045953l
    6936: lastore
    6937: dup
    6938: sipush        206
    6941: ldc2_w        #995                // long 567348002046080l
    6944: lastore
    6945: dup
    6946: sipush        207
    6949: ldc2_w        #997                // long 567348002046081l
    6952: lastore
    6953: dup
    6954: sipush        208
    6957: ldc2_w        #999                // long 567348268367872l
    6960: lastore
    6961: dup
    6962: sipush        209
    6965: ldc2_w        #1001               // long 567348268367873l
    6968: lastore
    6969: dup
    6970: sipush        210
    6973: ldc2_w        #1003               // long 567348268368000l
    6976: lastore
    6977: dup
    6978: sipush        211
    6981: ldc2_w        #1005               // long 567348268368001l
    6984: lastore
    6985: dup
    6986: sipush        212
    6989: ldc2_w        #1007               // long 567348268384256l
    6992: lastore
    6993: dup
    6994: sipush        213
    6997: ldc2_w        #1009               // long 567348268384257l
    7000: lastore
    7001: dup
    7002: sipush        214
    7005: ldc2_w        #1011               // long 567348268384384l
    7008: lastore
    7009: dup
    7010: sipush        215
    7013: ldc2_w        #1013               // long 567348268384385l
    7016: lastore
    7017: dup
    7018: sipush        216
    7021: ldc2_w        #1015               // long 567348270465024l
    7024: lastore
    7025: dup
    7026: sipush        217
    7029: ldc2_w        #1017               // long 567348270465025l
    7032: lastore
    7033: dup
    7034: sipush        218
    7037: ldc2_w        #1019               // long 567348270465152l
    7040: lastore
    7041: dup
    7042: sipush        219
    7045: ldc2_w        #1021               // long 567348270465153l
    7048: lastore
    7049: dup
    7050: sipush        220
    7053: ldc2_w        #1023               // long 567348270481408l
    7056: lastore
    7057: dup
    7058: sipush        221
    7061: ldc2_w        #1025               // long 567348270481409l
    7064: lastore
    7065: dup
    7066: sipush        222
    7069: ldc2_w        #1027               // long 567348270481536l
    7072: lastore
    7073: dup
    7074: sipush        223
    7077: ldc2_w        #1029               // long 567348270481537l
    7080: lastore
    7081: dup
    7082: sipush        224
    7085: ldc2_w        #1031               // long 567382359670784l
    7088: lastore
    7089: dup
    7090: sipush        225
    7093: ldc2_w        #1033               // long 567382359670785l
    7096: lastore
    7097: dup
    7098: sipush        226
    7101: ldc2_w        #1035               // long 567382359670912l
    7104: lastore
    7105: dup
    7106: sipush        227
    7109: ldc2_w        #1037               // long 567382359670913l
    7112: lastore
    7113: dup
    7114: sipush        228
    7117: ldc2_w        #1039               // long 567382359687168l
    7120: lastore
    7121: dup
    7122: sipush        229
    7125: ldc2_w        #1041               // long 567382359687169l
    7128: lastore
    7129: dup
    7130: sipush        230
    7133: ldc2_w        #1043               // long 567382359687296l
    7136: lastore
    7137: dup
    7138: sipush        231
    7141: ldc2_w        #1045               // long 567382359687297l
    7144: lastore
    7145: dup
    7146: sipush        232
    7149: ldc2_w        #1047               // long 567382361767936l
    7152: lastore
    7153: dup
    7154: sipush        233
    7157: ldc2_w        #1049               // long 567382361767937l
    7160: lastore
    7161: dup
    7162: sipush        234
    7165: ldc2_w        #1051               // long 567382361768064l
    7168: lastore
    7169: dup
    7170: sipush        235
    7173: ldc2_w        #1053               // long 567382361768065l
    7176: lastore
    7177: dup
    7178: sipush        236
    7181: ldc2_w        #1055               // long 567382361784320l
    7184: lastore
    7185: dup
    7186: sipush        237
    7189: ldc2_w        #1057               // long 567382361784321l
    7192: lastore
    7193: dup
    7194: sipush        238
    7197: ldc2_w        #1059               // long 567382361784448l
    7200: lastore
    7201: dup
    7202: sipush        239
    7205: ldc2_w        #1061               // long 567382361784449l
    7208: lastore
    7209: dup
    7210: sipush        240
    7213: ldc2_w        #1063               // long 567382628106240l
    7216: lastore
    7217: dup
    7218: sipush        241
    7221: ldc2_w        #1065               // long 567382628106241l
    7224: lastore
    7225: dup
    7226: sipush        242
    7229: ldc2_w        #1067               // long 567382628106368l
    7232: lastore
    7233: dup
    7234: sipush        243
    7237: ldc2_w        #1069               // long 567382628106369l
    7240: lastore
    7241: dup
    7242: sipush        244
    7245: ldc2_w        #1071               // long 567382628122624l
    7248: lastore
    7249: dup
    7250: sipush        245
    7253: ldc2_w        #1073               // long 567382628122625l
    7256: lastore
    7257: dup
    7258: sipush        246
    7261: ldc2_w        #1075               // long 567382628122752l
    7264: lastore
    7265: dup
    7266: sipush        247
    7269: ldc2_w        #1077               // long 567382628122753l
    7272: lastore
    7273: dup
    7274: sipush        248
    7277: ldc2_w        #1079               // long 567382630203392l
    7280: lastore
    7281: dup
    7282: sipush        249
    7285: ldc2_w        #1081               // long 567382630203393l
    7288: lastore
    7289: dup
    7290: sipush        250
    7293: ldc2_w        #1083               // long 567382630203520l
    7296: lastore
    7297: dup
    7298: sipush        251
    7301: ldc2_w        #1085               // long 567382630203521l
    7304: lastore
    7305: dup
    7306: sipush        252
    7309: ldc2_w        #1087               // long 567382630219776l
    7312: lastore
    7313: dup
    7314: sipush        253
    7317: ldc2_w        #1089               // long 567382630219777l
    7320: lastore
    7321: dup
    7322: sipush        254
    7325: ldc2_w        #1091               // long 567382630219904l
    7328: lastore
    7329: dup
    7330: sipush        255
    7333: ldc2_w        #1093               // long 567382630219905l
    7336: lastore
    7337: dup
    7338: sipush        256
    7341: ldc2_w        #1095               // long 72057594037927936l
    7344: lastore
    7345: dup
    7346: sipush        257
    7349: ldc2_w        #1097               // long 72057594037927937l
    7352: lastore
    7353: dup
    7354: sipush        258
    7357: ldc2_w        #1099               // long 72057594037928064l
    7360: lastore
    7361: dup
    7362: sipush        259
    7365: ldc2_w        #1101               // long 72057594037928065l
    7368: lastore
    7369: dup
    7370: sipush        260
    7373: ldc2_w        #1103               // long 72057594037944320l
    7376: lastore
    7377: dup
    7378: sipush        261
    7381: ldc2_w        #1105               // long 72057594037944321l
    7384: lastore
    7385: dup
    7386: sipush        262
    7389: ldc2_w        #1107               // long 72057594037944448l
    7392: lastore
    7393: dup
    7394: sipush        263
    7397: ldc2_w        #1109               // long 72057594037944449l
    7400: lastore
    7401: dup
    7402: sipush        264
    7405: ldc2_w        #1111               // long 72057594040025088l
    7408: lastore
    7409: dup
    7410: sipush        265
    7413: ldc2_w        #1113               // long 72057594040025089l
    7416: lastore
    7417: dup
    7418: sipush        266
    7421: ldc2_w        #1115               // long 72057594040025216l
    7424: lastore
    7425: dup
    7426: sipush        267
    7429: ldc2_w        #1117               // long 72057594040025217l
    7432: lastore
    7433: dup
    7434: sipush        268
    7437: ldc2_w        #1119               // long 72057594040041472l
    7440: lastore
    7441: dup
    7442: sipush        269
    7445: ldc2_w        #1121               // long 72057594040041473l
    7448: lastore
    7449: dup
    7450: sipush        270
    7453: ldc2_w        #1123               // long 72057594040041600l
    7456: lastore
    7457: dup
    7458: sipush        271
    7461: ldc2_w        #1125               // long 72057594040041601l
    7464: lastore
    7465: dup
    7466: sipush        272
    7469: ldc2_w        #1127               // long 72057594306363392l
    7472: lastore
    7473: dup
    7474: sipush        273
    7477: ldc2_w        #1129               // long 72057594306363393l
    7480: lastore
    7481: dup
    7482: sipush        274
    7485: ldc2_w        #1131               // long 72057594306363520l
    7488: lastore
    7489: dup
    7490: sipush        275
    7493: ldc2_w        #1133               // long 72057594306363521l
    7496: lastore
    7497: dup
    7498: sipush        276
    7501: ldc2_w        #1135               // long 72057594306379776l
    7504: lastore
    7505: dup
    7506: sipush        277
    7509: ldc2_w        #1137               // long 72057594306379777l
    7512: lastore
    7513: dup
    7514: sipush        278
    7517: ldc2_w        #1139               // long 72057594306379904l
    7520: lastore
    7521: dup
    7522: sipush        279
    7525: ldc2_w        #1141               // long 72057594306379905l
    7528: lastore
    7529: dup
    7530: sipush        280
    7533: ldc2_w        #1143               // long 72057594308460544l
    7536: lastore
    7537: dup
    7538: sipush        281
    7541: ldc2_w        #1145               // long 72057594308460545l
    7544: lastore
    7545: dup
    7546: sipush        282
    7549: ldc2_w        #1147               // long 72057594308460672l
    7552: lastore
    7553: dup
    7554: sipush        283
    7557: ldc2_w        #1149               // long 72057594308460673l
    7560: lastore
    7561: dup
    7562: sipush        284
    7565: ldc2_w        #1151               // long 72057594308476928l
    7568: lastore
    7569: dup
    7570: sipush        285
    7573: ldc2_w        #1153               // long 72057594308476929l
    7576: lastore
    7577: dup
    7578: sipush        286
    7581: ldc2_w        #1155               // long 72057594308477056l
    7584: lastore
    7585: dup
    7586: sipush        287
    7589: ldc2_w        #1157               // long 72057594308477057l
    7592: lastore
    7593: dup
    7594: sipush        288
    7597: ldc2_w        #1159               // long 72057628397666304l
    7600: lastore
    7601: dup
    7602: sipush        289
    7605: ldc2_w        #1161               // long 72057628397666305l
    7608: lastore
    7609: dup
    7610: sipush        290
    7613: ldc2_w        #1163               // long 72057628397666432l
    7616: lastore
    7617: dup
    7618: sipush        291
    7621: ldc2_w        #1165               // long 72057628397666433l
    7624: lastore
    7625: dup
    7626: sipush        292
    7629: ldc2_w        #1167               // long 72057628397682688l
    7632: lastore
    7633: dup
    7634: sipush        293
    7637: ldc2_w        #1169               // long 72057628397682689l
    7640: lastore
    7641: dup
    7642: sipush        294
    7645: ldc2_w        #1171               // long 72057628397682816l
    7648: lastore
    7649: dup
    7650: sipush        295
    7653: ldc2_w        #1173               // long 72057628397682817l
    7656: lastore
    7657: dup
    7658: sipush        296
    7661: ldc2_w        #1175               // long 72057628399763456l
    7664: lastore
    7665: dup
    7666: sipush        297
    7669: ldc2_w        #1177               // long 72057628399763457l
    7672: lastore
    7673: dup
    7674: sipush        298
    7677: ldc2_w        #1179               // long 72057628399763584l
    7680: lastore
    7681: dup
    7682: sipush        299
    7685: ldc2_w        #1181               // long 72057628399763585l
    7688: lastore
    7689: dup
    7690: sipush        300
    7693: ldc2_w        #1183               // long 72057628399779840l
    7696: lastore
    7697: dup
    7698: sipush        301
    7701: ldc2_w        #1185               // long 72057628399779841l
    7704: lastore
    7705: dup
    7706: sipush        302
    7709: ldc2_w        #1187               // long 72057628399779968l
    7712: lastore
    7713: dup
    7714: sipush        303
    7717: ldc2_w        #1189               // long 72057628399779969l
    7720: lastore
    7721: dup
    7722: sipush        304
    7725: ldc2_w        #1191               // long 72057628666101760l
    7728: lastore
    7729: dup
    7730: sipush        305
    7733: ldc2_w        #1193               // long 72057628666101761l
    7736: lastore
    7737: dup
    7738: sipush        306
    7741: ldc2_w        #1195               // long 72057628666101888l
    7744: lastore
    7745: dup
    7746: sipush        307
    7749: ldc2_w        #1197               // long 72057628666101889l
    7752: lastore
    7753: dup
    7754: sipush        308
    7757: ldc2_w        #1199               // long 72057628666118144l
    7760: lastore
    7761: dup
    7762: sipush        309
    7765: ldc2_w        #1201               // long 72057628666118145l
    7768: lastore
    7769: dup
    7770: sipush        310
    7773: ldc2_w        #1203               // long 72057628666118272l
    7776: lastore
    7777: dup
    7778: sipush        311
    7781: ldc2_w        #1205               // long 72057628666118273l
    7784: lastore
    7785: dup
    7786: sipush        312
    7789: ldc2_w        #1207               // long 72057628668198912l
    7792: lastore
    7793: dup
    7794: sipush        313
    7797: ldc2_w        #1209               // long 72057628668198913l
    7800: lastore
    7801: dup
    7802: sipush        314
    7805: ldc2_w        #1211               // long 72057628668199040l
    7808: lastore
    7809: dup
    7810: sipush        315
    7813: ldc2_w        #1213               // long 72057628668199041l
    7816: lastore
    7817: dup
    7818: sipush        316
    7821: ldc2_w        #1215               // long 72057628668215296l
    7824: lastore
    7825: dup
    7826: sipush        317
    7829: ldc2_w        #1217               // long 72057628668215297l
    7832: lastore
    7833: dup
    7834: sipush        318
    7837: ldc2_w        #1219               // long 72057628668215424l
    7840: lastore
    7841: dup
    7842: sipush        319
    7845: ldc2_w        #1221               // long 72057628668215425l
    7848: lastore
    7849: dup
    7850: sipush        320
    7853: ldc2_w        #1223               // long 72061992084439040l
    7856: lastore
    7857: dup
    7858: sipush        321
    7861: ldc2_w        #1225               // long 72061992084439041l
    7864: lastore
    7865: dup
    7866: sipush        322
    7869: ldc2_w        #1227               // long 72061992084439168l
    7872: lastore
    7873: dup
    7874: sipush        323
    7877: ldc2_w        #1229               // long 72061992084439169l
    7880: lastore
    7881: dup
    7882: sipush        324
    7885: ldc2_w        #1231               // long 72061992084455424l
    7888: lastore
    7889: dup
    7890: sipush        325
    7893: ldc2_w        #1233               // long 72061992084455425l
    7896: lastore
    7897: dup
    7898: sipush        326
    7901: ldc2_w        #1235               // long 72061992084455552l
    7904: lastore
    7905: dup
    7906: sipush        327
    7909: ldc2_w        #1237               // long 72061992084455553l
    7912: lastore
    7913: dup
    7914: sipush        328
    7917: ldc2_w        #1239               // long 72061992086536192l
    7920: lastore
    7921: dup
    7922: sipush        329
    7925: ldc2_w        #1241               // long 72061992086536193l
    7928: lastore
    7929: dup
    7930: sipush        330
    7933: ldc2_w        #1243               // long 72061992086536320l
    7936: lastore
    7937: dup
    7938: sipush        331
    7941: ldc2_w        #1245               // long 72061992086536321l
    7944: lastore
    7945: dup
    7946: sipush        332
    7949: ldc2_w        #1247               // long 72061992086552576l
    7952: lastore
    7953: dup
    7954: sipush        333
    7957: ldc2_w        #1249               // long 72061992086552577l
    7960: lastore
    7961: dup
    7962: sipush        334
    7965: ldc2_w        #1251               // long 72061992086552704l
    7968: lastore
    7969: dup
    7970: sipush        335
    7973: ldc2_w        #1253               // long 72061992086552705l
    7976: lastore
    7977: dup
    7978: sipush        336
    7981: ldc2_w        #1255               // long 72061992352874496l
    7984: lastore
    7985: dup
    7986: sipush        337
    7989: ldc2_w        #1257               // long 72061992352874497l
    7992: lastore
    7993: dup
    7994: sipush        338
    7997: ldc2_w        #1259               // long 72061992352874624l
    8000: lastore
    8001: dup
    8002: sipush        339
    8005: ldc2_w        #1261               // long 72061992352874625l
    8008: lastore
    8009: dup
    8010: sipush        340
    8013: ldc2_w        #1263               // long 72061992352890880l
    8016: lastore
    8017: dup
    8018: sipush        341
    8021: ldc2_w        #1265               // long 72061992352890881l
    8024: lastore
    8025: dup
    8026: sipush        342
    8029: ldc2_w        #1267               // long 72061992352891008l
    8032: lastore
    8033: dup
    8034: sipush        343
    8037: ldc2_w        #1269               // long 72061992352891009l
    8040: lastore
    8041: dup
    8042: sipush        344
    8045: ldc2_w        #1271               // long 72061992354971648l
    8048: lastore
    8049: dup
    8050: sipush        345
    8053: ldc2_w        #1273               // long 72061992354971649l
    8056: lastore
    8057: dup
    8058: sipush        346
    8061: ldc2_w        #1275               // long 72061992354971776l
    8064: lastore
    8065: dup
    8066: sipush        347
    8069: ldc2_w        #1277               // long 72061992354971777l
    8072: lastore
    8073: dup
    8074: sipush        348
    8077: ldc2_w        #1279               // long 72061992354988032l
    8080: lastore
    8081: dup
    8082: sipush        349
    8085: ldc2_w        #1281               // long 72061992354988033l
    8088: lastore
    8089: dup
    8090: sipush        350
    8093: ldc2_w        #1283               // long 72061992354988160l
    8096: lastore
    8097: dup
    8098: sipush        351
    8101: ldc2_w        #1285               // long 72061992354988161l
    8104: lastore
    8105: dup
    8106: sipush        352
    8109: ldc2_w        #1287               // long 72062026444177408l
    8112: lastore
    8113: dup
    8114: sipush        353
    8117: ldc2_w        #1289               // long 72062026444177409l
    8120: lastore
    8121: dup
    8122: sipush        354
    8125: ldc2_w        #1291               // long 72062026444177536l
    8128: lastore
    8129: dup
    8130: sipush        355
    8133: ldc2_w        #1293               // long 72062026444177537l
    8136: lastore
    8137: dup
    8138: sipush        356
    8141: ldc2_w        #1295               // long 72062026444193792l
    8144: lastore
    8145: dup
    8146: sipush        357
    8149: ldc2_w        #1297               // long 72062026444193793l
    8152: lastore
    8153: dup
    8154: sipush        358
    8157: ldc2_w        #1299               // long 72062026444193920l
    8160: lastore
    8161: dup
    8162: sipush        359
    8165: ldc2_w        #1301               // long 72062026444193921l
    8168: lastore
    8169: dup
    8170: sipush        360
    8173: ldc2_w        #1303               // long 72062026446274560l
    8176: lastore
    8177: dup
    8178: sipush        361
    8181: ldc2_w        #1305               // long 72062026446274561l
    8184: lastore
    8185: dup
    8186: sipush        362
    8189: ldc2_w        #1307               // long 72062026446274688l
    8192: lastore
    8193: dup
    8194: sipush        363
    8197: ldc2_w        #1309               // long 72062026446274689l
    8200: lastore
    8201: dup
    8202: sipush        364
    8205: ldc2_w        #1311               // long 72062026446290944l
    8208: lastore
    8209: dup
    8210: sipush        365
    8213: ldc2_w        #1313               // long 72062026446290945l
    8216: lastore
    8217: dup
    8218: sipush        366
    8221: ldc2_w        #1315               // long 72062026446291072l
    8224: lastore
    8225: dup
    8226: sipush        367
    8229: ldc2_w        #1317               // long 72062026446291073l
    8232: lastore
    8233: dup
    8234: sipush        368
    8237: ldc2_w        #1319               // long 72062026712612864l
    8240: lastore
    8241: dup
    8242: sipush        369
    8245: ldc2_w        #1321               // long 72062026712612865l
    8248: lastore
    8249: dup
    8250: sipush        370
    8253: ldc2_w        #1323               // long 72062026712612992l
    8256: lastore
    8257: dup
    8258: sipush        371
    8261: ldc2_w        #1325               // long 72062026712612993l
    8264: lastore
    8265: dup
    8266: sipush        372
    8269: ldc2_w        #1327               // long 72062026712629248l
    8272: lastore
    8273: dup
    8274: sipush        373
    8277: ldc2_w        #1329               // long 72062026712629249l
    8280: lastore
    8281: dup
    8282: sipush        374
    8285: ldc2_w        #1331               // long 72062026712629376l
    8288: lastore
    8289: dup
    8290: sipush        375
    8293: ldc2_w        #1333               // long 72062026712629377l
    8296: lastore
    8297: dup
    8298: sipush        376
    8301: ldc2_w        #1335               // long 72062026714710016l
    8304: lastore
    8305: dup
    8306: sipush        377
    8309: ldc2_w        #1337               // long 72062026714710017l
    8312: lastore
    8313: dup
    8314: sipush        378
    8317: ldc2_w        #1339               // long 72062026714710144l
    8320: lastore
    8321: dup
    8322: sipush        379
    8325: ldc2_w        #1341               // long 72062026714710145l
    8328: lastore
    8329: dup
    8330: sipush        380
    8333: ldc2_w        #1343               // long 72062026714726400l
    8336: lastore
    8337: dup
    8338: sipush        381
    8341: ldc2_w        #1345               // long 72062026714726401l
    8344: lastore
    8345: dup
    8346: sipush        382
    8349: ldc2_w        #1347               // long 72062026714726528l
    8352: lastore
    8353: dup
    8354: sipush        383
    8357: ldc2_w        #1349               // long 72062026714726529l
    8360: lastore
    8361: dup
    8362: sipush        384
    8365: ldc2_w        #1351               // long 72620543991349248l
    8368: lastore
    8369: dup
    8370: sipush        385
    8373: ldc2_w        #1353               // long 72620543991349249l
    8376: lastore
    8377: dup
    8378: sipush        386
    8381: ldc2_w        #1355               // long 72620543991349376l
    8384: lastore
    8385: dup
    8386: sipush        387
    8389: ldc2_w        #1357               // long 72620543991349377l
    8392: lastore
    8393: dup
    8394: sipush        388
    8397: ldc2_w        #1359               // long 72620543991365632l
    8400: lastore
    8401: dup
    8402: sipush        389
    8405: ldc2_w        #1361               // long 72620543991365633l
    8408: lastore
    8409: dup
    8410: sipush        390
    8413: ldc2_w        #1363               // long 72620543991365760l
    8416: lastore
    8417: dup
    8418: sipush        391
    8421: ldc2_w        #1365               // long 72620543991365761l
    8424: lastore
    8425: dup
    8426: sipush        392
    8429: ldc2_w        #1367               // long 72620543993446400l
    8432: lastore
    8433: dup
    8434: sipush        393
    8437: ldc2_w        #1369               // long 72620543993446401l
    8440: lastore
    8441: dup
    8442: sipush        394
    8445: ldc2_w        #1371               // long 72620543993446528l
    8448: lastore
    8449: dup
    8450: sipush        395
    8453: ldc2_w        #1373               // long 72620543993446529l
    8456: lastore
    8457: dup
    8458: sipush        396
    8461: ldc2_w        #1375               // long 72620543993462784l
    8464: lastore
    8465: dup
    8466: sipush        397
    8469: ldc2_w        #1377               // long 72620543993462785l
    8472: lastore
    8473: dup
    8474: sipush        398
    8477: ldc2_w        #1379               // long 72620543993462912l
    8480: lastore
    8481: dup
    8482: sipush        399
    8485: ldc2_w        #1381               // long 72620543993462913l
    8488: lastore
    8489: dup
    8490: sipush        400
    8493: ldc2_w        #1383               // long 72620544259784704l
    8496: lastore
    8497: dup
    8498: sipush        401
    8501: ldc2_w        #1385               // long 72620544259784705l
    8504: lastore
    8505: dup
    8506: sipush        402
    8509: ldc2_w        #1387               // long 72620544259784832l
    8512: lastore
    8513: dup
    8514: sipush        403
    8517: ldc2_w        #1389               // long 72620544259784833l
    8520: lastore
    8521: dup
    8522: sipush        404
    8525: ldc2_w        #1391               // long 72620544259801088l
    8528: lastore
    8529: dup
    8530: sipush        405
    8533: ldc2_w        #1393               // long 72620544259801089l
    8536: lastore
    8537: dup
    8538: sipush        406
    8541: ldc2_w        #1395               // long 72620544259801216l
    8544: lastore
    8545: dup
    8546: sipush        407
    8549: ldc2_w        #1397               // long 72620544259801217l
    8552: lastore
    8553: dup
    8554: sipush        408
    8557: ldc2_w        #1399               // long 72620544261881856l
    8560: lastore
    8561: dup
    8562: sipush        409
    8565: ldc2_w        #1401               // long 72620544261881857l
    8568: lastore
    8569: dup
    8570: sipush        410
    8573: ldc2_w        #1403               // long 72620544261881984l
    8576: lastore
    8577: dup
    8578: sipush        411
    8581: ldc2_w        #1405               // long 72620544261881985l
    8584: lastore
    8585: dup
    8586: sipush        412
    8589: ldc2_w        #1407               // long 72620544261898240l
    8592: lastore
    8593: dup
    8594: sipush        413
    8597: ldc2_w        #1409               // long 72620544261898241l
    8600: lastore
    8601: dup
    8602: sipush        414
    8605: ldc2_w        #1411               // long 72620544261898368l
    8608: lastore
    8609: dup
    8610: sipush        415
    8613: ldc2_w        #1413               // long 72620544261898369l
    8616: lastore
    8617: dup
    8618: sipush        416
    8621: ldc2_w        #1415               // long 72620578351087616l
    8624: lastore
    8625: dup
    8626: sipush        417
    8629: ldc2_w        #1417               // long 72620578351087617l
    8632: lastore
    8633: dup
    8634: sipush        418
    8637: ldc2_w        #1419               // long 72620578351087744l
    8640: lastore
    8641: dup
    8642: sipush        419
    8645: ldc2_w        #1421               // long 72620578351087745l
    8648: lastore
    8649: dup
    8650: sipush        420
    8653: ldc2_w        #1423               // long 72620578351104000l
    8656: lastore
    8657: dup
    8658: sipush        421
    8661: ldc2_w        #1425               // long 72620578351104001l
    8664: lastore
    8665: dup
    8666: sipush        422
    8669: ldc2_w        #1427               // long 72620578351104128l
    8672: lastore
    8673: dup
    8674: sipush        423
    8677: ldc2_w        #1429               // long 72620578351104129l
    8680: lastore
    8681: dup
    8682: sipush        424
    8685: ldc2_w        #1431               // long 72620578353184768l
    8688: lastore
    8689: dup
    8690: sipush        425
    8693: ldc2_w        #1433               // long 72620578353184769l
    8696: lastore
    8697: dup
    8698: sipush        426
    8701: ldc2_w        #1435               // long 72620578353184896l
    8704: lastore
    8705: dup
    8706: sipush        427
    8709: ldc2_w        #1437               // long 72620578353184897l
    8712: lastore
    8713: dup
    8714: sipush        428
    8717: ldc2_w        #1439               // long 72620578353201152l
    8720: lastore
    8721: dup
    8722: sipush        429
    8725: ldc2_w        #1441               // long 72620578353201153l
    8728: lastore
    8729: dup
    8730: sipush        430
    8733: ldc2_w        #1443               // long 72620578353201280l
    8736: lastore
    8737: dup
    8738: sipush        431
    8741: ldc2_w        #1445               // long 72620578353201281l
    8744: lastore
    8745: dup
    8746: sipush        432
    8749: ldc2_w        #1447               // long 72620578619523072l
    8752: lastore
    8753: dup
    8754: sipush        433
    8757: ldc2_w        #1449               // long 72620578619523073l
    8760: lastore
    8761: dup
    8762: sipush        434
    8765: ldc2_w        #1451               // long 72620578619523200l
    8768: lastore
    8769: dup
    8770: sipush        435
    8773: ldc2_w        #1453               // long 72620578619523201l
    8776: lastore
    8777: dup
    8778: sipush        436
    8781: ldc2_w        #1455               // long 72620578619539456l
    8784: lastore
    8785: dup
    8786: sipush        437
    8789: ldc2_w        #1457               // long 72620578619539457l
    8792: lastore
    8793: dup
    8794: sipush        438
    8797: ldc2_w        #1459               // long 72620578619539584l
    8800: lastore
    8801: dup
    8802: sipush        439
    8805: ldc2_w        #1461               // long 72620578619539585l
    8808: lastore
    8809: dup
    8810: sipush        440
    8813: ldc2_w        #1463               // long 72620578621620224l
    8816: lastore
    8817: dup
    8818: sipush        441
    8821: ldc2_w        #1465               // long 72620578621620225l
    8824: lastore
    8825: dup
    8826: sipush        442
    8829: ldc2_w        #1467               // long 72620578621620352l
    8832: lastore
    8833: dup
    8834: sipush        443
    8837: ldc2_w        #1469               // long 72620578621620353l
    8840: lastore
    8841: dup
    8842: sipush        444
    8845: ldc2_w        #1471               // long 72620578621636608l
    8848: lastore
    8849: dup
    8850: sipush        445
    8853: ldc2_w        #1473               // long 72620578621636609l
    8856: lastore
    8857: dup
    8858: sipush        446
    8861: ldc2_w        #1475               // long 72620578621636736l
    8864: lastore
    8865: dup
    8866: sipush        447
    8869: ldc2_w        #1477               // long 72620578621636737l
    8872: lastore
    8873: dup
    8874: sipush        448
    8877: ldc2_w        #1479               // long 72624942037860352l
    8880: lastore
    8881: dup
    8882: sipush        449
    8885: ldc2_w        #1481               // long 72624942037860353l
    8888: lastore
    8889: dup
    8890: sipush        450
    8893: ldc2_w        #1483               // long 72624942037860480l
    8896: lastore
    8897: dup
    8898: sipush        451
    8901: ldc2_w        #1485               // long 72624942037860481l
    8904: lastore
    8905: dup
    8906: sipush        452
    8909: ldc2_w        #1487               // long 72624942037876736l
    8912: lastore
    8913: dup
    8914: sipush        453
    8917: ldc2_w        #1489               // long 72624942037876737l
    8920: lastore
    8921: dup
    8922: sipush        454
    8925: ldc2_w        #1491               // long 72624942037876864l
    8928: lastore
    8929: dup
    8930: sipush        455
    8933: ldc2_w        #1493               // long 72624942037876865l
    8936: lastore
    8937: dup
    8938: sipush        456
    8941: ldc2_w        #1495               // long 72624942039957504l
    8944: lastore
    8945: dup
    8946: sipush        457
    8949: ldc2_w        #1497               // long 72624942039957505l
    8952: lastore
    8953: dup
    8954: sipush        458
    8957: ldc2_w        #1499               // long 72624942039957632l
    8960: lastore
    8961: dup
    8962: sipush        459
    8965: ldc2_w        #1501               // long 72624942039957633l
    8968: lastore
    8969: dup
    8970: sipush        460
    8973: ldc2_w        #1503               // long 72624942039973888l
    8976: lastore
    8977: dup
    8978: sipush        461
    8981: ldc2_w        #1505               // long 72624942039973889l
    8984: lastore
    8985: dup
    8986: sipush        462
    8989: ldc2_w        #1507               // long 72624942039974016l
    8992: lastore
    8993: dup
    8994: sipush        463
    8997: ldc2_w        #1509               // long 72624942039974017l
    9000: lastore
    9001: dup
    9002: sipush        464
    9005: ldc2_w        #1511               // long 72624942306295808l
    9008: lastore
    9009: dup
    9010: sipush        465
    9013: ldc2_w        #1513               // long 72624942306295809l
    9016: lastore
    9017: dup
    9018: sipush        466
    9021: ldc2_w        #1515               // long 72624942306295936l
    9024: lastore
    9025: dup
    9026: sipush        467
    9029: ldc2_w        #1517               // long 72624942306295937l
    9032: lastore
    9033: dup
    9034: sipush        468
    9037: ldc2_w        #1519               // long 72624942306312192l
    9040: lastore
    9041: dup
    9042: sipush        469
    9045: ldc2_w        #1521               // long 72624942306312193l
    9048: lastore
    9049: dup
    9050: sipush        470
    9053: ldc2_w        #1523               // long 72624942306312320l
    9056: lastore
    9057: dup
    9058: sipush        471
    9061: ldc2_w        #1525               // long 72624942306312321l
    9064: lastore
    9065: dup
    9066: sipush        472
    9069: ldc2_w        #1527               // long 72624942308392960l
    9072: lastore
    9073: dup
    9074: sipush        473
    9077: ldc2_w        #1529               // long 72624942308392961l
    9080: lastore
    9081: dup
    9082: sipush        474
    9085: ldc2_w        #1531               // long 72624942308393088l
    9088: lastore
    9089: dup
    9090: sipush        475
    9093: ldc2_w        #1533               // long 72624942308393089l
    9096: lastore
    9097: dup
    9098: sipush        476
    9101: ldc2_w        #1535               // long 72624942308409344l
    9104: lastore
    9105: dup
    9106: sipush        477
    9109: ldc2_w        #1537               // long 72624942308409345l
    9112: lastore
    9113: dup
    9114: sipush        478
    9117: ldc2_w        #1539               // long 72624942308409472l
    9120: lastore
    9121: dup
    9122: sipush        479
    9125: ldc2_w        #1541               // long 72624942308409473l
    9128: lastore
    9129: dup
    9130: sipush        480
    9133: ldc2_w        #1543               // long 72624976397598720l
    9136: lastore
    9137: dup
    9138: sipush        481
    9141: ldc2_w        #1545               // long 72624976397598721l
    9144: lastore
    9145: dup
    9146: sipush        482
    9149: ldc2_w        #1547               // long 72624976397598848l
    9152: lastore
    9153: dup
    9154: sipush        483
    9157: ldc2_w        #1549               // long 72624976397598849l
    9160: lastore
    9161: dup
    9162: sipush        484
    9165: ldc2_w        #1551               // long 72624976397615104l
    9168: lastore
    9169: dup
    9170: sipush        485
    9173: ldc2_w        #1553               // long 72624976397615105l
    9176: lastore
    9177: dup
    9178: sipush        486
    9181: ldc2_w        #1555               // long 72624976397615232l
    9184: lastore
    9185: dup
    9186: sipush        487
    9189: ldc2_w        #1557               // long 72624976397615233l
    9192: lastore
    9193: dup
    9194: sipush        488
    9197: ldc2_w        #1559               // long 72624976399695872l
    9200: lastore
    9201: dup
    9202: sipush        489
    9205: ldc2_w        #1561               // long 72624976399695873l
    9208: lastore
    9209: dup
    9210: sipush        490
    9213: ldc2_w        #1563               // long 72624976399696000l
    9216: lastore
    9217: dup
    9218: sipush        491
    9221: ldc2_w        #1565               // long 72624976399696001l
    9224: lastore
    9225: dup
    9226: sipush        492
    9229: ldc2_w        #1567               // long 72624976399712256l
    9232: lastore
    9233: dup
    9234: sipush        493
    9237: ldc2_w        #1569               // long 72624976399712257l
    9240: lastore
    9241: dup
    9242: sipush        494
    9245: ldc2_w        #1571               // long 72624976399712384l
    9248: lastore
    9249: dup
    9250: sipush        495
    9253: ldc2_w        #1573               // long 72624976399712385l
    9256: lastore
    9257: dup
    9258: sipush        496
    9261: ldc2_w        #1575               // long 72624976666034176l
    9264: lastore
    9265: dup
    9266: sipush        497
    9269: ldc2_w        #1577               // long 72624976666034177l
    9272: lastore
    9273: dup
    9274: sipush        498
    9277: ldc2_w        #1579               // long 72624976666034304l
    9280: lastore
    9281: dup
    9282: sipush        499
    9285: ldc2_w        #1581               // long 72624976666034305l
    9288: lastore
    9289: dup
    9290: sipush        500
    9293: ldc2_w        #1583               // long 72624976666050560l
    9296: lastore
    9297: dup
    9298: sipush        501
    9301: ldc2_w        #1585               // long 72624976666050561l
    9304: lastore
    9305: dup
    9306: sipush        502
    9309: ldc2_w        #1587               // long 72624976666050688l
    9312: lastore
    9313: dup
    9314: sipush        503
    9317: ldc2_w        #1589               // long 72624976666050689l
    9320: lastore
    9321: dup
    9322: sipush        504
    9325: ldc2_w        #1591               // long 72624976668131328l
    9328: lastore
    9329: dup
    9330: sipush        505
    9333: ldc2_w        #1593               // long 72624976668131329l
    9336: lastore
    9337: dup
    9338: sipush        506
    9341: ldc2_w        #1595               // long 72624976668131456l
    9344: lastore
    9345: dup
    9346: sipush        507
    9349: ldc2_w        #1597               // long 72624976668131457l
    9352: lastore
    9353: dup
    9354: sipush        508
    9357: ldc2_w        #1599               // long 72624976668147712l
    9360: lastore
    9361: dup
    9362: sipush        509
    9365: ldc2_w        #1601               // long 72624976668147713l
    9368: lastore
    9369: dup
    9370: sipush        510
    9373: ldc2_w        #1603               // long 72624976668147840l
    9376: lastore
    9377: dup
    9378: sipush        511
    9381: ldc2_w        #1605               // long 72624976668147841l
    9384: lastore
    9385: putstatic     #1711               // Field INTERLEAVE7_TABLE:[J
    9388: sipush        256
    9391: newarray       byte
    9393: dup
    9394: iconst_0
    9395: iconst_0
    9396: bastore
    9397: dup
    9398: iconst_1
    9399: iconst_1
    9400: bastore
    9401: dup
    9402: iconst_2
    9403: iconst_2
    9404: bastore
    9405: dup
    9406: iconst_3
    9407: iconst_2
    9408: bastore
    9409: dup
    9410: iconst_4
    9411: iconst_3
    9412: bastore
    9413: dup
    9414: iconst_5
    9415: iconst_3
    9416: bastore
    9417: dup
    9418: bipush        6
    9420: iconst_3
    9421: bastore
    9422: dup
    9423: bipush        7
    9425: iconst_3
    9426: bastore
    9427: dup
    9428: bipush        8
    9430: iconst_4
    9431: bastore
    9432: dup
    9433: bipush        9
    9435: iconst_4
    9436: bastore
    9437: dup
    9438: bipush        10
    9440: iconst_4
    9441: bastore
    9442: dup
    9443: bipush        11
    9445: iconst_4
    9446: bastore
    9447: dup
    9448: bipush        12
    9450: iconst_4
    9451: bastore
    9452: dup
    9453: bipush        13
    9455: iconst_4
    9456: bastore
    9457: dup
    9458: bipush        14
    9460: iconst_4
    9461: bastore
    9462: dup
    9463: bipush        15
    9465: iconst_4
    9466: bastore
    9467: dup
    9468: bipush        16
    9470: iconst_5
    9471: bastore
    9472: dup
    9473: bipush        17
    9475: iconst_5
    9476: bastore
    9477: dup
    9478: bipush        18
    9480: iconst_5
    9481: bastore
    9482: dup
    9483: bipush        19
    9485: iconst_5
    9486: bastore
    9487: dup
    9488: bipush        20
    9490: iconst_5
    9491: bastore
    9492: dup
    9493: bipush        21
    9495: iconst_5
    9496: bastore
    9497: dup
    9498: bipush        22
    9500: iconst_5
    9501: bastore
    9502: dup
    9503: bipush        23
    9505: iconst_5
    9506: bastore
    9507: dup
    9508: bipush        24
    9510: iconst_5
    9511: bastore
    9512: dup
    9513: bipush        25
    9515: iconst_5
    9516: bastore
    9517: dup
    9518: bipush        26
    9520: iconst_5
    9521: bastore
    9522: dup
    9523: bipush        27
    9525: iconst_5
    9526: bastore
    9527: dup
    9528: bipush        28
    9530: iconst_5
    9531: bastore
    9532: dup
    9533: bipush        29
    9535: iconst_5
    9536: bastore
    9537: dup
    9538: bipush        30
    9540: iconst_5
    9541: bastore
    9542: dup
    9543: bipush        31
    9545: iconst_5
    9546: bastore
    9547: dup
    9548: bipush        32
    9550: bipush        6
    9552: bastore
    9553: dup
    9554: bipush        33
    9556: bipush        6
    9558: bastore
    9559: dup
    9560: bipush        34
    9562: bipush        6
    9564: bastore
    9565: dup
    9566: bipush        35
    9568: bipush        6
    9570: bastore
    9571: dup
    9572: bipush        36
    9574: bipush        6
    9576: bastore
    9577: dup
    9578: bipush        37
    9580: bipush        6
    9582: bastore
    9583: dup
    9584: bipush        38
    9586: bipush        6
    9588: bastore
    9589: dup
    9590: bipush        39
    9592: bipush        6
    9594: bastore
    9595: dup
    9596: bipush        40
    9598: bipush        6
    9600: bastore
    9601: dup
    9602: bipush        41
    9604: bipush        6
    9606: bastore
    9607: dup
    9608: bipush        42
    9610: bipush        6
    9612: bastore
    9613: dup
    9614: bipush        43
    9616: bipush        6
    9618: bastore
    9619: dup
    9620: bipush        44
    9622: bipush        6
    9624: bastore
    9625: dup
    9626: bipush        45
    9628: bipush        6
    9630: bastore
    9631: dup
    9632: bipush        46
    9634: bipush        6
    9636: bastore
    9637: dup
    9638: bipush        47
    9640: bipush        6
    9642: bastore
    9643: dup
    9644: bipush        48
    9646: bipush        6
    9648: bastore
    9649: dup
    9650: bipush        49
    9652: bipush        6
    9654: bastore
    9655: dup
    9656: bipush        50
    9658: bipush        6
    9660: bastore
    9661: dup
    9662: bipush        51
    9664: bipush        6
    9666: bastore
    9667: dup
    9668: bipush        52
    9670: bipush        6
    9672: bastore
    9673: dup
    9674: bipush        53
    9676: bipush        6
    9678: bastore
    9679: dup
    9680: bipush        54
    9682: bipush        6
    9684: bastore
    9685: dup
    9686: bipush        55
    9688: bipush        6
    9690: bastore
    9691: dup
    9692: bipush        56
    9694: bipush        6
    9696: bastore
    9697: dup
    9698: bipush        57
    9700: bipush        6
    9702: bastore
    9703: dup
    9704: bipush        58
    9706: bipush        6
    9708: bastore
    9709: dup
    9710: bipush        59
    9712: bipush        6
    9714: bastore
    9715: dup
    9716: bipush        60
    9718: bipush        6
    9720: bastore
    9721: dup
    9722: bipush        61
    9724: bipush        6
    9726: bastore
    9727: dup
    9728: bipush        62
    9730: bipush        6
    9732: bastore
    9733: dup
    9734: bipush        63
    9736: bipush        6
    9738: bastore
    9739: dup
    9740: bipush        64
    9742: bipush        7
    9744: bastore
    9745: dup
    9746: bipush        65
    9748: bipush        7
    9750: bastore
    9751: dup
    9752: bipush        66
    9754: bipush        7
    9756: bastore
    9757: dup
    9758: bipush        67
    9760: bipush        7
    9762: bastore
    9763: dup
    9764: bipush        68
    9766: bipush        7
    9768: bastore
    9769: dup
    9770: bipush        69
    9772: bipush        7
    9774: bastore
    9775: dup
    9776: bipush        70
    9778: bipush        7
    9780: bastore
    9781: dup
    9782: bipush        71
    9784: bipush        7
    9786: bastore
    9787: dup
    9788: bipush        72
    9790: bipush        7
    9792: bastore
    9793: dup
    9794: bipush        73
    9796: bipush        7
    9798: bastore
    9799: dup
    9800: bipush        74
    9802: bipush        7
    9804: bastore
    9805: dup
    9806: bipush        75
    9808: bipush        7
    9810: bastore
    9811: dup
    9812: bipush        76
    9814: bipush        7
    9816: bastore
    9817: dup
    9818: bipush        77
    9820: bipush        7
    9822: bastore
    9823: dup
    9824: bipush        78
    9826: bipush        7
    9828: bastore
    9829: dup
    9830: bipush        79
    9832: bipush        7
    9834: bastore
    9835: dup
    9836: bipush        80
    9838: bipush        7
    9840: bastore
    9841: dup
    9842: bipush        81
    9844: bipush        7
    9846: bastore
    9847: dup
    9848: bipush        82
    9850: bipush        7
    9852: bastore
    9853: dup
    9854: bipush        83
    9856: bipush        7
    9858: bastore
    9859: dup
    9860: bipush        84
    9862: bipush        7
    9864: bastore
    9865: dup
    9866: bipush        85
    9868: bipush        7
    9870: bastore
    9871: dup
    9872: bipush        86
    9874: bipush        7
    9876: bastore
    9877: dup
    9878: bipush        87
    9880: bipush        7
    9882: bastore
    9883: dup
    9884: bipush        88
    9886: bipush        7
    9888: bastore
    9889: dup
    9890: bipush        89
    9892: bipush        7
    9894: bastore
    9895: dup
    9896: bipush        90
    9898: bipush        7
    9900: bastore
    9901: dup
    9902: bipush        91
    9904: bipush        7
    9906: bastore
    9907: dup
    9908: bipush        92
    9910: bipush        7
    9912: bastore
    9913: dup
    9914: bipush        93
    9916: bipush        7
    9918: bastore
    9919: dup
    9920: bipush        94
    9922: bipush        7
    9924: bastore
    9925: dup
    9926: bipush        95
    9928: bipush        7
    9930: bastore
    9931: dup
    9932: bipush        96
    9934: bipush        7
    9936: bastore
    9937: dup
    9938: bipush        97
    9940: bipush        7
    9942: bastore
    9943: dup
    9944: bipush        98
    9946: bipush        7
    9948: bastore
    9949: dup
    9950: bipush        99
    9952: bipush        7
    9954: bastore
    9955: dup
    9956: bipush        100
    9958: bipush        7
    9960: bastore
    9961: dup
    9962: bipush        101
    9964: bipush        7
    9966: bastore
    9967: dup
    9968: bipush        102
    9970: bipush        7
    9972: bastore
    9973: dup
    9974: bipush        103
    9976: bipush        7
    9978: bastore
    9979: dup
    9980: bipush        104
    9982: bipush        7
    9984: bastore
    9985: dup
    9986: bipush        105
    9988: bipush        7
    9990: bastore
    9991: dup
    9992: bipush        106
    9994: bipush        7
    9996: bastore
    9997: dup
    9998: bipush        107
    10000: bipush        7
    10002: bastore
    10003: dup
    10004: bipush        108
    10006: bipush        7
    10008: bastore
    10009: dup
    10010: bipush        109
    10012: bipush        7
    10014: bastore
    10015: dup
    10016: bipush        110
    10018: bipush        7
    10020: bastore
    10021: dup
    10022: bipush        111
    10024: bipush        7
    10026: bastore
    10027: dup
    10028: bipush        112
    10030: bipush        7
    10032: bastore
    10033: dup
    10034: bipush        113
    10036: bipush        7
    10038: bastore
    10039: dup
    10040: bipush        114
    10042: bipush        7
    10044: bastore
    10045: dup
    10046: bipush        115
    10048: bipush        7
    10050: bastore
    10051: dup
    10052: bipush        116
    10054: bipush        7
    10056: bastore
    10057: dup
    10058: bipush        117
    10060: bipush        7
    10062: bastore
    10063: dup
    10064: bipush        118
    10066: bipush        7
    10068: bastore
    10069: dup
    10070: bipush        119
    10072: bipush        7
    10074: bastore
    10075: dup
    10076: bipush        120
    10078: bipush        7
    10080: bastore
    10081: dup
    10082: bipush        121
    10084: bipush        7
    10086: bastore
    10087: dup
    10088: bipush        122
    10090: bipush        7
    10092: bastore
    10093: dup
    10094: bipush        123
    10096: bipush        7
    10098: bastore
    10099: dup
    10100: bipush        124
    10102: bipush        7
    10104: bastore
    10105: dup
    10106: bipush        125
    10108: bipush        7
    10110: bastore
    10111: dup
    10112: bipush        126
    10114: bipush        7
    10116: bastore
    10117: dup
    10118: bipush        127
    10120: bipush        7
    10122: bastore
    10123: dup
    10124: sipush        128
    10127: bipush        8
    10129: bastore
    10130: dup
    10131: sipush        129
    10134: bipush        8
    10136: bastore
    10137: dup
    10138: sipush        130
    10141: bipush        8
    10143: bastore
    10144: dup
    10145: sipush        131
    10148: bipush        8
    10150: bastore
    10151: dup
    10152: sipush        132
    10155: bipush        8
    10157: bastore
    10158: dup
    10159: sipush        133
    10162: bipush        8
    10164: bastore
    10165: dup
    10166: sipush        134
    10169: bipush        8
    10171: bastore
    10172: dup
    10173: sipush        135
    10176: bipush        8
    10178: bastore
    10179: dup
    10180: sipush        136
    10183: bipush        8
    10185: bastore
    10186: dup
    10187: sipush        137
    10190: bipush        8
    10192: bastore
    10193: dup
    10194: sipush        138
    10197: bipush        8
    10199: bastore
    10200: dup
    10201: sipush        139
    10204: bipush        8
    10206: bastore
    10207: dup
    10208: sipush        140
    10211: bipush        8
    10213: bastore
    10214: dup
    10215: sipush        141
    10218: bipush        8
    10220: bastore
    10221: dup
    10222: sipush        142
    10225: bipush        8
    10227: bastore
    10228: dup
    10229: sipush        143
    10232: bipush        8
    10234: bastore
    10235: dup
    10236: sipush        144
    10239: bipush        8
    10241: bastore
    10242: dup
    10243: sipush        145
    10246: bipush        8
    10248: bastore
    10249: dup
    10250: sipush        146
    10253: bipush        8
    10255: bastore
    10256: dup
    10257: sipush        147
    10260: bipush        8
    10262: bastore
    10263: dup
    10264: sipush        148
    10267: bipush        8
    10269: bastore
    10270: dup
    10271: sipush        149
    10274: bipush        8
    10276: bastore
    10277: dup
    10278: sipush        150
    10281: bipush        8
    10283: bastore
    10284: dup
    10285: sipush        151
    10288: bipush        8
    10290: bastore
    10291: dup
    10292: sipush        152
    10295: bipush        8
    10297: bastore
    10298: dup
    10299: sipush        153
    10302: bipush        8
    10304: bastore
    10305: dup
    10306: sipush        154
    10309: bipush        8
    10311: bastore
    10312: dup
    10313: sipush        155
    10316: bipush        8
    10318: bastore
    10319: dup
    10320: sipush        156
    10323: bipush        8
    10325: bastore
    10326: dup
    10327: sipush        157
    10330: bipush        8
    10332: bastore
    10333: dup
    10334: sipush        158
    10337: bipush        8
    10339: bastore
    10340: dup
    10341: sipush        159
    10344: bipush        8
    10346: bastore
    10347: dup
    10348: sipush        160
    10351: bipush        8
    10353: bastore
    10354: dup
    10355: sipush        161
    10358: bipush        8
    10360: bastore
    10361: dup
    10362: sipush        162
    10365: bipush        8
    10367: bastore
    10368: dup
    10369: sipush        163
    10372: bipush        8
    10374: bastore
    10375: dup
    10376: sipush        164
    10379: bipush        8
    10381: bastore
    10382: dup
    10383: sipush        165
    10386: bipush        8
    10388: bastore
    10389: dup
    10390: sipush        166
    10393: bipush        8
    10395: bastore
    10396: dup
    10397: sipush        167
    10400: bipush        8
    10402: bastore
    10403: dup
    10404: sipush        168
    10407: bipush        8
    10409: bastore
    10410: dup
    10411: sipush        169
    10414: bipush        8
    10416: bastore
    10417: dup
    10418: sipush        170
    10421: bipush        8
    10423: bastore
    10424: dup
    10425: sipush        171
    10428: bipush        8
    10430: bastore
    10431: dup
    10432: sipush        172
    10435: bipush        8
    10437: bastore
    10438: dup
    10439: sipush        173
    10442: bipush        8
    10444: bastore
    10445: dup
    10446: sipush        174
    10449: bipush        8
    10451: bastore
    10452: dup
    10453: sipush        175
    10456: bipush        8
    10458: bastore
    10459: dup
    10460: sipush        176
    10463: bipush        8
    10465: bastore
    10466: dup
    10467: sipush        177
    10470: bipush        8
    10472: bastore
    10473: dup
    10474: sipush        178
    10477: bipush        8
    10479: bastore
    10480: dup
    10481: sipush        179
    10484: bipush        8
    10486: bastore
    10487: dup
    10488: sipush        180
    10491: bipush        8
    10493: bastore
    10494: dup
    10495: sipush        181
    10498: bipush        8
    10500: bastore
    10501: dup
    10502: sipush        182
    10505: bipush        8
    10507: bastore
    10508: dup
    10509: sipush        183
    10512: bipush        8
    10514: bastore
    10515: dup
    10516: sipush        184
    10519: bipush        8
    10521: bastore
    10522: dup
    10523: sipush        185
    10526: bipush        8
    10528: bastore
    10529: dup
    10530: sipush        186
    10533: bipush        8
    10535: bastore
    10536: dup
    10537: sipush        187
    10540: bipush        8
    10542: bastore
    10543: dup
    10544: sipush        188
    10547: bipush        8
    10549: bastore
    10550: dup
    10551: sipush        189
    10554: bipush        8
    10556: bastore
    10557: dup
    10558: sipush        190
    10561: bipush        8
    10563: bastore
    10564: dup
    10565: sipush        191
    10568: bipush        8
    10570: bastore
    10571: dup
    10572: sipush        192
    10575: bipush        8
    10577: bastore
    10578: dup
    10579: sipush        193
    10582: bipush        8
    10584: bastore
    10585: dup
    10586: sipush        194
    10589: bipush        8
    10591: bastore
    10592: dup
    10593: sipush        195
    10596: bipush        8
    10598: bastore
    10599: dup
    10600: sipush        196
    10603: bipush        8
    10605: bastore
    10606: dup
    10607: sipush        197
    10610: bipush        8
    10612: bastore
    10613: dup
    10614: sipush        198
    10617: bipush        8
    10619: bastore
    10620: dup
    10621: sipush        199
    10624: bipush        8
    10626: bastore
    10627: dup
    10628: sipush        200
    10631: bipush        8
    10633: bastore
    10634: dup
    10635: sipush        201
    10638: bipush        8
    10640: bastore
    10641: dup
    10642: sipush        202
    10645: bipush        8
    10647: bastore
    10648: dup
    10649: sipush        203
    10652: bipush        8
    10654: bastore
    10655: dup
    10656: sipush        204
    10659: bipush        8
    10661: bastore
    10662: dup
    10663: sipush        205
    10666: bipush        8
    10668: bastore
    10669: dup
    10670: sipush        206
    10673: bipush        8
    10675: bastore
    10676: dup
    10677: sipush        207
    10680: bipush        8
    10682: bastore
    10683: dup
    10684: sipush        208
    10687: bipush        8
    10689: bastore
    10690: dup
    10691: sipush        209
    10694: bipush        8
    10696: bastore
    10697: dup
    10698: sipush        210
    10701: bipush        8
    10703: bastore
    10704: dup
    10705: sipush        211
    10708: bipush        8
    10710: bastore
    10711: dup
    10712: sipush        212
    10715: bipush        8
    10717: bastore
    10718: dup
    10719: sipush        213
    10722: bipush        8
    10724: bastore
    10725: dup
    10726: sipush        214
    10729: bipush        8
    10731: bastore
    10732: dup
    10733: sipush        215
    10736: bipush        8
    10738: bastore
    10739: dup
    10740: sipush        216
    10743: bipush        8
    10745: bastore
    10746: dup
    10747: sipush        217
    10750: bipush        8
    10752: bastore
    10753: dup
    10754: sipush        218
    10757: bipush        8
    10759: bastore
    10760: dup
    10761: sipush        219
    10764: bipush        8
    10766: bastore
    10767: dup
    10768: sipush        220
    10771: bipush        8
    10773: bastore
    10774: dup
    10775: sipush        221
    10778: bipush        8
    10780: bastore
    10781: dup
    10782: sipush        222
    10785: bipush        8
    10787: bastore
    10788: dup
    10789: sipush        223
    10792: bipush        8
    10794: bastore
    10795: dup
    10796: sipush        224
    10799: bipush        8
    10801: bastore
    10802: dup
    10803: sipush        225
    10806: bipush        8
    10808: bastore
    10809: dup
    10810: sipush        226
    10813: bipush        8
    10815: bastore
    10816: dup
    10817: sipush        227
    10820: bipush        8
    10822: bastore
    10823: dup
    10824: sipush        228
    10827: bipush        8
    10829: bastore
    10830: dup
    10831: sipush        229
    10834: bipush        8
    10836: bastore
    10837: dup
    10838: sipush        230
    10841: bipush        8
    10843: bastore
    10844: dup
    10845: sipush        231
    10848: bipush        8
    10850: bastore
    10851: dup
    10852: sipush        232
    10855: bipush        8
    10857: bastore
    10858: dup
    10859: sipush        233
    10862: bipush        8
    10864: bastore
    10865: dup
    10866: sipush        234
    10869: bipush        8
    10871: bastore
    10872: dup
    10873: sipush        235
    10876: bipush        8
    10878: bastore
    10879: dup
    10880: sipush        236
    10883: bipush        8
    10885: bastore
    10886: dup
    10887: sipush        237
    10890: bipush        8
    10892: bastore
    10893: dup
    10894: sipush        238
    10897: bipush        8
    10899: bastore
    10900: dup
    10901: sipush        239
    10904: bipush        8
    10906: bastore
    10907: dup
    10908: sipush        240
    10911: bipush        8
    10913: bastore
    10914: dup
    10915: sipush        241
    10918: bipush        8
    10920: bastore
    10921: dup
    10922: sipush        242
    10925: bipush        8
    10927: bastore
    10928: dup
    10929: sipush        243
    10932: bipush        8
    10934: bastore
    10935: dup
    10936: sipush        244
    10939: bipush        8
    10941: bastore
    10942: dup
    10943: sipush        245
    10946: bipush        8
    10948: bastore
    10949: dup
    10950: sipush        246
    10953: bipush        8
    10955: bastore
    10956: dup
    10957: sipush        247
    10960: bipush        8
    10962: bastore
    10963: dup
    10964: sipush        248
    10967: bipush        8
    10969: bastore
    10970: dup
    10971: sipush        249
    10974: bipush        8
    10976: bastore
    10977: dup
    10978: sipush        250
    10981: bipush        8
    10983: bastore
    10984: dup
    10985: sipush        251
    10988: bipush        8
    10990: bastore
    10991: dup
    10992: sipush        252
    10995: bipush        8
    10997: bastore
    10998: dup
    10999: sipush        253
    11002: bipush        8
    11004: bastore
    11005: dup
    11006: sipush        254
    11009: bipush        8
    11011: bastore
    11012: dup
    11013: sipush        255
    11016: bipush        8
    11018: bastore
    11019: putstatic     #1706              // Field bitLengths:[B
    11022: return
}
