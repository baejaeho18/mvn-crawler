Compiled from "JsonGenerator.java"
public abstract class com.fasterxml.jackson.core.JsonGenerator implements java.io.Closeable,java.io.Flushable,com.fasterxml.jackson.core.Versioned {
  protected com.fasterxml.jackson.core.PrettyPrinter _cfgPrettyPrinter;

  protected com.fasterxml.jackson.core.JsonGenerator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract com.fasterxml.jackson.core.JsonGenerator setCodec(com.fasterxml.jackson.core.ObjectCodec);

  public abstract com.fasterxml.jackson.core.ObjectCodec getCodec();

  public abstract com.fasterxml.jackson.core.Version version();

  public abstract com.fasterxml.jackson.core.JsonGenerator enable(com.fasterxml.jackson.core.JsonGenerator$Feature);

  public abstract com.fasterxml.jackson.core.JsonGenerator disable(com.fasterxml.jackson.core.JsonGenerator$Feature);

  public final com.fasterxml.jackson.core.JsonGenerator configure(com.fasterxml.jackson.core.JsonGenerator$Feature, boolean);
    Code:
       0: iload_2
       1: ifeq          13
       4: aload_0
       5: aload_1
       6: invokevirtual #2                  // Method enable:(Lcom/fasterxml/jackson/core/JsonGenerator$Feature;)Lcom/fasterxml/jackson/core/JsonGenerator;
       9: pop
      10: goto          19
      13: aload_0
      14: aload_1
      15: invokevirtual #3                  // Method disable:(Lcom/fasterxml/jackson/core/JsonGenerator$Feature;)Lcom/fasterxml/jackson/core/JsonGenerator;
      18: pop
      19: aload_0
      20: areturn

  public abstract boolean isEnabled(com.fasterxml.jackson.core.JsonGenerator$Feature);

  public abstract int getFeatureMask();

  public abstract com.fasterxml.jackson.core.JsonGenerator setFeatureMask(int);

  public com.fasterxml.jackson.core.JsonGenerator overrideStdFeatures(int, int);
    Code:
       0: aload_0
       1: invokevirtual #4                  // Method getFeatureMask:()I
       4: istore_3
       5: iload_3
       6: iload_2
       7: iconst_m1
       8: ixor
       9: iand
      10: iload_1
      11: iload_2
      12: iand
      13: ior
      14: istore        4
      16: aload_0
      17: iload         4
      19: invokevirtual #5                  // Method setFeatureMask:(I)Lcom/fasterxml/jackson/core/JsonGenerator;
      22: areturn

  public int getFormatFeatures();
    Code:
       0: iconst_0
       1: ireturn

  public com.fasterxml.jackson.core.JsonGenerator overrideFormatFeatures(int, int);
    Code:
       0: new           #6                  // class java/lang/IllegalArgumentException
       3: dup
       4: new           #7                  // class java/lang/StringBuilder
       7: dup
       8: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #9                  // String No FormatFeatures defined for generator of type
      13: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #12                 // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #14                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow

  public void setSchema(com.fasterxml.jackson.core.FormatSchema);
    Code:
       0: new           #15                 // class java/lang/UnsupportedOperationException
       3: dup
       4: new           #7                  // class java/lang/StringBuilder
       7: dup
       8: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #16                 // String Generator of type
      13: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #12                 // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: ldc           #17                 // String  does not support schema of type \'
      28: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_1
      32: invokeinterface #18,  1           // InterfaceMethod com/fasterxml/jackson/core/FormatSchema.getSchemaType:()Ljava/lang/String;
      37: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: ldc           #19                 // String \'
      42: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #20                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      51: athrow

  public com.fasterxml.jackson.core.FormatSchema getSchema();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.core.JsonGenerator setPrettyPrinter(com.fasterxml.jackson.core.PrettyPrinter);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field _cfgPrettyPrinter:Lcom/fasterxml/jackson/core/PrettyPrinter;
       5: aload_0
       6: areturn

  public com.fasterxml.jackson.core.PrettyPrinter getPrettyPrinter();
    Code:
       0: aload_0
       1: getfield      #21                 // Field _cfgPrettyPrinter:Lcom/fasterxml/jackson/core/PrettyPrinter;
       4: areturn

  public abstract com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter();

  public com.fasterxml.jackson.core.JsonGenerator setHighestNonEscapedChar(int);
    Code:
       0: aload_0
       1: areturn

  public int getHighestEscapedChar();
    Code:
       0: iconst_0
       1: ireturn

  public com.fasterxml.jackson.core.io.CharacterEscapes getCharacterEscapes();
    Code:
       0: aconst_null
       1: areturn

  public com.fasterxml.jackson.core.JsonGenerator setCharacterEscapes(com.fasterxml.jackson.core.io.CharacterEscapes);
    Code:
       0: aload_0
       1: areturn

  public com.fasterxml.jackson.core.JsonGenerator setRootValueSeparator(com.fasterxml.jackson.core.SerializableString);
    Code:
       0: new           #15                 // class java/lang/UnsupportedOperationException
       3: dup
       4: invokespecial #22                 // Method java/lang/UnsupportedOperationException."<init>":()V
       7: athrow

  public java.lang.Object getOutputTarget();
    Code:
       0: aconst_null
       1: areturn

  public int getOutputBuffered();
    Code:
       0: iconst_m1
       1: ireturn

  public java.lang.Object getCurrentValue();
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getOutputContext:()Lcom/fasterxml/jackson/core/JsonStreamContext;
       4: astore_1
       5: aload_1
       6: ifnonnull     13
       9: aconst_null
      10: goto          17
      13: aload_1
      14: invokevirtual #24                 // Method com/fasterxml/jackson/core/JsonStreamContext.getCurrentValue:()Ljava/lang/Object;
      17: areturn

  public void setCurrentValue(java.lang.Object);
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getOutputContext:()Lcom/fasterxml/jackson/core/JsonStreamContext;
       4: astore_2
       5: aload_2
       6: ifnull        14
       9: aload_2
      10: aload_1
      11: invokevirtual #25                 // Method com/fasterxml/jackson/core/JsonStreamContext.setCurrentValue:(Ljava/lang/Object;)V
      14: return

  public boolean canUseSchema(com.fasterxml.jackson.core.FormatSchema);
    Code:
       0: iconst_0
       1: ireturn

  public boolean canWriteObjectId();
    Code:
       0: iconst_0
       1: ireturn

  public boolean canWriteTypeId();
    Code:
       0: iconst_0
       1: ireturn

  public boolean canWriteBinaryNatively();
    Code:
       0: iconst_0
       1: ireturn

  public boolean canOmitFields();
    Code:
       0: iconst_1
       1: ireturn

  public abstract void writeStartArray() throws java.io.IOException;

  public void writeStartArray(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method writeStartArray:()V
       4: return

  public abstract void writeEndArray() throws java.io.IOException;

  public abstract void writeStartObject() throws java.io.IOException;

  public abstract void writeEndObject() throws java.io.IOException;

  public abstract void writeFieldName(java.lang.String) throws java.io.IOException;

  public abstract void writeFieldName(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;

  public abstract void writeString(java.lang.String) throws java.io.IOException;

  public abstract void writeString(char[], int, int) throws java.io.IOException;

  public abstract void writeString(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;

  public abstract void writeRawUTF8String(byte[], int, int) throws java.io.IOException;

  public abstract void writeUTF8String(byte[], int, int) throws java.io.IOException;

  public abstract void writeRaw(java.lang.String) throws java.io.IOException;

  public abstract void writeRaw(java.lang.String, int, int) throws java.io.IOException;

  public abstract void writeRaw(char[], int, int) throws java.io.IOException;

  public abstract void writeRaw(char) throws java.io.IOException;

  public void writeRaw(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #27,  1           // InterfaceMethod com/fasterxml/jackson/core/SerializableString.getValue:()Ljava/lang/String;
       7: invokevirtual #28                 // Method writeRaw:(Ljava/lang/String;)V
      10: return

  public abstract void writeRawValue(java.lang.String) throws java.io.IOException;

  public abstract void writeRawValue(java.lang.String, int, int) throws java.io.IOException;

  public abstract void writeRawValue(char[], int, int) throws java.io.IOException;

  public void writeRawValue(com.fasterxml.jackson.core.SerializableString) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #27,  1           // InterfaceMethod com/fasterxml/jackson/core/SerializableString.getValue:()Ljava/lang/String;
       7: invokevirtual #29                 // Method writeRawValue:(Ljava/lang/String;)V
      10: return

  public abstract void writeBinary(com.fasterxml.jackson.core.Base64Variant, byte[], int, int) throws java.io.IOException;

  public void writeBinary(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #30                 // Method com/fasterxml/jackson/core/Base64Variants.getDefaultVariant:()Lcom/fasterxml/jackson/core/Base64Variant;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #31                 // Method writeBinary:(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V
      10: return

  public void writeBinary(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #30                 // Method com/fasterxml/jackson/core/Base64Variants.getDefaultVariant:()Lcom/fasterxml/jackson/core/Base64Variant;
       4: aload_1
       5: iconst_0
       6: aload_1
       7: arraylength
       8: invokevirtual #31                 // Method writeBinary:(Lcom/fasterxml/jackson/core/Base64Variant;[BII)V
      11: return

  public int writeBinary(java.io.InputStream, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokestatic  #30                 // Method com/fasterxml/jackson/core/Base64Variants.getDefaultVariant:()Lcom/fasterxml/jackson/core/Base64Variant;
       4: aload_1
       5: iload_2
       6: invokevirtual #32                 // Method writeBinary:(Lcom/fasterxml/jackson/core/Base64Variant;Ljava/io/InputStream;I)I
       9: ireturn

  public abstract int writeBinary(com.fasterxml.jackson.core.Base64Variant, java.io.InputStream, int) throws java.io.IOException;

  public void writeNumber(short) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #33                 // Method writeNumber:(I)V
       5: return

  public abstract void writeNumber(int) throws java.io.IOException;

  public abstract void writeNumber(long) throws java.io.IOException;

  public abstract void writeNumber(java.math.BigInteger) throws java.io.IOException;

  public abstract void writeNumber(double) throws java.io.IOException;

  public abstract void writeNumber(float) throws java.io.IOException;

  public abstract void writeNumber(java.math.BigDecimal) throws java.io.IOException;

  public abstract void writeNumber(java.lang.String) throws java.io.IOException;

  public abstract void writeBoolean(boolean) throws java.io.IOException;

  public abstract void writeNull() throws java.io.IOException;

  public void writeObjectId(java.lang.Object) throws java.io.IOException;
    Code:
       0: new           #34                 // class com/fasterxml/jackson/core/JsonGenerationException
       3: dup
       4: ldc           #35                 // String No native support for writing Object Ids
       6: invokespecial #36                 // Method com/fasterxml/jackson/core/JsonGenerationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void writeObjectRef(java.lang.Object) throws java.io.IOException;
    Code:
       0: new           #34                 // class com/fasterxml/jackson/core/JsonGenerationException
       3: dup
       4: ldc           #35                 // String No native support for writing Object Ids
       6: invokespecial #36                 // Method com/fasterxml/jackson/core/JsonGenerationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public void writeTypeId(java.lang.Object) throws java.io.IOException;
    Code:
       0: new           #34                 // class com/fasterxml/jackson/core/JsonGenerationException
       3: dup
       4: ldc           #37                 // String No native support for writing Type Ids
       6: invokespecial #36                 // Method com/fasterxml/jackson/core/JsonGenerationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public abstract void writeObject(java.lang.Object) throws java.io.IOException;

  public abstract void writeTree(com.fasterxml.jackson.core.TreeNode) throws java.io.IOException;

  public void writeStringField(java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #39                 // Method writeString:(Ljava/lang/String;)V
      10: return

  public final void writeBooleanField(java.lang.String, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: iload_2
       7: invokevirtual #40                 // Method writeBoolean:(Z)V
      10: return

  public final void writeNullField(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: invokevirtual #41                 // Method writeNull:()V
       9: return

  public final void writeNumberField(java.lang.String, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: iload_2
       7: invokevirtual #33                 // Method writeNumber:(I)V
      10: return

  public final void writeNumberField(java.lang.String, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: lload_2
       7: invokevirtual #42                 // Method writeNumber:(J)V
      10: return

  public final void writeNumberField(java.lang.String, double) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: dload_2
       7: invokevirtual #43                 // Method writeNumber:(D)V
      10: return

  public final void writeNumberField(java.lang.String, float) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: fload_2
       7: invokevirtual #44                 // Method writeNumber:(F)V
      10: return

  public final void writeNumberField(java.lang.String, java.math.BigDecimal) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #45                 // Method writeNumber:(Ljava/math/BigDecimal;)V
      10: return

  public final void writeBinaryField(java.lang.String, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #46                 // Method writeBinary:([B)V
      10: return

  public final void writeArrayFieldStart(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: invokevirtual #26                 // Method writeStartArray:()V
       9: return

  public final void writeObjectFieldStart(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: invokevirtual #47                 // Method writeStartObject:()V
       9: return

  public final void writeObjectField(java.lang.String, java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #48                 // Method writeObject:(Ljava/lang/Object;)V
      10: return

  public void writeOmittedField(java.lang.String) throws java.io.IOException;
    Code:
       0: return

  public void copyCurrentEvent(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #49                 // Method com/fasterxml/jackson/core/JsonParser.getCurrentToken:()Lcom/fasterxml/jackson/core/JsonToken;
       4: astore_2
       5: aload_2
       6: ifnonnull     15
       9: aload_0
      10: ldc           #50                 // String No current event to copy
      12: invokevirtual #51                 // Method _reportError:(Ljava/lang/String;)V
      15: aload_2
      16: invokevirtual #52                 // Method com/fasterxml/jackson/core/JsonToken.id:()I
      19: tableswitch   { // -1 to 12
                    -1: 88
                     0: 308
                     1: 94
                     2: 101
                     3: 108
                     4: 115
                     5: 122
                     6: 133
                     7: 170
                     8: 222
                     9: 274
                    10: 282
                    11: 290
                    12: 297
               default: 308
          }
      88: aload_0
      89: ldc           #50                 // String No current event to copy
      91: invokevirtual #51                 // Method _reportError:(Ljava/lang/String;)V
      94: aload_0
      95: invokevirtual #47                 // Method writeStartObject:()V
      98: goto          312
     101: aload_0
     102: invokevirtual #53                 // Method writeEndObject:()V
     105: goto          312
     108: aload_0
     109: invokevirtual #26                 // Method writeStartArray:()V
     112: goto          312
     115: aload_0
     116: invokevirtual #54                 // Method writeEndArray:()V
     119: goto          312
     122: aload_0
     123: aload_1
     124: invokevirtual #55                 // Method com/fasterxml/jackson/core/JsonParser.getCurrentName:()Ljava/lang/String;
     127: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
     130: goto          312
     133: aload_1
     134: invokevirtual #56                 // Method com/fasterxml/jackson/core/JsonParser.hasTextCharacters:()Z
     137: ifeq          159
     140: aload_0
     141: aload_1
     142: invokevirtual #57                 // Method com/fasterxml/jackson/core/JsonParser.getTextCharacters:()[C
     145: aload_1
     146: invokevirtual #58                 // Method com/fasterxml/jackson/core/JsonParser.getTextOffset:()I
     149: aload_1
     150: invokevirtual #59                 // Method com/fasterxml/jackson/core/JsonParser.getTextLength:()I
     153: invokevirtual #60                 // Method writeString:([CII)V
     156: goto          312
     159: aload_0
     160: aload_1
     161: invokevirtual #61                 // Method com/fasterxml/jackson/core/JsonParser.getText:()Ljava/lang/String;
     164: invokevirtual #39                 // Method writeString:(Ljava/lang/String;)V
     167: goto          312
     170: aload_1
     171: invokevirtual #62                 // Method com/fasterxml/jackson/core/JsonParser.getNumberType:()Lcom/fasterxml/jackson/core/JsonParser$NumberType;
     174: astore_3
     175: aload_3
     176: getstatic     #63                 // Field com/fasterxml/jackson/core/JsonParser$NumberType.INT:Lcom/fasterxml/jackson/core/JsonParser$NumberType;
     179: if_acmpne     193
     182: aload_0
     183: aload_1
     184: invokevirtual #64                 // Method com/fasterxml/jackson/core/JsonParser.getIntValue:()I
     187: invokevirtual #33                 // Method writeNumber:(I)V
     190: goto          312
     193: aload_3
     194: getstatic     #65                 // Field com/fasterxml/jackson/core/JsonParser$NumberType.BIG_INTEGER:Lcom/fasterxml/jackson/core/JsonParser$NumberType;
     197: if_acmpne     211
     200: aload_0
     201: aload_1
     202: invokevirtual #66                 // Method com/fasterxml/jackson/core/JsonParser.getBigIntegerValue:()Ljava/math/BigInteger;
     205: invokevirtual #67                 // Method writeNumber:(Ljava/math/BigInteger;)V
     208: goto          312
     211: aload_0
     212: aload_1
     213: invokevirtual #68                 // Method com/fasterxml/jackson/core/JsonParser.getLongValue:()J
     216: invokevirtual #42                 // Method writeNumber:(J)V
     219: goto          312
     222: aload_1
     223: invokevirtual #62                 // Method com/fasterxml/jackson/core/JsonParser.getNumberType:()Lcom/fasterxml/jackson/core/JsonParser$NumberType;
     226: astore_3
     227: aload_3
     228: getstatic     #69                 // Field com/fasterxml/jackson/core/JsonParser$NumberType.BIG_DECIMAL:Lcom/fasterxml/jackson/core/JsonParser$NumberType;
     231: if_acmpne     245
     234: aload_0
     235: aload_1
     236: invokevirtual #70                 // Method com/fasterxml/jackson/core/JsonParser.getDecimalValue:()Ljava/math/BigDecimal;
     239: invokevirtual #45                 // Method writeNumber:(Ljava/math/BigDecimal;)V
     242: goto          312
     245: aload_3
     246: getstatic     #71                 // Field com/fasterxml/jackson/core/JsonParser$NumberType.FLOAT:Lcom/fasterxml/jackson/core/JsonParser$NumberType;
     249: if_acmpne     263
     252: aload_0
     253: aload_1
     254: invokevirtual #72                 // Method com/fasterxml/jackson/core/JsonParser.getFloatValue:()F
     257: invokevirtual #44                 // Method writeNumber:(F)V
     260: goto          312
     263: aload_0
     264: aload_1
     265: invokevirtual #73                 // Method com/fasterxml/jackson/core/JsonParser.getDoubleValue:()D
     268: invokevirtual #43                 // Method writeNumber:(D)V
     271: goto          312
     274: aload_0
     275: iconst_1
     276: invokevirtual #40                 // Method writeBoolean:(Z)V
     279: goto          312
     282: aload_0
     283: iconst_0
     284: invokevirtual #40                 // Method writeBoolean:(Z)V
     287: goto          312
     290: aload_0
     291: invokevirtual #41                 // Method writeNull:()V
     294: goto          312
     297: aload_0
     298: aload_1
     299: invokevirtual #74                 // Method com/fasterxml/jackson/core/JsonParser.getEmbeddedObject:()Ljava/lang/Object;
     302: invokevirtual #48                 // Method writeObject:(Ljava/lang/Object;)V
     305: goto          312
     308: aload_0
     309: invokevirtual #75                 // Method _throwInternal:()V
     312: return

  public void copyCurrentStructure(com.fasterxml.jackson.core.JsonParser) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #49                 // Method com/fasterxml/jackson/core/JsonParser.getCurrentToken:()Lcom/fasterxml/jackson/core/JsonToken;
       4: astore_2
       5: aload_2
       6: ifnonnull     15
       9: aload_0
      10: ldc           #50                 // String No current event to copy
      12: invokevirtual #51                 // Method _reportError:(Ljava/lang/String;)V
      15: aload_2
      16: invokevirtual #52                 // Method com/fasterxml/jackson/core/JsonToken.id:()I
      19: istore_3
      20: iload_3
      21: iconst_5
      22: if_icmpne     43
      25: aload_0
      26: aload_1
      27: invokevirtual #55                 // Method com/fasterxml/jackson/core/JsonParser.getCurrentName:()Ljava/lang/String;
      30: invokevirtual #38                 // Method writeFieldName:(Ljava/lang/String;)V
      33: aload_1
      34: invokevirtual #76                 // Method com/fasterxml/jackson/core/JsonParser.nextToken:()Lcom/fasterxml/jackson/core/JsonToken;
      37: astore_2
      38: aload_2
      39: invokevirtual #52                 // Method com/fasterxml/jackson/core/JsonToken.id:()I
      42: istore_3
      43: iload_3
      44: lookupswitch  { // 2
                     1: 72
                     3: 101
               default: 130
          }
      72: aload_0
      73: invokevirtual #47                 // Method writeStartObject:()V
      76: aload_1
      77: invokevirtual #76                 // Method com/fasterxml/jackson/core/JsonParser.nextToken:()Lcom/fasterxml/jackson/core/JsonToken;
      80: getstatic     #77                 // Field com/fasterxml/jackson/core/JsonToken.END_OBJECT:Lcom/fasterxml/jackson/core/JsonToken;
      83: if_acmpeq     94
      86: aload_0
      87: aload_1
      88: invokevirtual #78                 // Method copyCurrentStructure:(Lcom/fasterxml/jackson/core/JsonParser;)V
      91: goto          76
      94: aload_0
      95: invokevirtual #53                 // Method writeEndObject:()V
      98: goto          135
     101: aload_0
     102: invokevirtual #26                 // Method writeStartArray:()V
     105: aload_1
     106: invokevirtual #76                 // Method com/fasterxml/jackson/core/JsonParser.nextToken:()Lcom/fasterxml/jackson/core/JsonToken;
     109: getstatic     #79                 // Field com/fasterxml/jackson/core/JsonToken.END_ARRAY:Lcom/fasterxml/jackson/core/JsonToken;
     112: if_acmpeq     123
     115: aload_0
     116: aload_1
     117: invokevirtual #78                 // Method copyCurrentStructure:(Lcom/fasterxml/jackson/core/JsonParser;)V
     120: goto          105
     123: aload_0
     124: invokevirtual #54                 // Method writeEndArray:()V
     127: goto          135
     130: aload_0
     131: aload_1
     132: invokevirtual #80                 // Method copyCurrentEvent:(Lcom/fasterxml/jackson/core/JsonParser;)V
     135: return

  public abstract com.fasterxml.jackson.core.JsonStreamContext getOutputContext();

  public abstract void flush() throws java.io.IOException;

  public abstract boolean isClosed();

  public abstract void close() throws java.io.IOException;

  protected void _reportError(java.lang.String) throws com.fasterxml.jackson.core.JsonGenerationException;
    Code:
       0: new           #34                 // class com/fasterxml/jackson/core/JsonGenerationException
       3: dup
       4: aload_1
       5: invokespecial #36                 // Method com/fasterxml/jackson/core/JsonGenerationException."<init>":(Ljava/lang/String;)V
       8: athrow

  protected final void _throwInternal();
    Code:
       0: invokestatic  #81                 // Method com/fasterxml/jackson/core/util/VersionUtil.throwInternal:()V
       3: return

  protected void _reportUnsupportedOperation();
    Code:
       0: new           #15                 // class java/lang/UnsupportedOperationException
       3: dup
       4: new           #7                  // class java/lang/StringBuilder
       7: dup
       8: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #82                 // String Operation not supported by generator of type
      13: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_0
      17: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      20: invokevirtual #12                 // Method java/lang/Class.getName:()Ljava/lang/String;
      23: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #20                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      32: athrow

  protected void _writeSimpleObject(java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: invokevirtual #41                 // Method writeNull:()V
       8: return
       9: aload_1
      10: instanceof    #83                 // class java/lang/String
      13: ifeq          25
      16: aload_0
      17: aload_1
      18: checkcast     #83                 // class java/lang/String
      21: invokevirtual #39                 // Method writeString:(Ljava/lang/String;)V
      24: return
      25: aload_1
      26: instanceof    #84                 // class java/lang/Number
      29: ifeq          207
      32: aload_1
      33: checkcast     #84                 // class java/lang/Number
      36: astore_2
      37: aload_2
      38: instanceof    #85                 // class java/lang/Integer
      41: ifeq          53
      44: aload_0
      45: aload_2
      46: invokevirtual #86                 // Method java/lang/Number.intValue:()I
      49: invokevirtual #33                 // Method writeNumber:(I)V
      52: return
      53: aload_2
      54: instanceof    #87                 // class java/lang/Long
      57: ifeq          69
      60: aload_0
      61: aload_2
      62: invokevirtual #88                 // Method java/lang/Number.longValue:()J
      65: invokevirtual #42                 // Method writeNumber:(J)V
      68: return
      69: aload_2
      70: instanceof    #89                 // class java/lang/Double
      73: ifeq          85
      76: aload_0
      77: aload_2
      78: invokevirtual #90                 // Method java/lang/Number.doubleValue:()D
      81: invokevirtual #43                 // Method writeNumber:(D)V
      84: return
      85: aload_2
      86: instanceof    #91                 // class java/lang/Float
      89: ifeq          101
      92: aload_0
      93: aload_2
      94: invokevirtual #92                 // Method java/lang/Number.floatValue:()F
      97: invokevirtual #44                 // Method writeNumber:(F)V
     100: return
     101: aload_2
     102: instanceof    #93                 // class java/lang/Short
     105: ifeq          117
     108: aload_0
     109: aload_2
     110: invokevirtual #94                 // Method java/lang/Number.shortValue:()S
     113: invokevirtual #95                 // Method writeNumber:(S)V
     116: return
     117: aload_2
     118: instanceof    #96                 // class java/lang/Byte
     121: ifeq          134
     124: aload_0
     125: aload_2
     126: invokevirtual #97                 // Method java/lang/Number.byteValue:()B
     129: i2s
     130: invokevirtual #95                 // Method writeNumber:(S)V
     133: return
     134: aload_2
     135: instanceof    #98                 // class java/math/BigInteger
     138: ifeq          150
     141: aload_0
     142: aload_2
     143: checkcast     #98                 // class java/math/BigInteger
     146: invokevirtual #67                 // Method writeNumber:(Ljava/math/BigInteger;)V
     149: return
     150: aload_2
     151: instanceof    #99                 // class java/math/BigDecimal
     154: ifeq          166
     157: aload_0
     158: aload_2
     159: checkcast     #99                 // class java/math/BigDecimal
     162: invokevirtual #45                 // Method writeNumber:(Ljava/math/BigDecimal;)V
     165: return
     166: aload_2
     167: instanceof    #100                // class java/util/concurrent/atomic/AtomicInteger
     170: ifeq          185
     173: aload_0
     174: aload_2
     175: checkcast     #100                // class java/util/concurrent/atomic/AtomicInteger
     178: invokevirtual #101                // Method java/util/concurrent/atomic/AtomicInteger.get:()I
     181: invokevirtual #33                 // Method writeNumber:(I)V
     184: return
     185: aload_2
     186: instanceof    #102                // class java/util/concurrent/atomic/AtomicLong
     189: ifeq          204
     192: aload_0
     193: aload_2
     194: checkcast     #102                // class java/util/concurrent/atomic/AtomicLong
     197: invokevirtual #103                // Method java/util/concurrent/atomic/AtomicLong.get:()J
     200: invokevirtual #42                 // Method writeNumber:(J)V
     203: return
     204: goto          264
     207: aload_1
     208: instanceof    #104                // class "[B"
     211: ifeq          226
     214: aload_0
     215: aload_1
     216: checkcast     #104                // class "[B"
     219: checkcast     #104                // class "[B"
     222: invokevirtual #46                 // Method writeBinary:([B)V
     225: return
     226: aload_1
     227: instanceof    #105                // class java/lang/Boolean
     230: ifeq          245
     233: aload_0
     234: aload_1
     235: checkcast     #105                // class java/lang/Boolean
     238: invokevirtual #106                // Method java/lang/Boolean.booleanValue:()Z
     241: invokevirtual #40                 // Method writeBoolean:(Z)V
     244: return
     245: aload_1
     246: instanceof    #107                // class java/util/concurrent/atomic/AtomicBoolean
     249: ifeq          264
     252: aload_0
     253: aload_1
     254: checkcast     #107                // class java/util/concurrent/atomic/AtomicBoolean
     257: invokevirtual #108                // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
     260: invokevirtual #40                 // Method writeBoolean:(Z)V
     263: return
     264: new           #109                // class java/lang/IllegalStateException
     267: dup
     268: new           #7                  // class java/lang/StringBuilder
     271: dup
     272: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
     275: ldc           #110                // String No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed
     277: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     280: aload_1
     281: invokevirtual #11                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     284: invokevirtual #12                 // Method java/lang/Class.getName:()Ljava/lang/String;
     287: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     290: ldc           #111                // String )
     292: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     295: invokevirtual #13                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     298: invokespecial #112                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     301: athrow
}
