Compiled from "AtomicReferenceSerializer.java"
public class com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<java.util.concurrent.atomic.AtomicReference<?>> {
  private static final long serialVersionUID;

  public com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer();
    Code:
       0: aload_0
       1: ldc_w         #1                  // class java/util/concurrent/atomic/AtomicReference
       4: iconst_0
       5: invokespecial #2                  // Method com/fasterxml/jackson/databind/ser/std/StdSerializer."<init>":(Ljava/lang/Class;Z)V
       8: return

  public com.fasterxml.jackson.databind.ser.std.AtomicReferenceSerializer(com.fasterxml.jackson.databind.type.ReferenceType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method com/fasterxml/jackson/databind/ser/std/StdSerializer."<init>":(Lcom/fasterxml/jackson/databind/JavaType;)V
       5: return

  public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.util.concurrent.atomic.AtomicReference<?>);
    Code:
       0: aload_2
       1: ifnull        11
       4: aload_2
       5: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       8: ifnonnull     15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn

  public void serialize(java.util.concurrent.atomic.AtomicReference<?>, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException, com.fasterxml.jackson.core.JsonGenerationException;
    Code:
       0: aload_3
       1: aload_1
       2: invokevirtual #4                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       5: aload_2
       6: invokevirtual #5                  // Method com/fasterxml/jackson/databind/SerializerProvider.defaultSerializeValue:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonGenerator;)V
       9: return

  public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type);
    Code:
       0: aload_0
       1: ldc           #6                  // String any
       3: iconst_1
       4: invokevirtual #7                  // Method createSchemaNode:(Ljava/lang/String;Z)Lcom/fasterxml/jackson/databind/node/ObjectNode;
       7: areturn

  public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException;
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #8,  2            // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.expectAnyFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonAnyFormatVisitor;
       7: pop
       8: return

  public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #1                  // class java/util/concurrent/atomic/AtomicReference
       5: aload_2
       6: aload_3
       7: invokevirtual #9                  // Method serialize:(Ljava/util/concurrent/atomic/AtomicReference;Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/databind/SerializerProvider;)V
      10: return

  public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: checkcast     #1                  // class java/util/concurrent/atomic/AtomicReference
       6: invokevirtual #10                 // Method isEmpty:(Lcom/fasterxml/jackson/databind/SerializerProvider;Ljava/util/concurrent/atomic/AtomicReference;)Z
       9: ireturn
}
