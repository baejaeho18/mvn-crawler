Compiled from "DefaultMustacheFactory.java"
public class com.github.mustachejava.DefaultMustacheFactory implements com.github.mustachejava.MustacheFactory {
  protected final java.util.concurrent.ConcurrentHashMap<java.lang.String, com.github.mustachejava.Mustache> mustacheCache;

  protected com.github.mustachejava.ObjectHandler oh;

  protected final com.github.mustachejava.MustacheParser mc;

  protected final java.util.concurrent.ConcurrentHashMap<com.github.mustachejava.FragmentKey, com.github.mustachejava.Mustache> templateCache;

  protected int recursionLimit;

  private final com.github.mustachejava.MustacheResolver mustacheResolver;

  protected java.util.concurrent.ExecutorService es;

  private final java.lang.ThreadLocal<java.util.Map<java.lang.String, com.github.mustachejava.Mustache>> partialCache;

  public com.github.mustachejava.DefaultMustacheFactory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method createMustacheCache:()Ljava/util/concurrent/ConcurrentHashMap;
       9: putfield      #3                  // Field mustacheCache:Ljava/util/concurrent/ConcurrentHashMap;
      12: aload_0
      13: new           #4                  // class com/github/mustachejava/reflect/ReflectionObjectHandler
      16: dup
      17: invokespecial #5                  // Method com/github/mustachejava/reflect/ReflectionObjectHandler."<init>":()V
      20: putfield      #6                  // Field oh:Lcom/github/mustachejava/ObjectHandler;
      23: aload_0
      24: new           #7                  // class com/github/mustachejava/MustacheParser
      27: dup
      28: aload_0
      29: invokespecial #8                  // Method com/github/mustachejava/MustacheParser."<init>":(Lcom/github/mustachejava/MustacheFactory;)V
      32: putfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
      35: aload_0
      36: aload_0
      37: invokevirtual #10                 // Method createLambdaCache:()Ljava/util/concurrent/ConcurrentHashMap;
      40: putfield      #11                 // Field templateCache:Ljava/util/concurrent/ConcurrentHashMap;
      43: aload_0
      44: bipush        100
      46: putfield      #12                 // Field recursionLimit:I
      49: aload_0
      50: new           #13                 // class com/github/mustachejava/DefaultMustacheFactory$1
      53: dup
      54: aload_0
      55: invokespecial #14                 // Method com/github/mustachejava/DefaultMustacheFactory$1."<init>":(Lcom/github/mustachejava/DefaultMustacheFactory;)V
      58: putfield      #15                 // Field partialCache:Ljava/lang/ThreadLocal;
      61: aload_0
      62: new           #16                 // class com/github/mustachejava/resolver/DefaultResolver
      65: dup
      66: invokespecial #17                 // Method com/github/mustachejava/resolver/DefaultResolver."<init>":()V
      69: putfield      #18                 // Field mustacheResolver:Lcom/github/mustachejava/MustacheResolver;
      72: return

  public com.github.mustachejava.DefaultMustacheFactory(com.github.mustachejava.MustacheResolver);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method createMustacheCache:()Ljava/util/concurrent/ConcurrentHashMap;
       9: putfield      #3                  // Field mustacheCache:Ljava/util/concurrent/ConcurrentHashMap;
      12: aload_0
      13: new           #4                  // class com/github/mustachejava/reflect/ReflectionObjectHandler
      16: dup
      17: invokespecial #5                  // Method com/github/mustachejava/reflect/ReflectionObjectHandler."<init>":()V
      20: putfield      #6                  // Field oh:Lcom/github/mustachejava/ObjectHandler;
      23: aload_0
      24: new           #7                  // class com/github/mustachejava/MustacheParser
      27: dup
      28: aload_0
      29: invokespecial #8                  // Method com/github/mustachejava/MustacheParser."<init>":(Lcom/github/mustachejava/MustacheFactory;)V
      32: putfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
      35: aload_0
      36: aload_0
      37: invokevirtual #10                 // Method createLambdaCache:()Ljava/util/concurrent/ConcurrentHashMap;
      40: putfield      #11                 // Field templateCache:Ljava/util/concurrent/ConcurrentHashMap;
      43: aload_0
      44: bipush        100
      46: putfield      #12                 // Field recursionLimit:I
      49: aload_0
      50: new           #13                 // class com/github/mustachejava/DefaultMustacheFactory$1
      53: dup
      54: aload_0
      55: invokespecial #14                 // Method com/github/mustachejava/DefaultMustacheFactory$1."<init>":(Lcom/github/mustachejava/DefaultMustacheFactory;)V
      58: putfield      #15                 // Field partialCache:Ljava/lang/ThreadLocal;
      61: aload_0
      62: aload_1
      63: putfield      #18                 // Field mustacheResolver:Lcom/github/mustachejava/MustacheResolver;
      66: return

  public com.github.mustachejava.DefaultMustacheFactory(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method createMustacheCache:()Ljava/util/concurrent/ConcurrentHashMap;
       9: putfield      #3                  // Field mustacheCache:Ljava/util/concurrent/ConcurrentHashMap;
      12: aload_0
      13: new           #4                  // class com/github/mustachejava/reflect/ReflectionObjectHandler
      16: dup
      17: invokespecial #5                  // Method com/github/mustachejava/reflect/ReflectionObjectHandler."<init>":()V
      20: putfield      #6                  // Field oh:Lcom/github/mustachejava/ObjectHandler;
      23: aload_0
      24: new           #7                  // class com/github/mustachejava/MustacheParser
      27: dup
      28: aload_0
      29: invokespecial #8                  // Method com/github/mustachejava/MustacheParser."<init>":(Lcom/github/mustachejava/MustacheFactory;)V
      32: putfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
      35: aload_0
      36: aload_0
      37: invokevirtual #10                 // Method createLambdaCache:()Ljava/util/concurrent/ConcurrentHashMap;
      40: putfield      #11                 // Field templateCache:Ljava/util/concurrent/ConcurrentHashMap;
      43: aload_0
      44: bipush        100
      46: putfield      #12                 // Field recursionLimit:I
      49: aload_0
      50: new           #13                 // class com/github/mustachejava/DefaultMustacheFactory$1
      53: dup
      54: aload_0
      55: invokespecial #14                 // Method com/github/mustachejava/DefaultMustacheFactory$1."<init>":(Lcom/github/mustachejava/DefaultMustacheFactory;)V
      58: putfield      #15                 // Field partialCache:Ljava/lang/ThreadLocal;
      61: aload_0
      62: new           #16                 // class com/github/mustachejava/resolver/DefaultResolver
      65: dup
      66: aload_1
      67: invokespecial #19                 // Method com/github/mustachejava/resolver/DefaultResolver."<init>":(Ljava/lang/String;)V
      70: putfield      #18                 // Field mustacheResolver:Lcom/github/mustachejava/MustacheResolver;
      73: return

  public com.github.mustachejava.DefaultMustacheFactory(java.io.File);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_0
       6: invokevirtual #2                  // Method createMustacheCache:()Ljava/util/concurrent/ConcurrentHashMap;
       9: putfield      #3                  // Field mustacheCache:Ljava/util/concurrent/ConcurrentHashMap;
      12: aload_0
      13: new           #4                  // class com/github/mustachejava/reflect/ReflectionObjectHandler
      16: dup
      17: invokespecial #5                  // Method com/github/mustachejava/reflect/ReflectionObjectHandler."<init>":()V
      20: putfield      #6                  // Field oh:Lcom/github/mustachejava/ObjectHandler;
      23: aload_0
      24: new           #7                  // class com/github/mustachejava/MustacheParser
      27: dup
      28: aload_0
      29: invokespecial #8                  // Method com/github/mustachejava/MustacheParser."<init>":(Lcom/github/mustachejava/MustacheFactory;)V
      32: putfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
      35: aload_0
      36: aload_0
      37: invokevirtual #10                 // Method createLambdaCache:()Ljava/util/concurrent/ConcurrentHashMap;
      40: putfield      #11                 // Field templateCache:Ljava/util/concurrent/ConcurrentHashMap;
      43: aload_0
      44: bipush        100
      46: putfield      #12                 // Field recursionLimit:I
      49: aload_0
      50: new           #13                 // class com/github/mustachejava/DefaultMustacheFactory$1
      53: dup
      54: aload_0
      55: invokespecial #14                 // Method com/github/mustachejava/DefaultMustacheFactory$1."<init>":(Lcom/github/mustachejava/DefaultMustacheFactory;)V
      58: putfield      #15                 // Field partialCache:Ljava/lang/ThreadLocal;
      61: aload_0
      62: new           #16                 // class com/github/mustachejava/resolver/DefaultResolver
      65: dup
      66: aload_1
      67: invokespecial #20                 // Method com/github/mustachejava/resolver/DefaultResolver."<init>":(Ljava/io/File;)V
      70: putfield      #18                 // Field mustacheResolver:Lcom/github/mustachejava/MustacheResolver;
      73: return

  public java.lang.String resolvePartialPath(java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_2
       1: astore        4
       3: aload_2
       4: ldc           #21                 // String /
       6: invokevirtual #22                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
       9: ifne          33
      12: new           #23                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      19: aload_1
      20: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload         4
      25: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: astore        4
      33: aload_2
      34: aload_3
      35: invokevirtual #27                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      38: ifne          62
      41: new           #23                 // class java/lang/StringBuilder
      44: dup
      45: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      48: aload         4
      50: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: aload_3
      54: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      60: astore        4
      62: new           #28                 // class java/io/File
      65: dup
      66: aload         4
      68: invokespecial #29                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      71: invokevirtual #30                 // Method java/io/File.getPath:()Ljava/lang/String;
      74: astore        5
      76: aload         5
      78: invokestatic  #31                 // Method ensureForwardSlash:(Ljava/lang/String;)Ljava/lang/String;
      81: areturn

  private static java.lang.String ensureForwardSlash(java.lang.String);
    Code:
       0: aload_0
       1: bipush        92
       3: bipush        47
       5: invokevirtual #32                 // Method java/lang/String.replace:(CC)Ljava/lang/String;
       8: areturn

  public com.github.mustachejava.MustacheVisitor createMustacheVisitor();
    Code:
       0: new           #33                 // class com/github/mustachejava/DefaultMustacheVisitor
       3: dup
       4: aload_0
       5: invokespecial #34                 // Method com/github/mustachejava/DefaultMustacheVisitor."<init>":(Lcom/github/mustachejava/DefaultMustacheFactory;)V
       8: areturn

  public java.io.Reader getReader(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #18                 // Field mustacheResolver:Lcom/github/mustachejava/MustacheResolver;
       4: aload_1
       5: invokeinterface #35,  2           // InterfaceMethod com/github/mustachejava/MustacheResolver.getReader:(Ljava/lang/String;)Ljava/io/Reader;
      10: astore_2
      11: aload_2
      12: ifnonnull     24
      15: new           #36                 // class com/github/mustachejava/MustacheNotFoundException
      18: dup
      19: aload_1
      20: invokespecial #37                 // Method com/github/mustachejava/MustacheNotFoundException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_2
      25: areturn

  public void encode(java.lang.String, java.io.Writer);
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #38                 // Method com/github/mustachejava/util/HtmlEscaper.escape:(Ljava/lang/String;Ljava/io/Writer;)V
       5: return

  public com.github.mustachejava.ObjectHandler getObjectHandler();
    Code:
       0: aload_0
       1: getfield      #6                  // Field oh:Lcom/github/mustachejava/ObjectHandler;
       4: areturn

  public void setObjectHandler(com.github.mustachejava.ObjectHandler);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field oh:Lcom/github/mustachejava/ObjectHandler;
       5: return

  public java.util.concurrent.ExecutorService getExecutorService();
    Code:
       0: aload_0
       1: getfield      #39                 // Field es:Ljava/util/concurrent/ExecutorService;
       4: areturn

  public void setExecutorService(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #39                 // Field es:Ljava/util/concurrent/ExecutorService;
       5: return

  public com.github.mustachejava.Mustache getFragment(com.github.mustachejava.FragmentKey);
    Code:
       0: aload_0
       1: getfield      #11                 // Field templateCache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_0
       6: invokevirtual #40                 // Method getFragmentCacheFunction:()Ljava/util/function/Function;
       9: invokevirtual #41                 // Method java/util/concurrent/ConcurrentHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #42                 // class com/github/mustachejava/Mustache
      15: astore_2
      16: aload_2
      17: invokeinterface #43,  1           // InterfaceMethod com/github/mustachejava/Mustache.init:()V
      22: aload_2
      23: areturn

  protected java.util.function.Function<com.github.mustachejava.FragmentKey, com.github.mustachejava.Mustache> getFragmentCacheFunction();
    Code:
       0: aload_0
       1: invokedynamic #44,  0             // InvokeDynamic #0:apply:(Lcom/github/mustachejava/DefaultMustacheFactory;)Ljava/util/function/Function;
       6: areturn

  public com.github.mustachejava.Mustache compile(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field mustacheCache:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_0
       6: invokevirtual #45                 // Method getMustacheCacheFunction:()Ljava/util/function/Function;
       9: invokevirtual #41                 // Method java/util/concurrent/ConcurrentHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      12: checkcast     #42                 // class com/github/mustachejava/Mustache
      15: astore_2
      16: aload_2
      17: invokeinterface #43,  1           // InterfaceMethod com/github/mustachejava/Mustache.init:()V
      22: aload_2
      23: areturn

  public com.github.mustachejava.Mustache compile(java.io.Reader, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc           #46                 // String {{
       5: ldc           #47                 // String }}
       7: invokevirtual #48                 // Method compile:(Ljava/io/Reader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/github/mustachejava/Mustache;
      10: areturn

  public com.github.mustachejava.Mustache compile(java.io.Reader, java.lang.String, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokevirtual #49                 // Method com/github/mustachejava/MustacheParser.compile:(Ljava/io/Reader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lcom/github/mustachejava/Mustache;
      12: astore        5
      14: aload         5
      16: invokeinterface #43,  1           // InterfaceMethod com/github/mustachejava/Mustache.init:()V
      21: aload_0
      22: getfield      #15                 // Field partialCache:Ljava/lang/ThreadLocal;
      25: invokevirtual #50                 // Method java/lang/ThreadLocal.remove:()V
      28: aload         5
      30: areturn

  public java.lang.String translate(java.lang.String);
    Code:
       0: aload_1
       1: areturn

  public java.lang.String filterText(java.lang.String, boolean);
    Code:
       0: aload_1
       1: areturn

  public void setRecursionLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field recursionLimit:I
       5: return

  public int getRecursionLimit();
    Code:
       0: aload_0
       1: getfield      #12                 // Field recursionLimit:I
       4: ireturn

  public com.github.mustachejava.Mustache compilePartial(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #15                 // Field partialCache:Ljava/lang/ThreadLocal;
       4: invokevirtual #51                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       7: checkcast     #52                 // class java/util/Map
      10: astore_2
      11: aload_2
      12: aload_1
      13: invokeinterface #53,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      18: checkcast     #42                 // class com/github/mustachejava/Mustache
      21: astore_3
      22: aload_3
      23: ifnull        42
      26: aload_3
      27: instanceof    #54                 // class com/github/mustachejava/codes/DefaultMustache
      30: ifeq          40
      33: aload_3
      34: checkcast     #54                 // class com/github/mustachejava/codes/DefaultMustache
      37: invokevirtual #55                 // Method com/github/mustachejava/codes/DefaultMustache.setRecursive:()V
      40: aload_3
      41: areturn
      42: aload_0
      43: getfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
      46: aload_1
      47: invokevirtual #56                 // Method com/github/mustachejava/MustacheParser.compile:(Ljava/lang/String;)Lcom/github/mustachejava/Mustache;
      50: astore        4
      52: aload_2
      53: aload_1
      54: aload         4
      56: invokeinterface #57,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      61: pop
      62: aload         4
      64: invokeinterface #43,  1           // InterfaceMethod com/github/mustachejava/Mustache.init:()V
      69: aload         4
      71: astore        5
      73: aload_2
      74: aload_1
      75: invokeinterface #58,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      80: pop
      81: aload         5
      83: areturn
      84: astore        6
      86: aload_2
      87: aload_1
      88: invokeinterface #58,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      93: pop
      94: aload         6
      96: athrow
    Exception table:
       from    to  target type
          42    73    84   any
          84    86    84   any

  protected java.util.function.Function<java.lang.String, com.github.mustachejava.Mustache> getMustacheCacheFunction();
    Code:
       0: aload_0
       1: getfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
       4: dup
       5: invokevirtual #59                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: pop
       9: invokedynamic #60,  0             // InvokeDynamic #1:apply:(Lcom/github/mustachejava/MustacheParser;)Ljava/util/function/Function;
      14: areturn

  protected java.util.concurrent.ConcurrentHashMap<java.lang.String, com.github.mustachejava.Mustache> createMustacheCache();
    Code:
       0: new           #61                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #62                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: areturn

  protected java.util.concurrent.ConcurrentHashMap<com.github.mustachejava.FragmentKey, com.github.mustachejava.Mustache> createLambdaCache();
    Code:
       0: new           #61                 // class java/util/concurrent/ConcurrentHashMap
       3: dup
       4: invokespecial #62                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
       7: areturn

  private com.github.mustachejava.Mustache lambda$getFragmentCacheFunction$0(com.github.mustachejava.FragmentKey);
    Code:
       0: new           #63                 // class java/io/StringReader
       3: dup
       4: aload_1
       5: getfield      #64                 // Field com/github/mustachejava/FragmentKey.templateText:Ljava/lang/String;
       8: invokespecial #65                 // Method java/io/StringReader."<init>":(Ljava/lang/String;)V
      11: astore_2
      12: aload_1
      13: getfield      #66                 // Field com/github/mustachejava/FragmentKey.tc:Lcom/github/mustachejava/TemplateContext;
      16: astore_3
      17: aload_0
      18: getfield      #9                  // Field mc:Lcom/github/mustachejava/MustacheParser;
      21: aload_2
      22: aload_3
      23: invokevirtual #67                 // Method com/github/mustachejava/TemplateContext.file:()Ljava/lang/String;
      26: aload_3
      27: invokevirtual #68                 // Method com/github/mustachejava/TemplateContext.startChars:()Ljava/lang/String;
      30: aload_3
      31: invokevirtual #69                 // Method com/github/mustachejava/TemplateContext.endChars:()Ljava/lang/String;
      34: aload_3
      35: invokevirtual #70                 // Method com/github/mustachejava/TemplateContext.startOfLine:()Z
      38: invokevirtual #71                 // Method com/github/mustachejava/MustacheParser.compile:(Ljava/io/Reader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lcom/github/mustachejava/Mustache;
      41: areturn
}
