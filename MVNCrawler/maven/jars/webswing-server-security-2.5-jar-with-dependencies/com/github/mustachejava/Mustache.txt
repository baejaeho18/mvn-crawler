Compiled from "Mustache.java"
public interface com.github.mustachejava.Mustache extends com.github.mustachejava.Code {
  public abstract void append(java.lang.String);

  public abstract java.lang.Object clone();

  public default java.io.Writer execute(java.io.Writer, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #1                  // InterfaceMethod com/github/mustachejava/ObjectHandler.makeList:(Ljava/lang/Object;)Ljava/util/List;
       6: invokeinterface #2,  3            // InterfaceMethod execute:(Ljava/io/Writer;Ljava/util/List;)Ljava/io/Writer;
      11: areturn

  public default java.io.Writer execute(java.io.Writer, java.lang.Object[]);
    Code:
       0: new           #3                  // class com/github/mustachejava/util/InternalArrayList
       3: dup
       4: invokespecial #4                  // Method com/github/mustachejava/util/InternalArrayList."<init>":()V
       7: astore_3
       8: aload_3
       9: aload_2
      10: invokestatic  #5                  // Method java/util/Collections.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: aload_1
      16: aload_3
      17: invokeinterface #2,  3            // InterfaceMethod execute:(Ljava/io/Writer;Ljava/util/List;)Ljava/io/Writer;
      22: areturn

  public abstract java.io.Writer execute(java.io.Writer, java.util.List<java.lang.Object>);

  public abstract com.github.mustachejava.Code[] getCodes();

  public abstract void identity(java.io.Writer);

  public abstract void init();

  public abstract void setCodes(com.github.mustachejava.Code[]);

  public abstract java.io.Writer run(java.io.Writer, java.util.List<java.lang.Object>);

  public abstract com.github.mustachejava.util.Node invert(java.lang.String);
}
