Compiled from "CloudWatchMeterRegistry.java"
public class io.micrometer.cloudwatch.CloudWatchMeterRegistry extends io.micrometer.core.instrument.step.StepMeterRegistry {
  private final io.micrometer.cloudwatch.CloudWatchConfig config;

  private final com.amazonaws.services.cloudwatch.AmazonCloudWatchAsync amazonCloudWatchAsync;

  private final org.slf4j.Logger logger;

  public io.micrometer.cloudwatch.CloudWatchMeterRegistry(io.micrometer.cloudwatch.CloudWatchConfig, io.micrometer.core.instrument.Clock, com.amazonaws.services.cloudwatch.AmazonCloudWatchAsync);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: new           #3                  // class io/micrometer/core/instrument/util/NamedThreadFactory
       7: dup
       8: ldc           #4                  // String cloudwatch-metrics-publisher
      10: invokespecial #5                  // Method io/micrometer/core/instrument/util/NamedThreadFactory."<init>":(Ljava/lang/String;)V
      13: invokespecial #6                  // Method "<init>":(Lio/micrometer/cloudwatch/CloudWatchConfig;Lio/micrometer/core/instrument/Clock;Lcom/amazonaws/services/cloudwatch/AmazonCloudWatchAsync;Ljava/util/concurrent/ThreadFactory;)V
      16: return

  public io.micrometer.cloudwatch.CloudWatchMeterRegistry(io.micrometer.cloudwatch.CloudWatchConfig, io.micrometer.core.instrument.Clock, com.amazonaws.services.cloudwatch.AmazonCloudWatchAsync, java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #7                  // Method io/micrometer/core/instrument/step/StepMeterRegistry."<init>":(Lio/micrometer/core/instrument/step/StepRegistryConfig;Lio/micrometer/core/instrument/Clock;)V
       6: aload_0
       7: ldc           #8                  // class io/micrometer/cloudwatch/CloudWatchMeterRegistry
       9: invokestatic  #9                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      12: putfield      #2                  // Field logger:Lorg/slf4j/Logger;
      15: aload_1
      16: invokeinterface #10,  1           // InterfaceMethod io/micrometer/cloudwatch/CloudWatchConfig.namespace:()Ljava/lang/String;
      21: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: aload_0
      26: aload_3
      27: putfield      #12                 // Field amazonCloudWatchAsync:Lcom/amazonaws/services/cloudwatch/AmazonCloudWatchAsync;
      30: aload_0
      31: aload_1
      32: putfield      #13                 // Field config:Lio/micrometer/cloudwatch/CloudWatchConfig;
      35: aload_0
      36: invokevirtual #14                 // Method config:()Lio/micrometer/core/instrument/MeterRegistry$Config;
      39: getstatic     #15                 // Field io/micrometer/core/instrument/config/NamingConvention.identity:Lio/micrometer/core/instrument/config/NamingConvention;
      42: invokevirtual #16                 // Method io/micrometer/core/instrument/MeterRegistry$Config.namingConvention:(Lio/micrometer/core/instrument/config/NamingConvention;)Lio/micrometer/core/instrument/MeterRegistry$Config;
      45: pop
      46: aload_0
      47: aload         4
      49: invokevirtual #17                 // Method start:(Ljava/util/concurrent/ThreadFactory;)V
      52: return

  public void start(java.util.concurrent.ThreadFactory);
    Code:
       0: aload_0
       1: getfield      #13                 // Field config:Lio/micrometer/cloudwatch/CloudWatchConfig;
       4: invokeinterface #18,  1           // InterfaceMethod io/micrometer/cloudwatch/CloudWatchConfig.enabled:()Z
       9: ifeq          51
      12: aload_0
      13: getfield      #2                  // Field logger:Lorg/slf4j/Logger;
      16: new           #19                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #21                 // String publishing metrics to cloudwatch every
      25: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_0
      29: getfield      #13                 // Field config:Lio/micrometer/cloudwatch/CloudWatchConfig;
      32: invokeinterface #23,  1           // InterfaceMethod io/micrometer/cloudwatch/CloudWatchConfig.step:()Ljava/time/Duration;
      37: invokestatic  #24                 // Method io/micrometer/core/instrument/util/TimeUtils.format:(Ljava/time/Duration;)Ljava/lang/String;
      40: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokeinterface #26,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      51: aload_0
      52: aload_1
      53: invokespecial #27                 // Method io/micrometer/core/instrument/step/StepMeterRegistry.start:(Ljava/util/concurrent/ThreadFactory;)V
      56: return

  protected void publish();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method metricData:()Ljava/util/List;
       4: aload_0
       5: getfield      #13                 // Field config:Lio/micrometer/cloudwatch/CloudWatchConfig;
       8: invokeinterface #29,  1           // InterfaceMethod io/micrometer/cloudwatch/CloudWatchConfig.batchSize:()I
      13: invokestatic  #30                 // Method io/micrometer/cloudwatch/MetricDatumPartition.partition:(Ljava/util/List;I)Ljava/util/List;
      16: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore_1
      22: aload_1
      23: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          49
      31: aload_1
      32: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #34                 // class java/util/List
      40: astore_2
      41: aload_0
      42: aload_2
      43: invokespecial #35                 // Method sendMetricData:(Ljava/util/List;)V
      46: goto          22
      49: return

  private void sendMetricData(java.util.List<com.amazonaws.services.cloudwatch.model.MetricDatum>);
    Code:
       0: new           #36                 // class com/amazonaws/services/cloudwatch/model/PutMetricDataRequest
       3: dup
       4: invokespecial #37                 // Method com/amazonaws/services/cloudwatch/model/PutMetricDataRequest."<init>":()V
       7: aload_0
       8: getfield      #13                 // Field config:Lio/micrometer/cloudwatch/CloudWatchConfig;
      11: invokeinterface #10,  1           // InterfaceMethod io/micrometer/cloudwatch/CloudWatchConfig.namespace:()Ljava/lang/String;
      16: invokevirtual #38                 // Method com/amazonaws/services/cloudwatch/model/PutMetricDataRequest.withNamespace:(Ljava/lang/String;)Lcom/amazonaws/services/cloudwatch/model/PutMetricDataRequest;
      19: aload_1
      20: invokevirtual #39                 // Method com/amazonaws/services/cloudwatch/model/PutMetricDataRequest.withMetricData:(Ljava/util/Collection;)Lcom/amazonaws/services/cloudwatch/model/PutMetricDataRequest;
      23: astore_2
      24: aload_0
      25: getfield      #12                 // Field amazonCloudWatchAsync:Lcom/amazonaws/services/cloudwatch/AmazonCloudWatchAsync;
      28: aload_2
      29: new           #40                 // class io/micrometer/cloudwatch/CloudWatchMeterRegistry$1
      32: dup
      33: aload_0
      34: invokespecial #41                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$1."<init>":(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry;)V
      37: invokeinterface #42,  3           // InterfaceMethod com/amazonaws/services/cloudwatch/AmazonCloudWatchAsync.putMetricDataAsync:(Lcom/amazonaws/services/cloudwatch/model/PutMetricDataRequest;Lcom/amazonaws/handlers/AsyncHandler;)Ljava/util/concurrent/Future;
      42: pop
      43: return

  java.util.List<com.amazonaws.services.cloudwatch.model.MetricDatum> metricData();
    Code:
       0: new           #43                 // class io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #44                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch."<init>":(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry;Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$1;)V
       9: astore_1
      10: aload_0
      11: invokevirtual #45                 // Method getMeters:()Ljava/util/List;
      14: invokeinterface #46,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      19: aload_1
      20: invokedynamic #47,  0             // InvokeDynamic #0:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      25: invokeinterface #48,  2           // InterfaceMethod java/util/stream/Stream.flatMap:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      30: invokestatic  #49                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      33: invokeinterface #50,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      38: checkcast     #34                 // class java/util/List
      41: areturn

  protected java.util.concurrent.TimeUnit getBaseTimeUnit();
    Code:
       0: getstatic     #51                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
       3: areturn

  private static java.util.stream.Stream lambda$metricData$9(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_1
       1: aload_0
       2: dup
       3: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       6: pop
       7: invokedynamic #53,  0             // InvokeDynamic #1:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      12: aload_0
      13: dup
      14: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      17: pop
      18: invokedynamic #54,  0             // InvokeDynamic #2:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      23: aload_0
      24: dup
      25: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      28: pop
      29: invokedynamic #55,  0             // InvokeDynamic #3:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      34: aload_0
      35: dup
      36: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      39: pop
      40: invokedynamic #56,  0             // InvokeDynamic #4:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      45: aload_0
      46: dup
      47: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      50: pop
      51: invokedynamic #57,  0             // InvokeDynamic #5:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      56: aload_0
      57: dup
      58: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      61: pop
      62: invokedynamic #58,  0             // InvokeDynamic #6:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      67: aload_0
      68: dup
      69: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      72: pop
      73: invokedynamic #59,  0             // InvokeDynamic #7:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      78: aload_0
      79: dup
      80: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      83: pop
      84: invokedynamic #60,  0             // InvokeDynamic #8:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
      89: aload_0
      90: dup
      91: invokevirtual #52                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      94: pop
      95: invokedynamic #61,  0             // InvokeDynamic #9:apply:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;)Ljava/util/function/Function;
     100: invokeinterface #62,  10          // InterfaceMethod io/micrometer/core/instrument/Meter.match:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/lang/Object;
     105: checkcast     #63                 // class java/util/stream/Stream
     108: areturn

  private static java.util.stream.Stream lambda$null$8(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.Meter);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #64                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$300:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/Meter;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$7(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.FunctionTimer);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #65                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$400:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/FunctionTimer;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$6(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.FunctionCounter);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #66                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$500:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/FunctionCounter;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$5(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.TimeGauge);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #67                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$600:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/TimeGauge;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$4(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.LongTaskTimer);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #68                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$700:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/LongTaskTimer;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$3(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.DistributionSummary);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #69                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$800:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/DistributionSummary;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$2(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.Timer);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #70                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$900:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/Timer;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$1(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.Counter);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #71                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$1000:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/Counter;)Ljava/util/stream/Stream;
       5: areturn

  private static java.util.stream.Stream lambda$null$0(io.micrometer.cloudwatch.CloudWatchMeterRegistry$Batch, io.micrometer.core.instrument.Gauge);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #72                 // Method io/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch.access$1100:(Lio/micrometer/cloudwatch/CloudWatchMeterRegistry$Batch;Lio/micrometer/core/instrument/Gauge;)Ljava/util/stream/Stream;
       5: areturn

  static org.slf4j.Logger access$000(io.micrometer.cloudwatch.CloudWatchMeterRegistry);
    Code:
       0: aload_0
       1: getfield      #2                  // Field logger:Lorg/slf4j/Logger;
       4: areturn

  static io.micrometer.core.instrument.Clock access$200(io.micrometer.cloudwatch.CloudWatchMeterRegistry);
    Code:
       0: aload_0
       1: getfield      #1                  // Field clock:Lio/micrometer/core/instrument/Clock;
       4: areturn
}
