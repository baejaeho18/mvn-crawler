Compiled from "XmlSerializer.java"
public abstract class org.htmlcleaner.XmlSerializer extends org.htmlcleaner.Serializer {
  public static final java.lang.String XMLNS_NAMESPACE;

  public static final java.lang.String BEGIN_CDATA;

  public static final java.lang.String END_CDATA;

  public static final java.lang.String SAFE_BEGIN_CDATA;

  public static final java.lang.String SAFE_END_CDATA;

  private boolean creatingHtmlDom;

  protected org.htmlcleaner.XmlSerializer(org.htmlcleaner.CleanerProperties);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/htmlcleaner/Serializer."<init>":(Lorg/htmlcleaner/CleanerProperties;)V
       5: return

  public void setCreatingHtmlDom(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field creatingHtmlDom:Z
       5: return

  public boolean isCreatingHtmlDom();
    Code:
       0: aload_0
       1: getfield      #2                  // Field creatingHtmlDom:Z
       4: ireturn

  public void writeXmlToStream(org.htmlcleaner.TagNode, java.io.OutputStream, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #3                  // Method org/htmlcleaner/Serializer.writeToStream:(Lorg/htmlcleaner/TagNode;Ljava/io/OutputStream;Ljava/lang/String;)V
       7: return

  public void writeXmlToStream(org.htmlcleaner.TagNode, java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method org/htmlcleaner/Serializer.writeToStream:(Lorg/htmlcleaner/TagNode;Ljava/io/OutputStream;)V
       6: return

  public void writeXmlToFile(org.htmlcleaner.TagNode, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #5                  // Method org/htmlcleaner/Serializer.writeToFile:(Lorg/htmlcleaner/TagNode;Ljava/lang/String;Ljava/lang/String;)V
       7: return

  public void writeXmlToFile(org.htmlcleaner.TagNode, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #6                  // Method org/htmlcleaner/Serializer.writeToFile:(Lorg/htmlcleaner/TagNode;Ljava/lang/String;)V
       6: return

  public java.lang.String getXmlAsString(org.htmlcleaner.TagNode, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #7                  // Method org/htmlcleaner/Serializer.getAsString:(Lorg/htmlcleaner/TagNode;Ljava/lang/String;)Ljava/lang/String;
       6: areturn

  public java.lang.String getXmlAsString(org.htmlcleaner.TagNode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/htmlcleaner/Serializer.getAsString:(Lorg/htmlcleaner/TagNode;)Ljava/lang/String;
       5: areturn

  public void writeXml(org.htmlcleaner.TagNode, java.io.Writer, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #9                  // Method org/htmlcleaner/Serializer.write:(Lorg/htmlcleaner/TagNode;Ljava/io/Writer;Ljava/lang/String;)V
       7: return

  protected java.lang.String escapeXml(java.lang.String);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #10                 // Field props:Lorg/htmlcleaner/CleanerProperties;
       5: aload_0
       6: invokevirtual #11                 // Method isCreatingHtmlDom:()Z
       9: invokestatic  #12                 // Method org/htmlcleaner/Utils.escapeXml:(Ljava/lang/String;Lorg/htmlcleaner/CleanerProperties;Z)Ljava/lang/String;
      12: areturn

  protected boolean dontEscape(org.htmlcleaner.TagNode);
    Code:
       0: aload_0
       1: getfield      #10                 // Field props:Lorg/htmlcleaner/CleanerProperties;
       4: invokevirtual #13                 // Method org/htmlcleaner/CleanerProperties.isUseCdataForScriptAndStyle:()Z
       7: ifeq          22
      10: aload_0
      11: aload_1
      12: invokevirtual #14                 // Method isScriptOrStyle:(Lorg/htmlcleaner/TagNode;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  protected boolean isMinimizedTagSyntax(org.htmlcleaner.TagNode);
    Code:
       0: aload_0
       1: getfield      #10                 // Field props:Lorg/htmlcleaner/CleanerProperties;
       4: invokevirtual #15                 // Method org/htmlcleaner/CleanerProperties.getTagInfoProvider:()Lorg/htmlcleaner/ITagInfoProvider;
       7: aload_1
       8: invokevirtual #16                 // Method org/htmlcleaner/TagNode.getName:()Ljava/lang/String;
      11: invokeinterface #17,  2           // InterfaceMethod org/htmlcleaner/ITagInfoProvider.getTagInfo:(Ljava/lang/String;)Lorg/htmlcleaner/TagInfo;
      16: astore_2
      17: aload_1
      18: invokevirtual #18                 // Method org/htmlcleaner/TagNode.isEmpty:()Z
      21: ifeq          60
      24: aload_2
      25: ifnull        35
      28: aload_2
      29: invokevirtual #19                 // Method org/htmlcleaner/TagInfo.isMinimizedTagPermitted:()Z
      32: ifeq          60
      35: aload_0
      36: getfield      #10                 // Field props:Lorg/htmlcleaner/CleanerProperties;
      39: invokevirtual #20                 // Method org/htmlcleaner/CleanerProperties.isUseEmptyElementTags:()Z
      42: ifne          56
      45: aload_2
      46: ifnull        60
      49: aload_2
      50: invokevirtual #21                 // Method org/htmlcleaner/TagInfo.isEmptyTag:()Z
      53: ifeq          60
      56: iconst_1
      57: goto          61
      60: iconst_0
      61: ireturn

  protected void serializeOpenTag(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokevirtual #22                 // Method serializeOpenTag:(Lorg/htmlcleaner/TagNode;Ljava/io/Writer;Z)V
       7: return

  protected void serializeOpenTag(org.htmlcleaner.TagNode, java.io.Writer, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method isForbiddenTag:(Lorg/htmlcleaner/TagNode;)Z
       5: ifne          213
       8: aload_1
       9: invokevirtual #16                 // Method org/htmlcleaner/TagNode.getName:()Ljava/lang/String;
      12: astore        4
      14: aload_1
      15: invokevirtual #24                 // Method org/htmlcleaner/TagNode.getAttributes:()Ljava/util/Map;
      18: astore        5
      20: aload_0
      21: getfield      #10                 // Field props:Lorg/htmlcleaner/CleanerProperties;
      24: invokevirtual #25                 // Method org/htmlcleaner/CleanerProperties.isAddNewlineToHeadAndBody:()Z
      27: ifeq          45
      30: aload_0
      31: aload         4
      33: invokevirtual #26                 // Method isHeadOrBody:(Ljava/lang/String;)Z
      36: ifeq          45
      39: aload_2
      40: ldc           #27                 // String \n
      42: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      45: aload_2
      46: new           #29                 // class java/lang/StringBuilder
      49: dup
      50: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      53: ldc           #31                 // String <
      55: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload         4
      60: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      69: aload         5
      71: invokeinterface #34,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      76: invokeinterface #35,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      81: astore        6
      83: aload         6
      85: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      90: ifeq          142
      93: aload         6
      95: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     100: checkcast     #38                 // class java/util/Map$Entry
     103: astore        7
     105: aload         7
     107: invokeinterface #39,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     112: checkcast     #40                 // class java/lang/String
     115: astore        8
     117: aload         7
     119: invokeinterface #41,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     124: checkcast     #40                 // class java/lang/String
     127: astore        9
     129: aload_0
     130: aload_1
     131: aload_2
     132: aload         8
     134: aload         9
     136: invokevirtual #42                 // Method serializeAttribute:(Lorg/htmlcleaner/TagNode;Ljava/io/Writer;Ljava/lang/String;Ljava/lang/String;)V
     139: goto          83
     142: aload_0
     143: aload_1
     144: invokevirtual #43                 // Method isMinimizedTagSyntax:(Lorg/htmlcleaner/TagNode;)Z
     147: ifeq          169
     150: aload_2
     151: ldc           #44                 // String  />
     153: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     156: iload_3
     157: ifeq          213
     160: aload_2
     161: ldc           #27                 // String \n
     163: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     166: goto          213
     169: aload_0
     170: aload_1
     171: invokevirtual #45                 // Method dontEscape:(Lorg/htmlcleaner/TagNode;)Z
     174: ifeq          207
     177: aload_2
     178: ldc           #46                 // String >
     180: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     183: aload_1
     184: invokevirtual #47                 // Method org/htmlcleaner/TagNode.getText:()Ljava/lang/CharSequence;
     187: invokevirtual #48                 // Method java/lang/Object.toString:()Ljava/lang/String;
     190: ldc           #49                 // String /*<![CDATA[*/
     192: invokevirtual #50                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
     195: ifne          213
     198: aload_2
     199: ldc           #49                 // String /*<![CDATA[*/
     201: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     204: goto          213
     207: aload_2
     208: ldc           #46                 // String >
     210: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
     213: return

  protected boolean isForbiddenTag(org.htmlcleaner.TagNode);
    Code:
       0: aload_1
       1: invokevirtual #16                 // Method org/htmlcleaner/TagNode.getName:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnonnull     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  protected boolean isHeadOrBody(java.lang.String);
    Code:
       0: ldc           #51                 // String head
       2: aload_1
       3: invokevirtual #52                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
       6: ifne          18
       9: ldc           #53                 // String body
      11: aload_1
      12: invokevirtual #52                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  protected void serializeAttribute(org.htmlcleaner.TagNode, java.io.Writer, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload         4
       5: invokevirtual #54                 // Method isForbiddenAttribute:(Lorg/htmlcleaner/TagNode;Ljava/lang/String;Ljava/lang/String;)Z
       8: ifne          53
      11: aload_2
      12: new           #29                 // class java/lang/StringBuilder
      15: dup
      16: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      19: ldc           #55                 // String
      21: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_3
      25: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #56                 // String =\"
      30: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_0
      34: aload         4
      36: invokevirtual #57                 // Method escapeXml:(Ljava/lang/String;)Ljava/lang/String;
      39: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: ldc           #58                 // String \"
      44: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      50: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      53: return

  protected boolean isForbiddenAttribute(org.htmlcleaner.TagNode, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #10                 // Field props:Lorg/htmlcleaner/CleanerProperties;
       4: invokevirtual #59                 // Method org/htmlcleaner/CleanerProperties.isNamespacesAware:()Z
       7: ifne          32
      10: ldc           #60                 // String xmlns
      12: aload_2
      13: invokevirtual #61                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      16: ifne          28
      19: aload_2
      20: ldc           #62                 // String xmlns:
      22: invokevirtual #50                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  protected void serializeEndTag(org.htmlcleaner.TagNode, java.io.Writer) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokevirtual #63                 // Method serializeEndTag:(Lorg/htmlcleaner/TagNode;Ljava/io/Writer;Z)V
       7: return

  protected void serializeEndTag(org.htmlcleaner.TagNode, java.io.Writer, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method isForbiddenTag:(Lorg/htmlcleaner/TagNode;)Z
       5: ifne          85
       8: aload_1
       9: invokevirtual #16                 // Method org/htmlcleaner/TagNode.getName:()Ljava/lang/String;
      12: astore        4
      14: aload_0
      15: aload_1
      16: invokevirtual #45                 // Method dontEscape:(Lorg/htmlcleaner/TagNode;)Z
      19: ifeq          46
      22: aload_1
      23: invokevirtual #47                 // Method org/htmlcleaner/TagNode.getText:()Ljava/lang/CharSequence;
      26: invokevirtual #48                 // Method java/lang/Object.toString:()Ljava/lang/String;
      29: invokevirtual #64                 // Method java/lang/String.trim:()Ljava/lang/String;
      32: ldc           #65                 // String /*]]>*/
      34: invokevirtual #66                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      37: ifne          46
      40: aload_2
      41: ldc           #65                 // String /*]]>*/
      43: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      46: aload_2
      47: new           #29                 // class java/lang/StringBuilder
      50: dup
      51: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      54: ldc           #67                 // String </
      56: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: aload         4
      61: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: ldc           #46                 // String >
      66: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      75: iload_3
      76: ifeq          85
      79: aload_2
      80: ldc           #27                 // String \n
      82: invokevirtual #28                 // Method java/io/Writer.write:(Ljava/lang/String;)V
      85: return
}
