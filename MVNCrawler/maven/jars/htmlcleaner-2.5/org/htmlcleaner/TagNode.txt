Compiled from "TagNode.java"
public class org.htmlcleaner.TagNode extends org.htmlcleaner.TagToken implements org.htmlcleaner.HtmlNode {
  private org.htmlcleaner.TagNode parent;

  private java.util.Map<java.lang.String, java.lang.String> attributes;

  private java.util.List children;

  private org.htmlcleaner.DoctypeToken docType;

  private java.util.List itemsToMove;

  private java.util.Map<java.lang.String, java.lang.String> nsDeclarations;

  private transient boolean isFormed;

  private boolean autoGenerated;

  private boolean pruned;

  public org.htmlcleaner.TagNode(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: ifnonnull     9
       5: aconst_null
       6: goto          13
       9: aload_1
      10: invokevirtual #1                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      13: invokespecial #2                  // Method org/htmlcleaner/TagToken."<init>":(Ljava/lang/String;)V
      16: aload_0
      17: new           #3                  // class java/util/LinkedHashMap
      20: dup
      21: invokespecial #4                  // Method java/util/LinkedHashMap."<init>":()V
      24: putfield      #5                  // Field attributes:Ljava/util/Map;
      27: aload_0
      28: new           #6                  // class java/util/ArrayList
      31: dup
      32: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      35: putfield      #8                  // Field children:Ljava/util/List;
      38: return

  public java.lang.String getAttributeByName(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        23
       4: aload_0
       5: getfield      #5                  // Field attributes:Ljava/util/Map;
       8: aload_1
       9: invokevirtual #1                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      12: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #10                 // class java/lang/String
      20: goto          24
      23: aconst_null
      24: areturn

  public java.util.Map<java.lang.String, java.lang.String> getAttributes();
    Code:
       0: aload_0
       1: getfield      #5                  // Field attributes:Ljava/util/Map;
       4: areturn

  public void setAttributes(java.util.Map<java.lang.String, java.lang.String>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field attributes:Ljava/util/Map;
       5: return

  public boolean hasAttribute(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        20
       4: aload_0
       5: getfield      #5                  // Field attributes:Ljava/util/Map;
       8: aload_1
       9: invokevirtual #1                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      12: invokeinterface #11,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      17: goto          21
      20: iconst_0
      21: ireturn

  public void addAttribute(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: ifnull        54
       4: aload_1
       5: invokevirtual #12                 // Method java/lang/String.trim:()Ljava/lang/String;
       8: invokevirtual #1                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      11: astore_3
      12: aload_2
      13: ifnonnull     21
      16: ldc           #13                 // String
      18: goto          32
      21: aload_2
      22: invokevirtual #12                 // Method java/lang/String.trim:()Ljava/lang/String;
      25: ldc           #14                 // String \\p{Cntrl}
      27: ldc           #15                 // String
      29: invokevirtual #16                 // Method java/lang/String.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      32: astore        4
      34: aload_3
      35: invokevirtual #17                 // Method java/lang/String.length:()I
      38: ifeq          54
      41: aload_0
      42: getfield      #5                  // Field attributes:Ljava/util/Map;
      45: aload_3
      46: aload         4
      48: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: pop
      54: return

  public void removeAttribute(java.lang.String);
    Code:
       0: aload_1
       1: ifnull        30
       4: ldc           #13                 // String
       6: aload_1
       7: invokevirtual #12                 // Method java/lang/String.trim:()Ljava/lang/String;
      10: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ifne          30
      16: aload_0
      17: getfield      #5                  // Field attributes:Ljava/util/Map;
      20: aload_1
      21: invokevirtual #1                  // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      24: invokeinterface #20,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: return

  public java.util.List<org.htmlcleaner.TagNode> getChildren();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method getChildTagList:()Ljava/util/List;
       4: areturn

  void setChildren(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field children:Ljava/util/List;
       5: return

  public java.util.List getAllChildren();
    Code:
       0: aload_0
       1: getfield      #8                  // Field children:Ljava/util/List;
       4: areturn

  public java.util.List<org.htmlcleaner.TagNode> getChildTagList();
    Code:
       0: new           #6                  // class java/util/ArrayList
       3: dup
       4: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #8                  // Field children:Ljava/util/List;
      12: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          55
      27: aload_2
      28: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: astore_3
      34: aload_3
      35: instanceof    #25                 // class org/htmlcleaner/TagNode
      38: ifeq          52
      41: aload_1
      42: aload_3
      43: checkcast     #25                 // class org/htmlcleaner/TagNode
      46: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      51: pop
      52: goto          18
      55: aload_1
      56: areturn

  public boolean hasChildren();
    Code:
       0: aload_0
       1: getfield      #8                  // Field children:Ljava/util/List;
       4: invokeinterface #27,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ifne          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public org.htmlcleaner.TagNode[] getChildTags();
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method getChildTagList:()Ljava/util/List;
       4: astore_1
       5: aload_1
       6: invokeinterface #28,  1           // InterfaceMethod java/util/List.size:()I
      11: anewarray     #25                 // class org/htmlcleaner/TagNode
      14: astore_2
      15: iconst_0
      16: istore_3
      17: iload_3
      18: aload_1
      19: invokeinterface #28,  1           // InterfaceMethod java/util/List.size:()I
      24: if_icmpge     46
      27: aload_2
      28: iload_3
      29: aload_1
      30: iload_3
      31: invokeinterface #29,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      36: checkcast     #25                 // class org/htmlcleaner/TagNode
      39: aastore
      40: iinc          3, 1
      43: goto          17
      46: aload_2
      47: areturn

  public java.lang.CharSequence getText();
    Code:
       0: new           #30                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #31                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #8                  // Field children:Ljava/util/List;
      12: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          82
      27: aload_2
      28: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: astore_3
      34: aload_3
      35: instanceof    #32                 // class org/htmlcleaner/ContentNode
      38: ifeq          56
      41: aload_1
      42: aload_3
      43: checkcast     #32                 // class org/htmlcleaner/ContentNode
      46: invokevirtual #33                 // Method org/htmlcleaner/ContentNode.getContent:()Ljava/lang/String;
      49: invokevirtual #34                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: pop
      53: goto          79
      56: aload_3
      57: instanceof    #25                 // class org/htmlcleaner/TagNode
      60: ifeq          79
      63: aload_3
      64: checkcast     #25                 // class org/htmlcleaner/TagNode
      67: invokevirtual #35                 // Method getText:()Ljava/lang/CharSequence;
      70: astore        4
      72: aload_1
      73: aload         4
      75: invokevirtual #36                 // Method java/lang/StringBuilder.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;
      78: pop
      79: goto          18
      82: aload_1
      83: areturn

  public int getChildIndex(org.htmlcleaner.HtmlNode);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #8                  // Field children:Ljava/util/List;
       6: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          43
      21: aload_3
      22: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: astore        4
      29: aload         4
      31: aload_1
      32: if_acmpne     37
      35: iload_2
      36: ireturn
      37: iinc          2, 1
      40: goto          12
      43: iconst_m1
      44: ireturn

  public void insertChild(int, org.htmlcleaner.HtmlNode);
    Code:
       0: aload_0
       1: getfield      #8                  // Field children:Ljava/util/List;
       4: iload_1
       5: aload_2
       6: invokeinterface #37,  3           // InterfaceMethod java/util/List.add:(ILjava/lang/Object;)V
      11: return

  public void insertChildBefore(org.htmlcleaner.HtmlNode, org.htmlcleaner.HtmlNode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method getChildIndex:(Lorg/htmlcleaner/HtmlNode;)I
       5: istore_3
       6: iload_3
       7: iflt          16
      10: aload_0
      11: iload_3
      12: aload_2
      13: invokevirtual #39                 // Method insertChild:(ILorg/htmlcleaner/HtmlNode;)V
      16: return

  public void insertChildAfter(org.htmlcleaner.HtmlNode, org.htmlcleaner.HtmlNode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #38                 // Method getChildIndex:(Lorg/htmlcleaner/HtmlNode;)I
       5: istore_3
       6: iload_3
       7: iflt          18
      10: aload_0
      11: iload_3
      12: iconst_1
      13: iadd
      14: aload_2
      15: invokevirtual #39                 // Method insertChild:(ILorg/htmlcleaner/HtmlNode;)V
      18: return

  public org.htmlcleaner.TagNode getParent();
    Code:
       0: aload_0
       1: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
       4: areturn

  public org.htmlcleaner.DoctypeToken getDocType();
    Code:
       0: aload_0
       1: getfield      #41                 // Field docType:Lorg/htmlcleaner/DoctypeToken;
       4: areturn

  public void setDocType(org.htmlcleaner.DoctypeToken);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #41                 // Field docType:Lorg/htmlcleaner/DoctypeToken;
       5: return

  public void addChild(java.lang.Object);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_1
       6: instanceof    #42                 // class java/util/List
       9: ifeq          23
      12: aload_0
      13: aload_1
      14: checkcast     #42                 // class java/util/List
      17: invokevirtual #43                 // Method addChildren:(Ljava/util/List;)V
      20: goto          78
      23: aload_1
      24: instanceof    #44                 // class org/htmlcleaner/ProxyTagNode
      27: ifeq          50
      30: aload_0
      31: getfield      #8                  // Field children:Ljava/util/List;
      34: aload_1
      35: checkcast     #44                 // class org/htmlcleaner/ProxyTagNode
      38: invokevirtual #45                 // Method org/htmlcleaner/ProxyTagNode.getToken:()Ljava/lang/Object;
      41: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      46: pop
      47: goto          78
      50: aload_0
      51: getfield      #8                  // Field children:Ljava/util/List;
      54: aload_1
      55: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      60: pop
      61: aload_1
      62: instanceof    #25                 // class org/htmlcleaner/TagNode
      65: ifeq          78
      68: aload_1
      69: checkcast     #25                 // class org/htmlcleaner/TagNode
      72: astore_2
      73: aload_2
      74: aload_0
      75: putfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      78: return

  public void addChildren(java.util.List);
    Code:
       0: aload_1
       1: ifnull        35
       4: aload_1
       5: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          35
      20: aload_2
      21: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: astore_3
      27: aload_0
      28: aload_3
      29: invokevirtual #46                 // Method addChild:(Ljava/lang/Object;)V
      32: goto          11
      35: return

  private org.htmlcleaner.TagNode findElement(org.htmlcleaner.conditional.ITagNodeCondition, boolean);
    Code:
       0: aload_1
       1: ifnull        84
       4: aload_0
       5: getfield      #8                  // Field children:Ljava/util/List;
       8: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      13: astore_3
      14: aload_3
      15: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      20: ifeq          84
      23: aload_3
      24: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      29: astore        4
      31: aload         4
      33: instanceof    #25                 // class org/htmlcleaner/TagNode
      36: ifeq          81
      39: aload         4
      41: checkcast     #25                 // class org/htmlcleaner/TagNode
      44: astore        5
      46: aload_1
      47: aload         5
      49: invokeinterface #47,  2           // InterfaceMethod org/htmlcleaner/conditional/ITagNodeCondition.satisfy:(Lorg/htmlcleaner/TagNode;)Z
      54: ifeq          60
      57: aload         5
      59: areturn
      60: iload_2
      61: ifeq          81
      64: aload         5
      66: aload_1
      67: iload_2
      68: invokespecial #48                 // Method findElement:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Lorg/htmlcleaner/TagNode;
      71: astore        6
      73: aload         6
      75: ifnull        81
      78: aload         6
      80: areturn
      81: goto          14
      84: aconst_null
      85: areturn

  public java.util.List getElementList(org.htmlcleaner.conditional.ITagNodeCondition, boolean);
    Code:
       0: new           #49                 // class java/util/LinkedList
       3: dup
       4: invokespecial #50                 // Method java/util/LinkedList."<init>":()V
       7: astore_3
       8: aload_1
       9: ifnonnull     14
      12: aload_3
      13: areturn
      14: aload_0
      15: getfield      #8                  // Field children:Ljava/util/List;
      18: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      23: astore        4
      25: aload         4
      27: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          119
      35: aload         4
      37: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      42: astore        5
      44: aload         5
      46: instanceof    #25                 // class org/htmlcleaner/TagNode
      49: ifeq          116
      52: aload         5
      54: checkcast     #25                 // class org/htmlcleaner/TagNode
      57: astore        6
      59: aload_1
      60: aload         6
      62: invokeinterface #47,  2           // InterfaceMethod org/htmlcleaner/conditional/ITagNodeCondition.satisfy:(Lorg/htmlcleaner/TagNode;)Z
      67: ifeq          79
      70: aload_3
      71: aload         6
      73: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      78: pop
      79: iload_2
      80: ifeq          116
      83: aload         6
      85: aload_1
      86: iload_2
      87: invokevirtual #51                 // Method getElementList:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Ljava/util/List;
      90: astore        7
      92: aload         7
      94: ifnull        116
      97: aload         7
      99: invokeinterface #28,  1           // InterfaceMethod java/util/List.size:()I
     104: ifle          116
     107: aload_3
     108: aload         7
     110: invokeinterface #52,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
     115: pop
     116: goto          25
     119: aload_3
     120: areturn

  private org.htmlcleaner.TagNode[] getElements(org.htmlcleaner.conditional.ITagNodeCondition, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #51                 // Method getElementList:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Ljava/util/List;
       6: astore_3
       7: aload_3
       8: ifnonnull     20
      11: iconst_0
      12: anewarray     #25                 // class org/htmlcleaner/TagNode
      15: astore        4
      17: goto          43
      20: aload_3
      21: aload_3
      22: invokeinterface #28,  1           // InterfaceMethod java/util/List.size:()I
      27: anewarray     #25                 // class org/htmlcleaner/TagNode
      30: invokeinterface #53,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      35: checkcast     #54                 // class "[Lorg/htmlcleaner/TagNode;"
      38: checkcast     #54                 // class "[Lorg/htmlcleaner/TagNode;"
      41: astore        4
      43: aload         4
      45: areturn

  public java.util.List getAllElementsList(boolean);
    Code:
       0: aload_0
       1: new           #55                 // class org/htmlcleaner/conditional/TagAllCondition
       4: dup
       5: invokespecial #56                 // Method org/htmlcleaner/conditional/TagAllCondition."<init>":()V
       8: iload_1
       9: invokevirtual #51                 // Method getElementList:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Ljava/util/List;
      12: areturn

  public org.htmlcleaner.TagNode[] getAllElements(boolean);
    Code:
       0: aload_0
       1: new           #55                 // class org/htmlcleaner/conditional/TagAllCondition
       4: dup
       5: invokespecial #56                 // Method org/htmlcleaner/conditional/TagAllCondition."<init>":()V
       8: iload_1
       9: invokespecial #57                 // Method getElements:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)[Lorg/htmlcleaner/TagNode;
      12: areturn

  public org.htmlcleaner.TagNode findElementByName(java.lang.String, boolean);
    Code:
       0: aload_0
       1: new           #58                 // class org/htmlcleaner/conditional/TagNodeNameCondition
       4: dup
       5: aload_1
       6: invokespecial #59                 // Method org/htmlcleaner/conditional/TagNodeNameCondition."<init>":(Ljava/lang/String;)V
       9: iload_2
      10: invokespecial #48                 // Method findElement:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Lorg/htmlcleaner/TagNode;
      13: areturn

  public java.util.List getElementListByName(java.lang.String, boolean);
    Code:
       0: aload_0
       1: new           #58                 // class org/htmlcleaner/conditional/TagNodeNameCondition
       4: dup
       5: aload_1
       6: invokespecial #59                 // Method org/htmlcleaner/conditional/TagNodeNameCondition."<init>":(Ljava/lang/String;)V
       9: iload_2
      10: invokevirtual #51                 // Method getElementList:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Ljava/util/List;
      13: areturn

  public org.htmlcleaner.TagNode[] getElementsByName(java.lang.String, boolean);
    Code:
       0: aload_0
       1: new           #58                 // class org/htmlcleaner/conditional/TagNodeNameCondition
       4: dup
       5: aload_1
       6: invokespecial #59                 // Method org/htmlcleaner/conditional/TagNodeNameCondition."<init>":(Ljava/lang/String;)V
       9: iload_2
      10: invokespecial #57                 // Method getElements:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)[Lorg/htmlcleaner/TagNode;
      13: areturn

  public org.htmlcleaner.TagNode findElementHavingAttribute(java.lang.String, boolean);
    Code:
       0: aload_0
       1: new           #60                 // class org/htmlcleaner/conditional/TagNodeAttExistsCondition
       4: dup
       5: aload_1
       6: invokespecial #61                 // Method org/htmlcleaner/conditional/TagNodeAttExistsCondition."<init>":(Ljava/lang/String;)V
       9: iload_2
      10: invokespecial #48                 // Method findElement:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Lorg/htmlcleaner/TagNode;
      13: areturn

  public java.util.List getElementListHavingAttribute(java.lang.String, boolean);
    Code:
       0: aload_0
       1: new           #60                 // class org/htmlcleaner/conditional/TagNodeAttExistsCondition
       4: dup
       5: aload_1
       6: invokespecial #61                 // Method org/htmlcleaner/conditional/TagNodeAttExistsCondition."<init>":(Ljava/lang/String;)V
       9: iload_2
      10: invokevirtual #51                 // Method getElementList:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Ljava/util/List;
      13: areturn

  public org.htmlcleaner.TagNode[] getElementsHavingAttribute(java.lang.String, boolean);
    Code:
       0: aload_0
       1: new           #60                 // class org/htmlcleaner/conditional/TagNodeAttExistsCondition
       4: dup
       5: aload_1
       6: invokespecial #61                 // Method org/htmlcleaner/conditional/TagNodeAttExistsCondition."<init>":(Ljava/lang/String;)V
       9: iload_2
      10: invokespecial #57                 // Method getElements:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)[Lorg/htmlcleaner/TagNode;
      13: areturn

  public org.htmlcleaner.TagNode findElementByAttValue(java.lang.String, java.lang.String, boolean, boolean);
    Code:
       0: aload_0
       1: new           #62                 // class org/htmlcleaner/conditional/TagNodeAttValueCondition
       4: dup
       5: aload_1
       6: aload_2
       7: iload         4
       9: invokespecial #63                 // Method org/htmlcleaner/conditional/TagNodeAttValueCondition."<init>":(Ljava/lang/String;Ljava/lang/String;Z)V
      12: iload_3
      13: invokespecial #48                 // Method findElement:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Lorg/htmlcleaner/TagNode;
      16: areturn

  public java.util.List getElementListByAttValue(java.lang.String, java.lang.String, boolean, boolean);
    Code:
       0: aload_0
       1: new           #62                 // class org/htmlcleaner/conditional/TagNodeAttValueCondition
       4: dup
       5: aload_1
       6: aload_2
       7: iload         4
       9: invokespecial #63                 // Method org/htmlcleaner/conditional/TagNodeAttValueCondition."<init>":(Ljava/lang/String;Ljava/lang/String;Z)V
      12: iload_3
      13: invokevirtual #51                 // Method getElementList:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)Ljava/util/List;
      16: areturn

  public org.htmlcleaner.TagNode[] getElementsByAttValue(java.lang.String, java.lang.String, boolean, boolean);
    Code:
       0: aload_0
       1: new           #62                 // class org/htmlcleaner/conditional/TagNodeAttValueCondition
       4: dup
       5: aload_1
       6: aload_2
       7: iload         4
       9: invokespecial #63                 // Method org/htmlcleaner/conditional/TagNodeAttValueCondition."<init>":(Ljava/lang/String;Ljava/lang/String;Z)V
      12: iload_3
      13: invokespecial #57                 // Method getElements:(Lorg/htmlcleaner/conditional/ITagNodeCondition;Z)[Lorg/htmlcleaner/TagNode;
      16: areturn

  public java.lang.Object[] evaluateXPath(java.lang.String) throws org.htmlcleaner.XPatherException;
    Code:
       0: new           #64                 // class org/htmlcleaner/XPather
       3: dup
       4: aload_1
       5: invokespecial #65                 // Method org/htmlcleaner/XPather."<init>":(Ljava/lang/String;)V
       8: aload_0
       9: invokevirtual #66                 // Method org/htmlcleaner/XPather.evaluateAgainstNode:(Lorg/htmlcleaner/TagNode;)[Ljava/lang/Object;
      12: areturn

  public boolean removeFromTree();
    Code:
       0: aload_0
       1: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
       4: ifnull        18
       7: aload_0
       8: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      11: aload_0
      12: invokevirtual #67                 // Method removeChild:(Ljava/lang/Object;)Z
      15: goto          19
      18: iconst_0
      19: ireturn

  public boolean removeChild(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #8                  // Field children:Ljava/util/List;
       4: aload_1
       5: invokeinterface #68,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
      10: ireturn

  public void removeAllChildren();
    Code:
       0: aload_0
       1: getfield      #8                  // Field children:Ljava/util/List;
       4: invokeinterface #69,  1           // InterfaceMethod java/util/List.clear:()V
       9: return

  void addItemForMoving(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #70                 // Field itemsToMove:Ljava/util/List;
       4: ifnonnull     18
       7: aload_0
       8: new           #6                  // class java/util/ArrayList
      11: dup
      12: invokespecial #7                  // Method java/util/ArrayList."<init>":()V
      15: putfield      #70                 // Field itemsToMove:Ljava/util/List;
      18: aload_0
      19: getfield      #70                 // Field itemsToMove:Ljava/util/List;
      22: aload_1
      23: invokeinterface #26,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      28: pop
      29: return

  java.util.List getItemsToMove();
    Code:
       0: aload_0
       1: getfield      #70                 // Field itemsToMove:Ljava/util/List;
       4: areturn

  void setItemsToMove(java.util.List);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #70                 // Field itemsToMove:Ljava/util/List;
       5: return

  boolean isFormed();
    Code:
       0: aload_0
       1: getfield      #71                 // Field isFormed:Z
       4: ireturn

  void setFormed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #71                 // Field isFormed:Z
       5: return

  void setFormed();
    Code:
       0: aload_0
       1: iconst_1
       2: invokevirtual #72                 // Method setFormed:(Z)V
       5: return

  public void setAutoGenerated(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #73                 // Field autoGenerated:Z
       5: return

  public boolean isAutoGenerated();
    Code:
       0: aload_0
       1: getfield      #73                 // Field autoGenerated:Z
       4: ireturn

  public boolean isPruned();
    Code:
       0: aload_0
       1: getfield      #74                 // Field pruned:Z
       4: ireturn

  public void setPruned(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #74                 // Field pruned:Z
       5: return

  public boolean isEmpty();
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method isPruned:()Z
       4: ifne          85
       7: aload_0
       8: getfield      #8                  // Field children:Ljava/util/List;
      11: invokeinterface #22,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      16: astore_1
      17: aload_1
      18: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          85
      26: aload_1
      27: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: astore_2
      33: aload_2
      34: instanceof    #25                 // class org/htmlcleaner/TagNode
      37: ifeq          52
      40: aload_2
      41: checkcast     #25                 // class org/htmlcleaner/TagNode
      44: invokevirtual #75                 // Method isPruned:()Z
      47: ifne          82
      50: iconst_0
      51: ireturn
      52: aload_2
      53: instanceof    #32                 // class org/htmlcleaner/ContentNode
      56: ifeq          71
      59: aload_2
      60: checkcast     #32                 // class org/htmlcleaner/ContentNode
      63: invokevirtual #76                 // Method org/htmlcleaner/ContentNode.isBlank:()Z
      66: ifne          82
      69: iconst_0
      70: ireturn
      71: aload_2
      72: instanceof    #77                 // class org/htmlcleaner/CommentNode
      75: ifeq          80
      78: iconst_0
      79: ireturn
      80: iconst_0
      81: ireturn
      82: goto          17
      85: iconst_1
      86: ireturn

  public void addNamespaceDeclaration(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #78                 // Field nsDeclarations:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #79                 // class java/util/TreeMap
      11: dup
      12: invokespecial #80                 // Method java/util/TreeMap."<init>":()V
      15: putfield      #78                 // Field nsDeclarations:Ljava/util/Map;
      18: aload_0
      19: getfield      #78                 // Field nsDeclarations:Ljava/util/Map;
      22: aload_1
      23: aload_2
      24: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: return

  void collectNamespacePrefixesOnPath(java.util.Set<java.lang.String>);
    Code:
       0: aload_0
       1: invokevirtual #81                 // Method getNamespaceDeclarations:()Ljava/util/Map;
       4: astore_2
       5: aload_2
       6: ifnull        53
       9: aload_2
      10: invokeinterface #82,  1           // InterfaceMethod java/util/Map.keySet:()Ljava/util/Set;
      15: invokeinterface #83,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      20: astore_3
      21: aload_3
      22: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          53
      30: aload_3
      31: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #10                 // class java/lang/String
      39: astore        4
      41: aload_1
      42: aload         4
      44: invokeinterface #84,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      49: pop
      50: goto          21
      53: aload_0
      54: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      57: ifnull        68
      60: aload_0
      61: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      64: aload_1
      65: invokevirtual #85                 // Method collectNamespacePrefixesOnPath:(Ljava/util/Set;)V
      68: return

  java.lang.String getNamespaceURIOnPath(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #78                 // Field nsDeclarations:Ljava/util/Map;
       4: ifnull        88
       7: aload_0
       8: getfield      #78                 // Field nsDeclarations:Ljava/util/Map;
      11: invokeinterface #86,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      16: invokeinterface #83,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      21: astore_2
      22: aload_2
      23: invokeinterface #23,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          88
      31: aload_2
      32: invokeinterface #24,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #87                 // class java/util/Map$Entry
      40: astore_3
      41: aload_3
      42: invokeinterface #88,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      47: checkcast     #10                 // class java/lang/String
      50: astore        4
      52: aload         4
      54: aload_1
      55: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      58: ifne          75
      61: ldc           #13                 // String
      63: aload         4
      65: invokevirtual #19                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      68: ifeq          85
      71: aload_1
      72: ifnonnull     85
      75: aload_3
      76: invokeinterface #89,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      81: checkcast     #10                 // class java/lang/String
      84: areturn
      85: goto          22
      88: aload_0
      89: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      92: ifnull        104
      95: aload_0
      96: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      99: aload_1
     100: invokevirtual #90                 // Method getNamespaceURIOnPath:(Ljava/lang/String;)Ljava/lang/String;
     103: areturn
     104: aconst_null
     105: areturn

  public java.util.Map<java.lang.String, java.lang.String> getNamespaceDeclarations();
    Code:
       0: aload_0
       1: getfield      #78                 // Field nsDeclarations:Ljava/util/Map;
       4: areturn

  public void serialize(org.htmlcleaner.Serializer, java.io.Writer) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: aload_2
       3: invokevirtual #91                 // Method org/htmlcleaner/Serializer.serialize:(Lorg/htmlcleaner/TagNode;Ljava/io/Writer;)V
       6: return

  public org.htmlcleaner.TagNode makeCopy();
    Code:
       0: new           #25                 // class org/htmlcleaner/TagNode
       3: dup
       4: aload_0
       5: getfield      #92                 // Field name:Ljava/lang/String;
       8: invokespecial #93                 // Method "<init>":(Ljava/lang/String;)V
      11: astore_1
      12: aload_1
      13: getfield      #5                  // Field attributes:Ljava/util/Map;
      16: aload_0
      17: getfield      #5                  // Field attributes:Ljava/util/Map;
      20: invokeinterface #94,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      25: aload_1
      26: areturn

  public void traverse(org.htmlcleaner.TagNodeVisitor);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #95                 // Method traverseInternally:(Lorg/htmlcleaner/TagNodeVisitor;)Z
       5: pop
       6: return

  private boolean traverseInternally(org.htmlcleaner.TagNodeVisitor);
    Code:
       0: aload_1
       1: ifnull        159
       4: aload_0
       5: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
       8: ifnull        15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: istore_2
      17: aload_1
      18: aload_0
      19: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      22: aload_0
      23: invokeinterface #96,  3           // InterfaceMethod org/htmlcleaner/TagNodeVisitor.visit:(Lorg/htmlcleaner/TagNode;Lorg/htmlcleaner/HtmlNode;)Z
      28: istore_3
      29: iload_3
      30: ifne          35
      33: iconst_0
      34: ireturn
      35: iload_2
      36: ifeq          48
      39: aload_0
      40: getfield      #40                 // Field parent:Lorg/htmlcleaner/TagNode;
      43: ifnonnull     48
      46: iconst_1
      47: ireturn
      48: aload_0
      49: getfield      #8                  // Field children:Ljava/util/List;
      52: invokeinterface #97,  1           // InterfaceMethod java/util/List.toArray:()[Ljava/lang/Object;
      57: astore        4
      59: aload         4
      61: arraylength
      62: istore        5
      64: iconst_0
      65: istore        6
      67: iload         6
      69: iload         5
      71: if_icmpge     159
      74: aload         4
      76: iload         6
      78: aaload
      79: astore        7
      81: aload         7
      83: instanceof    #25                 // class org/htmlcleaner/TagNode
      86: ifeq          102
      89: aload         7
      91: checkcast     #25                 // class org/htmlcleaner/TagNode
      94: aload_1
      95: invokespecial #95                 // Method traverseInternally:(Lorg/htmlcleaner/TagNodeVisitor;)Z
      98: istore_3
      99: goto          147
     102: aload         7
     104: instanceof    #32                 // class org/htmlcleaner/ContentNode
     107: ifeq          126
     110: aload_1
     111: aload_0
     112: aload         7
     114: checkcast     #32                 // class org/htmlcleaner/ContentNode
     117: invokeinterface #96,  3           // InterfaceMethod org/htmlcleaner/TagNodeVisitor.visit:(Lorg/htmlcleaner/TagNode;Lorg/htmlcleaner/HtmlNode;)Z
     122: istore_3
     123: goto          147
     126: aload         7
     128: instanceof    #77                 // class org/htmlcleaner/CommentNode
     131: ifeq          147
     134: aload_1
     135: aload_0
     136: aload         7
     138: checkcast     #77                 // class org/htmlcleaner/CommentNode
     141: invokeinterface #96,  3           // InterfaceMethod org/htmlcleaner/TagNodeVisitor.visit:(Lorg/htmlcleaner/TagNode;Lorg/htmlcleaner/HtmlNode;)Z
     146: istore_3
     147: iload_3
     148: ifne          153
     151: iconst_0
     152: ireturn
     153: iinc          6, 1
     156: goto          67
     159: iconst_1
     160: ireturn
}
