Compiled from "CycleDetectingLockFactory.java"
public final class com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering<E extends java.lang.Enum<E>> extends com.google.common.util.concurrent.CycleDetectingLockFactory {
  private final java.util.Map<E, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode> lockGraphNodes;

  com.google.common.util.concurrent.CycleDetectingLockFactory$WithExplicitOrdering(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, java.util.Map<E, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode>);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokespecial #1                  // Method com/google/common/util/concurrent/CycleDetectingLockFactory."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V
       6: aload_0
       7: aload_2
       8: putfield      #2                  // Field lockGraphNodes:Ljava/util/Map;
      11: return

  public java.util.concurrent.locks.ReentrantLock newReentrantLock(E);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #3                  // Method newReentrantLock:(Ljava/lang/Enum;Z)Ljava/util/concurrent/locks/ReentrantLock;
       6: areturn

  public java.util.concurrent.locks.ReentrantLock newReentrantLock(E, boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field policy:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;
       4: getstatic     #5                  // Field com/google/common/util/concurrent/CycleDetectingLockFactory$Policies.DISABLED:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policies;
       7: if_acmpne     21
      10: new           #6                  // class java/util/concurrent/locks/ReentrantLock
      13: dup
      14: iload_2
      15: invokespecial #7                  // Method java/util/concurrent/locks/ReentrantLock."<init>":(Z)V
      18: goto          50
      21: new           #8                  // class com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock
      24: dup
      25: aload_0
      26: aload_0
      27: getfield      #2                  // Field lockGraphNodes:Ljava/util/Map;
      30: aload_1
      31: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #10                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode
      39: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      42: checkcast     #10                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode
      45: iload_2
      46: aconst_null
      47: invokespecial #12                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantLock."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;ZLcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V
      50: areturn

  public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(E);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokevirtual #13                 // Method newReentrantReadWriteLock:(Ljava/lang/Enum;Z)Ljava/util/concurrent/locks/ReentrantReadWriteLock;
       6: areturn

  public java.util.concurrent.locks.ReentrantReadWriteLock newReentrantReadWriteLock(E, boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field policy:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policy;
       4: getstatic     #5                  // Field com/google/common/util/concurrent/CycleDetectingLockFactory$Policies.DISABLED:Lcom/google/common/util/concurrent/CycleDetectingLockFactory$Policies;
       7: if_acmpne     21
      10: new           #14                 // class java/util/concurrent/locks/ReentrantReadWriteLock
      13: dup
      14: iload_2
      15: invokespecial #15                 // Method java/util/concurrent/locks/ReentrantReadWriteLock."<init>":(Z)V
      18: goto          50
      21: new           #16                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock
      24: dup
      25: aload_0
      26: aload_0
      27: getfield      #2                  // Field lockGraphNodes:Ljava/util/Map;
      30: aload_1
      31: invokeinterface #9,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      36: checkcast     #10                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode
      39: invokestatic  #11                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
      42: checkcast     #10                 // class com/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode
      45: iload_2
      46: aconst_null
      47: invokespecial #17                 // Method com/google/common/util/concurrent/CycleDetectingLockFactory$CycleDetectingReentrantReadWriteLock."<init>":(Lcom/google/common/util/concurrent/CycleDetectingLockFactory;Lcom/google/common/util/concurrent/CycleDetectingLockFactory$LockGraphNode;ZLcom/google/common/util/concurrent/CycleDetectingLockFactory$1;)V
      50: areturn
}
