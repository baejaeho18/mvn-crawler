Compiled from "Streams.java"
public class org.apache.commons.lang3.Streams$FailableStream<O> {
  private java.util.stream.Stream<O> stream;

  private boolean terminated;

  public org.apache.commons.lang3.Streams$FailableStream(java.util.stream.Stream<O>);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field stream:Ljava/util/stream/Stream;
       9: return

  protected void assertNotTerminated();
    Code:
       0: aload_0
       1: getfield      #3                  // Field terminated:Z
       4: ifeq          17
       7: new           #4                  // class java/lang/IllegalStateException
      10: dup
      11: ldc           #5                  // String This stream is already terminated.
      13: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  protected void makeTerminated();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method assertNotTerminated:()V
       4: aload_0
       5: iconst_1
       6: putfield      #3                  // Field terminated:Z
       9: return

  public org.apache.commons.lang3.Streams$FailableStream<O> filter(org.apache.commons.lang3.Functions$FailablePredicate<O, ?>);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method assertNotTerminated:()V
       4: aload_0
       5: aload_0
       6: getfield      #2                  // Field stream:Ljava/util/stream/Stream;
       9: aload_1
      10: invokestatic  #8                  // Method org/apache/commons/lang3/Functions.asPredicate:(Lorg/apache/commons/lang3/Functions$FailablePredicate;)Ljava/util/function/Predicate;
      13: invokeinterface #9,  2            // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      18: putfield      #2                  // Field stream:Ljava/util/stream/Stream;
      21: aload_0
      22: areturn

  public void forEach(org.apache.commons.lang3.Functions$FailableConsumer<O, ?>);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method makeTerminated:()V
       4: aload_0
       5: invokevirtual #11                 // Method stream:()Ljava/util/stream/Stream;
       8: aload_1
       9: invokestatic  #12                 // Method org/apache/commons/lang3/Functions.asConsumer:(Lorg/apache/commons/lang3/Functions$FailableConsumer;)Ljava/util/function/Consumer;
      12: invokeinterface #13,  2           // InterfaceMethod java/util/stream/Stream.forEach:(Ljava/util/function/Consumer;)V
      17: return

  public <A, R> R collect(java.util.stream.Collector<? super O, A, R>);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method makeTerminated:()V
       4: aload_0
       5: invokevirtual #11                 // Method stream:()Ljava/util/stream/Stream;
       8: aload_1
       9: invokeinterface #14,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      14: areturn

  public <A, R> R collect(java.util.function.Supplier<R>, java.util.function.BiConsumer<R, ? super O>, java.util.function.BiConsumer<R, R>);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method makeTerminated:()V
       4: aload_0
       5: invokevirtual #11                 // Method stream:()Ljava/util/stream/Stream;
       8: aload_1
       9: aload_2
      10: aload_3
      11: invokeinterface #15,  4           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
      16: areturn

  public O reduce(O, java.util.function.BinaryOperator<O>);
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method makeTerminated:()V
       4: aload_0
       5: invokevirtual #11                 // Method stream:()Ljava/util/stream/Stream;
       8: aload_1
       9: aload_2
      10: invokeinterface #16,  3           // InterfaceMethod java/util/stream/Stream.reduce:(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
      15: areturn

  public <R> org.apache.commons.lang3.Streams$FailableStream<R> map(org.apache.commons.lang3.Functions$FailableFunction<O, R, ?>);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method assertNotTerminated:()V
       4: new           #17                 // class org/apache/commons/lang3/Streams$FailableStream
       7: dup
       8: aload_0
       9: getfield      #2                  // Field stream:Ljava/util/stream/Stream;
      12: aload_1
      13: invokestatic  #18                 // Method org/apache/commons/lang3/Functions.asFunction:(Lorg/apache/commons/lang3/Functions$FailableFunction;)Ljava/util/function/Function;
      16: invokeinterface #19,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      21: invokespecial #20                 // Method "<init>":(Ljava/util/stream/Stream;)V
      24: areturn

  public java.util.stream.Stream<O> stream();
    Code:
       0: aload_0
       1: getfield      #2                  // Field stream:Ljava/util/stream/Stream;
       4: areturn

  public boolean allMatch(org.apache.commons.lang3.Functions$FailablePredicate<O, ?>);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method assertNotTerminated:()V
       4: aload_0
       5: invokevirtual #11                 // Method stream:()Ljava/util/stream/Stream;
       8: aload_1
       9: invokestatic  #8                  // Method org/apache/commons/lang3/Functions.asPredicate:(Lorg/apache/commons/lang3/Functions$FailablePredicate;)Ljava/util/function/Predicate;
      12: invokeinterface #21,  2           // InterfaceMethod java/util/stream/Stream.allMatch:(Ljava/util/function/Predicate;)Z
      17: ireturn

  public boolean anyMatch(org.apache.commons.lang3.Functions$FailablePredicate<O, ?>);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method assertNotTerminated:()V
       4: aload_0
       5: invokevirtual #11                 // Method stream:()Ljava/util/stream/Stream;
       8: aload_1
       9: invokestatic  #8                  // Method org/apache/commons/lang3/Functions.asPredicate:(Lorg/apache/commons/lang3/Functions$FailablePredicate;)Ljava/util/function/Predicate;
      12: invokeinterface #22,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      17: ireturn
}
