Compiled from "RollingRandomAccessFileManager.java"
public class org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager extends org.apache.logging.log4j.core.appender.rolling.RollingFileManager {
  public static final int DEFAULT_BUFFER_SIZE;

  private static final org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory FACTORY;

  private java.io.RandomAccessFile randomAccessFile;

  public org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager(org.apache.logging.log4j.core.LoggerContext, java.io.RandomAccessFile, java.lang.String, java.lang.String, java.io.OutputStream, boolean, boolean, int, long, long, org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: aload         5
       8: iload         6
      10: iload         7
      12: iload         8
      14: lload         9
      16: lload         11
      18: aload         13
      20: aload         14
      22: aload         15
      24: aload         16
      26: aconst_null
      27: aconst_null
      28: aconst_null
      29: iload         17
      31: invokespecial #3                  // Method "<init>":(Lorg/apache/logging/log4j/core/LoggerContext;Ljava/io/RandomAccessFile;Ljava/lang/String;Ljava/lang/String;Ljava/io/OutputStream;ZZIJJLorg/apache/logging/log4j/core/appender/rolling/TriggeringPolicy;Lorg/apache/logging/log4j/core/appender/rolling/RolloverStrategy;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)V
      34: return

  public org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager(org.apache.logging.log4j.core.LoggerContext, java.io.RandomAccessFile, java.lang.String, java.lang.String, java.io.OutputStream, boolean, boolean, int, long, long, org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, java.lang.String, java.lang.String, java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: aload         4
       5: aload         5
       7: iload         6
       9: iconst_0
      10: lload         9
      12: lload         11
      14: aload         13
      16: aload         14
      18: aload         15
      20: aload         16
      22: aload         17
      24: aload         18
      26: aload         19
      28: iload         20
      30: iload         8
      32: newarray       byte
      34: invokestatic  #4                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      37: invokespecial #5                  // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager."<init>":(Lorg/apache/logging/log4j/core/LoggerContext;Ljava/lang/String;Ljava/lang/String;Ljava/io/OutputStream;ZZJJLorg/apache/logging/log4j/core/appender/rolling/TriggeringPolicy;Lorg/apache/logging/log4j/core/appender/rolling/RolloverStrategy;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLjava/nio/ByteBuffer;)V
      40: aload_0
      41: aload_2
      42: putfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      45: aload_0
      46: invokespecial #7                  // Method writeHeader:()V
      49: return

  private void writeHeader();
    Code:
       0: aload_0
       1: getfield      #8                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
       4: ifnonnull     8
       7: return
       8: aload_0
       9: getfield      #8                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
      12: invokeinterface #9,  1            // InterfaceMethod org/apache/logging/log4j/core/Layout.getHeader:()[B
      17: astore_1
      18: aload_1
      19: ifnonnull     23
      22: return
      23: aload_0
      24: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      27: ifnull        53
      30: aload_0
      31: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      34: invokevirtual #10                 // Method java/io/RandomAccessFile.length:()J
      37: lconst_0
      38: lcmp
      39: ifne          53
      42: aload_0
      43: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      46: aload_1
      47: iconst_0
      48: aload_1
      49: arraylength
      50: invokevirtual #11                 // Method java/io/RandomAccessFile.write:([BII)V
      53: goto          64
      56: astore_2
      57: aload_0
      58: ldc           #13                 // String Unable to write header
      60: aload_2
      61: invokevirtual #14                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      64: return
    Exception table:
       from    to  target type
          23    53    56   Class java/io/IOException

  public static org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager getRollingRandomAccessFileManager(java.lang.String, java.lang.String, boolean, boolean, int, org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy, org.apache.logging.log4j.core.appender.rolling.RolloverStrategy, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, java.lang.String, java.lang.String, java.lang.String, org.apache.logging.log4j.core.config.Configuration);
    Code:
       0: aload         6
       2: instanceof    #15                 // class org/apache/logging/log4j/core/appender/rolling/DirectWriteRolloverStrategy
       5: ifeq          24
       8: aload_0
       9: ifnull        24
      12: getstatic     #2                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      15: ldc           #16                 // String The fileName attribute must not be specified with the DirectWriteRolloverStrategy
      17: invokeinterface #17,  2           // InterfaceMethod org/apache/logging/log4j/Logger.error:(Ljava/lang/String;)V
      22: aconst_null
      23: areturn
      24: aload_0
      25: ifnonnull     32
      28: aload_1
      29: goto          33
      32: aload_0
      33: astore        13
      35: ldc           #18                 // class org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager
      37: aload         13
      39: new           #19                 // class org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$FactoryData
      42: dup
      43: aload_0
      44: aload_1
      45: iload_2
      46: iload_3
      47: iload         4
      49: aload         5
      51: aload         6
      53: aload         7
      55: aload         8
      57: aload         9
      59: aload         10
      61: aload         11
      63: aload         12
      65: invokespecial #20                 // Method org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$FactoryData."<init>":(Ljava/lang/String;Ljava/lang/String;ZZILorg/apache/logging/log4j/core/appender/rolling/TriggeringPolicy;Lorg/apache/logging/log4j/core/appender/rolling/RolloverStrategy;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/apache/logging/log4j/core/config/Configuration;)V
      68: getstatic     #21                 // Field FACTORY:Lorg/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory;
      71: invokestatic  #22                 // Method getManager:(Ljava/lang/String;Ljava/lang/Object;Lorg/apache/logging/log4j/core/appender/ManagerFactory;)Lorg/apache/logging/log4j/core/appender/OutputStreamManager;
      74: invokestatic  #23                 // Method narrow:(Ljava/lang/Class;Lorg/apache/logging/log4j/core/appender/AbstractManager;)Lorg/apache/logging/log4j/core/appender/AbstractManager;
      77: checkcast     #18                 // class org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager
      80: areturn

  public java.lang.Boolean isEndOfBatch();
    Code:
       0: getstatic     #24                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
       3: areturn

  public void setEndOfBatch(boolean);
    Code:
       0: return

  protected synchronized void write(byte[], int, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iload         4
       6: invokespecial #25                 // Method org/apache/logging/log4j/core/appender/rolling/RollingFileManager.write:([BIIZ)V
       9: return

  protected synchronized void writeToDestination(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
       4: ifnonnull     35
       7: aload_0
       8: invokevirtual #26                 // Method getFileName:()Ljava/lang/String;
      11: astore        4
      13: new           #27                 // class java/io/File
      16: dup
      17: aload         4
      19: invokespecial #28                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      22: astore        5
      24: aload         5
      26: invokestatic  #29                 // Method org/apache/logging/log4j/core/util/FileUtils.makeParentDirs:(Ljava/io/File;)V
      29: aload_0
      30: aload         4
      32: invokespecial #30                 // Method createFileAfterRollover:(Ljava/lang/String;)V
      35: aload_0
      36: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      39: aload_1
      40: iload_2
      41: iload_3
      42: invokevirtual #11                 // Method java/io/RandomAccessFile.write:([BII)V
      45: aload_0
      46: dup
      47: getfield      #31                 // Field size:J
      50: iload_3
      51: i2l
      52: ladd
      53: putfield      #31                 // Field size:J
      56: goto          97
      59: astore        4
      61: new           #32                 // class java/lang/StringBuilder
      64: dup
      65: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      68: ldc           #34                 // String Error writing to RandomAccessFile
      70: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_0
      74: invokevirtual #36                 // Method getName:()Ljava/lang/String;
      77: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: astore        5
      85: new           #38                 // class org/apache/logging/log4j/core/appender/AppenderLoggingException
      88: dup
      89: aload         5
      91: aload         4
      93: invokespecial #39                 // Method org/apache/logging/log4j/core/appender/AppenderLoggingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      96: athrow
      97: return
    Exception table:
       from    to  target type
           0    56    59   Class java/io/IOException

  protected void createFileAfterRollover() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #26                 // Method getFileName:()Ljava/lang/String;
       5: invokespecial #30                 // Method createFileAfterRollover:(Ljava/lang/String;)V
       8: return

  private void createFileAfterRollover(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #40                 // class java/io/RandomAccessFile
       4: dup
       5: aload_1
       6: ldc           #41                 // String rw
       8: invokespecial #42                 // Method java/io/RandomAccessFile."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      11: putfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      14: aload_0
      15: invokevirtual #43                 // Method isAttributeViewEnabled:()Z
      18: ifeq          33
      21: aload_0
      22: aload_1
      23: iconst_0
      24: anewarray     #44                 // class java/lang/String
      27: invokestatic  #45                 // Method java/nio/file/Paths.get:(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;
      30: invokevirtual #1                  // Method defineAttributeView:(Ljava/nio/file/Path;)V
      33: aload_0
      34: invokevirtual #46                 // Method isAppend:()Z
      37: ifeq          54
      40: aload_0
      41: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      44: aload_0
      45: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      48: invokevirtual #10                 // Method java/io/RandomAccessFile.length:()J
      51: invokevirtual #47                 // Method java/io/RandomAccessFile.seek:(J)V
      54: aload_0
      55: invokespecial #7                  // Method writeHeader:()V
      58: return

  public synchronized void flush();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #48                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #49                 // Method flushBuffer:(Ljava/nio/ByteBuffer;)V
       8: return

  public synchronized boolean closeOutputStream();
    Code:
       0: aload_0
       1: invokevirtual #50                 // Method flush:()V
       4: aload_0
       5: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
       8: ifnull        30
      11: aload_0
      12: getfield      #6                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      15: invokevirtual #51                 // Method java/io/RandomAccessFile.close:()V
      18: iconst_1
      19: ireturn
      20: astore_1
      21: aload_0
      22: ldc           #52                 // String Unable to close RandomAccessFile
      24: aload_1
      25: invokevirtual #14                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      28: iconst_0
      29: ireturn
      30: iconst_1
      31: ireturn
    Exception table:
       from    to  target type
          11    19    20   Class java/io/IOException

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #48                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #53                 // Method java/nio/ByteBuffer.capacity:()I
       7: ireturn

  public void updateData(java.lang.Object);
    Code:
       0: aload_1
       1: checkcast     #19                 // class org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$FactoryData
       4: astore_2
       5: aload_0
       6: aload_2
       7: invokevirtual #54                 // Method org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$FactoryData.getRolloverStrategy:()Lorg/apache/logging/log4j/core/appender/rolling/RolloverStrategy;
      10: invokevirtual #55                 // Method setRolloverStrategy:(Lorg/apache/logging/log4j/core/appender/rolling/RolloverStrategy;)V
      13: aload_0
      14: new           #56                 // class org/apache/logging/log4j/core/appender/rolling/PatternProcessor
      17: dup
      18: aload_2
      19: invokevirtual #57                 // Method org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$FactoryData.getPattern:()Ljava/lang/String;
      22: aload_0
      23: invokevirtual #58                 // Method getPatternProcessor:()Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;
      26: invokespecial #59                 // Method org/apache/logging/log4j/core/appender/rolling/PatternProcessor."<init>":(Ljava/lang/String;Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;)V
      29: invokevirtual #60                 // Method setPatternProcessor:(Lorg/apache/logging/log4j/core/appender/rolling/PatternProcessor;)V
      32: aload_0
      33: aload_2
      34: invokevirtual #61                 // Method org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$FactoryData.getTriggeringPolicy:()Lorg/apache/logging/log4j/core/appender/rolling/TriggeringPolicy;
      37: invokevirtual #62                 // Method setTriggeringPolicy:(Lorg/apache/logging/log4j/core/appender/rolling/TriggeringPolicy;)V
      40: return

  static org.apache.logging.log4j.Logger access$300();
    Code:
       0: getstatic     #2                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       3: areturn

  static org.apache.logging.log4j.Logger access$400();
    Code:
       0: getstatic     #2                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       3: areturn

  static org.apache.logging.log4j.Logger access$500();
    Code:
       0: getstatic     #2                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       3: areturn

  static org.apache.logging.log4j.Logger access$600();
    Code:
       0: getstatic     #2                  // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       3: areturn

  static void access$1700(org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager, java.nio.file.Path);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1                  // Method defineAttributeView:(Ljava/nio/file/Path;)V
       5: return

  static {};
    Code:
       0: new           #63                 // class org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory
       3: dup
       4: aconst_null
       5: invokespecial #64                 // Method org/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory."<init>":(Lorg/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$1;)V
       8: putstatic     #21                 // Field FACTORY:Lorg/apache/logging/log4j/core/appender/rolling/RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory;
      11: return
}
