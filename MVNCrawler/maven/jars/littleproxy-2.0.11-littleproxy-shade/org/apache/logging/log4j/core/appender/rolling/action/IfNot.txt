Compiled from "IfNot.java"
public final class org.apache.logging.log4j.core.appender.rolling.action.IfNot implements org.apache.logging.log4j.core.appender.rolling.action.PathCondition {
  private final org.apache.logging.log4j.core.appender.rolling.action.PathCondition negate;

  private org.apache.logging.log4j.core.appender.rolling.action.IfNot(org.apache.logging.log4j.core.appender.rolling.action.PathCondition);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String filter
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class org/apache/logging/log4j/core/appender/rolling/action/PathCondition
      14: putfield      #5                  // Field negate:Lorg/apache/logging/log4j/core/appender/rolling/action/PathCondition;
      17: return

  public org.apache.logging.log4j.core.appender.rolling.action.PathCondition getWrappedFilter();
    Code:
       0: aload_0
       1: getfield      #5                  // Field negate:Lorg/apache/logging/log4j/core/appender/rolling/action/PathCondition;
       4: areturn

  public boolean accept(java.nio.file.Path, java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes);
    Code:
       0: aload_0
       1: getfield      #5                  // Field negate:Lorg/apache/logging/log4j/core/appender/rolling/action/PathCondition;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokeinterface #6,  4            // InterfaceMethod org/apache/logging/log4j/core/appender/rolling/action/PathCondition.accept:(Ljava/nio/file/Path;Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)Z
      12: ifne          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public void beforeFileTreeWalk();
    Code:
       0: aload_0
       1: getfield      #5                  // Field negate:Lorg/apache/logging/log4j/core/appender/rolling/action/PathCondition;
       4: invokeinterface #7,  1            // InterfaceMethod org/apache/logging/log4j/core/appender/rolling/action/PathCondition.beforeFileTreeWalk:()V
       9: return

  public static org.apache.logging.log4j.core.appender.rolling.action.IfNot createNotCondition(org.apache.logging.log4j.core.appender.rolling.action.PathCondition);
    Code:
       0: new           #8                  // class org/apache/logging/log4j/core/appender/rolling/action/IfNot
       3: dup
       4: aload_0
       5: invokespecial #9                  // Method "<init>":(Lorg/apache/logging/log4j/core/appender/rolling/action/PathCondition;)V
       8: areturn

  public java.lang.String toString();
    Code:
       0: new           #10                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #12                 // String IfNot(
       9: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #5                  // Field negate:Lorg/apache/logging/log4j/core/appender/rolling/action/PathCondition;
      16: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      19: ldc           #15                 // String )
      21: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: areturn
}
