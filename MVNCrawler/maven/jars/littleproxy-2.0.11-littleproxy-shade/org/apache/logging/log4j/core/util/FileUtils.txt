Compiled from "FileUtils.java"
public final class org.apache.logging.log4j.core.util.FileUtils {
  private static final java.lang.String PROTOCOL_FILE;

  private static final java.lang.String JBOSS_FILE;

  private static final org.apache.logging.log4j.Logger LOGGER;

  private org.apache.logging.log4j.core.util.FileUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static java.io.File fileFromUri(java.net.URI);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: aconst_null
       5: areturn
       6: aload_0
       7: invokevirtual #2                  // Method java/net/URI.isAbsolute:()Z
      10: ifeq          86
      13: ldc           #4                  // String vfsfile
      15: aload_0
      16: invokevirtual #5                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      19: invokevirtual #6                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      22: ifeq          47
      25: new           #7                  // class java/net/URI
      28: dup
      29: ldc           #8                  // String file
      31: aload_0
      32: invokevirtual #9                  // Method java/net/URI.getSchemeSpecificPart:()Ljava/lang/String;
      35: aload_0
      36: invokevirtual #10                 // Method java/net/URI.getFragment:()Ljava/lang/String;
      39: invokespecial #11                 // Method java/net/URI."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      42: astore_0
      43: goto          47
      46: astore_1
      47: ldc           #8                  // String file
      49: aload_0
      50: invokevirtual #5                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      53: invokevirtual #6                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      56: ifeq          68
      59: new           #13                 // class java/io/File
      62: dup
      63: aload_0
      64: invokespecial #14                 // Method java/io/File."<init>":(Ljava/net/URI;)V
      67: areturn
      68: goto          133
      71: astore_1
      72: getstatic     #16                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      75: ldc           #17                 // String Invalid URI {}
      77: aload_0
      78: invokeinterface #18,  3           // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
      83: goto          133
      86: new           #13                 // class java/io/File
      89: dup
      90: aload_0
      91: invokevirtual #19                 // Method java/net/URI.toString:()Ljava/lang/String;
      94: invokespecial #20                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      97: astore_1
      98: aload_1
      99: invokevirtual #21                 // Method java/io/File.exists:()Z
     102: ifeq          107
     105: aload_1
     106: areturn
     107: aload_0
     108: invokevirtual #22                 // Method java/net/URI.getPath:()Ljava/lang/String;
     111: astore_2
     112: new           #13                 // class java/io/File
     115: dup
     116: aload_2
     117: invokespecial #20                 // Method java/io/File."<init>":(Ljava/lang/String;)V
     120: areturn
     121: astore_2
     122: getstatic     #16                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
     125: ldc           #17                 // String Invalid URI {}
     127: aload_0
     128: invokeinterface #18,  3           // InterfaceMethod org/apache/logging/log4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Object;)V
     133: aconst_null
     134: areturn
    Exception table:
       from    to  target type
          25    43    46   Class java/net/URISyntaxException
          47    67    71   Class java/lang/Exception
          98   106   121   Class java/lang/Exception
         107   120   121   Class java/lang/Exception

  public static boolean isFile(java.net.URL);
    Code:
       0: aload_0
       1: ifnull        32
       4: aload_0
       5: invokevirtual #23                 // Method java/net/URL.getProtocol:()Ljava/lang/String;
       8: ldc           #8                  // String file
      10: invokevirtual #6                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      13: ifne          28
      16: aload_0
      17: invokevirtual #23                 // Method java/net/URL.getProtocol:()Ljava/lang/String;
      20: ldc           #4                  // String vfsfile
      22: invokevirtual #6                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      25: ifeq          32
      28: iconst_1
      29: goto          33
      32: iconst_0
      33: ireturn

  public static java.lang.String getFileExtension(java.io.File);
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method java/io/File.getName:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ldc           #25                 // String .
       8: invokevirtual #26                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
      11: iconst_m1
      12: if_icmpeq     37
      15: aload_1
      16: ldc           #25                 // String .
      18: invokevirtual #26                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
      21: ifeq          37
      24: aload_1
      25: aload_1
      26: ldc           #25                 // String .
      28: invokevirtual #26                 // Method java/lang/String.lastIndexOf:(Ljava/lang/String;)I
      31: iconst_1
      32: iadd
      33: invokevirtual #27                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      36: areturn
      37: aconst_null
      38: areturn

  public static void mkdir(java.io.File, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method java/io/File.exists:()Z
       4: ifne          46
       7: iload_1
       8: ifne          46
      11: new           #28                 // class java/io/IOException
      14: dup
      15: new           #29                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #31                 // String The directory
      24: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #33                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      31: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: ldc           #34                 // String  does not exist.
      36: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #36                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: aload_0
      47: invokevirtual #37                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
      50: iconst_0
      51: anewarray     #38                 // class java/nio/file/attribute/FileAttribute
      54: invokestatic  #39                 // Method java/nio/file/Files.createDirectories:(Ljava/nio/file/Path;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/file/Path;
      57: pop
      58: goto          135
      61: astore_2
      62: aload_0
      63: invokevirtual #41                 // Method java/io/File.isDirectory:()Z
      66: ifne          101
      69: new           #28                 // class java/io/IOException
      72: dup
      73: new           #29                 // class java/lang/StringBuilder
      76: dup
      77: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      80: ldc           #42                 // String File
      82: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: aload_0
      86: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      89: ldc           #44                 // String  exists and is not a directory. Unable to create directory.
      91: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      97: invokespecial #36                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     100: athrow
     101: goto          135
     104: astore_2
     105: new           #28                 // class java/io/IOException
     108: dup
     109: new           #29                 // class java/lang/StringBuilder
     112: dup
     113: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
     116: ldc           #45                 // String Could not create directory
     118: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     121: aload_0
     122: invokevirtual #33                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
     125: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     128: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     131: invokespecial #36                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     134: athrow
     135: return
    Exception table:
       from    to  target type
          46    58    61   Class java/nio/file/FileAlreadyExistsException
          46    58   104   Class java/lang/Exception

  public static void makeParentDirs(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #8                  // String file
       3: invokestatic  #46                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: checkcast     #13                 // class java/io/File
       9: invokevirtual #47                 // Method java/io/File.getCanonicalFile:()Ljava/io/File;
      12: invokevirtual #48                 // Method java/io/File.getParentFile:()Ljava/io/File;
      15: astore_1
      16: aload_1
      17: ifnull        25
      20: aload_1
      21: iconst_1
      22: invokestatic  #49                 // Method mkdir:(Ljava/io/File;Z)V
      25: return

  public static void defineFilePosixAttributeView(java.nio.file.Path, java.util.Set<java.nio.file.attribute.PosixFilePermission>, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #50                 // class java/nio/file/attribute/PosixFileAttributeView
       3: iconst_0
       4: anewarray     #51                 // class java/nio/file/LinkOption
       7: invokestatic  #52                 // Method java/nio/file/Files.getFileAttributeView:(Ljava/nio/file/Path;Ljava/lang/Class;[Ljava/nio/file/LinkOption;)Ljava/nio/file/attribute/FileAttributeView;
      10: checkcast     #50                 // class java/nio/file/attribute/PosixFileAttributeView
      13: astore        4
      15: aload         4
      17: ifnull        92
      20: invokestatic  #53                 // Method java/nio/file/FileSystems.getDefault:()Ljava/nio/file/FileSystem;
      23: invokevirtual #54                 // Method java/nio/file/FileSystem.getUserPrincipalLookupService:()Ljava/nio/file/attribute/UserPrincipalLookupService;
      26: astore        5
      28: aload_2
      29: ifnull        54
      32: aload         5
      34: aload_2
      35: invokevirtual #55                 // Method java/nio/file/attribute/UserPrincipalLookupService.lookupPrincipalByName:(Ljava/lang/String;)Ljava/nio/file/attribute/UserPrincipal;
      38: astore        6
      40: aload         6
      42: ifnull        54
      45: aload         4
      47: aload         6
      49: invokeinterface #56,  2           // InterfaceMethod java/nio/file/attribute/PosixFileAttributeView.setOwner:(Ljava/nio/file/attribute/UserPrincipal;)V
      54: aload_3
      55: ifnull        80
      58: aload         5
      60: aload_3
      61: invokevirtual #57                 // Method java/nio/file/attribute/UserPrincipalLookupService.lookupPrincipalByGroupName:(Ljava/lang/String;)Ljava/nio/file/attribute/GroupPrincipal;
      64: astore        6
      66: aload         6
      68: ifnull        80
      71: aload         4
      73: aload         6
      75: invokeinterface #58,  2           // InterfaceMethod java/nio/file/attribute/PosixFileAttributeView.setGroup:(Ljava/nio/file/attribute/GroupPrincipal;)V
      80: aload_1
      81: ifnull        92
      84: aload         4
      86: aload_1
      87: invokeinterface #59,  2           // InterfaceMethod java/nio/file/attribute/PosixFileAttributeView.setPermissions:(Ljava/util/Set;)V
      92: return

  public static boolean isFilePosixAttributeViewSupported();
    Code:
       0: invokestatic  #53                 // Method java/nio/file/FileSystems.getDefault:()Ljava/nio/file/FileSystem;
       3: invokevirtual #60                 // Method java/nio/file/FileSystem.supportedFileAttributeViews:()Ljava/util/Set;
       6: ldc           #61                 // String posix
       8: invokeinterface #62,  2           // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      13: ireturn

  static {};
    Code:
       0: invokestatic  #63                 // Method org/apache/logging/log4j/status/StatusLogger.getLogger:()Lorg/apache/logging/log4j/status/StatusLogger;
       3: putstatic     #16                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
       6: return
}
