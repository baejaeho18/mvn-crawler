Compiled from "AsyncAppenderAdmin.java"
public class org.apache.logging.log4j.core.jmx.AsyncAppenderAdmin implements org.apache.logging.log4j.core.jmx.AsyncAppenderAdminMBean {
  private final java.lang.String contextName;

  private final org.apache.logging.log4j.core.appender.AsyncAppender asyncAppender;

  private final javax.management.ObjectName objectName;

  public org.apache.logging.log4j.core.jmx.AsyncAppenderAdmin(java.lang.String, org.apache.logging.log4j.core.appender.AsyncAppender);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: ldc           #2                  // String contextName
       8: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      11: checkcast     #4                  // class java/lang/String
      14: putfield      #5                  // Field contextName:Ljava/lang/String;
      17: aload_0
      18: aload_2
      19: ldc           #6                  // String async appender
      21: invokestatic  #3                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      24: checkcast     #7                  // class org/apache/logging/log4j/core/appender/AsyncAppender
      27: putfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
      30: aload_0
      31: getfield      #5                  // Field contextName:Ljava/lang/String;
      34: invokestatic  #9                  // Method org/apache/logging/log4j/core/jmx/Server.escape:(Ljava/lang/String;)Ljava/lang/String;
      37: astore_3
      38: aload_2
      39: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getName:()Ljava/lang/String;
      42: invokestatic  #9                  // Method org/apache/logging/log4j/core/jmx/Server.escape:(Ljava/lang/String;)Ljava/lang/String;
      45: astore        4
      47: ldc           #12                 // String org.apache.logging.log4j2:type=%s,component=AsyncAppenders,name=%s
      49: iconst_2
      50: anewarray     #13                 // class java/lang/Object
      53: dup
      54: iconst_0
      55: aload_3
      56: aastore
      57: dup
      58: iconst_1
      59: aload         4
      61: aastore
      62: invokestatic  #14                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      65: astore        5
      67: aload_0
      68: new           #15                 // class javax/management/ObjectName
      71: dup
      72: aload         5
      74: invokespecial #16                 // Method javax/management/ObjectName."<init>":(Ljava/lang/String;)V
      77: putfield      #17                 // Field objectName:Ljavax/management/ObjectName;
      80: goto          93
      83: astore_3
      84: new           #19                 // class java/lang/IllegalStateException
      87: dup
      88: aload_3
      89: invokespecial #20                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/Throwable;)V
      92: athrow
      93: return
    Exception table:
       from    to  target type
          30    80    83   Class java/lang/Exception

  public javax.management.ObjectName getObjectName();
    Code:
       0: aload_0
       1: getfield      #17                 // Field objectName:Ljavax/management/ObjectName;
       4: areturn

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #10                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getName:()Ljava/lang/String;
       7: areturn

  public java.lang.String getLayout();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #21                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getLayout:()Lorg/apache/logging/log4j/core/Layout;
       7: invokestatic  #22                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      10: areturn

  public boolean isIgnoreExceptions();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #23                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.ignoreExceptions:()Z
       7: ireturn

  public java.lang.String getErrorHandler();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #24                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getHandler:()Lorg/apache/logging/log4j/core/ErrorHandler;
       7: invokestatic  #22                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      10: areturn

  public java.lang.String getFilter();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #25                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getFilter:()Lorg/apache/logging/log4j/core/Filter;
       7: invokestatic  #22                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      10: areturn

  public java.lang.String[] getAppenderRefs();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #26                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getAppenderRefStrings:()[Ljava/lang/String;
       7: areturn

  public boolean isIncludeLocation();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #27                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.isIncludeLocation:()Z
       7: ireturn

  public boolean isBlocking();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #28                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.isBlocking:()Z
       7: ireturn

  public java.lang.String getErrorRef();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #29                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getErrorRef:()Ljava/lang/String;
       7: areturn

  public int getQueueCapacity();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #30                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getQueueCapacity:()I
       7: ireturn

  public int getQueueRemainingCapacity();
    Code:
       0: aload_0
       1: getfield      #8                  // Field asyncAppender:Lorg/apache/logging/log4j/core/appender/AsyncAppender;
       4: invokevirtual #31                 // Method org/apache/logging/log4j/core/appender/AsyncAppender.getQueueRemainingCapacity:()I
       7: ireturn
}
