Compiled from "Type.java"
class org.xbill.DNS.Type$TypeMnemonic extends org.xbill.DNS.Mnemonic {
  private final java.util.HashMap<java.lang.Integer, java.util.function.Supplier<org.xbill.DNS.Record>> factories;

  public org.xbill.DNS.Type$TypeMnemonic();
    Code:
       0: aload_0
       1: ldc           #1                  // String Type
       3: iconst_2
       4: invokespecial #3                  // Method org/xbill/DNS/Mnemonic."<init>":(Ljava/lang/String;I)V
       7: aload_0
       8: ldc           #4                  // String TYPE
      10: invokevirtual #5                  // Method setPrefix:(Ljava/lang/String;)V
      13: aload_0
      14: ldc           #6                  // int 65535
      16: invokevirtual #7                  // Method setMaximum:(I)V
      19: aload_0
      20: new           #8                  // class java/util/HashMap
      23: dup
      24: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      27: putfield      #10                 // Field factories:Ljava/util/HashMap;
      30: return

  public void add(int, java.lang.String, java.util.function.Supplier<org.xbill.DNS.Record>);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: invokespecial #11                 // Method org/xbill/DNS/Mnemonic.add:(ILjava/lang/String;)V
       6: aload_0
       7: getfield      #10                 // Field factories:Ljava/util/HashMap;
      10: iload_1
      11: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      14: aload_3
      15: invokevirtual #13                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      18: pop
      19: return

  public void replace(int, java.lang.String, java.util.function.Supplier<org.xbill.DNS.Record>);
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #14                 // Method getValue:(Ljava/lang/String;)I
       5: istore        4
       7: iload         4
       9: iconst_m1
      10: if_icmpeq     73
      13: iload         4
      15: iload_1
      16: if_icmpeq     56
      19: new           #15                 // class java/lang/IllegalArgumentException
      22: dup
      23: new           #16                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #18                 // String mnemnonic \"
      32: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_2
      36: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: ldc           #20                 // String \" already used by type
      41: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: iload         4
      46: invokevirtual #21                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      49: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #23                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: aload_0
      57: iload_1
      58: invokevirtual #24                 // Method remove:(I)V
      61: aload_0
      62: getfield      #10                 // Field factories:Ljava/util/HashMap;
      65: iload_1
      66: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      69: invokevirtual #25                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      72: pop
      73: aload_0
      74: iload_1
      75: aload_2
      76: aload_3
      77: invokevirtual #26                 // Method add:(ILjava/lang/String;Ljava/util/function/Supplier;)V
      80: return

  public void check(int);
    Code:
       0: iload_1
       1: invokestatic  #27                 // Method org/xbill/DNS/Type.check:(I)V
       4: return

  public java.util.function.Supplier<org.xbill.DNS.Record> getFactory(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #28                 // Method check:(I)V
       5: aload_0
       6: getfield      #10                 // Field factories:Ljava/util/HashMap;
       9: iload_1
      10: invokestatic  #12                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      13: invokevirtual #29                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #30                 // class java/util/function/Supplier
      19: areturn
}
