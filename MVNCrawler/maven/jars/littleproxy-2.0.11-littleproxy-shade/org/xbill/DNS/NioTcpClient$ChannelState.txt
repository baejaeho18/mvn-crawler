Compiled from "NioTcpClient.java"
class org.xbill.DNS.NioTcpClient$ChannelState implements org.xbill.DNS.NioClient$KeyProcessor {
  final java.nio.channels.SocketChannel channel;

  final java.util.Queue<org.xbill.DNS.NioTcpClient$Transaction> pendingTransactions;

  java.nio.ByteBuffer responseLengthData;

  java.nio.ByteBuffer responseData;

  int readState;

  public void processReadyKey(java.nio.channels.SelectionKey);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method java/nio/channels/SelectionKey.isValid:()Z
       4: ifeq          45
       7: aload_1
       8: invokevirtual #3                  // Method java/nio/channels/SelectionKey.isConnectable:()Z
      11: ifeq          22
      14: aload_0
      15: aload_1
      16: invokespecial #4                  // Method processConnect:(Ljava/nio/channels/SelectionKey;)V
      19: goto          45
      22: aload_1
      23: invokevirtual #5                  // Method java/nio/channels/SelectionKey.isWritable:()Z
      26: ifeq          34
      29: aload_0
      30: aload_1
      31: invokespecial #6                  // Method processWrite:(Ljava/nio/channels/SelectionKey;)V
      34: aload_1
      35: invokevirtual #7                  // Method java/nio/channels/SelectionKey.isReadable:()Z
      38: ifeq          45
      41: aload_0
      42: invokespecial #8                  // Method processRead:()V
      45: return

  void handleTransactionException(java.io.IOException);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingTransactions:Ljava/util/Queue;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          47
      19: aload_2
      20: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #13                 // class org/xbill/DNS/NioTcpClient$Transaction
      28: astore_3
      29: aload_3
      30: invokestatic  #14                 // Method org/xbill/DNS/NioTcpClient$Transaction.access$200:(Lorg/xbill/DNS/NioTcpClient$Transaction;)Ljava/util/concurrent/CompletableFuture;
      33: aload_1
      34: invokevirtual #15                 // Method java/util/concurrent/CompletableFuture.completeExceptionally:(Ljava/lang/Throwable;)Z
      37: pop
      38: aload_2
      39: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.remove:()V
      44: goto          10
      47: return

  private void handleChannelException(java.io.IOException);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #17                 // Method handleTransactionException:(Ljava/io/IOException;)V
       5: invokestatic  #18                 // Method org/xbill/DNS/NioTcpClient.access$300:()Ljava/util/Map;
       8: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      13: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      18: astore_2
      19: aload_2
      20: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      25: ifeq          91
      28: aload_2
      29: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      34: checkcast     #21                 // class java/util/Map$Entry
      37: astore_3
      38: aload_3
      39: invokeinterface #22,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      44: aload_0
      45: if_acmpne     88
      48: invokestatic  #18                 // Method org/xbill/DNS/NioTcpClient.access$300:()Ljava/util/Map;
      51: aload_3
      52: invokeinterface #23,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      57: invokeinterface #24,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      62: pop
      63: aload_0
      64: getfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
      67: invokevirtual #26                 // Method java/nio/channels/SocketChannel.close:()V
      70: goto          87
      73: astore        4
      75: invokestatic  #28                 // Method org/xbill/DNS/NioTcpClient.access$400:()Lorg/slf4j/Logger;
      78: ldc           #29                 // String failed to close channel
      80: aload         4
      82: invokeinterface #30,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
      87: return
      88: goto          19
      91: return
    Exception table:
       from    to  target type
          63    70    73   Class java/io/IOException

  private void processConnect(java.nio.channels.SelectionKey);
    Code:
       0: aload_0
       1: getfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
       4: invokevirtual #31                 // Method java/nio/channels/SocketChannel.finishConnect:()Z
       7: pop
       8: aload_1
       9: iconst_4
      10: invokevirtual #33                 // Method java/nio/channels/SelectionKey.interestOps:(I)Ljava/nio/channels/SelectionKey;
      13: pop
      14: goto          23
      17: astore_2
      18: aload_0
      19: aload_2
      20: invokespecial #1                  // Method handleChannelException:(Ljava/io/IOException;)V
      23: return
    Exception table:
       from    to  target type
           0    14    17   Class java/io/IOException

  private void processRead();
    Code:
       0: aload_0
       1: getfield      #34                 // Field readState:I
       4: ifne          97
       7: aload_0
       8: getfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
      11: aload_0
      12: getfield      #35                 // Field responseLengthData:Ljava/nio/ByteBuffer;
      15: invokevirtual #36                 // Method java/nio/channels/SocketChannel.read:(Ljava/nio/ByteBuffer;)I
      18: istore_1
      19: iload_1
      20: ifge          35
      23: aload_0
      24: new           #37                 // class java/io/EOFException
      27: dup
      28: invokespecial #38                 // Method java/io/EOFException."<init>":()V
      31: invokespecial #1                  // Method handleChannelException:(Ljava/io/IOException;)V
      34: return
      35: aload_0
      36: getfield      #35                 // Field responseLengthData:Ljava/nio/ByteBuffer;
      39: invokevirtual #39                 // Method java/nio/ByteBuffer.position:()I
      42: iconst_2
      43: if_icmpne     97
      46: aload_0
      47: getfield      #35                 // Field responseLengthData:Ljava/nio/ByteBuffer;
      50: iconst_0
      51: invokevirtual #40                 // Method java/nio/ByteBuffer.get:(I)B
      54: sipush        255
      57: iand
      58: bipush        8
      60: ishl
      61: aload_0
      62: getfield      #35                 // Field responseLengthData:Ljava/nio/ByteBuffer;
      65: iconst_1
      66: invokevirtual #40                 // Method java/nio/ByteBuffer.get:(I)B
      69: sipush        255
      72: iand
      73: iadd
      74: istore_2
      75: aload_0
      76: getfield      #35                 // Field responseLengthData:Ljava/nio/ByteBuffer;
      79: invokevirtual #41                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      82: pop
      83: aload_0
      84: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
      87: iload_2
      88: invokevirtual #43                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      91: pop
      92: aload_0
      93: iconst_1
      94: putfield      #34                 // Field readState:I
      97: aload_0
      98: getfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
     101: aload_0
     102: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     105: invokevirtual #36                 // Method java/nio/channels/SocketChannel.read:(Ljava/nio/ByteBuffer;)I
     108: istore_1
     109: iload_1
     110: ifge          125
     113: aload_0
     114: new           #37                 // class java/io/EOFException
     117: dup
     118: invokespecial #38                 // Method java/io/EOFException."<init>":()V
     121: invokespecial #1                  // Method handleChannelException:(Ljava/io/IOException;)V
     124: return
     125: aload_0
     126: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     129: invokevirtual #44                 // Method java/nio/ByteBuffer.hasRemaining:()Z
     132: ifeq          136
     135: return
     136: goto          146
     139: astore_1
     140: aload_0
     141: aload_1
     142: invokespecial #1                  // Method handleChannelException:(Ljava/io/IOException;)V
     145: return
     146: aload_0
     147: iconst_0
     148: putfield      #34                 // Field readState:I
     151: aload_0
     152: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     155: invokevirtual #41                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     158: pop
     159: aload_0
     160: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     163: invokevirtual #45                 // Method java/nio/ByteBuffer.limit:()I
     166: newarray       byte
     168: astore_1
     169: aload_0
     170: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     173: invokevirtual #46                 // Method java/nio/ByteBuffer.array:()[B
     176: aload_0
     177: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     180: invokevirtual #47                 // Method java/nio/ByteBuffer.arrayOffset:()I
     183: aload_1
     184: iconst_0
     185: aload_0
     186: getfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
     189: invokevirtual #45                 // Method java/nio/ByteBuffer.limit:()I
     192: invokestatic  #48                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     195: ldc           #49                 // String TCP read
     197: aload_0
     198: getfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
     201: invokevirtual #50                 // Method java/nio/channels/SocketChannel.socket:()Ljava/net/Socket;
     204: invokevirtual #51                 // Method java/net/Socket.getLocalSocketAddress:()Ljava/net/SocketAddress;
     207: aload_0
     208: getfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
     211: invokevirtual #50                 // Method java/nio/channels/SocketChannel.socket:()Ljava/net/Socket;
     214: invokevirtual #52                 // Method java/net/Socket.getRemoteSocketAddress:()Ljava/net/SocketAddress;
     217: aload_1
     218: invokestatic  #53                 // Method org/xbill/DNS/NioClient.verboseLog:(Ljava/lang/String;Ljava/net/SocketAddress;Ljava/net/SocketAddress;[B)V
     221: aload_0
     222: getfield      #9                  // Field pendingTransactions:Ljava/util/Queue;
     225: invokeinterface #10,  1           // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;
     230: astore_2
     231: aload_2
     232: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     237: ifeq          308
     240: aload_2
     241: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     246: checkcast     #13                 // class org/xbill/DNS/NioTcpClient$Transaction
     249: astore_3
     250: aload_1
     251: iconst_0
     252: baload
     253: sipush        255
     256: iand
     257: bipush        8
     259: ishl
     260: aload_1
     261: iconst_1
     262: baload
     263: sipush        255
     266: iand
     267: iadd
     268: istore        4
     270: aload_3
     271: invokestatic  #54                 // Method org/xbill/DNS/NioTcpClient$Transaction.access$500:(Lorg/xbill/DNS/NioTcpClient$Transaction;)Lorg/xbill/DNS/Message;
     274: invokevirtual #55                 // Method org/xbill/DNS/Message.getHeader:()Lorg/xbill/DNS/Header;
     277: invokevirtual #56                 // Method org/xbill/DNS/Header.getID:()I
     280: istore        5
     282: iload         4
     284: iload         5
     286: if_icmpne     305
     289: aload_3
     290: invokestatic  #14                 // Method org/xbill/DNS/NioTcpClient$Transaction.access$200:(Lorg/xbill/DNS/NioTcpClient$Transaction;)Ljava/util/concurrent/CompletableFuture;
     293: aload_1
     294: invokevirtual #57                 // Method java/util/concurrent/CompletableFuture.complete:(Ljava/lang/Object;)Z
     297: pop
     298: aload_2
     299: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.remove:()V
     304: return
     305: goto          231
     308: return
    Exception table:
       from    to  target type
           0    34   139   Class java/io/IOException
          35   124   139   Class java/io/IOException
         125   135   139   Class java/io/IOException

  private void processWrite(java.nio.channels.SelectionKey);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingTransactions:Ljava/util/Queue;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          57
      19: aload_2
      20: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #13                 // class org/xbill/DNS/NioTcpClient$Transaction
      28: astore_3
      29: aload_3
      30: invokevirtual #58                 // Method org/xbill/DNS/NioTcpClient$Transaction.send:()V
      33: goto          54
      36: astore        4
      38: aload_3
      39: invokestatic  #14                 // Method org/xbill/DNS/NioTcpClient$Transaction.access$200:(Lorg/xbill/DNS/NioTcpClient$Transaction;)Ljava/util/concurrent/CompletableFuture;
      42: aload         4
      44: invokevirtual #15                 // Method java/util/concurrent/CompletableFuture.completeExceptionally:(Ljava/lang/Throwable;)Z
      47: pop
      48: aload_2
      49: invokeinterface #16,  1           // InterfaceMethod java/util/Iterator.remove:()V
      54: goto          10
      57: aload_1
      58: iconst_1
      59: invokevirtual #33                 // Method java/nio/channels/SelectionKey.interestOps:(I)Ljava/nio/channels/SelectionKey;
      62: pop
      63: return
    Exception table:
       from    to  target type
          29    33    36   Class java/io/IOException

  public org.xbill.DNS.NioTcpClient$ChannelState(java.nio.channels.SocketChannel);
    Code:
       0: aload_0
       1: invokespecial #59                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #60                 // class java/util/concurrent/ConcurrentLinkedQueue
       8: dup
       9: invokespecial #61                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      12: putfield      #9                  // Field pendingTransactions:Ljava/util/Queue;
      15: aload_0
      16: iconst_2
      17: invokestatic  #62                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      20: putfield      #35                 // Field responseLengthData:Ljava/nio/ByteBuffer;
      23: aload_0
      24: ldc           #64                 // int 65535
      26: invokestatic  #62                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      29: putfield      #42                 // Field responseData:Ljava/nio/ByteBuffer;
      32: aload_0
      33: iconst_0
      34: putfield      #34                 // Field readState:I
      37: aload_0
      38: aload_1
      39: putfield      #25                 // Field channel:Ljava/nio/channels/SocketChannel;
      42: return

  static void access$000(org.xbill.DNS.NioTcpClient$ChannelState, java.io.IOException);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method handleChannelException:(Ljava/io/IOException;)V
       5: return
}
