Compiled from "APLRecord.java"
public class org.xbill.DNS.APLRecord extends org.xbill.DNS.Record {
  private java.util.List<org.xbill.DNS.APLRecord$Element> elements;

  org.xbill.DNS.APLRecord();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/xbill/DNS/Record."<init>":()V
       4: return

  private static boolean validatePrefixLength(int, int);
    Code:
       0: iload_1
       1: iflt          11
       4: iload_1
       5: sipush        256
       8: if_icmplt     13
      11: iconst_0
      12: ireturn
      13: iload_0
      14: iconst_1
      15: if_icmpne     24
      18: iload_1
      19: bipush        32
      21: if_icmpgt     40
      24: iload_0
      25: iconst_2
      26: if_icmpne     36
      29: iload_1
      30: sipush        128
      33: if_icmpgt     40
      36: iconst_1
      37: goto          41
      40: iconst_0
      41: ireturn

  public org.xbill.DNS.APLRecord(org.xbill.DNS.Name, int, long, java.util.List<org.xbill.DNS.APLRecord$Element>);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        42
       4: iload_2
       5: lload_3
       6: invokespecial #5                  // Method org/xbill/DNS/Record."<init>":(Lorg/xbill/DNS/Name;IIJ)V
       9: aload_0
      10: new           #6                  // class java/util/ArrayList
      13: dup
      14: aload         5
      16: invokeinterface #7,  1            // InterfaceMethod java/util/List.size:()I
      21: invokespecial #8                  // Method java/util/ArrayList."<init>":(I)V
      24: putfield      #9                  // Field elements:Ljava/util/List;
      27: aload         5
      29: invokeinterface #10,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      34: astore        6
      36: aload         6
      38: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          101
      46: aload         6
      48: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      53: checkcast     #13                 // class org/xbill/DNS/APLRecord$Element
      56: astore        7
      58: aload         7
      60: getfield      #14                 // Field org/xbill/DNS/APLRecord$Element.family:I
      63: iconst_1
      64: if_icmpeq     86
      67: aload         7
      69: getfield      #14                 // Field org/xbill/DNS/APLRecord$Element.family:I
      72: iconst_2
      73: if_icmpeq     86
      76: new           #15                 // class java/lang/IllegalArgumentException
      79: dup
      80: ldc           #16                 // String unknown family
      82: invokespecial #17                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      85: athrow
      86: aload_0
      87: getfield      #9                  // Field elements:Ljava/util/List;
      90: aload         7
      92: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      97: pop
      98: goto          36
     101: return

  private static byte[] parseAddress(byte[], int) throws org.xbill.DNS.WireParseException;
    Code:
       0: aload_0
       1: arraylength
       2: iload_1
       3: if_icmple     16
       6: new           #19                 // class org/xbill/DNS/WireParseException
       9: dup
      10: ldc           #20                 // String invalid address length
      12: invokespecial #21                 // Method org/xbill/DNS/WireParseException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: arraylength
      18: iload_1
      19: if_icmpne     24
      22: aload_0
      23: areturn
      24: iload_1
      25: newarray       byte
      27: astore_2
      28: aload_0
      29: iconst_0
      30: aload_2
      31: iconst_0
      32: aload_0
      33: arraylength
      34: invokestatic  #22                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      37: aload_2
      38: areturn

  protected void rrFromWire(org.xbill.DNS.DNSInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #6                  // class java/util/ArrayList
       4: dup
       5: iconst_1
       6: invokespecial #8                  // Method java/util/ArrayList."<init>":(I)V
       9: putfield      #9                  // Field elements:Ljava/util/List;
      12: aload_1
      13: invokevirtual #23                 // Method org/xbill/DNS/DNSInput.remaining:()I
      16: ifeq          161
      19: aload_1
      20: invokevirtual #24                 // Method org/xbill/DNS/DNSInput.readU16:()I
      23: istore_2
      24: aload_1
      25: invokevirtual #25                 // Method org/xbill/DNS/DNSInput.readU8:()I
      28: istore_3
      29: aload_1
      30: invokevirtual #25                 // Method org/xbill/DNS/DNSInput.readU8:()I
      33: istore        4
      35: iload         4
      37: sipush        128
      40: iand
      41: ifeq          48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: istore        5
      51: iload         4
      53: sipush        -129
      56: iand
      57: istore        4
      59: aload_1
      60: iload         4
      62: invokevirtual #26                 // Method org/xbill/DNS/DNSInput.readByteArray:(I)[B
      65: astore        6
      67: iload_2
      68: iload_3
      69: invokestatic  #1                  // Method validatePrefixLength:(II)Z
      72: ifne          85
      75: new           #19                 // class org/xbill/DNS/WireParseException
      78: dup
      79: ldc           #27                 // String invalid prefix length
      81: invokespecial #21                 // Method org/xbill/DNS/WireParseException."<init>":(Ljava/lang/String;)V
      84: athrow
      85: iload_2
      86: iconst_1
      87: if_icmpeq     95
      90: iload_2
      91: iconst_2
      92: if_icmpne     130
      95: aload         6
      97: iload_2
      98: invokestatic  #28                 // Method org/xbill/DNS/Address.addressLength:(I)I
     101: invokestatic  #29                 // Method parseAddress:([BI)[B
     104: astore        6
     106: aload         6
     108: invokestatic  #30                 // Method java/net/InetAddress.getByAddress:([B)Ljava/net/InetAddress;
     111: astore        8
     113: new           #13                 // class org/xbill/DNS/APLRecord$Element
     116: dup
     117: iload         5
     119: aload         8
     121: iload_3
     122: invokespecial #31                 // Method org/xbill/DNS/APLRecord$Element."<init>":(ZLjava/net/InetAddress;I)V
     125: astore        7
     127: goto          146
     130: new           #13                 // class org/xbill/DNS/APLRecord$Element
     133: dup
     134: iload_2
     135: iload         5
     137: aload         6
     139: iload_3
     140: aconst_null
     141: invokespecial #32                 // Method org/xbill/DNS/APLRecord$Element."<init>":(IZLjava/lang/Object;ILorg/xbill/DNS/APLRecord$1;)V
     144: astore        7
     146: aload_0
     147: getfield      #9                  // Field elements:Ljava/util/List;
     150: aload         7
     152: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     157: pop
     158: goto          12
     161: return

  protected void rdataFromString(org.xbill.DNS.Tokenizer, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #6                  // class java/util/ArrayList
       4: dup
       5: iconst_1
       6: invokespecial #8                  // Method java/util/ArrayList."<init>":(I)V
       9: putfield      #9                  // Field elements:Ljava/util/List;
      12: aload_1
      13: invokevirtual #33                 // Method org/xbill/DNS/Tokenizer.get:()Lorg/xbill/DNS/Tokenizer$Token;
      16: astore_3
      17: aload_3
      18: invokevirtual #34                 // Method org/xbill/DNS/Tokenizer$Token.isString:()Z
      21: ifne          27
      24: goto          282
      27: iconst_0
      28: istore        4
      30: aload_3
      31: invokevirtual #35                 // Method org/xbill/DNS/Tokenizer$Token.value:()Ljava/lang/String;
      34: astore        7
      36: iconst_0
      37: istore        8
      39: aload         7
      41: ldc           #36                 // String !
      43: invokevirtual #37                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      46: ifeq          55
      49: iconst_1
      50: istore        4
      52: iconst_1
      53: istore        8
      55: aload         7
      57: bipush        58
      59: iload         8
      61: invokevirtual #38                 // Method java/lang/String.indexOf:(II)I
      64: istore        9
      66: iload         9
      68: ifge          78
      71: aload_1
      72: ldc           #39                 // String invalid address prefix element
      74: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      77: athrow
      78: aload         7
      80: bipush        47
      82: iload         9
      84: invokevirtual #38                 // Method java/lang/String.indexOf:(II)I
      87: istore        10
      89: iload         10
      91: ifge          101
      94: aload_1
      95: ldc           #39                 // String invalid address prefix element
      97: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     100: athrow
     101: aload         7
     103: iload         8
     105: iload         9
     107: invokevirtual #41                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     110: astore        11
     112: aload         7
     114: iload         9
     116: iconst_1
     117: iadd
     118: iload         10
     120: invokevirtual #41                 // Method java/lang/String.substring:(II)Ljava/lang/String;
     123: astore        12
     125: aload         7
     127: iload         10
     129: iconst_1
     130: iadd
     131: invokevirtual #42                 // Method java/lang/String.substring:(I)Ljava/lang/String;
     134: astore        13
     136: aload         11
     138: invokestatic  #43                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
     141: istore        5
     143: goto          155
     146: astore        14
     148: aload_1
     149: ldc           #45                 // String invalid family
     151: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     154: athrow
     155: iload         5
     157: iconst_1
     158: if_icmpeq     174
     161: iload         5
     163: iconst_2
     164: if_icmpeq     174
     167: aload_1
     168: ldc           #16                 // String unknown family
     170: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     173: athrow
     174: aload         13
     176: invokestatic  #43                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
     179: istore        6
     181: goto          193
     184: astore        14
     186: aload_1
     187: ldc           #27                 // String invalid prefix length
     189: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     192: athrow
     193: iload         5
     195: iload         6
     197: invokestatic  #1                  // Method validatePrefixLength:(II)Z
     200: ifne          210
     203: aload_1
     204: ldc           #27                 // String invalid prefix length
     206: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     209: athrow
     210: aload         12
     212: iload         5
     214: invokestatic  #46                 // Method org/xbill/DNS/Address.toByteArray:(Ljava/lang/String;I)[B
     217: astore        14
     219: aload         14
     221: ifnonnull     249
     224: aload_1
     225: new           #47                 // class java/lang/StringBuilder
     228: dup
     229: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
     232: ldc           #49                 // String invalid IP address
     234: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     237: aload         12
     239: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     242: invokevirtual #51                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     245: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     248: athrow
     249: aload         14
     251: invokestatic  #30                 // Method java/net/InetAddress.getByAddress:([B)Ljava/net/InetAddress;
     254: astore        15
     256: aload_0
     257: getfield      #9                  // Field elements:Ljava/util/List;
     260: new           #13                 // class org/xbill/DNS/APLRecord$Element
     263: dup
     264: iload         4
     266: aload         15
     268: iload         6
     270: invokespecial #31                 // Method org/xbill/DNS/APLRecord$Element."<init>":(ZLjava/net/InetAddress;I)V
     273: invokeinterface #18,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     278: pop
     279: goto          12
     282: aload_1
     283: invokevirtual #52                 // Method org/xbill/DNS/Tokenizer.unget:()V
     286: return
    Exception table:
       from    to  target type
         136   143   146   Class java/lang/NumberFormatException
         174   181   184   Class java/lang/NumberFormatException

  protected java.lang.String rrToString();
    Code:
       0: new           #47                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #9                  // Field elements:Ljava/util/List;
      12: invokeinterface #10,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      17: astore_2
      18: aload_2
      19: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      24: ifeq          62
      27: aload_2
      28: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      33: checkcast     #13                 // class org/xbill/DNS/APLRecord$Element
      36: astore_3
      37: aload_1
      38: aload_3
      39: invokevirtual #53                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      42: pop
      43: aload_2
      44: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      49: ifeq          59
      52: aload_1
      53: ldc           #54                 // String
      55: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: pop
      59: goto          18
      62: aload_1
      63: invokevirtual #51                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: areturn

  public java.util.List<org.xbill.DNS.APLRecord$Element> getElements();
    Code:
       0: aload_0
       1: getfield      #9                  // Field elements:Ljava/util/List;
       4: areturn

  private static int addressLength(byte[]);
    Code:
       0: aload_0
       1: arraylength
       2: iconst_1
       3: isub
       4: istore_1
       5: iload_1
       6: iflt          25
       9: aload_0
      10: iload_1
      11: baload
      12: ifeq          19
      15: iload_1
      16: iconst_1
      17: iadd
      18: ireturn
      19: iinc          1, -1
      22: goto          5
      25: iconst_0
      26: ireturn

  protected void rrToWire(org.xbill.DNS.DNSOutput, org.xbill.DNS.Compression, boolean);
    Code:
       0: aload_0
       1: getfield      #9                  // Field elements:Ljava/util/List;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore        4
      11: aload         4
      13: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          152
      21: aload         4
      23: invokeinterface #12,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      28: checkcast     #13                 // class org/xbill/DNS/APLRecord$Element
      31: astore        5
      33: aload         5
      35: getfield      #14                 // Field org/xbill/DNS/APLRecord$Element.family:I
      38: iconst_1
      39: if_icmpeq     51
      42: aload         5
      44: getfield      #14                 // Field org/xbill/DNS/APLRecord$Element.family:I
      47: iconst_2
      48: if_icmpne     78
      51: aload         5
      53: getfield      #55                 // Field org/xbill/DNS/APLRecord$Element.address:Ljava/lang/Object;
      56: checkcast     #56                 // class java/net/InetAddress
      59: astore        8
      61: aload         8
      63: invokevirtual #57                 // Method java/net/InetAddress.getAddress:()[B
      66: astore        7
      68: aload         7
      70: invokestatic  #58                 // Method addressLength:([B)I
      73: istore        6
      75: goto          96
      78: aload         5
      80: getfield      #55                 // Field org/xbill/DNS/APLRecord$Element.address:Ljava/lang/Object;
      83: checkcast     #59                 // class "[B"
      86: checkcast     #59                 // class "[B"
      89: astore        7
      91: aload         7
      93: arraylength
      94: istore        6
      96: iload         6
      98: istore        8
     100: aload         5
     102: getfield      #60                 // Field org/xbill/DNS/APLRecord$Element.negative:Z
     105: ifeq          116
     108: iload         8
     110: sipush        128
     113: ior
     114: istore        8
     116: aload_1
     117: aload         5
     119: getfield      #14                 // Field org/xbill/DNS/APLRecord$Element.family:I
     122: invokevirtual #61                 // Method org/xbill/DNS/DNSOutput.writeU16:(I)V
     125: aload_1
     126: aload         5
     128: getfield      #62                 // Field org/xbill/DNS/APLRecord$Element.prefixLength:I
     131: invokevirtual #63                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
     134: aload_1
     135: iload         8
     137: invokevirtual #63                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
     140: aload_1
     141: aload         7
     143: iconst_0
     144: iload         6
     146: invokevirtual #64                 // Method org/xbill/DNS/DNSOutput.writeByteArray:([BII)V
     149: goto          11
     152: return

  static boolean access$000(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: invokestatic  #1                  // Method validatePrefixLength:(II)Z
       5: ireturn
}
