Compiled from "HIPRecord.java"
public class org.xbill.DNS.HIPRecord extends org.xbill.DNS.Record {
  private byte[] hit;

  private int pkAlgorithm;

  private byte[] publicKey;

  private final java.util.List<org.xbill.DNS.Name> rvServers;

  org.xbill.DNS.HIPRecord();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/xbill/DNS/Record."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field rvServers:Ljava/util/List;
      15: return

  public org.xbill.DNS.HIPRecord(org.xbill.DNS.Name, int, long, byte[], int, byte[], java.util.List<org.xbill.DNS.Name>);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        55
       4: iload_2
       5: lload_3
       6: invokespecial #6                  // Method org/xbill/DNS/Record."<init>":(Lorg/xbill/DNS/Name;IIJ)V
       9: aload_0
      10: new           #2                  // class java/util/ArrayList
      13: dup
      14: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      17: putfield      #4                  // Field rvServers:Ljava/util/List;
      20: aload_0
      21: aload         5
      23: putfield      #7                  // Field hit:[B
      26: aload_0
      27: iload         6
      29: putfield      #8                  // Field pkAlgorithm:I
      32: aload_0
      33: aload         7
      35: putfield      #9                  // Field publicKey:[B
      38: aload         8
      40: ifnull        55
      43: aload_0
      44: getfield      #4                  // Field rvServers:Ljava/util/List;
      47: aload         8
      49: invokeinterface #10,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      54: pop
      55: return

  public org.xbill.DNS.HIPRecord(org.xbill.DNS.Name, int, long, byte[], int, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: lload_3
       4: aload         5
       6: iload         6
       8: aload         7
      10: aconst_null
      11: invokespecial #11                 // Method "<init>":(Lorg/xbill/DNS/Name;IJ[BI[BLjava/util/List;)V
      14: return

  public org.xbill.DNS.HIPRecord(org.xbill.DNS.Name, int, long, byte[], int, java.security.PublicKey, java.util.List<org.xbill.DNS.Name>) throws org.xbill.DNS.DNSSEC$DNSSECException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: lload_3
       4: aload         5
       6: iload         6
       8: aload         7
      10: iload         6
      12: invokestatic  #12                 // Method mapAlgTypeToDnssec:(I)I
      15: invokestatic  #13                 // Method org/xbill/DNS/DNSSEC.fromPublicKey:(Ljava/security/PublicKey;I)[B
      18: aload         8
      20: invokespecial #11                 // Method "<init>":(Lorg/xbill/DNS/Name;IJ[BI[BLjava/util/List;)V
      23: return

  public org.xbill.DNS.HIPRecord(org.xbill.DNS.Name, int, long, byte[], int, java.security.PublicKey) throws org.xbill.DNS.DNSSEC$DNSSECException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: lload_3
       4: aload         5
       6: iload         6
       8: aload         7
      10: aconst_null
      11: invokespecial #14                 // Method "<init>":(Lorg/xbill/DNS/Name;IJ[BILjava/security/PublicKey;Ljava/util/List;)V
      14: return

  public byte[] getHit();
    Code:
       0: aload_0
       1: getfield      #7                  // Field hit:[B
       4: areturn

  public int getAlgorithm();
    Code:
       0: aload_0
       1: getfield      #8                  // Field pkAlgorithm:I
       4: ireturn

  public byte[] getKey();
    Code:
       0: aload_0
       1: getfield      #9                  // Field publicKey:[B
       4: areturn

  public java.security.PublicKey getPublicKey() throws org.xbill.DNS.DNSSEC$DNSSECException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field pkAlgorithm:I
       4: invokestatic  #12                 // Method mapAlgTypeToDnssec:(I)I
       7: aload_0
       8: getfield      #9                  // Field publicKey:[B
      11: aload_0
      12: invokestatic  #15                 // Method org/xbill/DNS/DNSSEC.toPublicKey:(I[BLorg/xbill/DNS/Record;)Ljava/security/PublicKey;
      15: areturn

  public java.util.List<org.xbill.DNS.Name> getRvServers();
    Code:
       0: aload_0
       1: getfield      #4                  // Field rvServers:Ljava/util/List;
       4: invokestatic  #16                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  private static int mapAlgTypeToDnssec(int) throws org.xbill.DNS.DNSSEC$UnsupportedAlgorithmException;
    Code:
       0: iload_0
       1: tableswitch   { // 1 to 3
                     1: 28
                     2: 30
                     3: 32
               default: 32
          }
      28: iconst_3
      29: ireturn
      30: iconst_5
      31: ireturn
      32: new           #18                 // class org/xbill/DNS/DNSSEC$UnsupportedAlgorithmException
      35: dup
      36: iload_0
      37: invokespecial #19                 // Method org/xbill/DNS/DNSSEC$UnsupportedAlgorithmException."<init>":(I)V
      40: athrow

  protected java.lang.String rrToString();
    Code:
       0: new           #20                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #21                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: ldc           #22                 // String multiline
      10: invokestatic  #23                 // Method org/xbill/DNS/Options.check:(Ljava/lang/String;)Z
      13: ifeq          23
      16: aload_1
      17: ldc           #24                 // String (
      19: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: pop
      23: ldc           #22                 // String multiline
      25: invokestatic  #23                 // Method org/xbill/DNS/Options.check:(Ljava/lang/String;)Z
      28: ifeq          36
      31: ldc           #26                 // String \n\t
      33: goto          38
      36: ldc           #27                 // String
      38: astore_2
      39: aload_1
      40: aload_0
      41: getfield      #8                  // Field pkAlgorithm:I
      44: invokevirtual #28                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      47: pop
      48: aload_1
      49: ldc           #27                 // String
      51: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: pop
      55: aload_1
      56: aload_0
      57: getfield      #7                  // Field hit:[B
      60: invokestatic  #29                 // Method org/xbill/DNS/utils/base16.toString:([B)Ljava/lang/String;
      63: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      66: pop
      67: aload_1
      68: aload_2
      69: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: pop
      73: aload_1
      74: aload_0
      75: getfield      #9                  // Field publicKey:[B
      78: invokestatic  #30                 // Method org/xbill/DNS/utils/base64.toString:([B)Ljava/lang/String;
      81: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: pop
      85: aload_0
      86: getfield      #4                  // Field rvServers:Ljava/util/List;
      89: invokeinterface #31,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      94: ifne          103
      97: aload_1
      98: aload_2
      99: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     102: pop
     103: aload_1
     104: aload_0
     105: getfield      #4                  // Field rvServers:Ljava/util/List;
     108: invokeinterface #32,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
     113: invokedynamic #33,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
     118: invokeinterface #34,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
     123: aload_2
     124: invokestatic  #35                 // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
     127: invokeinterface #36,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     132: checkcast     #37                 // class java/lang/String
     135: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     138: pop
     139: ldc           #22                 // String multiline
     141: invokestatic  #23                 // Method org/xbill/DNS/Options.check:(Ljava/lang/String;)Z
     144: ifeq          154
     147: aload_1
     148: ldc           #38                 // String  )
     150: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     153: pop
     154: aload_1
     155: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     158: areturn

  protected void rdataFromString(org.xbill.DNS.Tokenizer, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #40                 // Method org/xbill/DNS/Tokenizer.getUInt8:()I
       5: putfield      #8                  // Field pkAlgorithm:I
       8: aload_0
       9: aload_1
      10: invokevirtual #41                 // Method org/xbill/DNS/Tokenizer.getHexString:()[B
      13: putfield      #7                  // Field hit:[B
      16: aload_0
      17: aload_1
      18: invokevirtual #42                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
      21: invokestatic  #43                 // Method org/xbill/DNS/utils/base64.fromString:(Ljava/lang/String;)[B
      24: putfield      #9                  // Field publicKey:[B
      27: aload_1
      28: invokevirtual #44                 // Method org/xbill/DNS/Tokenizer.get:()Lorg/xbill/DNS/Tokenizer$Token;
      31: dup
      32: astore_3
      33: invokevirtual #45                 // Method org/xbill/DNS/Tokenizer$Token.isString:()Z
      36: ifeq          63
      39: aload_0
      40: getfield      #4                  // Field rvServers:Ljava/util/List;
      43: new           #46                 // class org/xbill/DNS/Name
      46: dup
      47: aload_3
      48: invokevirtual #47                 // Method org/xbill/DNS/Tokenizer$Token.value:()Ljava/lang/String;
      51: invokespecial #48                 // Method org/xbill/DNS/Name."<init>":(Ljava/lang/String;)V
      54: invokeinterface #49,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      59: pop
      60: goto          27
      63: return

  protected void rrToWire(org.xbill.DNS.DNSOutput, org.xbill.DNS.Compression, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #7                  // Field hit:[B
       5: arraylength
       6: invokevirtual #50                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
       9: aload_1
      10: aload_0
      11: getfield      #8                  // Field pkAlgorithm:I
      14: invokevirtual #50                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
      17: aload_1
      18: aload_0
      19: getfield      #9                  // Field publicKey:[B
      22: arraylength
      23: invokevirtual #51                 // Method org/xbill/DNS/DNSOutput.writeU16:(I)V
      26: aload_1
      27: aload_0
      28: getfield      #7                  // Field hit:[B
      31: invokevirtual #52                 // Method org/xbill/DNS/DNSOutput.writeByteArray:([B)V
      34: aload_1
      35: aload_0
      36: getfield      #9                  // Field publicKey:[B
      39: invokevirtual #52                 // Method org/xbill/DNS/DNSOutput.writeByteArray:([B)V
      42: aload_0
      43: getfield      #4                  // Field rvServers:Ljava/util/List;
      46: aload_1
      47: iload_3
      48: invokedynamic #53,  0             // InvokeDynamic #1:accept:(Lorg/xbill/DNS/DNSOutput;Z)Ljava/util/function/Consumer;
      53: invokeinterface #54,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      58: return

  protected void rrFromWire(org.xbill.DNS.DNSInput) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #55                 // Method org/xbill/DNS/DNSInput.readU8:()I
       4: istore_2
       5: aload_0
       6: aload_1
       7: invokevirtual #55                 // Method org/xbill/DNS/DNSInput.readU8:()I
      10: putfield      #8                  // Field pkAlgorithm:I
      13: aload_1
      14: invokevirtual #56                 // Method org/xbill/DNS/DNSInput.readU16:()I
      17: istore_3
      18: aload_0
      19: aload_1
      20: iload_2
      21: invokevirtual #57                 // Method org/xbill/DNS/DNSInput.readByteArray:(I)[B
      24: putfield      #7                  // Field hit:[B
      27: aload_0
      28: aload_1
      29: iload_3
      30: invokevirtual #57                 // Method org/xbill/DNS/DNSInput.readByteArray:(I)[B
      33: putfield      #9                  // Field publicKey:[B
      36: aload_1
      37: invokevirtual #58                 // Method org/xbill/DNS/DNSInput.remaining:()I
      40: ifle          64
      43: aload_0
      44: getfield      #4                  // Field rvServers:Ljava/util/List;
      47: new           #46                 // class org/xbill/DNS/Name
      50: dup
      51: aload_1
      52: invokespecial #59                 // Method org/xbill/DNS/Name."<init>":(Lorg/xbill/DNS/DNSInput;)V
      55: invokeinterface #49,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      60: pop
      61: goto          36
      64: return

  private static void lambda$rrToWire$0(org.xbill.DNS.DNSOutput, boolean, org.xbill.DNS.Name);
    Code:
       0: aload_2
       1: aload_0
       2: aconst_null
       3: iload_1
       4: invokevirtual #60                 // Method org/xbill/DNS/Name.toWire:(Lorg/xbill/DNS/DNSOutput;Lorg/xbill/DNS/Compression;Z)V
       7: return
}
