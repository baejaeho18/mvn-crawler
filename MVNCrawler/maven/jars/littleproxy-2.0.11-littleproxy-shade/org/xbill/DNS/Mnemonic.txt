Compiled from "Mnemonic.java"
class org.xbill.DNS.Mnemonic {
  static final int CASE_SENSITIVE;

  static final int CASE_UPPER;

  static final int CASE_LOWER;

  private final java.util.HashMap<java.lang.String, java.lang.Integer> strings;

  private final java.util.HashMap<java.lang.Integer, java.lang.String> values;

  private final java.lang.String description;

  private final int wordcase;

  private java.lang.String prefix;

  private int max;

  private boolean numericok;

  public org.xbill.DNS.Mnemonic(java.lang.String, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field description:Ljava/lang/String;
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field wordcase:I
      14: aload_0
      15: new           #4                  // class java/util/HashMap
      18: dup
      19: invokespecial #5                  // Method java/util/HashMap."<init>":()V
      22: putfield      #6                  // Field strings:Ljava/util/HashMap;
      25: aload_0
      26: new           #4                  // class java/util/HashMap
      29: dup
      30: invokespecial #5                  // Method java/util/HashMap."<init>":()V
      33: putfield      #7                  // Field values:Ljava/util/HashMap;
      36: aload_0
      37: ldc           #9                  // int 2147483647
      39: putfield      #10                 // Field max:I
      42: return

  public void setMaximum(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field max:I
       5: return

  public void setPrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_0
       2: aload_1
       3: invokespecial #11                 // Method sanitize:(Ljava/lang/String;)Ljava/lang/String;
       6: putfield      #12                 // Field prefix:Ljava/lang/String;
       9: return

  public void setNumericAllowed(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #13                 // Field numericok:Z
       5: return

  public void check(int);
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #10                 // Field max:I
       9: if_icmple     51
      12: new           #14                 // class java/lang/IllegalArgumentException
      15: dup
      16: new           #15                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      23: aload_0
      24: getfield      #2                  // Field description:Ljava/lang/String;
      27: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: ldc           #18                 // String
      32: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_1
      36: invokevirtual #19                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: ldc           #20                 // String  is out of range
      41: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokespecial #22                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      50: athrow
      51: return

  private java.lang.String sanitize(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #3                  // Field wordcase:I
       4: iconst_2
       5: if_icmpne     13
       8: aload_1
       9: invokevirtual #24                 // Method java/lang/String.toUpperCase:()Ljava/lang/String;
      12: areturn
      13: aload_0
      14: getfield      #3                  // Field wordcase:I
      17: iconst_3
      18: if_icmpne     26
      21: aload_1
      22: invokevirtual #25                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
      25: areturn
      26: aload_1
      27: areturn

  private int parseNumeric(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #26                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
       4: istore_2
       5: iload_2
       6: iflt          19
       9: iload_2
      10: aload_0
      11: getfield      #10                 // Field max:I
      14: if_icmpgt     19
      17: iload_2
      18: ireturn
      19: goto          23
      22: astore_2
      23: iconst_m1
      24: ireturn
    Exception table:
       from    to  target type
           0    18    22   Class java/lang/NumberFormatException

  public void add(int, java.lang.String);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #28                 // Method check:(I)V
       5: aload_0
       6: aload_2
       7: invokespecial #11                 // Method sanitize:(Ljava/lang/String;)Ljava/lang/String;
      10: astore_2
      11: aload_0
      12: getfield      #6                  // Field strings:Ljava/util/HashMap;
      15: aload_2
      16: iload_1
      17: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: invokevirtual #30                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      23: pop
      24: aload_0
      25: getfield      #7                  // Field values:Ljava/util/HashMap;
      28: iload_1
      29: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      32: aload_2
      33: invokevirtual #30                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      36: pop
      37: return

  public void remove(int);
    Code:
       0: aload_0
       1: getfield      #7                  // Field values:Ljava/util/HashMap;
       4: iload_1
       5: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokevirtual #31                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: aload_0
      13: getfield      #6                  // Field strings:Ljava/util/HashMap;
      16: invokevirtual #32                 // Method java/util/HashMap.entrySet:()Ljava/util/Set;
      19: iload_1
      20: invokedynamic #33,  0             // InvokeDynamic #0:test:(I)Ljava/util/function/Predicate;
      25: invokeinterface #34,  2           // InterfaceMethod java/util/Set.removeIf:(Ljava/util/function/Predicate;)Z
      30: pop
      31: return

  public void addAlias(int, java.lang.String);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #28                 // Method check:(I)V
       5: aload_0
       6: aload_2
       7: invokespecial #11                 // Method sanitize:(Ljava/lang/String;)Ljava/lang/String;
      10: astore_2
      11: aload_0
      12: getfield      #6                  // Field strings:Ljava/util/HashMap;
      15: aload_2
      16: iload_1
      17: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: invokevirtual #30                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      23: pop
      24: return

  public void removeAlias(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #11                 // Method sanitize:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_1
       6: aload_0
       7: getfield      #6                  // Field strings:Ljava/util/HashMap;
      10: aload_1
      11: invokevirtual #31                 // Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  public void addAll(org.xbill.DNS.Mnemonic);
    Code:
       0: aload_0
       1: getfield      #3                  // Field wordcase:I
       4: aload_1
       5: getfield      #3                  // Field wordcase:I
       8: if_icmpeq     41
      11: new           #14                 // class java/lang/IllegalArgumentException
      14: dup
      15: new           #15                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      22: aload_1
      23: getfield      #2                  // Field description:Ljava/lang/String;
      26: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: ldc           #35                 // String : wordcases do not match
      31: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: invokespecial #22                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #6                  // Field strings:Ljava/util/HashMap;
      45: aload_1
      46: getfield      #6                  // Field strings:Ljava/util/HashMap;
      49: invokevirtual #36                 // Method java/util/HashMap.putAll:(Ljava/util/Map;)V
      52: aload_0
      53: getfield      #7                  // Field values:Ljava/util/HashMap;
      56: aload_1
      57: getfield      #7                  // Field values:Ljava/util/HashMap;
      60: invokevirtual #36                 // Method java/util/HashMap.putAll:(Ljava/util/Map;)V
      63: return

  public java.lang.String getText(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #28                 // Method check:(I)V
       5: aload_0
       6: getfield      #7                  // Field values:Ljava/util/HashMap;
       9: iload_1
      10: invokestatic  #29                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      13: invokevirtual #37                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #38                 // class java/lang/String
      19: astore_2
      20: aload_2
      21: ifnull        26
      24: aload_2
      25: areturn
      26: iload_1
      27: invokestatic  #39                 // Method java/lang/Integer.toString:(I)Ljava/lang/String;
      30: astore_2
      31: aload_0
      32: getfield      #12                 // Field prefix:Ljava/lang/String;
      35: ifnull        60
      38: new           #15                 // class java/lang/StringBuilder
      41: dup
      42: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      45: aload_0
      46: getfield      #12                 // Field prefix:Ljava/lang/String;
      49: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_2
      53: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: areturn
      60: aload_2
      61: areturn

  public int getValue(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #11                 // Method sanitize:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_1
       6: aload_0
       7: getfield      #6                  // Field strings:Ljava/util/HashMap;
      10: aload_1
      11: invokevirtual #37                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      14: checkcast     #8                  // class java/lang/Integer
      17: astore_2
      18: aload_2
      19: ifnull        27
      22: aload_2
      23: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
      26: ireturn
      27: aload_0
      28: getfield      #12                 // Field prefix:Ljava/lang/String;
      31: ifnull        67
      34: aload_1
      35: aload_0
      36: getfield      #12                 // Field prefix:Ljava/lang/String;
      39: invokevirtual #41                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      42: ifeq          67
      45: aload_0
      46: aload_1
      47: aload_0
      48: getfield      #12                 // Field prefix:Ljava/lang/String;
      51: invokevirtual #42                 // Method java/lang/String.length:()I
      54: invokevirtual #43                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      57: invokespecial #44                 // Method parseNumeric:(Ljava/lang/String;)I
      60: istore_3
      61: iload_3
      62: iflt          67
      65: iload_3
      66: ireturn
      67: aload_0
      68: getfield      #13                 // Field numericok:Z
      71: ifeq          80
      74: aload_0
      75: aload_1
      76: invokespecial #44                 // Method parseNumeric:(Ljava/lang/String;)I
      79: ireturn
      80: iconst_m1
      81: ireturn

  private static boolean lambda$remove$0(int, java.util.Map$Entry);
    Code:
       0: aload_1
       1: invokeinterface #45,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
       6: checkcast     #8                  // class java/lang/Integer
       9: invokevirtual #40                 // Method java/lang/Integer.intValue:()I
      12: iload_0
      13: if_icmpne     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn
}
