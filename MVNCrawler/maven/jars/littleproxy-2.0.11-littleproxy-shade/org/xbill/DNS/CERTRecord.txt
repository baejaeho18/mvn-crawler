Compiled from "CERTRecord.java"
public class org.xbill.DNS.CERTRecord extends org.xbill.DNS.Record {
  public static final int PKIX;

  public static final int SPKI;

  public static final int PGP;

  public static final int URI;

  public static final int OID;

  private int certType;

  private int keyTag;

  private int alg;

  private byte[] cert;

  org.xbill.DNS.CERTRecord();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/xbill/DNS/Record."<init>":()V
       4: return

  public org.xbill.DNS.CERTRecord(org.xbill.DNS.Name, int, long, int, int, int, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        37
       4: iload_2
       5: lload_3
       6: invokespecial #4                  // Method org/xbill/DNS/Record."<init>":(Lorg/xbill/DNS/Name;IIJ)V
       9: aload_0
      10: ldc           #5                  // String certType
      12: iload         5
      14: invokestatic  #6                  // Method checkU16:(Ljava/lang/String;I)I
      17: putfield      #7                  // Field certType:I
      20: aload_0
      21: ldc           #8                  // String keyTag
      23: iload         6
      25: invokestatic  #6                  // Method checkU16:(Ljava/lang/String;I)I
      28: putfield      #9                  // Field keyTag:I
      31: aload_0
      32: ldc           #10                 // String alg
      34: iload         7
      36: invokestatic  #11                 // Method checkU8:(Ljava/lang/String;I)I
      39: putfield      #12                 // Field alg:I
      42: aload_0
      43: aload         8
      45: putfield      #13                 // Field cert:[B
      48: return

  protected void rrFromWire(org.xbill.DNS.DNSInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method org/xbill/DNS/DNSInput.readU16:()I
       5: putfield      #7                  // Field certType:I
       8: aload_0
       9: aload_1
      10: invokevirtual #14                 // Method org/xbill/DNS/DNSInput.readU16:()I
      13: putfield      #9                  // Field keyTag:I
      16: aload_0
      17: aload_1
      18: invokevirtual #15                 // Method org/xbill/DNS/DNSInput.readU8:()I
      21: putfield      #12                 // Field alg:I
      24: aload_0
      25: aload_1
      26: invokevirtual #16                 // Method org/xbill/DNS/DNSInput.readByteArray:()[B
      29: putfield      #13                 // Field cert:[B
      32: return

  protected void rdataFromString(org.xbill.DNS.Tokenizer, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #17                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
       4: astore_3
       5: aload_0
       6: aload_3
       7: invokestatic  #18                 // Method org/xbill/DNS/CERTRecord$CertificateType.value:(Ljava/lang/String;)I
      10: putfield      #7                  // Field certType:I
      13: aload_0
      14: getfield      #7                  // Field certType:I
      17: ifge          44
      20: aload_1
      21: new           #19                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #21                 // String Invalid certificate type:
      30: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_3
      34: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      43: athrow
      44: aload_0
      45: aload_1
      46: invokevirtual #25                 // Method org/xbill/DNS/Tokenizer.getUInt16:()I
      49: putfield      #9                  // Field keyTag:I
      52: aload_1
      53: invokevirtual #17                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
      56: astore        4
      58: aload_0
      59: aload         4
      61: invokestatic  #26                 // Method org/xbill/DNS/DNSSEC$Algorithm.value:(Ljava/lang/String;)I
      64: putfield      #12                 // Field alg:I
      67: aload_0
      68: getfield      #12                 // Field alg:I
      71: ifge          99
      74: aload_1
      75: new           #19                 // class java/lang/StringBuilder
      78: dup
      79: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      82: ldc           #27                 // String Invalid algorithm:
      84: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: aload         4
      89: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      95: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      98: athrow
      99: aload_0
     100: aload_1
     101: invokevirtual #28                 // Method org/xbill/DNS/Tokenizer.getBase64:()[B
     104: putfield      #13                 // Field cert:[B
     107: return

  protected java.lang.String rrToString();
    Code:
       0: new           #19                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #7                  // Field certType:I
      13: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      16: pop
      17: aload_1
      18: ldc           #30                 // String
      20: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: aload_0
      26: getfield      #9                  // Field keyTag:I
      29: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: pop
      33: aload_1
      34: ldc           #30                 // String
      36: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: pop
      40: aload_1
      41: aload_0
      42: getfield      #12                 // Field alg:I
      45: invokevirtual #29                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      48: pop
      49: aload_0
      50: getfield      #13                 // Field cert:[B
      53: ifnull        110
      56: ldc           #31                 // String multiline
      58: invokestatic  #32                 // Method org/xbill/DNS/Options.check:(Ljava/lang/String;)Z
      61: ifeq          91
      64: aload_1
      65: ldc           #33                 // String  (\n
      67: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: pop
      71: aload_1
      72: aload_0
      73: getfield      #13                 // Field cert:[B
      76: bipush        64
      78: ldc           #34                 // String \t
      80: iconst_1
      81: invokestatic  #35                 // Method org/xbill/DNS/utils/base64.formatString:([BILjava/lang/String;Z)Ljava/lang/String;
      84: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: pop
      88: goto          110
      91: aload_1
      92: ldc           #30                 // String
      94: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: pop
      98: aload_1
      99: aload_0
     100: getfield      #13                 // Field cert:[B
     103: invokestatic  #36                 // Method org/xbill/DNS/utils/base64.toString:([B)Ljava/lang/String;
     106: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: pop
     110: aload_1
     111: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     114: areturn

  public int getCertType();
    Code:
       0: aload_0
       1: getfield      #7                  // Field certType:I
       4: ireturn

  public int getKeyTag();
    Code:
       0: aload_0
       1: getfield      #9                  // Field keyTag:I
       4: ireturn

  public int getAlgorithm();
    Code:
       0: aload_0
       1: getfield      #12                 // Field alg:I
       4: ireturn

  public byte[] getCert();
    Code:
       0: aload_0
       1: getfield      #13                 // Field cert:[B
       4: areturn

  protected void rrToWire(org.xbill.DNS.DNSOutput, org.xbill.DNS.Compression, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #7                  // Field certType:I
       5: invokevirtual #37                 // Method org/xbill/DNS/DNSOutput.writeU16:(I)V
       8: aload_1
       9: aload_0
      10: getfield      #9                  // Field keyTag:I
      13: invokevirtual #37                 // Method org/xbill/DNS/DNSOutput.writeU16:(I)V
      16: aload_1
      17: aload_0
      18: getfield      #12                 // Field alg:I
      21: invokevirtual #38                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
      24: aload_1
      25: aload_0
      26: getfield      #13                 // Field cert:[B
      29: invokevirtual #39                 // Method org/xbill/DNS/DNSOutput.writeByteArray:([B)V
      32: return
}
