Compiled from "DnssecAlgorithmOption.java"
public class org.xbill.DNS.DnssecAlgorithmOption extends org.xbill.DNS.EDNSOption {
  private final java.util.List<java.lang.Integer> algCodes;

  private org.xbill.DNS.DnssecAlgorithmOption(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method org/xbill/DNS/EDNSOption."<init>":(I)V
       5: iload_1
       6: tableswitch   { // 5 to 7
                     5: 32
                     6: 32
                     7: 32
               default: 35
          }
      32: goto          45
      35: new           #2                  // class java/lang/IllegalArgumentException
      38: dup
      39: ldc           #3                  // String Invalid option code, must be one of DAU, DHU, N3U
      41: invokespecial #4                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      44: athrow
      45: aload_0
      46: new           #5                  // class java/util/ArrayList
      49: dup
      50: invokespecial #6                  // Method java/util/ArrayList."<init>":()V
      53: putfield      #7                  // Field algCodes:Ljava/util/List;
      56: return

  public org.xbill.DNS.DnssecAlgorithmOption(int, java.util.List<java.lang.Integer>);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #8                  // Method "<init>":(I)V
       5: aload_0
       6: getfield      #7                  // Field algCodes:Ljava/util/List;
       9: aload_2
      10: invokeinterface #9,  2            // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      15: pop
      16: return

  public org.xbill.DNS.DnssecAlgorithmOption(int, int...);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #8                  // Method "<init>":(I)V
       5: aload_2
       6: ifnull        52
       9: aload_2
      10: astore_3
      11: aload_3
      12: arraylength
      13: istore        4
      15: iconst_0
      16: istore        5
      18: iload         5
      20: iload         4
      22: if_icmpge     52
      25: aload_3
      26: iload         5
      28: iaload
      29: istore        6
      31: aload_0
      32: getfield      #7                  // Field algCodes:Ljava/util/List;
      35: iload         6
      37: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: invokeinterface #11,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      45: pop
      46: iinc          5, 1
      49: goto          18
      52: return

  public java.util.List<java.lang.Integer> getAlgorithms();
    Code:
       0: aload_0
       1: getfield      #7                  // Field algCodes:Ljava/util/List;
       4: invokestatic  #12                 // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
       7: areturn

  void optionFromWire(org.xbill.DNS.DNSInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field algCodes:Ljava/util/List;
       4: invokeinterface #13,  1           // InterfaceMethod java/util/List.clear:()V
       9: aload_1
      10: invokevirtual #14                 // Method org/xbill/DNS/DNSInput.remaining:()I
      13: ifle          36
      16: aload_0
      17: getfield      #7                  // Field algCodes:Ljava/util/List;
      20: aload_1
      21: invokevirtual #15                 // Method org/xbill/DNS/DNSInput.readU8:()I
      24: invokestatic  #10                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      27: invokeinterface #11,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      32: pop
      33: goto          9
      36: return

  void optionToWire(org.xbill.DNS.DNSOutput);
    Code:
       0: aload_0
       1: getfield      #7                  // Field algCodes:Ljava/util/List;
       4: aload_1
       5: dup
       6: invokevirtual #16                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       9: pop
      10: invokedynamic #17,  0             // InvokeDynamic #0:accept:(Lorg/xbill/DNS/DNSOutput;)Ljava/util/function/Consumer;
      15: invokeinterface #18,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      20: return

  java.lang.String optionToString();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getCode:()I
       4: tableswitch   { // 5 to 7
                     5: 32
                     6: 41
                     7: 50
               default: 59
          }
      32: invokedynamic #20,  0             // InvokeDynamic #1:apply:()Ljava/util/function/Function;
      37: astore_1
      38: goto          69
      41: invokedynamic #21,  0             // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      46: astore_1
      47: goto          69
      50: invokedynamic #22,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      55: astore_1
      56: goto          69
      59: new           #23                 // class java/lang/IllegalStateException
      62: dup
      63: ldc           #24                 // String Unknown option code
      65: invokespecial #25                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      68: athrow
      69: new           #26                 // class java/lang/StringBuilder
      72: dup
      73: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      76: ldc           #28                 // String [
      78: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: aload_0
      82: getfield      #7                  // Field algCodes:Ljava/util/List;
      85: invokeinterface #30,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      90: aload_1
      91: invokeinterface #31,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      96: ldc           #32                 // String ,
      98: invokestatic  #33                 // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
     101: invokeinterface #34,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
     106: checkcast     #35                 // class java/lang/String
     109: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     112: ldc           #36                 // String ]
     114: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     117: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     120: areturn
}
