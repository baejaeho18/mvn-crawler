Compiled from "Master.java"
public class org.xbill.DNS.Master implements java.lang.AutoCloseable {
  private org.xbill.DNS.Name origin;

  private java.io.File file;

  private org.xbill.DNS.Record last;

  private long defaultTTL;

  private org.xbill.DNS.Master included;

  private final org.xbill.DNS.Tokenizer st;

  private int currentType;

  private int currentDClass;

  private long currentTTL;

  private boolean needSOATTL;

  private org.xbill.DNS.Generator generator;

  private java.util.List<org.xbill.DNS.Generator> generators;

  private boolean noExpandGenerate;

  private boolean noExpandIncludes;

  private boolean includeThrowsException;

  org.xbill.DNS.Master(java.io.File, org.xbill.DNS.Name, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field last:Lorg/xbill/DNS/Record;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field included:Lorg/xbill/DNS/Master;
      14: aload_2
      15: ifnull        34
      18: aload_2
      19: invokevirtual #4                  // Method org/xbill/DNS/Name.isAbsolute:()Z
      22: ifne          34
      25: new           #5                  // class org/xbill/DNS/RelativeNameException
      28: dup
      29: aload_2
      30: invokespecial #6                  // Method org/xbill/DNS/RelativeNameException."<init>":(Lorg/xbill/DNS/Name;)V
      33: athrow
      34: aload_0
      35: aload_1
      36: putfield      #7                  // Field file:Ljava/io/File;
      39: aload_0
      40: new           #8                  // class org/xbill/DNS/Tokenizer
      43: dup
      44: aload_1
      45: invokespecial #9                  // Method org/xbill/DNS/Tokenizer."<init>":(Ljava/io/File;)V
      48: putfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      51: aload_0
      52: aload_2
      53: putfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
      56: aload_0
      57: lload_3
      58: putfield      #12                 // Field defaultTTL:J
      61: return

  public org.xbill.DNS.Master(java.lang.String, org.xbill.DNS.Name, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #13                 // class java/io/File
       4: dup
       5: aload_1
       6: invokespecial #14                 // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: aload_2
      10: lload_3
      11: invokespecial #15                 // Method "<init>":(Ljava/io/File;Lorg/xbill/DNS/Name;J)V
      14: return

  public org.xbill.DNS.Master(java.lang.String, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #13                 // class java/io/File
       4: dup
       5: aload_1
       6: invokespecial #14                 // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: aload_2
      10: ldc2_w        #16                 // long -1l
      13: invokespecial #15                 // Method "<init>":(Ljava/io/File;Lorg/xbill/DNS/Name;J)V
      16: return

  public org.xbill.DNS.Master(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #13                 // class java/io/File
       4: dup
       5: aload_1
       6: invokespecial #14                 // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: aconst_null
      10: ldc2_w        #16                 // long -1l
      13: invokespecial #15                 // Method "<init>":(Ljava/io/File;Lorg/xbill/DNS/Name;J)V
      16: return

  public org.xbill.DNS.Master(java.io.InputStream, org.xbill.DNS.Name, long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field last:Lorg/xbill/DNS/Record;
       9: aload_0
      10: aconst_null
      11: putfield      #3                  // Field included:Lorg/xbill/DNS/Master;
      14: aload_2
      15: ifnull        34
      18: aload_2
      19: invokevirtual #4                  // Method org/xbill/DNS/Name.isAbsolute:()Z
      22: ifne          34
      25: new           #5                  // class org/xbill/DNS/RelativeNameException
      28: dup
      29: aload_2
      30: invokespecial #6                  // Method org/xbill/DNS/RelativeNameException."<init>":(Lorg/xbill/DNS/Name;)V
      33: athrow
      34: aload_0
      35: new           #8                  // class org/xbill/DNS/Tokenizer
      38: dup
      39: aload_1
      40: invokespecial #18                 // Method org/xbill/DNS/Tokenizer."<init>":(Ljava/io/InputStream;)V
      43: putfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      46: aload_0
      47: aload_2
      48: putfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
      51: aload_0
      52: lload_3
      53: putfield      #12                 // Field defaultTTL:J
      56: return

  public org.xbill.DNS.Master(java.io.InputStream, org.xbill.DNS.Name);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: ldc2_w        #16                 // long -1l
       6: invokespecial #19                 // Method "<init>":(Ljava/io/InputStream;Lorg/xbill/DNS/Name;J)V
       9: return

  public org.xbill.DNS.Master(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: ldc2_w        #16                 // long -1l
       6: invokespecial #19                 // Method "<init>":(Ljava/io/InputStream;Lorg/xbill/DNS/Name;J)V
       9: return

  private org.xbill.DNS.Name parseName(java.lang.String, org.xbill.DNS.Name) throws org.xbill.DNS.TextParseException;
    Code:
       0: aload_1
       1: aload_2
       2: invokestatic  #20                 // Method org/xbill/DNS/Name.fromString:(Ljava/lang/String;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
       5: areturn
       6: astore_3
       7: aload_0
       8: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      11: aload_3
      12: invokevirtual #22                 // Method org/xbill/DNS/TextParseException.getMessage:()Ljava/lang/String;
      15: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      18: athrow
    Exception table:
       from    to  target type
           0     5     6   Class org/xbill/DNS/TextParseException

  private void parseTTLClassAndType() throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
       6: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
       9: astore_1
      10: aload_0
      11: aload_1
      12: invokestatic  #25                 // Method org/xbill/DNS/DClass.value:(Ljava/lang/String;)I
      15: dup_x1
      16: putfield      #26                 // Field currentDClass:I
      19: iflt          32
      22: aload_0
      23: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      26: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
      29: astore_1
      30: iconst_1
      31: istore_2
      32: aload_0
      33: ldc2_w        #16                 // long -1l
      36: putfield      #27                 // Field currentTTL:J
      39: aload_0
      40: aload_1
      41: invokestatic  #28                 // Method org/xbill/DNS/TTL.parseTTL:(Ljava/lang/String;)J
      44: putfield      #27                 // Field currentTTL:J
      47: aload_0
      48: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      51: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
      54: astore_1
      55: goto          97
      58: astore_3
      59: aload_0
      60: getfield      #12                 // Field defaultTTL:J
      63: lconst_0
      64: lcmp
      65: iflt          79
      68: aload_0
      69: aload_0
      70: getfield      #12                 // Field defaultTTL:J
      73: putfield      #27                 // Field currentTTL:J
      76: goto          97
      79: aload_0
      80: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
      83: ifnull        97
      86: aload_0
      87: aload_0
      88: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
      91: invokevirtual #30                 // Method org/xbill/DNS/Record.getTTL:()J
      94: putfield      #27                 // Field currentTTL:J
      97: iload_2
      98: ifne          129
     101: aload_0
     102: aload_1
     103: invokestatic  #25                 // Method org/xbill/DNS/DClass.value:(Ljava/lang/String;)I
     106: dup_x1
     107: putfield      #26                 // Field currentDClass:I
     110: iflt          124
     113: aload_0
     114: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     117: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
     120: astore_1
     121: goto          129
     124: aload_0
     125: iconst_1
     126: putfield      #26                 // Field currentDClass:I
     129: aload_0
     130: aload_1
     131: invokestatic  #32                 // Method org/xbill/DNS/Type.value:(Ljava/lang/String;)I
     134: dup_x1
     135: putfield      #33                 // Field currentType:I
     138: ifge          173
     141: aload_0
     142: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     145: new           #34                 // class java/lang/StringBuilder
     148: dup
     149: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     152: ldc           #36                 // String Invalid type \'
     154: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     157: aload_1
     158: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     161: ldc           #38                 // String \'
     163: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     166: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     169: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     172: athrow
     173: aload_0
     174: getfield      #27                 // Field currentTTL:J
     177: lconst_0
     178: lcmp
     179: ifge          211
     182: aload_0
     183: getfield      #33                 // Field currentType:I
     186: bipush        6
     188: if_icmpeq     201
     191: aload_0
     192: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     195: ldc           #41                 // String missing TTL
     197: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     200: athrow
     201: aload_0
     202: iconst_1
     203: putfield      #42                 // Field needSOATTL:Z
     206: aload_0
     207: lconst_0
     208: putfield      #27                 // Field currentTTL:J
     211: return
    Exception table:
       from    to  target type
          39    55    58   Class java/lang/NumberFormatException

  private long parseUInt32(java.lang.String);
    Code:
       0: aload_1
       1: iconst_0
       2: invokevirtual #43                 // Method java/lang/String.charAt:(I)C
       5: invokestatic  #44                 // Method java/lang/Character.isDigit:(C)Z
       8: ifne          15
      11: ldc2_w        #16                 // long -1l
      14: lreturn
      15: aload_1
      16: invokestatic  #45                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      19: lstore_2
      20: lload_2
      21: lconst_0
      22: lcmp
      23: iflt          34
      26: lload_2
      27: ldc2_w        #46                 // long 4294967295l
      30: lcmp
      31: ifle          38
      34: ldc2_w        #16                 // long -1l
      37: lreturn
      38: lload_2
      39: lreturn
      40: astore_2
      41: ldc2_w        #16                 // long -1l
      44: lreturn
    Exception table:
       from    to  target type
          15    37    40   Class java/lang/NumberFormatException
          38    39    40   Class java/lang/NumberFormatException

  private void startGenerate() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
       4: invokevirtual #48                 // Method org/xbill/DNS/Tokenizer.getIdentifier:()Ljava/lang/String;
       7: astore_1
       8: aload_1
       9: ldc           #49                 // String -
      11: invokevirtual #50                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      14: istore_2
      15: iload_2
      16: ifge          46
      19: aload_0
      20: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      23: new           #34                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #51                 // String Invalid $GENERATE range specifier:
      32: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_1
      36: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      45: athrow
      46: aload_1
      47: iconst_0
      48: iload_2
      49: invokevirtual #52                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      52: astore_3
      53: aload_1
      54: iload_2
      55: iconst_1
      56: iadd
      57: invokevirtual #53                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      60: astore        4
      62: aconst_null
      63: astore        5
      65: aload         4
      67: ldc           #54                 // String /
      69: invokevirtual #50                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      72: istore_2
      73: iload_2
      74: iflt          96
      77: aload         4
      79: iload_2
      80: iconst_1
      81: iadd
      82: invokevirtual #53                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      85: astore        5
      87: aload         4
      89: iconst_0
      90: iload_2
      91: invokevirtual #52                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      94: astore        4
      96: aload_0
      97: aload_3
      98: invokespecial #55                 // Method parseUInt32:(Ljava/lang/String;)J
     101: lstore        6
     103: aload_0
     104: aload         4
     106: invokespecial #55                 // Method parseUInt32:(Ljava/lang/String;)J
     109: lstore        8
     111: aload         5
     113: ifnull        127
     116: aload_0
     117: aload         5
     119: invokespecial #55                 // Method parseUInt32:(Ljava/lang/String;)J
     122: lstore        10
     124: goto          130
     127: lconst_1
     128: lstore        10
     130: lload         6
     132: lconst_0
     133: lcmp
     134: iflt          159
     137: lload         8
     139: lconst_0
     140: lcmp
     141: iflt          159
     144: lload         6
     146: lload         8
     148: lcmp
     149: ifgt          159
     152: lload         10
     154: lconst_0
     155: lcmp
     156: ifgt          186
     159: aload_0
     160: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     163: new           #34                 // class java/lang/StringBuilder
     166: dup
     167: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     170: ldc           #51                 // String Invalid $GENERATE range specifier:
     172: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     175: aload_1
     176: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     179: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     182: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     185: athrow
     186: aload_0
     187: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     190: invokevirtual #48                 // Method org/xbill/DNS/Tokenizer.getIdentifier:()Ljava/lang/String;
     193: astore        12
     195: aload_0
     196: invokespecial #56                 // Method parseTTLClassAndType:()V
     199: aload_0
     200: getfield      #33                 // Field currentType:I
     203: invokestatic  #57                 // Method org/xbill/DNS/Generator.supportedType:(I)Z
     206: ifne          247
     209: aload_0
     210: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     213: new           #34                 // class java/lang/StringBuilder
     216: dup
     217: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     220: ldc           #58                 // String $GENERATE does not support
     222: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     225: aload_0
     226: getfield      #33                 // Field currentType:I
     229: invokestatic  #59                 // Method org/xbill/DNS/Type.string:(I)Ljava/lang/String;
     232: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     235: ldc           #60                 // String  records
     237: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     240: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     243: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     246: athrow
     247: aload_0
     248: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     251: invokevirtual #48                 // Method org/xbill/DNS/Tokenizer.getIdentifier:()Ljava/lang/String;
     254: astore        13
     256: aload_0
     257: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     260: invokevirtual #61                 // Method org/xbill/DNS/Tokenizer.getEOL:()V
     263: aload_0
     264: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     267: invokevirtual #62                 // Method org/xbill/DNS/Tokenizer.unget:()V
     270: aload_0
     271: new           #63                 // class org/xbill/DNS/Generator
     274: dup
     275: lload         6
     277: lload         8
     279: lload         10
     281: aload         12
     283: aload_0
     284: getfield      #33                 // Field currentType:I
     287: aload_0
     288: getfield      #26                 // Field currentDClass:I
     291: aload_0
     292: getfield      #27                 // Field currentTTL:J
     295: aload         13
     297: aload_0
     298: getfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
     301: invokespecial #64                 // Method org/xbill/DNS/Generator."<init>":(JJJLjava/lang/String;IIJLjava/lang/String;Lorg/xbill/DNS/Name;)V
     304: putfield      #65                 // Field generator:Lorg/xbill/DNS/Generator;
     307: aload_0
     308: getfield      #66                 // Field generators:Ljava/util/List;
     311: ifnonnull     326
     314: aload_0
     315: new           #67                 // class java/util/ArrayList
     318: dup
     319: iconst_1
     320: invokespecial #68                 // Method java/util/ArrayList."<init>":(I)V
     323: putfield      #66                 // Field generators:Ljava/util/List;
     326: aload_0
     327: getfield      #66                 // Field generators:Ljava/util/List;
     330: aload_0
     331: getfield      #65                 // Field generator:Lorg/xbill/DNS/Generator;
     334: invokeinterface #69,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     339: pop
     340: return

  private void endGenerate() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
       4: invokevirtual #61                 // Method org/xbill/DNS/Tokenizer.getEOL:()V
       7: aload_0
       8: aconst_null
       9: putfield      #65                 // Field generator:Lorg/xbill/DNS/Generator;
      12: return

  private org.xbill.DNS.Record nextGenerated() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #65                 // Field generator:Lorg/xbill/DNS/Generator;
       4: invokevirtual #70                 // Method org/xbill/DNS/Generator.nextRecord:()Lorg/xbill/DNS/Record;
       7: areturn
       8: astore_1
       9: aload_0
      10: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      13: new           #34                 // class java/lang/StringBuilder
      16: dup
      17: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #71                 // String Parsing $GENERATE:
      22: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_1
      26: invokevirtual #22                 // Method org/xbill/DNS/TextParseException.getMessage:()Ljava/lang/String;
      29: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      38: athrow
    Exception table:
       from    to  target type
           0     7     8   Class org/xbill/DNS/TextParseException

  private org.xbill.DNS.Record _nextRecord() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field included:Lorg/xbill/DNS/Master;
       4: ifnull        26
       7: aload_0
       8: getfield      #3                  // Field included:Lorg/xbill/DNS/Master;
      11: invokevirtual #72                 // Method nextRecord:()Lorg/xbill/DNS/Record;
      14: astore_3
      15: aload_3
      16: ifnull        21
      19: aload_3
      20: areturn
      21: aload_0
      22: aconst_null
      23: putfield      #3                  // Field included:Lorg/xbill/DNS/Master;
      26: aload_0
      27: getfield      #65                 // Field generator:Lorg/xbill/DNS/Generator;
      30: ifnull        48
      33: aload_0
      34: invokespecial #73                 // Method nextGenerated:()Lorg/xbill/DNS/Record;
      37: astore_3
      38: aload_3
      39: ifnull        44
      42: aload_3
      43: areturn
      44: aload_0
      45: invokespecial #74                 // Method endGenerate:()V
      48: aload_0
      49: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      52: iconst_1
      53: iconst_0
      54: invokevirtual #75                 // Method org/xbill/DNS/Tokenizer.get:(ZZ)Lorg/xbill/DNS/Tokenizer$Token;
      57: astore_1
      58: aload_1
      59: invokevirtual #76                 // Method org/xbill/DNS/Tokenizer$Token.type:()I
      62: iconst_2
      63: if_icmpne     132
      66: aload_0
      67: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      70: invokevirtual #77                 // Method org/xbill/DNS/Tokenizer.get:()Lorg/xbill/DNS/Tokenizer$Token;
      73: astore        4
      75: aload         4
      77: invokevirtual #76                 // Method org/xbill/DNS/Tokenizer$Token.type:()I
      80: iconst_1
      81: if_icmpne     87
      84: goto          48
      87: aload         4
      89: invokevirtual #76                 // Method org/xbill/DNS/Tokenizer$Token.type:()I
      92: ifne          97
      95: aconst_null
      96: areturn
      97: aload_0
      98: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     101: invokevirtual #62                 // Method org/xbill/DNS/Tokenizer.unget:()V
     104: aload_0
     105: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     108: ifnonnull     121
     111: aload_0
     112: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     115: ldc           #78                 // String no owner
     117: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     120: athrow
     121: aload_0
     122: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     125: invokevirtual #79                 // Method org/xbill/DNS/Record.getName:()Lorg/xbill/DNS/Name;
     128: astore_3
     129: goto          535
     132: aload_1
     133: invokevirtual #76                 // Method org/xbill/DNS/Tokenizer$Token.type:()I
     136: iconst_1
     137: if_icmpne     143
     140: goto          48
     143: aload_1
     144: invokevirtual #76                 // Method org/xbill/DNS/Tokenizer$Token.type:()I
     147: ifne          152
     150: aconst_null
     151: areturn
     152: aload_1
     153: invokevirtual #80                 // Method org/xbill/DNS/Tokenizer$Token.value:()Ljava/lang/String;
     156: iconst_0
     157: invokevirtual #43                 // Method java/lang/String.charAt:(I)C
     160: bipush        36
     162: if_icmpne     491
     165: aload_1
     166: invokevirtual #80                 // Method org/xbill/DNS/Tokenizer$Token.value:()Ljava/lang/String;
     169: astore_2
     170: aload_2
     171: ldc           #81                 // String $ORIGIN
     173: invokevirtual #82                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     176: ifeq          203
     179: aload_0
     180: aload_0
     181: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     184: getstatic     #83                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
     187: invokevirtual #84                 // Method org/xbill/DNS/Tokenizer.getName:(Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
     190: putfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
     193: aload_0
     194: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     197: invokevirtual #61                 // Method org/xbill/DNS/Tokenizer.getEOL:()V
     200: goto          48
     203: aload_2
     204: ldc           #85                 // String $TTL
     206: invokevirtual #82                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     209: ifeq          233
     212: aload_0
     213: aload_0
     214: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     217: invokevirtual #86                 // Method org/xbill/DNS/Tokenizer.getTTL:()J
     220: putfield      #12                 // Field defaultTTL:J
     223: aload_0
     224: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     227: invokevirtual #61                 // Method org/xbill/DNS/Tokenizer.getEOL:()V
     230: goto          48
     233: aload_2
     234: ldc           #87                 // String $INCLUDE
     236: invokevirtual #82                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     239: ifeq          415
     242: aload_0
     243: getfield      #88                 // Field noExpandIncludes:Z
     246: ifeq          284
     249: aload_0
     250: getfield      #89                 // Field includeThrowsException:Z
     253: ifeq          266
     256: aload_0
     257: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     260: ldc           #90                 // String $INCLUDE encountered, but processing disabled in strict mode
     262: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     265: athrow
     266: aload_0
     267: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     270: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
     273: pop
     274: aload_0
     275: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     278: invokevirtual #61                 // Method org/xbill/DNS/Tokenizer.getEOL:()V
     281: goto          48
     284: aload_0
     285: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     288: invokevirtual #24                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
     291: astore        4
     293: new           #13                 // class java/io/File
     296: dup
     297: aload         4
     299: invokespecial #14                 // Method java/io/File."<init>":(Ljava/lang/String;)V
     302: astore        5
     304: aload         5
     306: invokevirtual #91                 // Method java/io/File.isAbsolute:()Z
     309: ifne          350
     312: aload_0
     313: getfield      #7                  // Field file:Ljava/io/File;
     316: ifnull        340
     319: new           #13                 // class java/io/File
     322: dup
     323: aload_0
     324: getfield      #7                  // Field file:Ljava/io/File;
     327: invokevirtual #92                 // Method java/io/File.getParent:()Ljava/lang/String;
     330: aload         4
     332: invokespecial #93                 // Method java/io/File."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     335: astore        5
     337: goto          350
     340: aload_0
     341: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     344: ldc           #94                 // String Cannot $INCLUDE using relative path when parsing from stream
     346: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     349: athrow
     350: aload_0
     351: getfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
     354: astore        6
     356: aload_0
     357: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     360: invokevirtual #77                 // Method org/xbill/DNS/Tokenizer.get:()Lorg/xbill/DNS/Tokenizer$Token;
     363: astore_1
     364: aload_1
     365: invokevirtual #95                 // Method org/xbill/DNS/Tokenizer$Token.isString:()Z
     368: ifeq          391
     371: aload_0
     372: aload_1
     373: invokevirtual #80                 // Method org/xbill/DNS/Tokenizer$Token.value:()Ljava/lang/String;
     376: getstatic     #83                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
     379: invokespecial #96                 // Method parseName:(Ljava/lang/String;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
     382: astore        6
     384: aload_0
     385: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     388: invokevirtual #61                 // Method org/xbill/DNS/Tokenizer.getEOL:()V
     391: aload_0
     392: new           #97                 // class org/xbill/DNS/Master
     395: dup
     396: aload         5
     398: aload         6
     400: aload_0
     401: getfield      #12                 // Field defaultTTL:J
     404: invokespecial #15                 // Method "<init>":(Ljava/io/File;Lorg/xbill/DNS/Name;J)V
     407: putfield      #3                  // Field included:Lorg/xbill/DNS/Master;
     410: aload_0
     411: invokevirtual #72                 // Method nextRecord:()Lorg/xbill/DNS/Record;
     414: areturn
     415: aload_2
     416: ldc           #98                 // String $GENERATE
     418: invokevirtual #82                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
     421: ifeq          464
     424: aload_0
     425: getfield      #65                 // Field generator:Lorg/xbill/DNS/Generator;
     428: ifnull        441
     431: new           #99                 // class java/lang/IllegalStateException
     434: dup
     435: ldc           #100                // String cannot nest $GENERATE
     437: invokespecial #101                // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
     440: athrow
     441: aload_0
     442: invokespecial #102                // Method startGenerate:()V
     445: aload_0
     446: getfield      #103                // Field noExpandGenerate:Z
     449: ifeq          459
     452: aload_0
     453: invokespecial #74                 // Method endGenerate:()V
     456: goto          48
     459: aload_0
     460: invokespecial #73                 // Method nextGenerated:()Lorg/xbill/DNS/Record;
     463: areturn
     464: aload_0
     465: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     468: new           #34                 // class java/lang/StringBuilder
     471: dup
     472: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     475: ldc           #104                // String Invalid directive:
     477: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     480: aload_2
     481: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     484: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     487: invokevirtual #23                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
     490: athrow
     491: aload_1
     492: invokevirtual #80                 // Method org/xbill/DNS/Tokenizer$Token.value:()Ljava/lang/String;
     495: astore_2
     496: aload_0
     497: aload_2
     498: aload_0
     499: getfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
     502: invokespecial #96                 // Method parseName:(Ljava/lang/String;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
     505: astore_3
     506: aload_0
     507: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     510: ifnull        535
     513: aload_3
     514: aload_0
     515: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     518: invokevirtual #79                 // Method org/xbill/DNS/Record.getName:()Lorg/xbill/DNS/Name;
     521: invokevirtual #105                // Method org/xbill/DNS/Name.equals:(Ljava/lang/Object;)Z
     524: ifeq          535
     527: aload_0
     528: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     531: invokevirtual #79                 // Method org/xbill/DNS/Record.getName:()Lorg/xbill/DNS/Name;
     534: astore_3
     535: aload_0
     536: invokespecial #56                 // Method parseTTLClassAndType:()V
     539: aload_0
     540: aload_3
     541: aload_0
     542: getfield      #33                 // Field currentType:I
     545: aload_0
     546: getfield      #26                 // Field currentDClass:I
     549: aload_0
     550: getfield      #27                 // Field currentTTL:J
     553: aload_0
     554: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
     557: aload_0
     558: getfield      #11                 // Field origin:Lorg/xbill/DNS/Name;
     561: invokestatic  #106                // Method org/xbill/DNS/Record.fromString:(Lorg/xbill/DNS/Name;IIJLorg/xbill/DNS/Tokenizer;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Record;
     564: putfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     567: aload_0
     568: getfield      #42                 // Field needSOATTL:Z
     571: ifeq          606
     574: aload_0
     575: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     578: checkcast     #107                // class org/xbill/DNS/SOARecord
     581: invokevirtual #108                // Method org/xbill/DNS/SOARecord.getMinimum:()J
     584: lstore        4
     586: aload_0
     587: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     590: lload         4
     592: invokevirtual #109                // Method org/xbill/DNS/Record.setTTL:(J)V
     595: aload_0
     596: lload         4
     598: putfield      #12                 // Field defaultTTL:J
     601: aload_0
     602: iconst_0
     603: putfield      #42                 // Field needSOATTL:Z
     606: aload_0
     607: getfield      #2                  // Field last:Lorg/xbill/DNS/Record;
     610: areturn

  public org.xbill.DNS.Record nextRecord() throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: invokespecial #110                // Method _nextRecord:()Lorg/xbill/DNS/Record;
       6: astore_1
       7: aload_1
       8: ifnonnull     35
      11: aload_0
      12: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      15: invokevirtual #111                // Method org/xbill/DNS/Tokenizer.close:()V
      18: goto          35
      21: astore_2
      22: aload_1
      23: ifnonnull     33
      26: aload_0
      27: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      30: invokevirtual #111                // Method org/xbill/DNS/Tokenizer.close:()V
      33: aload_2
      34: athrow
      35: aload_1
      36: areturn
    Exception table:
       from    to  target type
           2     7    21   any

  public void disableIncludes();
    Code:
       0: aload_0
       1: iconst_0
       2: invokevirtual #112                // Method disableIncludes:(Z)V
       5: return

  public void disableIncludes(boolean);
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #88                 // Field noExpandIncludes:Z
       5: aload_0
       6: iload_1
       7: putfield      #89                 // Field includeThrowsException:Z
      10: return

  public void expandGenerate(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: ifne          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: putfield      #103                // Field noExpandGenerate:Z
      13: return

  public java.util.Iterator<org.xbill.DNS.Generator> generators();
    Code:
       0: aload_0
       1: getfield      #66                 // Field generators:Ljava/util/List;
       4: ifnull        20
       7: aload_0
       8: getfield      #66                 // Field generators:Ljava/util/List;
      11: invokestatic  #113                // Method java/util/Collections.unmodifiableList:(Ljava/util/List;)Ljava/util/List;
      14: invokeinterface #114,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      19: areturn
      20: invokestatic  #115                // Method java/util/Collections.emptyIterator:()Ljava/util/Iterator;
      23: areturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
       4: ifnull        14
       7: aload_0
       8: getfield      #10                 // Field st:Lorg/xbill/DNS/Tokenizer;
      11: invokevirtual #111                // Method org/xbill/DNS/Tokenizer.close:()V
      14: return
}
