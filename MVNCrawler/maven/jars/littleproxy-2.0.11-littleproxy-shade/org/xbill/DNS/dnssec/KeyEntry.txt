Compiled from "KeyEntry.java"
final class org.xbill.DNS.dnssec.KeyEntry extends org.xbill.DNS.dnssec.SRRset {
  private static final org.slf4j.Logger log;

  private int edeReason;

  private java.lang.String badReason;

  private boolean isEmpty;

  private org.xbill.DNS.dnssec.KeyEntry(org.xbill.DNS.dnssec.SRRset);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/xbill/DNS/dnssec/SRRset."<init>":(Lorg/xbill/DNS/dnssec/SRRset;)V
       5: aload_0
       6: iconst_m1
       7: putfield      #2                  // Field edeReason:I
      10: return

  private org.xbill.DNS.dnssec.KeyEntry(org.xbill.DNS.Name, int, long, boolean);
    Code:
       0: aload_0
       1: new           #3                  // class org/xbill/DNS/dnssec/SRRset
       4: dup
       5: aload_1
       6: bipush        48
       8: iload_2
       9: lload_3
      10: invokestatic  #5                  // Method org/xbill/DNS/Record.newRecord:(Lorg/xbill/DNS/Name;IIJ)Lorg/xbill/DNS/Record;
      13: invokespecial #6                  // Method org/xbill/DNS/dnssec/SRRset."<init>":(Lorg/xbill/DNS/Record;)V
      16: invokespecial #1                  // Method org/xbill/DNS/dnssec/SRRset."<init>":(Lorg/xbill/DNS/dnssec/SRRset;)V
      19: aload_0
      20: iconst_m1
      21: putfield      #2                  // Field edeReason:I
      24: aload_0
      25: iconst_1
      26: putfield      #7                  // Field isEmpty:Z
      29: iload         5
      31: ifeq          41
      34: aload_0
      35: getstatic     #8                  // Field org/xbill/DNS/dnssec/SecurityStatus.BOGUS:Lorg/xbill/DNS/dnssec/SecurityStatus;
      38: invokevirtual #9                  // Method setSecurityStatus:(Lorg/xbill/DNS/dnssec/SecurityStatus;)V
      41: return

  public static org.xbill.DNS.dnssec.KeyEntry newKeyEntry(org.xbill.DNS.dnssec.SRRset);
    Code:
       0: new           #10                 // class org/xbill/DNS/dnssec/KeyEntry
       3: dup
       4: aload_0
       5: invokespecial #11                 // Method "<init>":(Lorg/xbill/DNS/dnssec/SRRset;)V
       8: areturn

  public static org.xbill.DNS.dnssec.KeyEntry newNullKeyEntry(org.xbill.DNS.Name, int, long);
    Code:
       0: new           #10                 // class org/xbill/DNS/dnssec/KeyEntry
       3: dup
       4: aload_0
       5: iload_1
       6: lload_2
       7: iconst_0
       8: invokespecial #12                 // Method "<init>":(Lorg/xbill/DNS/Name;IJZ)V
      11: areturn

  public static org.xbill.DNS.dnssec.KeyEntry newBadKeyEntry(org.xbill.DNS.Name, int, long);
    Code:
       0: new           #10                 // class org/xbill/DNS/dnssec/KeyEntry
       3: dup
       4: aload_0
       5: iload_1
       6: lload_2
       7: iconst_1
       8: invokespecial #12                 // Method "<init>":(Lorg/xbill/DNS/Name;IJZ)V
      11: areturn

  public boolean isNull();
    Code:
       0: aload_0
       1: getfield      #7                  // Field isEmpty:Z
       4: ifeq          21
       7: aload_0
       8: invokevirtual #13                 // Method getSecurityStatus:()Lorg/xbill/DNS/dnssec/SecurityStatus;
      11: getstatic     #14                 // Field org/xbill/DNS/dnssec/SecurityStatus.UNCHECKED:Lorg/xbill/DNS/dnssec/SecurityStatus;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public boolean isBad();
    Code:
       0: aload_0
       1: getfield      #7                  // Field isEmpty:Z
       4: ifeq          21
       7: aload_0
       8: invokevirtual #13                 // Method getSecurityStatus:()Lorg/xbill/DNS/dnssec/SecurityStatus;
      11: getstatic     #8                  // Field org/xbill/DNS/dnssec/SecurityStatus.BOGUS:Lorg/xbill/DNS/dnssec/SecurityStatus;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public boolean isGood();
    Code:
       0: aload_0
       1: getfield      #7                  // Field isEmpty:Z
       4: ifne          21
       7: aload_0
       8: invokevirtual #13                 // Method getSecurityStatus:()Lorg/xbill/DNS/dnssec/SecurityStatus;
      11: getstatic     #15                 // Field org/xbill/DNS/dnssec/SecurityStatus.SECURE:Lorg/xbill/DNS/dnssec/SecurityStatus;
      14: if_acmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public void setBadReason(int, java.lang.String);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field edeReason:I
       5: aload_0
       6: aload_2
       7: putfield      #16                 // Field badReason:Ljava/lang/String;
      10: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
      13: aload_0
      14: getfield      #16                 // Field badReason:Ljava/lang/String;
      17: invokeinterface #18,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      22: return

  org.xbill.DNS.dnssec.JustifiedSecStatus validateKeyFor(org.xbill.DNS.Name);
    Code:
       0: aload_1
       1: ifnonnull     116
       4: getstatic     #17                 // Field log:Lorg/slf4j/Logger;
       7: ldc           #19                 // String No signerName
       9: invokeinterface #18,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      14: aload_0
      15: invokevirtual #20                 // Method isNull:()Z
      18: ifeq          56
      21: aload_0
      22: getfield      #16                 // Field badReason:Ljava/lang/String;
      25: astore_2
      26: aload_2
      27: ifnonnull     40
      30: ldc           #21                 // String validate.insecure_unsigned
      32: iconst_0
      33: anewarray     #22                 // class java/lang/Object
      36: invokestatic  #23                 // Method org/xbill/DNS/dnssec/R.get:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      39: astore_2
      40: new           #24                 // class org/xbill/DNS/dnssec/JustifiedSecStatus
      43: dup
      44: getstatic     #25                 // Field org/xbill/DNS/dnssec/SecurityStatus.INSECURE:Lorg/xbill/DNS/dnssec/SecurityStatus;
      47: aload_0
      48: getfield      #2                  // Field edeReason:I
      51: aload_2
      52: invokespecial #26                 // Method org/xbill/DNS/dnssec/JustifiedSecStatus."<init>":(Lorg/xbill/DNS/dnssec/SecurityStatus;ILjava/lang/String;)V
      55: areturn
      56: aload_0
      57: invokevirtual #27                 // Method isGood:()Z
      60: ifeq          85
      63: new           #24                 // class org/xbill/DNS/dnssec/JustifiedSecStatus
      66: dup
      67: getstatic     #8                  // Field org/xbill/DNS/dnssec/SecurityStatus.BOGUS:Lorg/xbill/DNS/dnssec/SecurityStatus;
      70: bipush        10
      72: ldc           #29                 // String validate.bogus.missingsig
      74: iconst_0
      75: anewarray     #22                 // class java/lang/Object
      78: invokestatic  #23                 // Method org/xbill/DNS/dnssec/R.get:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      81: invokespecial #26                 // Method org/xbill/DNS/dnssec/JustifiedSecStatus."<init>":(Lorg/xbill/DNS/dnssec/SecurityStatus;ILjava/lang/String;)V
      84: areturn
      85: new           #24                 // class org/xbill/DNS/dnssec/JustifiedSecStatus
      88: dup
      89: getstatic     #8                  // Field org/xbill/DNS/dnssec/SecurityStatus.BOGUS:Lorg/xbill/DNS/dnssec/SecurityStatus;
      92: aload_0
      93: getfield      #2                  // Field edeReason:I
      96: ldc           #30                 // String validate.bogus
      98: iconst_1
      99: anewarray     #22                 // class java/lang/Object
     102: dup
     103: iconst_0
     104: aload_0
     105: getfield      #16                 // Field badReason:Ljava/lang/String;
     108: aastore
     109: invokestatic  #23                 // Method org/xbill/DNS/dnssec/R.get:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     112: invokespecial #26                 // Method org/xbill/DNS/dnssec/JustifiedSecStatus."<init>":(Lorg/xbill/DNS/dnssec/SecurityStatus;ILjava/lang/String;)V
     115: areturn
     116: aload_0
     117: invokevirtual #31                 // Method isBad:()Z
     120: ifeq          161
     123: new           #24                 // class org/xbill/DNS/dnssec/JustifiedSecStatus
     126: dup
     127: getstatic     #8                  // Field org/xbill/DNS/dnssec/SecurityStatus.BOGUS:Lorg/xbill/DNS/dnssec/SecurityStatus;
     130: aload_0
     131: getfield      #2                  // Field edeReason:I
     134: ldc           #32                 // String validate.bogus.badkey
     136: iconst_2
     137: anewarray     #22                 // class java/lang/Object
     140: dup
     141: iconst_0
     142: aload_0
     143: invokevirtual #33                 // Method getName:()Lorg/xbill/DNS/Name;
     146: aastore
     147: dup
     148: iconst_1
     149: aload_0
     150: getfield      #16                 // Field badReason:Ljava/lang/String;
     153: aastore
     154: invokestatic  #23                 // Method org/xbill/DNS/dnssec/R.get:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     157: invokespecial #26                 // Method org/xbill/DNS/dnssec/JustifiedSecStatus."<init>":(Lorg/xbill/DNS/dnssec/SecurityStatus;ILjava/lang/String;)V
     160: areturn
     161: aload_0
     162: invokevirtual #20                 // Method isNull:()Z
     165: ifeq          203
     168: aload_0
     169: getfield      #16                 // Field badReason:Ljava/lang/String;
     172: astore_2
     173: aload_2
     174: ifnonnull     187
     177: ldc           #34                 // String validate.insecure
     179: iconst_0
     180: anewarray     #22                 // class java/lang/Object
     183: invokestatic  #23                 // Method org/xbill/DNS/dnssec/R.get:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     186: astore_2
     187: new           #24                 // class org/xbill/DNS/dnssec/JustifiedSecStatus
     190: dup
     191: getstatic     #25                 // Field org/xbill/DNS/dnssec/SecurityStatus.INSECURE:Lorg/xbill/DNS/dnssec/SecurityStatus;
     194: aload_0
     195: getfield      #2                  // Field edeReason:I
     198: aload_2
     199: invokespecial #26                 // Method org/xbill/DNS/dnssec/JustifiedSecStatus."<init>":(Lorg/xbill/DNS/dnssec/SecurityStatus;ILjava/lang/String;)V
     202: areturn
     203: aconst_null
     204: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #10                 // class org/xbill/DNS/dnssec/KeyEntry
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #10                 // class org/xbill/DNS/dnssec/KeyEntry
      20: astore_2
      21: aload_2
      22: aload_0
      23: invokevirtual #35                 // Method canEqual:(Ljava/lang/Object;)Z
      26: ifne          31
      29: iconst_0
      30: ireturn
      31: aload_0
      32: aload_1
      33: invokespecial #36                 // Method org/xbill/DNS/dnssec/SRRset.equals:(Ljava/lang/Object;)Z
      36: ifne          41
      39: iconst_0
      40: ireturn
      41: aload_0
      42: getfield      #2                  // Field edeReason:I
      45: aload_2
      46: getfield      #2                  // Field edeReason:I
      49: if_icmpeq     54
      52: iconst_0
      53: ireturn
      54: aload_0
      55: getfield      #7                  // Field isEmpty:Z
      58: aload_2
      59: getfield      #7                  // Field isEmpty:Z
      62: if_icmpeq     67
      65: iconst_0
      66: ireturn
      67: aload_0
      68: getfield      #16                 // Field badReason:Ljava/lang/String;
      71: astore_3
      72: aload_2
      73: getfield      #16                 // Field badReason:Ljava/lang/String;
      76: astore        4
      78: aload_3
      79: ifnonnull     90
      82: aload         4
      84: ifnull        101
      87: goto          99
      90: aload_3
      91: aload         4
      93: invokevirtual #37                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      96: ifne          101
      99: iconst_0
     100: ireturn
     101: iconst_1
     102: ireturn

  protected boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #10                 // class org/xbill/DNS/dnssec/KeyEntry
       4: ireturn

  public int hashCode();
    Code:
       0: bipush        59
       2: istore_1
       3: aload_0
       4: invokespecial #38                 // Method org/xbill/DNS/dnssec/SRRset.hashCode:()I
       7: istore_2
       8: iload_2
       9: bipush        59
      11: imul
      12: aload_0
      13: getfield      #2                  // Field edeReason:I
      16: iadd
      17: istore_2
      18: iload_2
      19: bipush        59
      21: imul
      22: aload_0
      23: getfield      #7                  // Field isEmpty:Z
      26: ifeq          34
      29: bipush        79
      31: goto          36
      34: bipush        97
      36: iadd
      37: istore_2
      38: aload_0
      39: getfield      #16                 // Field badReason:Ljava/lang/String;
      42: astore_3
      43: iload_2
      44: bipush        59
      46: imul
      47: aload_3
      48: ifnonnull     56
      51: bipush        43
      53: goto          60
      56: aload_3
      57: invokevirtual #39                 // Method java/lang/Object.hashCode:()I
      60: iadd
      61: istore_2
      62: iload_2
      63: ireturn

  static {};
    Code:
       0: ldc           #10                 // class org/xbill/DNS/dnssec/KeyEntry
       2: invokestatic  #40                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #17                 // Field log:Lorg/slf4j/Logger;
       8: return
}
