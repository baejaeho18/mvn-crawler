Compiled from "TrustAnchorStore.java"
final class org.xbill.DNS.dnssec.TrustAnchorStore {
  private final java.util.Map<java.lang.String, org.xbill.DNS.dnssec.SRRset> map;

  public org.xbill.DNS.dnssec.TrustAnchorStore();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/HashMap
       8: dup
       9: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      12: putfield      #4                  // Field map:Ljava/util/Map;
      15: return

  public void store(org.xbill.DNS.dnssec.SRRset);
    Code:
       0: aload_1
       1: invokevirtual #5                  // Method org/xbill/DNS/dnssec/SRRset.getType:()I
       4: bipush        43
       6: if_icmpeq     28
       9: aload_1
      10: invokevirtual #5                  // Method org/xbill/DNS/dnssec/SRRset.getType:()I
      13: bipush        48
      15: if_icmpeq     28
      18: new           #7                  // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #8                  // String Trust anchors can only be DS or DNSKEY records
      24: invokespecial #9                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_1
      29: invokevirtual #5                  // Method org/xbill/DNS/dnssec/SRRset.getType:()I
      32: bipush        48
      34: if_icmpne     120
      37: new           #10                 // class org/xbill/DNS/dnssec/SRRset
      40: dup
      41: invokespecial #11                 // Method org/xbill/DNS/dnssec/SRRset."<init>":()V
      44: astore_2
      45: aload_1
      46: invokevirtual #12                 // Method org/xbill/DNS/dnssec/SRRset.rrs:()Ljava/util/List;
      49: invokeinterface #13,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      54: astore_3
      55: aload_3
      56: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      61: ifeq          118
      64: aload_3
      65: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      70: checkcast     #16                 // class org/xbill/DNS/Record
      73: astore        4
      75: aload         4
      77: checkcast     #17                 // class org/xbill/DNS/DNSKEYRecord
      80: astore        5
      82: new           #18                 // class org/xbill/DNS/DSRecord
      85: dup
      86: aload         5
      88: invokevirtual #19                 // Method org/xbill/DNS/DNSKEYRecord.getName:()Lorg/xbill/DNS/Name;
      91: aload         5
      93: invokevirtual #20                 // Method org/xbill/DNS/DNSKEYRecord.getDClass:()I
      96: aload         5
      98: invokevirtual #21                 // Method org/xbill/DNS/DNSKEYRecord.getTTL:()J
     101: iconst_4
     102: aload         5
     104: invokespecial #23                 // Method org/xbill/DNS/DSRecord."<init>":(Lorg/xbill/DNS/Name;IJILorg/xbill/DNS/DNSKEYRecord;)V
     107: astore        6
     109: aload_2
     110: aload         6
     112: invokevirtual #24                 // Method org/xbill/DNS/dnssec/SRRset.addRR:(Lorg/xbill/DNS/Record;)V
     115: goto          55
     118: aload_2
     119: astore_1
     120: aload_0
     121: aload_1
     122: invokevirtual #25                 // Method org/xbill/DNS/dnssec/SRRset.getName:()Lorg/xbill/DNS/Name;
     125: aload_1
     126: invokevirtual #26                 // Method org/xbill/DNS/dnssec/SRRset.getDClass:()I
     129: invokespecial #27                 // Method key:(Lorg/xbill/DNS/Name;I)Ljava/lang/String;
     132: astore_2
     133: aload_1
     134: getstatic     #28                 // Field org/xbill/DNS/dnssec/SecurityStatus.SECURE:Lorg/xbill/DNS/dnssec/SecurityStatus;
     137: invokevirtual #29                 // Method org/xbill/DNS/dnssec/SRRset.setSecurityStatus:(Lorg/xbill/DNS/dnssec/SecurityStatus;)V
     140: aload_0
     141: getfield      #4                  // Field map:Ljava/util/Map;
     144: aload_2
     145: aload_1
     146: invokeinterface #30,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     151: checkcast     #10                 // class org/xbill/DNS/dnssec/SRRset
     154: astore_3
     155: aload_3
     156: ifnull        179
     159: aload_3
     160: invokevirtual #12                 // Method org/xbill/DNS/dnssec/SRRset.rrs:()Ljava/util/List;
     163: aload_1
     164: dup
     165: invokevirtual #31                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     168: pop
     169: invokedynamic #32,  0             // InvokeDynamic #0:accept:(Lorg/xbill/DNS/dnssec/SRRset;)Ljava/util/function/Consumer;
     174: invokeinterface #33,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
     179: return

  public org.xbill.DNS.dnssec.SRRset find(org.xbill.DNS.Name, int);
    Code:
       0: aload_1
       1: invokevirtual #34                 // Method org/xbill/DNS/Name.labels:()I
       4: ifle          42
       7: aload_0
       8: aload_1
       9: iload_2
      10: invokespecial #27                 // Method key:(Lorg/xbill/DNS/Name;I)Ljava/lang/String;
      13: astore_3
      14: aload_0
      15: aload_3
      16: invokespecial #35                 // Method lookup:(Ljava/lang/String;)Lorg/xbill/DNS/dnssec/SRRset;
      19: astore        4
      21: aload         4
      23: ifnull        29
      26: aload         4
      28: areturn
      29: new           #36                 // class org/xbill/DNS/Name
      32: dup
      33: aload_1
      34: iconst_1
      35: invokespecial #37                 // Method org/xbill/DNS/Name."<init>":(Lorg/xbill/DNS/Name;I)V
      38: astore_1
      39: goto          0
      42: aconst_null
      43: areturn

  public void clear();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Ljava/util/Map;
       4: invokeinterface #38,  1           // InterfaceMethod java/util/Map.clear:()V
       9: return

  public java.util.Collection<org.xbill.DNS.dnssec.SRRset> items();
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Ljava/util/Map;
       4: invokeinterface #39,  1           // InterfaceMethod java/util/Map.values:()Ljava/util/Collection;
       9: invokestatic  #40                 // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
      12: areturn

  private org.xbill.DNS.dnssec.SRRset lookup(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field map:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #10                 // class org/xbill/DNS/dnssec/SRRset
      13: areturn

  private java.lang.String key(org.xbill.DNS.Name, int);
    Code:
       0: new           #42                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #43                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #44                 // String T
       9: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: iload_2
      13: invokevirtual #46                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      16: ldc           #47                 // String /
      18: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: aload_1
      22: invokevirtual #48                 // Method org/xbill/DNS/Name.canonicalize:()Lorg/xbill/DNS/Name;
      25: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      28: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      31: areturn
}
