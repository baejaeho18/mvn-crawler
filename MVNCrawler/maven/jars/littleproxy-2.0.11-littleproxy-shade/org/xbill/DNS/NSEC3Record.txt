Compiled from "NSEC3Record.java"
public class org.xbill.DNS.NSEC3Record extends org.xbill.DNS.Record {
  public static final int SHA1_DIGEST_ID;

  private int hashAlg;

  private int flags;

  private int iterations;

  private byte[] salt;

  private byte[] next;

  private org.xbill.DNS.TypeBitmap types;

  private static final org.xbill.DNS.utils.base32 b32;

  org.xbill.DNS.NSEC3Record();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/xbill/DNS/Record."<init>":()V
       4: return

  public org.xbill.DNS.NSEC3Record(org.xbill.DNS.Name, int, long, int, int, int, byte[], byte[], int[]);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        50
       4: iload_2
       5: lload_3
       6: invokespecial #4                  // Method org/xbill/DNS/Record."<init>":(Lorg/xbill/DNS/Name;IIJ)V
       9: aload_0
      10: ldc           #5                  // String hashAlg
      12: iload         5
      14: invokestatic  #6                  // Method checkU8:(Ljava/lang/String;I)I
      17: putfield      #7                  // Field hashAlg:I
      20: aload_0
      21: ldc           #8                  // String flags
      23: iload         6
      25: invokestatic  #6                  // Method checkU8:(Ljava/lang/String;I)I
      28: putfield      #9                  // Field flags:I
      31: aload_0
      32: ldc           #10                 // String iterations
      34: iload         7
      36: invokestatic  #11                 // Method checkU16:(Ljava/lang/String;I)I
      39: putfield      #12                 // Field iterations:I
      42: aload         8
      44: ifnull        95
      47: aload         8
      49: arraylength
      50: sipush        255
      53: if_icmple     66
      56: new           #13                 // class java/lang/IllegalArgumentException
      59: dup
      60: ldc           #14                 // String Invalid salt
      62: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      65: athrow
      66: aload         8
      68: arraylength
      69: ifle          95
      72: aload_0
      73: aload         8
      75: arraylength
      76: newarray       byte
      78: putfield      #16                 // Field salt:[B
      81: aload         8
      83: iconst_0
      84: aload_0
      85: getfield      #16                 // Field salt:[B
      88: iconst_0
      89: aload         8
      91: arraylength
      92: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      95: aload         9
      97: arraylength
      98: sipush        255
     101: if_icmple     114
     104: new           #13                 // class java/lang/IllegalArgumentException
     107: dup
     108: ldc           #18                 // String Invalid next hash
     110: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     113: athrow
     114: aload_0
     115: aload         9
     117: arraylength
     118: newarray       byte
     120: putfield      #19                 // Field next:[B
     123: aload         9
     125: iconst_0
     126: aload_0
     127: getfield      #19                 // Field next:[B
     130: iconst_0
     131: aload         9
     133: arraylength
     134: invokestatic  #17                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     137: aload_0
     138: new           #20                 // class org/xbill/DNS/TypeBitmap
     141: dup
     142: aload         10
     144: invokespecial #21                 // Method org/xbill/DNS/TypeBitmap."<init>":([I)V
     147: putfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
     150: return

  protected void rrFromWire(org.xbill.DNS.DNSInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method org/xbill/DNS/DNSInput.readU8:()I
       5: putfield      #7                  // Field hashAlg:I
       8: aload_0
       9: aload_1
      10: invokevirtual #23                 // Method org/xbill/DNS/DNSInput.readU8:()I
      13: putfield      #9                  // Field flags:I
      16: aload_0
      17: aload_1
      18: invokevirtual #24                 // Method org/xbill/DNS/DNSInput.readU16:()I
      21: putfield      #12                 // Field iterations:I
      24: aload_1
      25: invokevirtual #23                 // Method org/xbill/DNS/DNSInput.readU8:()I
      28: istore_2
      29: iload_2
      30: ifle          45
      33: aload_0
      34: aload_1
      35: iload_2
      36: invokevirtual #25                 // Method org/xbill/DNS/DNSInput.readByteArray:(I)[B
      39: putfield      #16                 // Field salt:[B
      42: goto          50
      45: aload_0
      46: aconst_null
      47: putfield      #16                 // Field salt:[B
      50: aload_1
      51: invokevirtual #23                 // Method org/xbill/DNS/DNSInput.readU8:()I
      54: istore_3
      55: aload_0
      56: aload_1
      57: iload_3
      58: invokevirtual #25                 // Method org/xbill/DNS/DNSInput.readByteArray:(I)[B
      61: putfield      #19                 // Field next:[B
      64: aload_0
      65: new           #20                 // class org/xbill/DNS/TypeBitmap
      68: dup
      69: aload_1
      70: invokespecial #26                 // Method org/xbill/DNS/TypeBitmap."<init>":(Lorg/xbill/DNS/DNSInput;)V
      73: putfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      76: return

  protected void rrToWire(org.xbill.DNS.DNSOutput, org.xbill.DNS.Compression, boolean);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #7                  // Field hashAlg:I
       5: invokevirtual #27                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
       8: aload_1
       9: aload_0
      10: getfield      #9                  // Field flags:I
      13: invokevirtual #27                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
      16: aload_1
      17: aload_0
      18: getfield      #12                 // Field iterations:I
      21: invokevirtual #28                 // Method org/xbill/DNS/DNSOutput.writeU16:(I)V
      24: aload_0
      25: getfield      #16                 // Field salt:[B
      28: ifnull        51
      31: aload_1
      32: aload_0
      33: getfield      #16                 // Field salt:[B
      36: arraylength
      37: invokevirtual #27                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
      40: aload_1
      41: aload_0
      42: getfield      #16                 // Field salt:[B
      45: invokevirtual #29                 // Method org/xbill/DNS/DNSOutput.writeByteArray:([B)V
      48: goto          56
      51: aload_1
      52: iconst_0
      53: invokevirtual #27                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
      56: aload_1
      57: aload_0
      58: getfield      #19                 // Field next:[B
      61: arraylength
      62: invokevirtual #27                 // Method org/xbill/DNS/DNSOutput.writeU8:(I)V
      65: aload_1
      66: aload_0
      67: getfield      #19                 // Field next:[B
      70: invokevirtual #29                 // Method org/xbill/DNS/DNSOutput.writeByteArray:([B)V
      73: aload_0
      74: getfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      77: aload_1
      78: invokevirtual #30                 // Method org/xbill/DNS/TypeBitmap.toWire:(Lorg/xbill/DNS/DNSOutput;)V
      81: return

  protected void rdataFromString(org.xbill.DNS.Tokenizer, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method org/xbill/DNS/Tokenizer.getUInt8:()I
       5: putfield      #7                  // Field hashAlg:I
       8: aload_0
       9: aload_1
      10: invokevirtual #31                 // Method org/xbill/DNS/Tokenizer.getUInt8:()I
      13: putfield      #9                  // Field flags:I
      16: aload_0
      17: aload_1
      18: invokevirtual #32                 // Method org/xbill/DNS/Tokenizer.getUInt16:()I
      21: putfield      #12                 // Field iterations:I
      24: aload_1
      25: invokevirtual #33                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
      28: astore_3
      29: aload_3
      30: ldc           #34                 // String -
      32: invokevirtual #35                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      35: ifeq          46
      38: aload_0
      39: aconst_null
      40: putfield      #16                 // Field salt:[B
      43: goto          76
      46: aload_1
      47: invokevirtual #36                 // Method org/xbill/DNS/Tokenizer.unget:()V
      50: aload_0
      51: aload_1
      52: invokevirtual #37                 // Method org/xbill/DNS/Tokenizer.getHexString:()[B
      55: putfield      #16                 // Field salt:[B
      58: aload_0
      59: getfield      #16                 // Field salt:[B
      62: arraylength
      63: sipush        255
      66: if_icmple     76
      69: aload_1
      70: ldc           #38                 // String salt value too long
      72: invokevirtual #39                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      75: athrow
      76: aload_0
      77: aload_1
      78: getstatic     #40                 // Field b32:Lorg/xbill/DNS/utils/base32;
      81: invokevirtual #41                 // Method org/xbill/DNS/Tokenizer.getBase32String:(Lorg/xbill/DNS/utils/base32;)[B
      84: putfield      #19                 // Field next:[B
      87: aload_0
      88: new           #20                 // class org/xbill/DNS/TypeBitmap
      91: dup
      92: aload_1
      93: invokespecial #42                 // Method org/xbill/DNS/TypeBitmap."<init>":(Lorg/xbill/DNS/Tokenizer;)V
      96: putfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      99: return

  protected java.lang.String rrToString();
    Code:
       0: new           #43                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #7                  // Field hashAlg:I
      13: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      16: pop
      17: aload_1
      18: bipush        32
      20: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      23: pop
      24: aload_1
      25: aload_0
      26: getfield      #9                  // Field flags:I
      29: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      32: pop
      33: aload_1
      34: bipush        32
      36: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      39: pop
      40: aload_1
      41: aload_0
      42: getfield      #12                 // Field iterations:I
      45: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      48: pop
      49: aload_1
      50: bipush        32
      52: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      55: pop
      56: aload_0
      57: getfield      #16                 // Field salt:[B
      60: ifnonnull     73
      63: aload_1
      64: bipush        45
      66: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      69: pop
      70: goto          85
      73: aload_1
      74: aload_0
      75: getfield      #16                 // Field salt:[B
      78: invokestatic  #47                 // Method org/xbill/DNS/utils/base16.toString:([B)Ljava/lang/String;
      81: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: pop
      85: aload_1
      86: bipush        32
      88: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      91: pop
      92: aload_1
      93: getstatic     #40                 // Field b32:Lorg/xbill/DNS/utils/base32;
      96: aload_0
      97: getfield      #19                 // Field next:[B
     100: invokevirtual #49                 // Method org/xbill/DNS/utils/base32.toString:([B)Ljava/lang/String;
     103: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: pop
     107: aload_0
     108: getfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
     111: invokevirtual #50                 // Method org/xbill/DNS/TypeBitmap.empty:()Z
     114: ifne          136
     117: aload_1
     118: bipush        32
     120: invokevirtual #46                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     123: pop
     124: aload_1
     125: aload_0
     126: getfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
     129: invokevirtual #51                 // Method org/xbill/DNS/TypeBitmap.toString:()Ljava/lang/String;
     132: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: pop
     136: aload_1
     137: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: areturn

  public int getHashAlgorithm();
    Code:
       0: aload_0
       1: getfield      #7                  // Field hashAlg:I
       4: ireturn

  public int getFlags();
    Code:
       0: aload_0
       1: getfield      #9                  // Field flags:I
       4: ireturn

  public int getIterations();
    Code:
       0: aload_0
       1: getfield      #12                 // Field iterations:I
       4: ireturn

  public byte[] getSalt();
    Code:
       0: aload_0
       1: getfield      #16                 // Field salt:[B
       4: areturn

  public byte[] getNext();
    Code:
       0: aload_0
       1: getfield      #19                 // Field next:[B
       4: areturn

  public int[] getTypes();
    Code:
       0: aload_0
       1: getfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
       4: invokevirtual #53                 // Method org/xbill/DNS/TypeBitmap.toArray:()[I
       7: areturn

  public boolean hasType(int);
    Code:
       0: aload_0
       1: getfield      #22                 // Field types:Lorg/xbill/DNS/TypeBitmap;
       4: iload_1
       5: invokevirtual #54                 // Method org/xbill/DNS/TypeBitmap.contains:(I)Z
       8: ireturn

  static byte[] hashName(org.xbill.DNS.Name, int, int, byte[]) throws java.security.NoSuchAlgorithmException;
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpne     15
       5: ldc           #55                 // String sha-1
       7: invokestatic  #56                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
      10: astore        4
      12: goto          42
      15: new           #57                 // class java/security/NoSuchAlgorithmException
      18: dup
      19: new           #43                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #44                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #58                 // String Unknown NSEC3 algorithm identifier:
      28: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: iload_1
      32: invokevirtual #45                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      35: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      38: invokespecial #59                 // Method java/security/NoSuchAlgorithmException."<init>":(Ljava/lang/String;)V
      41: athrow
      42: aconst_null
      43: astore        5
      45: iconst_0
      46: istore        6
      48: iload         6
      50: iload_2
      51: if_icmpgt     106
      54: aload         4
      56: invokevirtual #60                 // Method java/security/MessageDigest.reset:()V
      59: iload         6
      61: ifne          76
      64: aload         4
      66: aload_0
      67: invokevirtual #61                 // Method org/xbill/DNS/Name.toWireCanonical:()[B
      70: invokevirtual #62                 // Method java/security/MessageDigest.update:([B)V
      73: goto          83
      76: aload         4
      78: aload         5
      80: invokevirtual #62                 // Method java/security/MessageDigest.update:([B)V
      83: aload_3
      84: ifnull        93
      87: aload         4
      89: aload_3
      90: invokevirtual #62                 // Method java/security/MessageDigest.update:([B)V
      93: aload         4
      95: invokevirtual #63                 // Method java/security/MessageDigest.digest:()[B
      98: astore        5
     100: iinc          6, 1
     103: goto          48
     106: aload         5
     108: areturn

  public byte[] hashName(org.xbill.DNS.Name) throws java.security.NoSuchAlgorithmException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #7                  // Field hashAlg:I
       5: aload_0
       6: getfield      #12                 // Field iterations:I
       9: aload_0
      10: getfield      #16                 // Field salt:[B
      13: invokestatic  #64                 // Method hashName:(Lorg/xbill/DNS/Name;II[B)[B
      16: areturn

  static {};
    Code:
       0: new           #65                 // class org/xbill/DNS/utils/base32
       3: dup
       4: ldc           #67                 // String 0123456789ABCDEFGHIJKLMNOPQRSTUV=
       6: iconst_0
       7: iconst_0
       8: invokespecial #68                 // Method org/xbill/DNS/utils/base32."<init>":(Ljava/lang/String;ZZ)V
      11: putstatic     #40                 // Field b32:Lorg/xbill/DNS/utils/base32;
      14: return
}
