Compiled from "ZoneTransferIn.java"
public class org.xbill.DNS.ZoneTransferIn {
  private static final org.slf4j.Logger log;

  private static final int INITIALSOA;

  private static final int FIRSTDATA;

  private static final int IXFR_DELSOA;

  private static final int IXFR_DEL;

  private static final int IXFR_ADDSOA;

  private static final int IXFR_ADD;

  private static final int AXFR;

  private static final int END;

  private org.xbill.DNS.Name zname;

  private int qtype;

  private int dclass;

  private long ixfr_serial;

  private boolean want_fallback;

  private org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler handler;

  private java.net.SocketAddress localAddress;

  private java.net.SocketAddress address;

  private org.xbill.DNS.TCPClient client;

  private org.xbill.DNS.TSIG tsig;

  private org.xbill.DNS.TSIG$StreamVerifier verifier;

  private java.time.Duration timeout;

  private int state;

  private long end_serial;

  private long current_serial;

  private org.xbill.DNS.Record initialsoa;

  private int rtype;

  private org.xbill.DNS.ZoneTransferIn();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 15l
       8: invokestatic  #5                  // Method java/time/Duration.ofMinutes:(J)Ljava/time/Duration;
      11: putfield      #6                  // Field timeout:Ljava/time/Duration;
      14: return

  private org.xbill.DNS.ZoneTransferIn(org.xbill.DNS.Name, int, long, boolean, java.net.SocketAddress, org.xbill.DNS.TSIG);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 15l
       8: invokestatic  #5                  // Method java/time/Duration.ofMinutes:(J)Ljava/time/Duration;
      11: putfield      #6                  // Field timeout:Ljava/time/Duration;
      14: aload_0
      15: aload         6
      17: putfield      #7                  // Field address:Ljava/net/SocketAddress;
      20: aload_0
      21: aload         7
      23: putfield      #8                  // Field tsig:Lorg/xbill/DNS/TSIG;
      26: aload_1
      27: invokevirtual #9                  // Method org/xbill/DNS/Name.isAbsolute:()Z
      30: ifeq          41
      33: aload_0
      34: aload_1
      35: putfield      #10                 // Field zname:Lorg/xbill/DNS/Name;
      38: goto          67
      41: aload_0
      42: aload_1
      43: getstatic     #11                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
      46: invokestatic  #12                 // Method org/xbill/DNS/Name.concatenate:(Lorg/xbill/DNS/Name;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
      49: putfield      #10                 // Field zname:Lorg/xbill/DNS/Name;
      52: goto          67
      55: astore        8
      57: new           #14                 // class java/lang/IllegalArgumentException
      60: dup
      61: ldc           #15                 // String ZoneTransferIn: name too long
      63: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      66: athrow
      67: aload_0
      68: iload_2
      69: putfield      #17                 // Field qtype:I
      72: aload_0
      73: iconst_1
      74: putfield      #19                 // Field dclass:I
      77: aload_0
      78: lload_3
      79: putfield      #20                 // Field ixfr_serial:J
      82: aload_0
      83: iload         5
      85: putfield      #21                 // Field want_fallback:Z
      88: aload_0
      89: iconst_0
      90: putfield      #23                 // Field state:I
      93: return
    Exception table:
       from    to  target type
          41    52    55   Class org/xbill/DNS/NameTooLongException

  public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name, java.net.SocketAddress, org.xbill.DNS.TSIG);
    Code:
       0: new           #22                 // class org/xbill/DNS/ZoneTransferIn
       3: dup
       4: aload_0
       5: sipush        252
       8: lconst_0
       9: iconst_0
      10: aload_1
      11: aload_2
      12: invokespecial #25                 // Method "<init>":(Lorg/xbill/DNS/Name;IJZLjava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)V
      15: areturn

  public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name, java.lang.String, int, org.xbill.DNS.TSIG);
    Code:
       0: iload_2
       1: ifne          7
       4: bipush        53
       6: istore_2
       7: aload_0
       8: new           #27                 // class java/net/InetSocketAddress
      11: dup
      12: aload_1
      13: iload_2
      14: invokespecial #28                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
      17: aload_3
      18: invokestatic  #29                 // Method newAXFR:(Lorg/xbill/DNS/Name;Ljava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
      21: areturn

  public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name, java.lang.String, org.xbill.DNS.TSIG);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_2
       4: invokestatic  #30                 // Method newAXFR:(Lorg/xbill/DNS/Name;Ljava/lang/String;ILorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
       7: areturn

  public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name, long, boolean, java.net.SocketAddress, org.xbill.DNS.TSIG);
    Code:
       0: new           #22                 // class org/xbill/DNS/ZoneTransferIn
       3: dup
       4: aload_0
       5: sipush        251
       8: lload_1
       9: iload_3
      10: aload         4
      12: aload         5
      14: invokespecial #25                 // Method "<init>":(Lorg/xbill/DNS/Name;IJZLjava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)V
      17: areturn

  public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name, long, boolean, java.lang.String, int, org.xbill.DNS.TSIG);
    Code:
       0: iload         5
       2: ifne          9
       5: bipush        53
       7: istore        5
       9: aload_0
      10: lload_1
      11: iload_3
      12: new           #27                 // class java/net/InetSocketAddress
      15: dup
      16: aload         4
      18: iload         5
      20: invokespecial #28                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
      23: aload         6
      25: invokestatic  #31                 // Method newIXFR:(Lorg/xbill/DNS/Name;JZLjava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
      28: areturn

  public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name, long, boolean, java.lang.String, org.xbill.DNS.TSIG);
    Code:
       0: aload_0
       1: lload_1
       2: iload_3
       3: aload         4
       5: iconst_0
       6: aload         5
       8: invokestatic  #32                 // Method newIXFR:(Lorg/xbill/DNS/Name;JZLjava/lang/String;ILorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
      11: areturn

  public org.xbill.DNS.Name getName();
    Code:
       0: aload_0
       1: getfield      #10                 // Field zname:Lorg/xbill/DNS/Name;
       4: areturn

  public int getType();
    Code:
       0: aload_0
       1: getfield      #17                 // Field qtype:I
       4: ireturn

  public void setTimeout(int);
    Code:
       0: iload_1
       1: ifge          14
       4: new           #14                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #33                 // String timeout cannot be negative
      10: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: iload_1
      16: i2l
      17: invokestatic  #34                 // Method java/time/Duration.ofSeconds:(J)Ljava/time/Duration;
      20: putfield      #6                  // Field timeout:Ljava/time/Duration;
      23: return

  public void setTimeout(java.time.Duration);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field timeout:Ljava/time/Duration;
       5: return

  public void setDClass(int);
    Code:
       0: iload_1
       1: invokestatic  #35                 // Method org/xbill/DNS/DClass.check:(I)V
       4: aload_0
       5: iload_1
       6: putfield      #19                 // Field dclass:I
       9: return

  public void setLocalAddress(java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #36                 // Field localAddress:Ljava/net/SocketAddress;
       5: return

  private void openConnection() throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #37                 // class org/xbill/DNS/TCPClient
       4: dup
       5: aload_0
       6: getfield      #6                  // Field timeout:Ljava/time/Duration;
       9: invokespecial #38                 // Method org/xbill/DNS/TCPClient."<init>":(Ljava/time/Duration;)V
      12: putfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
      15: aload_0
      16: getfield      #36                 // Field localAddress:Ljava/net/SocketAddress;
      19: ifnull        33
      22: aload_0
      23: getfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
      26: aload_0
      27: getfield      #36                 // Field localAddress:Ljava/net/SocketAddress;
      30: invokevirtual #40                 // Method org/xbill/DNS/TCPClient.bind:(Ljava/net/SocketAddress;)V
      33: aload_0
      34: getfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
      37: aload_0
      38: getfield      #7                  // Field address:Ljava/net/SocketAddress;
      41: invokevirtual #41                 // Method org/xbill/DNS/TCPClient.connect:(Ljava/net/SocketAddress;)V
      44: return

  private void sendQuery() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field zname:Lorg/xbill/DNS/Name;
       4: aload_0
       5: getfield      #17                 // Field qtype:I
       8: aload_0
       9: getfield      #19                 // Field dclass:I
      12: invokestatic  #42                 // Method org/xbill/DNS/Record.newRecord:(Lorg/xbill/DNS/Name;II)Lorg/xbill/DNS/Record;
      15: astore_1
      16: new           #43                 // class org/xbill/DNS/Message
      19: dup
      20: invokespecial #44                 // Method org/xbill/DNS/Message."<init>":()V
      23: astore_2
      24: aload_2
      25: invokevirtual #45                 // Method org/xbill/DNS/Message.getHeader:()Lorg/xbill/DNS/Header;
      28: iconst_0
      29: invokevirtual #47                 // Method org/xbill/DNS/Header.setOpcode:(I)V
      32: aload_2
      33: aload_1
      34: iconst_0
      35: invokevirtual #49                 // Method org/xbill/DNS/Message.addRecord:(Lorg/xbill/DNS/Record;I)V
      38: aload_0
      39: getfield      #17                 // Field qtype:I
      42: sipush        251
      45: if_icmpne     85
      48: new           #50                 // class org/xbill/DNS/SOARecord
      51: dup
      52: aload_0
      53: getfield      #10                 // Field zname:Lorg/xbill/DNS/Name;
      56: aload_0
      57: getfield      #19                 // Field dclass:I
      60: lconst_0
      61: getstatic     #11                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
      64: getstatic     #11                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
      67: aload_0
      68: getfield      #20                 // Field ixfr_serial:J
      71: lconst_0
      72: lconst_0
      73: lconst_0
      74: lconst_0
      75: invokespecial #51                 // Method org/xbill/DNS/SOARecord."<init>":(Lorg/xbill/DNS/Name;IJLorg/xbill/DNS/Name;Lorg/xbill/DNS/Name;JJJJJ)V
      78: astore_3
      79: aload_2
      80: aload_3
      81: iconst_2
      82: invokevirtual #49                 // Method org/xbill/DNS/Message.addRecord:(Lorg/xbill/DNS/Record;I)V
      85: aload_0
      86: getfield      #8                  // Field tsig:Lorg/xbill/DNS/TSIG;
      89: ifnull        120
      92: aload_0
      93: getfield      #8                  // Field tsig:Lorg/xbill/DNS/TSIG;
      96: aload_2
      97: aconst_null
      98: invokevirtual #52                 // Method org/xbill/DNS/TSIG.apply:(Lorg/xbill/DNS/Message;Lorg/xbill/DNS/TSIGRecord;)V
     101: aload_0
     102: new           #53                 // class org/xbill/DNS/TSIG$StreamVerifier
     105: dup
     106: aload_0
     107: getfield      #8                  // Field tsig:Lorg/xbill/DNS/TSIG;
     110: aload_2
     111: invokevirtual #54                 // Method org/xbill/DNS/Message.getTSIG:()Lorg/xbill/DNS/TSIGRecord;
     114: invokespecial #55                 // Method org/xbill/DNS/TSIG$StreamVerifier."<init>":(Lorg/xbill/DNS/TSIG;Lorg/xbill/DNS/TSIGRecord;)V
     117: putfield      #56                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
     120: aload_2
     121: ldc           #57                 // int 65535
     123: invokevirtual #58                 // Method org/xbill/DNS/Message.toWire:(I)[B
     126: astore_3
     127: aload_0
     128: getfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
     131: aload_3
     132: invokevirtual #59                 // Method org/xbill/DNS/TCPClient.send:([B)V
     135: return

  private static long getSOASerial(org.xbill.DNS.Record);
    Code:
       0: aload_0
       1: checkcast     #50                 // class org/xbill/DNS/SOARecord
       4: astore_1
       5: aload_1
       6: invokevirtual #60                 // Method org/xbill/DNS/SOARecord.getSerial:()J
       9: lreturn

  private void logxfr(java.lang.String);
    Code:
       0: getstatic     #61                 // Field log:Lorg/slf4j/Logger;
       3: ldc           #62                 // String {}: {}
       5: aload_0
       6: getfield      #10                 // Field zname:Lorg/xbill/DNS/Name;
       9: aload_1
      10: invokeinterface #63,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      15: return

  private void fail(java.lang.String) throws org.xbill.DNS.ZoneTransferException;
    Code:
       0: new           #64                 // class org/xbill/DNS/ZoneTransferException
       3: dup
       4: aload_1
       5: invokespecial #65                 // Method org/xbill/DNS/ZoneTransferException."<init>":(Ljava/lang/String;)V
       8: athrow

  private void fallback() throws org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_0
       1: getfield      #21                 // Field want_fallback:Z
       4: ifne          13
       7: aload_0
       8: ldc           #66                 // String server doesn\'t support IXFR
      10: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
      13: aload_0
      14: ldc           #68                 // String falling back to AXFR
      16: invokespecial #69                 // Method logxfr:(Ljava/lang/String;)V
      19: aload_0
      20: sipush        252
      23: putfield      #17                 // Field qtype:I
      26: aload_0
      27: iconst_0
      28: putfield      #23                 // Field state:I
      31: return

  private void parseRR(org.xbill.DNS.Record) throws org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_1
       1: invokevirtual #70                 // Method org/xbill/DNS/Record.getType:()I
       4: istore_2
       5: aload_0
       6: getfield      #23                 // Field state:I
       9: tableswitch   { // 0 to 7
                     0: 56
                     1: 128
                     2: 233
                     3: 251
                     4: 289
                     5: 307
                     6: 407
                     7: 451
               default: 460
          }
      56: iload_2
      57: bipush        6
      59: if_icmpeq     68
      62: aload_0
      63: ldc           #71                 // String missing initial SOA
      65: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
      68: aload_0
      69: aload_1
      70: putfield      #72                 // Field initialsoa:Lorg/xbill/DNS/Record;
      73: aload_0
      74: aload_1
      75: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
      78: putfield      #73                 // Field end_serial:J
      81: aload_0
      82: getfield      #17                 // Field qtype:I
      85: sipush        251
      88: if_icmpne     120
      91: aload_0
      92: getfield      #73                 // Field end_serial:J
      95: aload_0
      96: getfield      #20                 // Field ixfr_serial:J
      99: invokestatic  #74                 // Method org/xbill/DNS/Serial.compare:(JJ)I
     102: ifgt          120
     105: aload_0
     106: ldc           #75                 // String up to date
     108: invokespecial #69                 // Method logxfr:(Ljava/lang/String;)V
     111: aload_0
     112: bipush        7
     114: putfield      #23                 // Field state:I
     117: goto          466
     120: aload_0
     121: iconst_1
     122: putfield      #23                 // Field state:I
     125: goto          466
     128: aload_0
     129: getfield      #17                 // Field qtype:I
     132: sipush        251
     135: if_icmpne     186
     138: iload_2
     139: bipush        6
     141: if_icmpne     186
     144: aload_1
     145: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
     148: aload_0
     149: getfield      #20                 // Field ixfr_serial:J
     152: lcmp
     153: ifne          186
     156: aload_0
     157: sipush        251
     160: putfield      #76                 // Field rtype:I
     163: aload_0
     164: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     167: invokeinterface #78,  1           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startIXFR:()V
     172: aload_0
     173: ldc           #79                 // String got incremental response
     175: invokespecial #69                 // Method logxfr:(Ljava/lang/String;)V
     178: aload_0
     179: iconst_2
     180: putfield      #23                 // Field state:I
     183: goto          227
     186: aload_0
     187: sipush        252
     190: putfield      #76                 // Field rtype:I
     193: aload_0
     194: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     197: invokeinterface #80,  1           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startAXFR:()V
     202: aload_0
     203: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     206: aload_0
     207: getfield      #72                 // Field initialsoa:Lorg/xbill/DNS/Record;
     210: invokeinterface #81,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     215: aload_0
     216: ldc           #82                 // String got nonincremental response
     218: invokespecial #69                 // Method logxfr:(Ljava/lang/String;)V
     221: aload_0
     222: bipush        6
     224: putfield      #23                 // Field state:I
     227: aload_0
     228: aload_1
     229: invokespecial #83                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     232: return
     233: aload_0
     234: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     237: aload_1
     238: invokeinterface #84,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startIXFRDeletes:(Lorg/xbill/DNS/Record;)V
     243: aload_0
     244: iconst_3
     245: putfield      #23                 // Field state:I
     248: goto          466
     251: iload_2
     252: bipush        6
     254: if_icmpne     276
     257: aload_0
     258: aload_1
     259: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
     262: putfield      #85                 // Field current_serial:J
     265: aload_0
     266: iconst_4
     267: putfield      #23                 // Field state:I
     270: aload_0
     271: aload_1
     272: invokespecial #83                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     275: return
     276: aload_0
     277: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     280: aload_1
     281: invokeinterface #81,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     286: goto          466
     289: aload_0
     290: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     293: aload_1
     294: invokeinterface #86,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startIXFRAdds:(Lorg/xbill/DNS/Record;)V
     299: aload_0
     300: iconst_5
     301: putfield      #23                 // Field state:I
     304: goto          466
     307: iload_2
     308: bipush        6
     310: if_icmpne     394
     313: aload_1
     314: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
     317: lstore_3
     318: lload_3
     319: aload_0
     320: getfield      #73                 // Field end_serial:J
     323: lcmp
     324: ifne          336
     327: aload_0
     328: bipush        7
     330: putfield      #23                 // Field state:I
     333: goto          466
     336: lload_3
     337: aload_0
     338: getfield      #85                 // Field current_serial:J
     341: lcmp
     342: ifeq          383
     345: aload_0
     346: new           #87                 // class java/lang/StringBuilder
     349: dup
     350: invokespecial #88                 // Method java/lang/StringBuilder."<init>":()V
     353: ldc           #89                 // String IXFR out of sync: expected serial
     355: invokevirtual #90                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     358: aload_0
     359: getfield      #85                 // Field current_serial:J
     362: invokevirtual #91                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     365: ldc           #92                 // String  , got
     367: invokevirtual #90                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     370: lload_3
     371: invokevirtual #91                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     374: invokevirtual #93                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     377: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
     380: goto          394
     383: aload_0
     384: iconst_2
     385: putfield      #23                 // Field state:I
     388: aload_0
     389: aload_1
     390: invokespecial #83                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     393: return
     394: aload_0
     395: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     398: aload_1
     399: invokeinterface #81,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     404: goto          466
     407: iload_2
     408: iconst_1
     409: if_icmpne     426
     412: aload_1
     413: invokevirtual #94                 // Method org/xbill/DNS/Record.getDClass:()I
     416: aload_0
     417: getfield      #19                 // Field dclass:I
     420: if_icmpeq     426
     423: goto          466
     426: aload_0
     427: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     430: aload_1
     431: invokeinterface #81,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     436: iload_2
     437: bipush        6
     439: if_icmpne     466
     442: aload_0
     443: bipush        7
     445: putfield      #23                 // Field state:I
     448: goto          466
     451: aload_0
     452: ldc           #95                 // String extra data
     454: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
     457: goto          466
     460: aload_0
     461: ldc           #96                 // String invalid state
     463: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
     466: return

  private void closeConnection();
    Code:
       0: aload_0
       1: getfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
       4: ifnull        14
       7: aload_0
       8: getfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
      11: invokevirtual #97                 // Method org/xbill/DNS/TCPClient.cleanup:()V
      14: goto          18
      17: astore_1
      18: return
    Exception table:
       from    to  target type
           0    14    17   Class java/io/IOException

  private org.xbill.DNS.Message parseMessage(byte[]) throws org.xbill.DNS.WireParseException;
    Code:
       0: new           #43                 // class org/xbill/DNS/Message
       3: dup
       4: aload_1
       5: invokespecial #99                 // Method org/xbill/DNS/Message."<init>":([B)V
       8: areturn
       9: astore_2
      10: aload_2
      11: instanceof    #100                // class org/xbill/DNS/WireParseException
      14: ifeq          22
      17: aload_2
      18: checkcast     #100                // class org/xbill/DNS/WireParseException
      21: athrow
      22: new           #100                // class org/xbill/DNS/WireParseException
      25: dup
      26: ldc           #101                // String Error parsing message
      28: invokespecial #102                // Method org/xbill/DNS/WireParseException."<init>":(Ljava/lang/String;)V
      31: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/io/IOException

  private void doxfr() throws java.io.IOException, org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_0
       1: invokespecial #103                // Method sendQuery:()V
       4: aload_0
       5: getfield      #23                 // Field state:I
       8: bipush        7
      10: if_icmpeq     270
      13: aload_0
      14: getfield      #39                 // Field client:Lorg/xbill/DNS/TCPClient;
      17: invokevirtual #104                // Method org/xbill/DNS/TCPClient.recv:()[B
      20: astore_1
      21: aload_0
      22: aload_1
      23: invokespecial #105                // Method parseMessage:([B)Lorg/xbill/DNS/Message;
      26: astore_2
      27: aload_2
      28: invokevirtual #45                 // Method org/xbill/DNS/Message.getHeader:()Lorg/xbill/DNS/Header;
      31: invokevirtual #106                // Method org/xbill/DNS/Header.getRcode:()I
      34: ifne          84
      37: aload_0
      38: getfield      #56                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
      41: ifnull        84
      44: aload_0
      45: getfield      #56                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
      48: aload_2
      49: aload_1
      50: invokevirtual #107                // Method org/xbill/DNS/TSIG$StreamVerifier.verify:(Lorg/xbill/DNS/Message;[B)I
      53: istore_3
      54: iload_3
      55: ifeq          84
      58: aload_0
      59: new           #87                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #88                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #108                // String TSIG failure:
      68: invokevirtual #90                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: iload_3
      72: invokestatic  #109                // Method org/xbill/DNS/Rcode.TSIGstring:(I)Ljava/lang/String;
      75: invokevirtual #90                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: invokevirtual #93                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      81: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
      84: aload_2
      85: iconst_1
      86: invokevirtual #110                // Method org/xbill/DNS/Message.getSection:(I)Ljava/util/List;
      89: astore_3
      90: aload_0
      91: getfield      #23                 // Field state:I
      94: ifne          199
      97: aload_2
      98: invokevirtual #111                // Method org/xbill/DNS/Message.getRcode:()I
     101: istore        4
     103: iload         4
     105: ifeq          142
     108: aload_0
     109: getfield      #17                 // Field qtype:I
     112: sipush        251
     115: if_icmpne     133
     118: iload         4
     120: iconst_4
     121: if_icmpne     133
     124: aload_0
     125: invokespecial #113                // Method fallback:()V
     128: aload_0
     129: invokespecial #114                // Method doxfr:()V
     132: return
     133: aload_0
     134: iload         4
     136: invokestatic  #115                // Method org/xbill/DNS/Rcode.string:(I)Ljava/lang/String;
     139: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
     142: aload_2
     143: invokevirtual #116                // Method org/xbill/DNS/Message.getQuestion:()Lorg/xbill/DNS/Record;
     146: astore        5
     148: aload         5
     150: ifnull        171
     153: aload         5
     155: invokevirtual #70                 // Method org/xbill/DNS/Record.getType:()I
     158: aload_0
     159: getfield      #17                 // Field qtype:I
     162: if_icmpeq     171
     165: aload_0
     166: ldc           #117                // String invalid question section
     168: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
     171: aload_3
     172: invokeinterface #118,  1          // InterfaceMethod java/util/List.isEmpty:()Z
     177: ifeq          199
     180: aload_0
     181: getfield      #17                 // Field qtype:I
     184: sipush        251
     187: if_icmpne     199
     190: aload_0
     191: invokespecial #113                // Method fallback:()V
     194: aload_0
     195: invokespecial #114                // Method doxfr:()V
     198: return
     199: aload_3
     200: invokeinterface #119,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
     205: astore        4
     207: aload         4
     209: invokeinterface #120,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
     214: ifeq          238
     217: aload         4
     219: invokeinterface #121,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     224: checkcast     #122                // class org/xbill/DNS/Record
     227: astore        5
     229: aload_0
     230: aload         5
     232: invokespecial #83                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     235: goto          207
     238: aload_0
     239: getfield      #23                 // Field state:I
     242: bipush        7
     244: if_icmpne     267
     247: aload_0
     248: getfield      #56                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
     251: ifnull        267
     254: aload_2
     255: invokevirtual #123                // Method org/xbill/DNS/Message.isVerified:()Z
     258: ifne          267
     261: aload_0
     262: ldc           #124                // String last message must be signed
     264: invokespecial #67                 // Method fail:(Ljava/lang/String;)V
     267: goto          4
     270: return

  public void run(org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler) throws java.io.IOException, org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
       5: aload_0
       6: invokespecial #125                // Method openConnection:()V
       9: aload_0
      10: invokespecial #114                // Method doxfr:()V
      13: aload_0
      14: invokespecial #126                // Method closeConnection:()V
      17: goto          27
      20: astore_2
      21: aload_0
      22: invokespecial #126                // Method closeConnection:()V
      25: aload_2
      26: athrow
      27: return
    Exception table:
       from    to  target type
           5    13    20   any

  public void run() throws java.io.IOException, org.xbill.DNS.ZoneTransferException;
    Code:
       0: new           #127                // class org/xbill/DNS/ZoneTransferIn$BasicHandler
       3: dup
       4: aconst_null
       5: invokespecial #128                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler."<init>":(Lorg/xbill/DNS/ZoneTransferIn$1;)V
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokevirtual #129                // Method run:(Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;)V
      14: return

  private org.xbill.DNS.ZoneTransferIn$BasicHandler getBasicHandler() throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
       4: instanceof    #127                // class org/xbill/DNS/ZoneTransferIn$BasicHandler
       7: ifeq          18
      10: aload_0
      11: getfield      #77                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
      14: checkcast     #127                // class org/xbill/DNS/ZoneTransferIn$BasicHandler
      17: areturn
      18: new           #14                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #130                // String ZoneTransferIn used callback interface
      24: invokespecial #16                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow

  public boolean isAXFR();
    Code:
       0: aload_0
       1: getfield      #76                 // Field rtype:I
       4: sipush        252
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public java.util.List<org.xbill.DNS.Record> getAXFR();
    Code:
       0: aload_0
       1: invokespecial #131                // Method getBasicHandler:()Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;
       4: astore_1
       5: aload_1
       6: invokestatic  #132                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$300:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
       9: areturn

  public boolean isIXFR();
    Code:
       0: aload_0
       1: getfield      #76                 // Field rtype:I
       4: sipush        251
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public java.util.List<org.xbill.DNS.ZoneTransferIn$Delta> getIXFR();
    Code:
       0: aload_0
       1: invokespecial #131                // Method getBasicHandler:()Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;
       4: astore_1
       5: aload_1
       6: invokestatic  #133                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$400:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
       9: areturn

  public boolean isCurrent();
    Code:
       0: aload_0
       1: invokespecial #131                // Method getBasicHandler:()Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;
       4: astore_1
       5: aload_1
       6: invokestatic  #132                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$300:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
       9: ifnonnull     23
      12: aload_1
      13: invokestatic  #133                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$400:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
      16: ifnonnull     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  static long access$100(org.xbill.DNS.Record);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
       4: lreturn

  static {};
    Code:
       0: ldc           #22                 // class org/xbill/DNS/ZoneTransferIn
       2: invokestatic  #134                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #61                 // Field log:Lorg/slf4j/Logger;
       8: return
}
