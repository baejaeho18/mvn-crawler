Compiled from "ResourceLeakDetector.java"
final class io.netty.util.ResourceLeakDetector$DefaultResourceLeak<T> extends java.lang.ref.WeakReference<java.lang.Object> implements io.netty.util.ResourceLeakTracker<T>, io.netty.util.ResourceLeak {
  private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater<io.netty.util.ResourceLeakDetector$DefaultResourceLeak<?>, io.netty.util.ResourceLeakDetector$TraceRecord> headUpdater;

  private static final java.util.concurrent.atomic.AtomicIntegerFieldUpdater<io.netty.util.ResourceLeakDetector$DefaultResourceLeak<?>> droppedRecordsUpdater;

  private volatile io.netty.util.ResourceLeakDetector$TraceRecord head;

  private volatile int droppedRecords;

  private final java.util.Set<io.netty.util.ResourceLeakDetector$DefaultResourceLeak<?>> allLeaks;

  private final int trackedHash;

  static final boolean $assertionsDisabled;

  io.netty.util.ResourceLeakDetector$DefaultResourceLeak(java.lang.Object, java.lang.ref.ReferenceQueue<java.lang.Object>, java.util.Set<io.netty.util.ResourceLeakDetector$DefaultResourceLeak<?>>, java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #38                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
       6: getstatic     #40                 // Field $assertionsDisabled:Z
       9: ifne          24
      12: aload_1
      13: ifnonnull     24
      16: new           #42                 // class java/lang/AssertionError
      19: dup
      20: invokespecial #45                 // Method java/lang/AssertionError."<init>":()V
      23: athrow
      24: aload_0
      25: aload_1
      26: invokestatic  #57                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      29: putfield      #59                 // Field trackedHash:I
      32: aload_3
      33: aload_0
      34: invokeinterface #63,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      39: pop
      40: getstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      43: aload_0
      44: aload         4
      46: ifnonnull     62
      49: new           #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      52: dup
      53: invokestatic  #69                 // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$100:()Lio/netty/util/ResourceLeakDetector$TraceRecord;
      56: invokespecial #72                 // Method io/netty/util/ResourceLeakDetector$TraceRecord."<init>":(Lio/netty/util/ResourceLeakDetector$TraceRecord;)V
      59: goto          74
      62: new           #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      65: dup
      66: invokestatic  #69                 // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$100:()Lio/netty/util/ResourceLeakDetector$TraceRecord;
      69: aload         4
      71: invokespecial #77                 // Method io/netty/util/ResourceLeakDetector$TraceRecord."<init>":(Lio/netty/util/ResourceLeakDetector$TraceRecord;Ljava/lang/Object;)V
      74: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      77: aload_0
      78: aload_3
      79: putfield      #83                 // Field allLeaks:Ljava/util/Set;
      82: return

  public void record();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #97                 // Method record0:(Ljava/lang/Object;)V
       5: return

  public void record(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #97                 // Method record0:(Ljava/lang/Object;)V
       5: return

  private void record0(java.lang.Object);
    Code:
       0: invokestatic  #102                // Method io/netty/util/ResourceLeakDetector.access$200:()I
       3: ifle          140
       6: getstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       9: aload_0
      10: invokevirtual #106                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      16: dup
      17: astore_2
      18: dup
      19: astore_3
      20: ifnonnull     24
      23: return
      24: aload_2
      25: invokestatic  #110                // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$300:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)I
      28: iconst_1
      29: iadd
      30: istore        6
      32: iload         6
      34: invokestatic  #102                // Method io/netty/util/ResourceLeakDetector.access$200:()I
      37: if_icmplt     85
      40: iload         6
      42: invokestatic  #102                // Method io/netty/util/ResourceLeakDetector.access$200:()I
      45: isub
      46: bipush        30
      48: invokestatic  #116                // Method java/lang/Math.min:(II)I
      51: istore        7
      53: invokestatic  #122                // Method io/netty/util/internal/PlatformDependent.threadLocalRandom:()Ljava/util/Random;
      56: iconst_1
      57: iload         7
      59: ishl
      60: invokevirtual #128                // Method java/util/Random.nextInt:(I)I
      63: ifeq          70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: dup
      72: istore        5
      74: ifeq          82
      77: aload_2
      78: invokestatic  #132                // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$400:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)Lio/netty/util/ResourceLeakDetector$TraceRecord;
      81: astore_3
      82: goto          88
      85: iconst_0
      86: istore        5
      88: aload_1
      89: ifnull        104
      92: new           #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      95: dup
      96: aload_3
      97: aload_1
      98: invokespecial #77                 // Method io/netty/util/ResourceLeakDetector$TraceRecord."<init>":(Lio/netty/util/ResourceLeakDetector$TraceRecord;Ljava/lang/Object;)V
     101: goto          112
     104: new           #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
     107: dup
     108: aload_3
     109: invokespecial #72                 // Method io/netty/util/ResourceLeakDetector$TraceRecord."<init>":(Lio/netty/util/ResourceLeakDetector$TraceRecord;)V
     112: astore        4
     114: getstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
     117: aload_0
     118: aload_2
     119: aload         4
     121: invokevirtual #136                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z
     124: ifeq          6
     127: iload         5
     129: ifeq          140
     132: getstatic     #138                // Field droppedRecordsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
     135: aload_0
     136: invokevirtual #143                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.incrementAndGet:(Ljava/lang/Object;)I
     139: pop
     140: return

  boolean dispose();
    Code:
       0: aload_0
       1: invokevirtual #154                // Method clear:()V
       4: aload_0
       5: getfield      #83                 // Field allLeaks:Ljava/util/Set;
       8: aload_0
       9: invokeinterface #157,  2          // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      14: ireturn

  public boolean close();
    Code:
       0: aload_0
       1: getfield      #83                 // Field allLeaks:Ljava/util/Set;
       4: aload_0
       5: invokeinterface #157,  2          // InterfaceMethod java/util/Set.remove:(Ljava/lang/Object;)Z
      10: ifeq          27
      13: aload_0
      14: invokevirtual #154                // Method clear:()V
      17: getstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      20: aload_0
      21: aconst_null
      22: invokevirtual #81                 // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.set:(Ljava/lang/Object;Ljava/lang/Object;)V
      25: iconst_1
      26: ireturn
      27: iconst_0
      28: ireturn

  public boolean close(T);
    Code:
       0: getstatic     #40                 // Field $assertionsDisabled:Z
       3: ifne          25
       6: aload_0
       7: getfield      #59                 // Field trackedHash:I
      10: aload_1
      11: invokestatic  #57                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
      14: if_icmpeq     25
      17: new           #42                 // class java/lang/AssertionError
      20: dup
      21: invokespecial #45                 // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: invokevirtual #161                // Method close:()Z
      29: istore_2
      30: aload_1
      31: invokestatic  #164                // Method reachabilityFence0:(Ljava/lang/Object;)V
      34: iload_2
      35: ireturn
      36: astore_3
      37: aload_1
      38: invokestatic  #164                // Method reachabilityFence0:(Ljava/lang/Object;)V
      41: aload_3
      42: athrow
    Exception table:
       from    to  target type
          25    30    36   any

  private static void reachabilityFence0(java.lang.Object);
    Code:
       0: aload_0
       1: ifnull        18
       4: aload_0
       5: dup
       6: astore_1
       7: monitorenter
       8: aload_1
       9: monitorexit
      10: goto          18
      13: astore_2
      14: aload_1
      15: monitorexit
      16: aload_2
      17: athrow
      18: return
    Exception table:
       from    to  target type
           8    10    13   any
          13    16    13   any

  public java.lang.String toString();
    Code:
       0: getstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: invokevirtual #106                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      10: astore_1
      11: aload_0
      12: aload_1
      13: invokespecial #175                // Method generateReport:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)Ljava/lang/String;
      16: areturn

  java.lang.String getReportAndClearRecords();
    Code:
       0: getstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
       3: aload_0
       4: aconst_null
       5: invokevirtual #180                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.getAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      11: astore_1
      12: aload_0
      13: aload_1
      14: invokespecial #175                // Method generateReport:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)Ljava/lang/String;
      17: areturn

  private java.lang.String generateReport(io.netty.util.ResourceLeakDetector$TraceRecord);
    Code:
       0: aload_1
       1: ifnonnull     7
       4: ldc           #182                // String
       6: areturn
       7: getstatic     #138                // Field droppedRecordsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      10: aload_0
      11: invokevirtual #184                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.get:(Ljava/lang/Object;)I
      14: istore_2
      15: iconst_0
      16: istore_3
      17: aload_1
      18: invokestatic  #110                // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$300:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)I
      21: iconst_1
      22: iadd
      23: istore        4
      25: new           #186                // class java/lang/StringBuilder
      28: dup
      29: iload         4
      31: sipush        2048
      34: imul
      35: invokespecial #189                // Method java/lang/StringBuilder."<init>":(I)V
      38: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
      41: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      44: astore        5
      46: aload         5
      48: ldc           #201                // String Recent access records:
      50: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      53: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
      56: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: pop
      60: iconst_1
      61: istore        6
      63: new           #203                // class java/util/HashSet
      66: dup
      67: iload         4
      69: invokespecial #204                // Method java/util/HashSet."<init>":(I)V
      72: astore        7
      74: aload_1
      75: invokestatic  #69                 // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$100:()Lio/netty/util/ResourceLeakDetector$TraceRecord;
      78: if_acmpeq     177
      81: aload_1
      82: invokevirtual #206                // Method io/netty/util/ResourceLeakDetector$TraceRecord.toString:()Ljava/lang/String;
      85: astore        8
      87: aload         7
      89: aload         8
      91: invokeinterface #63,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      96: ifeq          166
      99: aload_1
     100: invokestatic  #132                // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$400:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)Lio/netty/util/ResourceLeakDetector$TraceRecord;
     103: invokestatic  #69                 // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$100:()Lio/netty/util/ResourceLeakDetector$TraceRecord;
     106: if_acmpne     131
     109: aload         5
     111: ldc           #208                // String Created at:
     113: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
     119: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: aload         8
     124: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: pop
     128: goto          169
     131: aload         5
     133: bipush        35
     135: invokevirtual #213                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     138: iload         6
     140: iinc          6, 1
     143: invokevirtual #216                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     146: bipush        58
     148: invokevirtual #213                // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
     151: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
     154: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     157: aload         8
     159: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     162: pop
     163: goto          169
     166: iinc          3, 1
     169: aload_1
     170: invokestatic  #132                // Method io/netty/util/ResourceLeakDetector$TraceRecord.access$400:(Lio/netty/util/ResourceLeakDetector$TraceRecord;)Lio/netty/util/ResourceLeakDetector$TraceRecord;
     173: astore_1
     174: goto          74
     177: iload_3
     178: ifle          204
     181: aload         5
     183: ldc           #218                // String :
     185: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     188: iload_3
     189: invokevirtual #216                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     192: ldc           #220                // String  leak records were discarded because they were duplicates
     194: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     197: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
     200: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: pop
     204: iload_2
     205: ifle          252
     208: aload         5
     210: ldc           #218                // String :
     212: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     215: iload_2
     216: invokevirtual #216                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     219: ldc           #222                // String  leak records were discarded because the leak record count is targeted to
     221: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     224: invokestatic  #102                // Method io/netty/util/ResourceLeakDetector.access$200:()I
     227: invokevirtual #216                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     230: ldc           #224                // String . Use system property
     232: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     235: ldc           #226                // String io.netty.leakDetection.targetRecords
     237: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     240: ldc           #228                // String  to increase the limit.
     242: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     245: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
     248: invokevirtual #199                // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     251: pop
     252: aload         5
     254: aload         5
     256: invokevirtual #231                // Method java/lang/StringBuilder.length:()I
     259: getstatic     #195                // Field io/netty/util/internal/StringUtil.NEWLINE:Ljava/lang/String;
     262: invokevirtual #232                // Method java/lang/String.length:()I
     265: isub
     266: invokevirtual #235                // Method java/lang/StringBuilder.setLength:(I)V
     269: aload         5
     271: invokevirtual #236                // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     274: areturn

  static {};
    Code:
       0: ldc           #12                 // class io/netty/util/ResourceLeakDetector
       2: invokevirtual #250                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #40                 // Field $assertionsDisabled:Z
      16: ldc           #2                  // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
      18: ldc           #15                 // class io/netty/util/ResourceLeakDetector$TraceRecord
      20: ldc           #251                // String head
      22: invokestatic  #255                // Method java/util/concurrent/atomic/AtomicReferenceFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      25: putstatic     #65                 // Field headUpdater:Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;
      28: ldc           #2                  // class io/netty/util/ResourceLeakDetector$DefaultResourceLeak
      30: ldc_w         #256                // String droppedRecords
      33: invokestatic  #259                // Method java/util/concurrent/atomic/AtomicIntegerFieldUpdater.newUpdater:(Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      36: putstatic     #138                // Field droppedRecordsUpdater:Ljava/util/concurrent/atomic/AtomicIntegerFieldUpdater;
      39: return
}
