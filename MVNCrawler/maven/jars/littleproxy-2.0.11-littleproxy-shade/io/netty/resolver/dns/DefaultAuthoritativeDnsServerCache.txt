Compiled from "DefaultAuthoritativeDnsServerCache.java"
public class io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache implements io.netty.resolver.dns.AuthoritativeDnsServerCache {
  private final int minTtl;

  private final int maxTtl;

  private final java.util.Comparator<java.net.InetSocketAddress> comparator;

  private final io.netty.resolver.dns.Cache<java.net.InetSocketAddress> resolveCache;

  public io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache();
    Code:
       0: aload_0
       1: iconst_0
       2: getstatic     #2                  // Field io/netty/resolver/dns/Cache.MAX_SUPPORTED_TTL_SECS:I
       5: aconst_null
       6: invokespecial #3                  // Method "<init>":(IILjava/util/Comparator;)V
       9: return

  public io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache(int, int, java.util.Comparator<java.net.InetSocketAddress>);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #5                  // class io/netty/resolver/dns/DefaultAuthoritativeDnsServerCache$1
       8: dup
       9: aload_0
      10: invokespecial #6                  // Method io/netty/resolver/dns/DefaultAuthoritativeDnsServerCache$1."<init>":(Lio/netty/resolver/dns/DefaultAuthoritativeDnsServerCache;)V
      13: putfield      #7                  // Field resolveCache:Lio/netty/resolver/dns/Cache;
      16: aload_0
      17: getstatic     #2                  // Field io/netty/resolver/dns/Cache.MAX_SUPPORTED_TTL_SECS:I
      20: iload_1
      21: ldc           #8                  // String minTtl
      23: invokestatic  #9                  // Method io/netty/util/internal/ObjectUtil.checkPositiveOrZero:(ILjava/lang/String;)I
      26: invokestatic  #10                 // Method java/lang/Math.min:(II)I
      29: putfield      #11                 // Field minTtl:I
      32: aload_0
      33: getstatic     #2                  // Field io/netty/resolver/dns/Cache.MAX_SUPPORTED_TTL_SECS:I
      36: iload_2
      37: ldc           #12                 // String maxTtl
      39: invokestatic  #13                 // Method io/netty/util/internal/ObjectUtil.checkPositive:(ILjava/lang/String;)I
      42: invokestatic  #10                 // Method java/lang/Math.min:(II)I
      45: putfield      #14                 // Field maxTtl:I
      48: iload_1
      49: iload_2
      50: if_icmple     94
      53: new           #15                 // class java/lang/IllegalArgumentException
      56: dup
      57: new           #16                 // class java/lang/StringBuilder
      60: dup
      61: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
      64: ldc           #18                 // String minTtl:
      66: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: iload_1
      70: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      73: ldc           #21                 // String , maxTtl:
      75: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      78: iload_2
      79: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      82: ldc           #22                 // String  (expected: 0 <= minTtl <= maxTtl)
      84: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      90: invokespecial #24                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      93: athrow
      94: aload_0
      95: aload_3
      96: putfield      #1                  // Field comparator:Ljava/util/Comparator;
      99: return

  public io.netty.resolver.dns.DnsServerAddressStream get(java.lang.String);
    Code:
       0: aload_1
       1: ldc           #25                 // String hostname
       3: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #7                  // Field resolveCache:Lio/netty/resolver/dns/Cache;
      11: aload_1
      12: invokevirtual #27                 // Method io/netty/resolver/dns/Cache.get:(Ljava/lang/String;)Ljava/util/List;
      15: astore_2
      16: aload_2
      17: ifnull        29
      20: aload_2
      21: invokeinterface #28,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      26: ifeq          31
      29: aconst_null
      30: areturn
      31: new           #29                 // class io/netty/resolver/dns/SequentialDnsServerAddressStream
      34: dup
      35: aload_2
      36: iconst_0
      37: invokespecial #30                 // Method io/netty/resolver/dns/SequentialDnsServerAddressStream."<init>":(Ljava/util/List;I)V
      40: areturn

  public void cache(java.lang.String, java.net.InetSocketAddress, long, io.netty.channel.EventLoop);
    Code:
       0: aload_1
       1: ldc           #25                 // String hostname
       3: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #31                 // String address
      10: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload         5
      16: ldc           #32                 // String loop
      18: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      21: pop
      22: invokestatic  #33                 // Method io/netty/util/internal/PlatformDependent.javaVersion:()I
      25: bipush        7
      27: if_icmplt     38
      30: aload_2
      31: invokevirtual #34                 // Method java/net/InetSocketAddress.getHostString:()Ljava/lang/String;
      34: ifnonnull     38
      37: return
      38: aload_0
      39: getfield      #7                  // Field resolveCache:Lio/netty/resolver/dns/Cache;
      42: aload_1
      43: aload_2
      44: aload_0
      45: getfield      #11                 // Field minTtl:I
      48: aload_0
      49: getfield      #14                 // Field maxTtl:I
      52: i2l
      53: lload_3
      54: invokestatic  #35                 // Method java/lang/Math.min:(JJ)J
      57: l2i
      58: invokestatic  #36                 // Method java/lang/Math.max:(II)I
      61: aload         5
      63: invokevirtual #37                 // Method io/netty/resolver/dns/Cache.cache:(Ljava/lang/String;Ljava/lang/Object;ILio/netty/channel/EventLoop;)V
      66: return

  public void clear();
    Code:
       0: aload_0
       1: getfield      #7                  // Field resolveCache:Lio/netty/resolver/dns/Cache;
       4: invokevirtual #38                 // Method io/netty/resolver/dns/Cache.clear:()V
       7: return

  public boolean clear(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field resolveCache:Lio/netty/resolver/dns/Cache;
       4: aload_1
       5: ldc           #25                 // String hostname
       7: invokestatic  #26                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: checkcast     #39                 // class java/lang/String
      13: invokevirtual #40                 // Method io/netty/resolver/dns/Cache.clear:(Ljava/lang/String;)Z
      16: ireturn

  public java.lang.String toString();
    Code:
       0: new           #16                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #17                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #41                 // String DefaultAuthoritativeDnsServerCache(minTtl=
       9: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: getfield      #11                 // Field minTtl:I
      16: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      19: ldc           #42                 // String , maxTtl=
      21: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: getfield      #14                 // Field maxTtl:I
      28: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      31: ldc           #43                 // String , cached nameservers=
      33: invokevirtual #19                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: getfield      #7                  // Field resolveCache:Lio/netty/resolver/dns/Cache;
      40: invokevirtual #44                 // Method io/netty/resolver/dns/Cache.size:()I
      43: invokevirtual #20                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      46: bipush        41
      48: invokevirtual #45                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      51: invokevirtual #23                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: areturn

  static java.util.Comparator access$000(io.netty.resolver.dns.DefaultAuthoritativeDnsServerCache);
    Code:
       0: aload_0
       1: getfield      #1                  // Field comparator:Ljava/util/Comparator;
       4: areturn
}
