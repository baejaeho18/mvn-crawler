Compiled from "DnsNameResolverBuilder.java"
public final class io.netty.resolver.dns.DnsNameResolverBuilder {
  volatile io.netty.channel.EventLoop eventLoop;

  private io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.DatagramChannel> channelFactory;

  private io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.SocketChannel> socketChannelFactory;

  private io.netty.resolver.dns.DnsCache resolveCache;

  private io.netty.resolver.dns.DnsCnameCache cnameCache;

  private io.netty.resolver.dns.AuthoritativeDnsServerCache authoritativeDnsServerCache;

  private java.net.SocketAddress localAddress;

  private java.lang.Integer minTtl;

  private java.lang.Integer maxTtl;

  private java.lang.Integer negativeTtl;

  private long queryTimeoutMillis;

  private io.netty.resolver.ResolvedAddressTypes resolvedAddressTypes;

  private boolean completeOncePreferredResolved;

  private boolean recursionDesired;

  private int maxQueriesPerResolve;

  private boolean traceEnabled;

  private int maxPayloadSize;

  private boolean optResourceEnabled;

  private io.netty.resolver.HostsFileEntriesResolver hostsFileEntriesResolver;

  private io.netty.resolver.dns.DnsServerAddressStreamProvider dnsServerAddressStreamProvider;

  private io.netty.resolver.dns.DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory;

  private java.lang.String[] searchDomains;

  private int ndots;

  private boolean decodeIdn;

  public io.netty.resolver.dns.DnsNameResolverBuilder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field queryTimeoutMillis:J
      11: aload_0
      12: getstatic     #5                  // Field io/netty/resolver/dns/DnsNameResolver.DEFAULT_RESOLVE_ADDRESS_TYPES:Lio/netty/resolver/ResolvedAddressTypes;
      15: putfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
      18: aload_0
      19: iconst_1
      20: putfield      #7                  // Field recursionDesired:Z
      23: aload_0
      24: iconst_m1
      25: putfield      #8                  // Field maxQueriesPerResolve:I
      28: aload_0
      29: sipush        4096
      32: putfield      #9                  // Field maxPayloadSize:I
      35: aload_0
      36: iconst_1
      37: putfield      #10                 // Field optResourceEnabled:Z
      40: aload_0
      41: getstatic     #11                 // Field io/netty/resolver/HostsFileEntriesResolver.DEFAULT:Lio/netty/resolver/HostsFileEntriesResolver;
      44: putfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
      47: aload_0
      48: invokestatic  #13                 // Method io/netty/resolver/dns/DnsServerAddressStreamProviders.platformDefault:()Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      51: putfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      54: aload_0
      55: getstatic     #15                 // Field io/netty/resolver/dns/NoopDnsQueryLifecycleObserverFactory.INSTANCE:Lio/netty/resolver/dns/NoopDnsQueryLifecycleObserverFactory;
      58: putfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
      61: aload_0
      62: iconst_m1
      63: putfield      #17                 // Field ndots:I
      66: aload_0
      67: iconst_1
      68: putfield      #18                 // Field decodeIdn:Z
      71: return

  public io.netty.resolver.dns.DnsNameResolverBuilder(io.netty.channel.EventLoop);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #2                  // long -1l
       8: putfield      #4                  // Field queryTimeoutMillis:J
      11: aload_0
      12: getstatic     #5                  // Field io/netty/resolver/dns/DnsNameResolver.DEFAULT_RESOLVE_ADDRESS_TYPES:Lio/netty/resolver/ResolvedAddressTypes;
      15: putfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
      18: aload_0
      19: iconst_1
      20: putfield      #7                  // Field recursionDesired:Z
      23: aload_0
      24: iconst_m1
      25: putfield      #8                  // Field maxQueriesPerResolve:I
      28: aload_0
      29: sipush        4096
      32: putfield      #9                  // Field maxPayloadSize:I
      35: aload_0
      36: iconst_1
      37: putfield      #10                 // Field optResourceEnabled:Z
      40: aload_0
      41: getstatic     #11                 // Field io/netty/resolver/HostsFileEntriesResolver.DEFAULT:Lio/netty/resolver/HostsFileEntriesResolver;
      44: putfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
      47: aload_0
      48: invokestatic  #13                 // Method io/netty/resolver/dns/DnsServerAddressStreamProviders.platformDefault:()Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      51: putfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      54: aload_0
      55: getstatic     #15                 // Field io/netty/resolver/dns/NoopDnsQueryLifecycleObserverFactory.INSTANCE:Lio/netty/resolver/dns/NoopDnsQueryLifecycleObserverFactory;
      58: putfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
      61: aload_0
      62: iconst_m1
      63: putfield      #17                 // Field ndots:I
      66: aload_0
      67: iconst_1
      68: putfield      #18                 // Field decodeIdn:Z
      71: aload_0
      72: aload_1
      73: invokevirtual #19                 // Method eventLoop:(Lio/netty/channel/EventLoop;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      76: pop
      77: return

  public io.netty.resolver.dns.DnsNameResolverBuilder eventLoop(io.netty.channel.EventLoop);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #20                 // Field eventLoop:Lio/netty/channel/EventLoop;
       5: aload_0
       6: areturn

  protected io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.DatagramChannel> channelFactory();
    Code:
       0: aload_0
       1: getfield      #21                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
       4: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder channelFactory(io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.DatagramChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #21                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder channelType(java.lang.Class<? extends io.netty.channel.socket.DatagramChannel>);
    Code:
       0: aload_0
       1: new           #22                 // class io/netty/channel/ReflectiveChannelFactory
       4: dup
       5: aload_1
       6: invokespecial #23                 // Method io/netty/channel/ReflectiveChannelFactory."<init>":(Ljava/lang/Class;)V
       9: invokevirtual #24                 // Method channelFactory:(Lio/netty/channel/ChannelFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      12: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder socketChannelFactory(io.netty.channel.ChannelFactory<? extends io.netty.channel.socket.SocketChannel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field socketChannelFactory:Lio/netty/channel/ChannelFactory;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder socketChannelType(java.lang.Class<? extends io.netty.channel.socket.SocketChannel>);
    Code:
       0: aload_1
       1: ifnonnull     10
       4: aload_0
       5: aconst_null
       6: invokevirtual #26                 // Method socketChannelFactory:(Lio/netty/channel/ChannelFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
       9: areturn
      10: aload_0
      11: new           #22                 // class io/netty/channel/ReflectiveChannelFactory
      14: dup
      15: aload_1
      16: invokespecial #23                 // Method io/netty/channel/ReflectiveChannelFactory."<init>":(Ljava/lang/Class;)V
      19: invokevirtual #26                 // Method socketChannelFactory:(Lio/netty/channel/ChannelFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      22: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder resolveCache(io.netty.resolver.dns.DnsCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #27                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder cnameCache(io.netty.resolver.dns.DnsCnameCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #28                 // Field cnameCache:Lio/netty/resolver/dns/DnsCnameCache;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder dnsQueryLifecycleObserverFactory(io.netty.resolver.dns.DnsQueryLifecycleObserverFactory);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #29                 // String lifecycleObserverFactory
       4: invokestatic  #30                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #31                 // class io/netty/resolver/dns/DnsQueryLifecycleObserverFactory
      10: putfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
      13: aload_0
      14: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.DnsCache);
    Code:
       0: aload_0
       1: new           #32                 // class io/netty/resolver/dns/AuthoritativeDnsServerCacheAdapter
       4: dup
       5: aload_1
       6: invokespecial #33                 // Method io/netty/resolver/dns/AuthoritativeDnsServerCacheAdapter."<init>":(Lio/netty/resolver/dns/DnsCache;)V
       9: putfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
      12: aload_0
      13: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder authoritativeDnsServerCache(io.netty.resolver.dns.AuthoritativeDnsServerCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder localAddress(java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field localAddress:Ljava/net/SocketAddress;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder ttl(int, int);
    Code:
       0: aload_0
       1: iload_2
       2: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #37                 // Field maxTtl:Ljava/lang/Integer;
       8: aload_0
       9: iload_1
      10: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      13: putfield      #38                 // Field minTtl:Ljava/lang/Integer;
      16: aload_0
      17: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder negativeTtl(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #36                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       5: putfield      #39                 // Field negativeTtl:Ljava/lang/Integer;
       8: aload_0
       9: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder queryTimeoutMillis(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #4                  // Field queryTimeoutMillis:J
       5: aload_0
       6: areturn

  public static io.netty.resolver.ResolvedAddressTypes computeResolvedAddressTypes(io.netty.channel.socket.InternetProtocolFamily...);
    Code:
       0: aload_0
       1: ifnull        9
       4: aload_0
       5: arraylength
       6: ifne          13
       9: getstatic     #5                  // Field io/netty/resolver/dns/DnsNameResolver.DEFAULT_RESOLVE_ADDRESS_TYPES:Lio/netty/resolver/ResolvedAddressTypes;
      12: areturn
      13: aload_0
      14: arraylength
      15: iconst_2
      16: if_icmple     29
      19: new           #40                 // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #41                 // String No more than 2 InternetProtocolFamilies
      25: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: getstatic     #43                 // Field io/netty/resolver/dns/DnsNameResolverBuilder$1.$SwitchMap$io$netty$channel$socket$InternetProtocolFamily:[I
      32: aload_0
      33: iconst_0
      34: aaload
      35: invokevirtual #44                 // Method io/netty/channel/socket/InternetProtocolFamily.ordinal:()I
      38: iaload
      39: lookupswitch  { // 2
                     1: 64
                     2: 89
               default: 114
          }
      64: aload_0
      65: arraylength
      66: iconst_2
      67: if_icmplt     85
      70: aload_0
      71: iconst_1
      72: aaload
      73: getstatic     #45                 // Field io/netty/channel/socket/InternetProtocolFamily.IPv6:Lio/netty/channel/socket/InternetProtocolFamily;
      76: if_acmpne     85
      79: getstatic     #46                 // Field io/netty/resolver/ResolvedAddressTypes.IPV4_PREFERRED:Lio/netty/resolver/ResolvedAddressTypes;
      82: goto          88
      85: getstatic     #47                 // Field io/netty/resolver/ResolvedAddressTypes.IPV4_ONLY:Lio/netty/resolver/ResolvedAddressTypes;
      88: areturn
      89: aload_0
      90: arraylength
      91: iconst_2
      92: if_icmplt     110
      95: aload_0
      96: iconst_1
      97: aaload
      98: getstatic     #48                 // Field io/netty/channel/socket/InternetProtocolFamily.IPv4:Lio/netty/channel/socket/InternetProtocolFamily;
     101: if_acmpne     110
     104: getstatic     #49                 // Field io/netty/resolver/ResolvedAddressTypes.IPV6_PREFERRED:Lio/netty/resolver/ResolvedAddressTypes;
     107: goto          113
     110: getstatic     #50                 // Field io/netty/resolver/ResolvedAddressTypes.IPV6_ONLY:Lio/netty/resolver/ResolvedAddressTypes;
     113: areturn
     114: new           #40                 // class java/lang/IllegalArgumentException
     117: dup
     118: ldc           #51                 // String Couldn\'t resolve ResolvedAddressTypes from InternetProtocolFamily array
     120: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     123: athrow

  public io.netty.resolver.dns.DnsNameResolverBuilder resolvedAddressTypes(io.netty.resolver.ResolvedAddressTypes);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder completeOncePreferredResolved(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #52                 // Field completeOncePreferredResolved:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder recursionDesired(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field recursionDesired:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder maxQueriesPerResolve(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field maxQueriesPerResolve:I
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder traceEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #53                 // Field traceEnabled:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder maxPayloadSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #9                  // Field maxPayloadSize:I
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder optResourceEnabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field optResourceEnabled:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder hostsFileEntriesResolver(io.netty.resolver.HostsFileEntriesResolver);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
       5: aload_0
       6: areturn

  protected io.netty.resolver.dns.DnsServerAddressStreamProvider nameServerProvider();
    Code:
       0: aload_0
       1: getfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
       4: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder nameServerProvider(io.netty.resolver.dns.DnsServerAddressStreamProvider);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #54                 // String dnsServerAddressStreamProvider
       4: invokestatic  #30                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #55                 // class io/netty/resolver/dns/DnsServerAddressStreamProvider
      10: putfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
      13: aload_0
      14: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder searchDomains(java.lang.Iterable<java.lang.String>);
    Code:
       0: aload_1
       1: ldc           #56                 // String searchDomains
       3: invokestatic  #30                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: new           #57                 // class java/util/ArrayList
      10: dup
      11: iconst_4
      12: invokespecial #58                 // Method java/util/ArrayList."<init>":(I)V
      15: astore_2
      16: aload_1
      17: invokeinterface #59,  1           // InterfaceMethod java/lang/Iterable.iterator:()Ljava/util/Iterator;
      22: astore_3
      23: aload_3
      24: invokeinterface #60,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      29: ifeq          77
      32: aload_3
      33: invokeinterface #61,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      38: checkcast     #62                 // class java/lang/String
      41: astore        4
      43: aload         4
      45: ifnonnull     51
      48: goto          77
      51: aload_2
      52: aload         4
      54: invokeinterface #63,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      59: ifeq          65
      62: goto          23
      65: aload_2
      66: aload         4
      68: invokeinterface #64,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      73: pop
      74: goto          23
      77: aload_0
      78: aload_2
      79: iconst_0
      80: anewarray     #62                 // class java/lang/String
      83: invokeinterface #65,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      88: checkcast     #66                 // class "[Ljava/lang/String;"
      91: putfield      #67                 // Field searchDomains:[Ljava/lang/String;
      94: aload_0
      95: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder ndots(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #17                 // Field ndots:I
       5: aload_0
       6: areturn

  private io.netty.resolver.dns.DnsCache newCache();
    Code:
       0: new           #68                 // class io/netty/resolver/dns/DefaultDnsCache
       3: dup
       4: aload_0
       5: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
       8: iconst_0
       9: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      12: aload_0
      13: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
      16: ldc           #71                 // int 2147483647
      18: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      21: aload_0
      22: getfield      #39                 // Field negativeTtl:Ljava/lang/Integer;
      25: iconst_0
      26: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      29: invokespecial #72                 // Method io/netty/resolver/dns/DefaultDnsCache."<init>":(III)V
      32: areturn

  private io.netty.resolver.dns.AuthoritativeDnsServerCache newAuthoritativeDnsServerCache();
    Code:
       0: new           #73                 // class io/netty/resolver/dns/DefaultAuthoritativeDnsServerCache
       3: dup
       4: aload_0
       5: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
       8: iconst_0
       9: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      12: aload_0
      13: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
      16: ldc           #71                 // int 2147483647
      18: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      21: new           #74                 // class io/netty/resolver/dns/NameServerComparator
      24: dup
      25: aload_0
      26: getfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
      29: invokestatic  #75                 // Method io/netty/resolver/dns/DnsNameResolver.preferredAddressType:(Lio/netty/resolver/ResolvedAddressTypes;)Lio/netty/channel/socket/InternetProtocolFamily;
      32: invokevirtual #76                 // Method io/netty/channel/socket/InternetProtocolFamily.addressType:()Ljava/lang/Class;
      35: invokespecial #77                 // Method io/netty/resolver/dns/NameServerComparator."<init>":(Ljava/lang/Class;)V
      38: invokespecial #78                 // Method io/netty/resolver/dns/DefaultAuthoritativeDnsServerCache."<init>":(IILjava/util/Comparator;)V
      41: areturn

  private io.netty.resolver.dns.DnsCnameCache newCnameCache();
    Code:
       0: new           #79                 // class io/netty/resolver/dns/DefaultDnsCnameCache
       3: dup
       4: aload_0
       5: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
       8: iconst_0
       9: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      12: aload_0
      13: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
      16: ldc           #71                 // int 2147483647
      18: invokestatic  #69                 // Method io/netty/util/internal/ObjectUtil.intValue:(Ljava/lang/Integer;I)I
      21: invokespecial #80                 // Method io/netty/resolver/dns/DefaultDnsCnameCache."<init>":(II)V
      24: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder decodeIdn(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #18                 // Field decodeIdn:Z
       5: aload_0
       6: areturn

  public io.netty.resolver.dns.DnsNameResolver build();
    Code:
       0: aload_0
       1: getfield      #20                 // Field eventLoop:Lio/netty/channel/EventLoop;
       4: ifnonnull     17
       7: new           #81                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #82                 // String eventLoop should be specified to build a DnsNameResolver.
      13: invokespecial #83                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #27                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
      21: ifnull        55
      24: aload_0
      25: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
      28: ifnonnull     45
      31: aload_0
      32: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
      35: ifnonnull     45
      38: aload_0
      39: getfield      #39                 // Field negativeTtl:Ljava/lang/Integer;
      42: ifnull        55
      45: new           #81                 // class java/lang/IllegalStateException
      48: dup
      49: ldc           #84                 // String resolveCache and TTLs are mutually exclusive
      51: invokespecial #83                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: aload_0
      56: getfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
      59: ifnull        93
      62: aload_0
      63: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
      66: ifnonnull     83
      69: aload_0
      70: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
      73: ifnonnull     83
      76: aload_0
      77: getfield      #39                 // Field negativeTtl:Ljava/lang/Integer;
      80: ifnull        93
      83: new           #81                 // class java/lang/IllegalStateException
      86: dup
      87: ldc           #85                 // String authoritativeDnsServerCache and TTLs are mutually exclusive
      89: invokespecial #83                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      92: athrow
      93: aload_0
      94: getfield      #27                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
      97: ifnull        107
     100: aload_0
     101: getfield      #27                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
     104: goto          111
     107: aload_0
     108: invokespecial #86                 // Method newCache:()Lio/netty/resolver/dns/DnsCache;
     111: astore_1
     112: aload_0
     113: getfield      #28                 // Field cnameCache:Lio/netty/resolver/dns/DnsCnameCache;
     116: ifnull        126
     119: aload_0
     120: getfield      #28                 // Field cnameCache:Lio/netty/resolver/dns/DnsCnameCache;
     123: goto          130
     126: aload_0
     127: invokespecial #87                 // Method newCnameCache:()Lio/netty/resolver/dns/DnsCnameCache;
     130: astore_2
     131: aload_0
     132: getfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
     135: ifnull        145
     138: aload_0
     139: getfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
     142: goto          149
     145: aload_0
     146: invokespecial #88                 // Method newAuthoritativeDnsServerCache:()Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
     149: astore_3
     150: new           #89                 // class io/netty/resolver/dns/DnsNameResolver
     153: dup
     154: aload_0
     155: getfield      #20                 // Field eventLoop:Lio/netty/channel/EventLoop;
     158: aload_0
     159: getfield      #21                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
     162: aload_0
     163: getfield      #25                 // Field socketChannelFactory:Lio/netty/channel/ChannelFactory;
     166: aload_1
     167: aload_2
     168: aload_3
     169: aload_0
     170: getfield      #35                 // Field localAddress:Ljava/net/SocketAddress;
     173: aload_0
     174: getfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
     177: aload_0
     178: getfield      #4                  // Field queryTimeoutMillis:J
     181: aload_0
     182: getfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
     185: aload_0
     186: getfield      #7                  // Field recursionDesired:Z
     189: aload_0
     190: getfield      #8                  // Field maxQueriesPerResolve:I
     193: aload_0
     194: getfield      #53                 // Field traceEnabled:Z
     197: aload_0
     198: getfield      #9                  // Field maxPayloadSize:I
     201: aload_0
     202: getfield      #10                 // Field optResourceEnabled:Z
     205: aload_0
     206: getfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
     209: aload_0
     210: getfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
     213: aload_0
     214: getfield      #67                 // Field searchDomains:[Ljava/lang/String;
     217: aload_0
     218: getfield      #17                 // Field ndots:I
     221: aload_0
     222: getfield      #18                 // Field decodeIdn:Z
     225: aload_0
     226: getfield      #52                 // Field completeOncePreferredResolved:Z
     229: invokespecial #90                 // Method io/netty/resolver/dns/DnsNameResolver."<init>":(Lio/netty/channel/EventLoop;Lio/netty/channel/ChannelFactory;Lio/netty/channel/ChannelFactory;Lio/netty/resolver/dns/DnsCache;Lio/netty/resolver/dns/DnsCnameCache;Lio/netty/resolver/dns/AuthoritativeDnsServerCache;Ljava/net/SocketAddress;Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;JLio/netty/resolver/ResolvedAddressTypes;ZIZIZLio/netty/resolver/HostsFileEntriesResolver;Lio/netty/resolver/dns/DnsServerAddressStreamProvider;[Ljava/lang/String;IZZ)V
     232: areturn

  public io.netty.resolver.dns.DnsNameResolverBuilder copy();
    Code:
       0: new           #91                 // class io/netty/resolver/dns/DnsNameResolverBuilder
       3: dup
       4: invokespecial #92                 // Method "<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #20                 // Field eventLoop:Lio/netty/channel/EventLoop;
      12: ifnull        24
      15: aload_1
      16: aload_0
      17: getfield      #20                 // Field eventLoop:Lio/netty/channel/EventLoop;
      20: invokevirtual #19                 // Method eventLoop:(Lio/netty/channel/EventLoop;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      23: pop
      24: aload_0
      25: getfield      #21                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
      28: ifnull        40
      31: aload_1
      32: aload_0
      33: getfield      #21                 // Field channelFactory:Lio/netty/channel/ChannelFactory;
      36: invokevirtual #24                 // Method channelFactory:(Lio/netty/channel/ChannelFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      39: pop
      40: aload_0
      41: getfield      #25                 // Field socketChannelFactory:Lio/netty/channel/ChannelFactory;
      44: ifnull        56
      47: aload_1
      48: aload_0
      49: getfield      #25                 // Field socketChannelFactory:Lio/netty/channel/ChannelFactory;
      52: invokevirtual #26                 // Method socketChannelFactory:(Lio/netty/channel/ChannelFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      55: pop
      56: aload_0
      57: getfield      #27                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
      60: ifnull        72
      63: aload_1
      64: aload_0
      65: getfield      #27                 // Field resolveCache:Lio/netty/resolver/dns/DnsCache;
      68: invokevirtual #93                 // Method resolveCache:(Lio/netty/resolver/dns/DnsCache;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      71: pop
      72: aload_0
      73: getfield      #28                 // Field cnameCache:Lio/netty/resolver/dns/DnsCnameCache;
      76: ifnull        88
      79: aload_1
      80: aload_0
      81: getfield      #28                 // Field cnameCache:Lio/netty/resolver/dns/DnsCnameCache;
      84: invokevirtual #94                 // Method cnameCache:(Lio/netty/resolver/dns/DnsCnameCache;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
      87: pop
      88: aload_0
      89: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
      92: ifnull        121
      95: aload_0
      96: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
      99: ifnull        121
     102: aload_1
     103: aload_0
     104: getfield      #38                 // Field minTtl:Ljava/lang/Integer;
     107: invokevirtual #95                 // Method java/lang/Integer.intValue:()I
     110: aload_0
     111: getfield      #37                 // Field maxTtl:Ljava/lang/Integer;
     114: invokevirtual #95                 // Method java/lang/Integer.intValue:()I
     117: invokevirtual #96                 // Method ttl:(II)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     120: pop
     121: aload_0
     122: getfield      #39                 // Field negativeTtl:Ljava/lang/Integer;
     125: ifnull        140
     128: aload_1
     129: aload_0
     130: getfield      #39                 // Field negativeTtl:Ljava/lang/Integer;
     133: invokevirtual #95                 // Method java/lang/Integer.intValue:()I
     136: invokevirtual #97                 // Method negativeTtl:(I)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     139: pop
     140: aload_0
     141: getfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
     144: ifnull        156
     147: aload_1
     148: aload_0
     149: getfield      #34                 // Field authoritativeDnsServerCache:Lio/netty/resolver/dns/AuthoritativeDnsServerCache;
     152: invokevirtual #98                 // Method authoritativeDnsServerCache:(Lio/netty/resolver/dns/AuthoritativeDnsServerCache;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     155: pop
     156: aload_0
     157: getfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
     160: ifnull        172
     163: aload_1
     164: aload_0
     165: getfield      #16                 // Field dnsQueryLifecycleObserverFactory:Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;
     168: invokevirtual #99                 // Method dnsQueryLifecycleObserverFactory:(Lio/netty/resolver/dns/DnsQueryLifecycleObserverFactory;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     171: pop
     172: aload_1
     173: aload_0
     174: getfield      #4                  // Field queryTimeoutMillis:J
     177: invokevirtual #100                // Method queryTimeoutMillis:(J)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     180: pop
     181: aload_1
     182: aload_0
     183: getfield      #6                  // Field resolvedAddressTypes:Lio/netty/resolver/ResolvedAddressTypes;
     186: invokevirtual #101                // Method resolvedAddressTypes:(Lio/netty/resolver/ResolvedAddressTypes;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     189: pop
     190: aload_1
     191: aload_0
     192: getfield      #7                  // Field recursionDesired:Z
     195: invokevirtual #102                // Method recursionDesired:(Z)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     198: pop
     199: aload_1
     200: aload_0
     201: getfield      #8                  // Field maxQueriesPerResolve:I
     204: invokevirtual #103                // Method maxQueriesPerResolve:(I)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     207: pop
     208: aload_1
     209: aload_0
     210: getfield      #53                 // Field traceEnabled:Z
     213: invokevirtual #104                // Method traceEnabled:(Z)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     216: pop
     217: aload_1
     218: aload_0
     219: getfield      #9                  // Field maxPayloadSize:I
     222: invokevirtual #105                // Method maxPayloadSize:(I)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     225: pop
     226: aload_1
     227: aload_0
     228: getfield      #10                 // Field optResourceEnabled:Z
     231: invokevirtual #106                // Method optResourceEnabled:(Z)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     234: pop
     235: aload_1
     236: aload_0
     237: getfield      #12                 // Field hostsFileEntriesResolver:Lio/netty/resolver/HostsFileEntriesResolver;
     240: invokevirtual #107                // Method hostsFileEntriesResolver:(Lio/netty/resolver/HostsFileEntriesResolver;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     243: pop
     244: aload_0
     245: getfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
     248: ifnull        260
     251: aload_1
     252: aload_0
     253: getfield      #14                 // Field dnsServerAddressStreamProvider:Lio/netty/resolver/dns/DnsServerAddressStreamProvider;
     256: invokevirtual #108                // Method nameServerProvider:(Lio/netty/resolver/dns/DnsServerAddressStreamProvider;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     259: pop
     260: aload_0
     261: getfield      #67                 // Field searchDomains:[Ljava/lang/String;
     264: ifnull        279
     267: aload_1
     268: aload_0
     269: getfield      #67                 // Field searchDomains:[Ljava/lang/String;
     272: invokestatic  #109                // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
     275: invokevirtual #110                // Method searchDomains:(Ljava/lang/Iterable;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     278: pop
     279: aload_1
     280: aload_0
     281: getfield      #17                 // Field ndots:I
     284: invokevirtual #111                // Method ndots:(I)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     287: pop
     288: aload_1
     289: aload_0
     290: getfield      #18                 // Field decodeIdn:Z
     293: invokevirtual #112                // Method decodeIdn:(Z)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     296: pop
     297: aload_1
     298: aload_0
     299: getfield      #52                 // Field completeOncePreferredResolved:Z
     302: invokevirtual #113                // Method completeOncePreferredResolved:(Z)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     305: pop
     306: aload_1
     307: aload_0
     308: getfield      #35                 // Field localAddress:Ljava/net/SocketAddress;
     311: invokevirtual #114                // Method localAddress:(Ljava/net/SocketAddress;)Lio/netty/resolver/dns/DnsNameResolverBuilder;
     314: pop
     315: aload_1
     316: areturn
}
