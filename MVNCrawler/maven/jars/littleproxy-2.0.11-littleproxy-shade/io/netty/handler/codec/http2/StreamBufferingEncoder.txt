Compiled from "StreamBufferingEncoder.java"
public class io.netty.handler.codec.http2.StreamBufferingEncoder extends io.netty.handler.codec.http2.DecoratingHttp2ConnectionEncoder {
  private final java.util.TreeMap<java.lang.Integer, io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream> pendingStreams;

  private int maxConcurrentStreams;

  private boolean closed;

  private io.netty.handler.codec.http2.StreamBufferingEncoder$GoAwayDetail goAwayDetail;

  public io.netty.handler.codec.http2.StreamBufferingEncoder(io.netty.handler.codec.http2.Http2ConnectionEncoder);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        100
       4: invokespecial #5                  // Method "<init>":(Lio/netty/handler/codec/http2/Http2ConnectionEncoder;I)V
       7: return

  public io.netty.handler.codec.http2.StreamBufferingEncoder(io.netty.handler.codec.http2.Http2ConnectionEncoder, int);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder."<init>":(Lio/netty/handler/codec/http2/Http2ConnectionEncoder;)V
       5: aload_0
       6: new           #7                  // class java/util/TreeMap
       9: dup
      10: invokespecial #8                  // Method java/util/TreeMap."<init>":()V
      13: putfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      16: aload_0
      17: iload_2
      18: putfield      #10                 // Field maxConcurrentStreams:I
      21: aload_0
      22: invokevirtual #11                 // Method connection:()Lio/netty/handler/codec/http2/Http2Connection;
      25: new           #12                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$1
      28: dup
      29: aload_0
      30: invokespecial #13                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$1."<init>":(Lio/netty/handler/codec/http2/StreamBufferingEncoder;)V
      33: invokeinterface #14,  2           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.addListener:(Lio/netty/handler/codec/http2/Http2Connection$Listener;)V
      38: return

  public int numBufferedStreams();
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
       4: invokevirtual #15                 // Method java/util/TreeMap.size:()I
       7: ireturn

  public io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, boolean, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: iconst_0
       5: bipush        16
       7: iconst_0
       8: iload         4
      10: iload         5
      12: aload         6
      14: invokevirtual #16                 // Method writeHeaders:(Lio/netty/channel/ChannelHandlerContext;ILio/netty/handler/codec/http2/Http2Headers;ISZIZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      17: areturn

  public io.netty.channel.ChannelFuture writeHeaders(io.netty.channel.ChannelHandlerContext, int, io.netty.handler.codec.http2.Http2Headers, int, short, boolean, int, boolean, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: getfield      #17                 // Field closed:Z
       4: ifeq          22
       7: aload         9
       9: new           #18                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$Http2ChannelClosedException
      12: dup
      13: invokespecial #19                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$Http2ChannelClosedException."<init>":()V
      16: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
      21: areturn
      22: aload_0
      23: iload_2
      24: invokespecial #21                 // Method isExistingStream:(I)Z
      27: ifne          37
      30: aload_0
      31: invokespecial #22                 // Method canCreateStream:()Z
      34: ifeq          57
      37: aload_0
      38: aload_1
      39: iload_2
      40: aload_3
      41: iload         4
      43: iload         5
      45: iload         6
      47: iload         7
      49: iload         8
      51: aload         9
      53: invokespecial #23                 // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder.writeHeaders:(Lio/netty/channel/ChannelHandlerContext;ILio/netty/handler/codec/http2/Http2Headers;ISZIZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      56: areturn
      57: aload_0
      58: getfield      #4                  // Field goAwayDetail:Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;
      61: ifnull        83
      64: aload         9
      66: new           #24                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$Http2GoAwayException
      69: dup
      70: aload_0
      71: getfield      #4                  // Field goAwayDetail:Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;
      74: invokespecial #25                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$Http2GoAwayException."<init>":(Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;)V
      77: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
      82: areturn
      83: aload_0
      84: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      87: iload_2
      88: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: invokevirtual #27                 // Method java/util/TreeMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      94: checkcast     #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
      97: astore        10
      99: aload         10
     101: ifnonnull     129
     104: new           #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
     107: dup
     108: aload_1
     109: iload_2
     110: invokespecial #29                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream."<init>":(Lio/netty/channel/ChannelHandlerContext;I)V
     113: astore        10
     115: aload_0
     116: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
     119: iload_2
     120: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     123: aload         10
     125: invokevirtual #30                 // Method java/util/TreeMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     128: pop
     129: aload         10
     131: getfield      #31                 // Field io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.frames:Ljava/util/Queue;
     134: new           #32                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$HeadersFrame
     137: dup
     138: aload_0
     139: aload_3
     140: iload         4
     142: iload         5
     144: iload         6
     146: iload         7
     148: iload         8
     150: aload         9
     152: invokespecial #33                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$HeadersFrame."<init>":(Lio/netty/handler/codec/http2/StreamBufferingEncoder;Lio/netty/handler/codec/http2/Http2Headers;ISZIZLio/netty/channel/ChannelPromise;)V
     155: invokeinterface #34,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
     160: pop
     161: aload         9
     163: areturn

  public io.netty.channel.ChannelFuture writeRstStream(io.netty.channel.ChannelHandlerContext, int, long, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #21                 // Method isExistingStream:(I)Z
       5: ifeq          18
       8: aload_0
       9: aload_1
      10: iload_2
      11: lload_3
      12: aload         5
      14: invokespecial #35                 // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder.writeRstStream:(Lio/netty/channel/ChannelHandlerContext;IJLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      17: areturn
      18: aload_0
      19: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      22: iload_2
      23: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      26: invokevirtual #36                 // Method java/util/TreeMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      29: checkcast     #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
      32: astore        6
      34: aload         6
      36: ifnull        56
      39: aload         6
      41: aconst_null
      42: invokevirtual #37                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.close:(Ljava/lang/Throwable;)V
      45: aload         5
      47: invokeinterface #38,  1           // InterfaceMethod io/netty/channel/ChannelPromise.setSuccess:()Lio/netty/channel/ChannelPromise;
      52: pop
      53: goto          83
      56: aload         5
      58: getstatic     #39                 // Field io/netty/handler/codec/http2/Http2Error.PROTOCOL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
      61: ldc           #40                 // String Stream does not exist %d
      63: iconst_1
      64: anewarray     #41                 // class java/lang/Object
      67: dup
      68: iconst_0
      69: iload_2
      70: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      73: aastore
      74: invokestatic  #42                 // Method io/netty/handler/codec/http2/Http2Exception.connectionError:(Lio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      77: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
      82: pop
      83: aload         5
      85: areturn

  public io.netty.channel.ChannelFuture writeData(io.netty.channel.ChannelHandlerContext, int, io.netty.buffer.ByteBuf, int, boolean, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: iload_2
       2: invokespecial #21                 // Method isExistingStream:(I)Z
       5: ifeq          22
       8: aload_0
       9: aload_1
      10: iload_2
      11: aload_3
      12: iload         4
      14: iload         5
      16: aload         6
      18: invokespecial #43                 // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder.writeData:(Lio/netty/channel/ChannelHandlerContext;ILio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture;
      21: areturn
      22: aload_0
      23: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      26: iload_2
      27: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      30: invokevirtual #27                 // Method java/util/TreeMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      33: checkcast     #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
      36: astore        7
      38: aload         7
      40: ifnull        72
      43: aload         7
      45: getfield      #31                 // Field io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.frames:Ljava/util/Queue;
      48: new           #44                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$DataFrame
      51: dup
      52: aload_0
      53: aload_3
      54: iload         4
      56: iload         5
      58: aload         6
      60: invokespecial #45                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$DataFrame."<init>":(Lio/netty/handler/codec/http2/StreamBufferingEncoder;Lio/netty/buffer/ByteBuf;IZLio/netty/channel/ChannelPromise;)V
      63: invokeinterface #34,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      68: pop
      69: goto          103
      72: aload_3
      73: invokestatic  #46                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      76: aload         6
      78: getstatic     #39                 // Field io/netty/handler/codec/http2/Http2Error.PROTOCOL_ERROR:Lio/netty/handler/codec/http2/Http2Error;
      81: ldc           #40                 // String Stream does not exist %d
      83: iconst_1
      84: anewarray     #41                 // class java/lang/Object
      87: dup
      88: iconst_0
      89: iload_2
      90: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      93: aastore
      94: invokestatic  #42                 // Method io/netty/handler/codec/http2/Http2Exception.connectionError:(Lio/netty/handler/codec/http2/Http2Error;Ljava/lang/String;[Ljava/lang/Object;)Lio/netty/handler/codec/http2/Http2Exception;
      97: invokeinterface #20,  2           // InterfaceMethod io/netty/channel/ChannelPromise.setFailure:(Ljava/lang/Throwable;)Lio/netty/channel/ChannelPromise;
     102: pop
     103: aload         6
     105: areturn

  public void remoteSettings(io.netty.handler.codec.http2.Http2Settings) throws io.netty.handler.codec.http2.Http2Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #47                 // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder.remoteSettings:(Lio/netty/handler/codec/http2/Http2Settings;)V
       5: aload_0
       6: aload_0
       7: invokevirtual #11                 // Method connection:()Lio/netty/handler/codec/http2/Http2Connection;
      10: invokeinterface #48,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.local:()Lio/netty/handler/codec/http2/Http2Connection$Endpoint;
      15: invokeinterface #49,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection$Endpoint.maxActiveStreams:()I
      20: putfield      #10                 // Field maxConcurrentStreams:I
      23: aload_0
      24: invokespecial #2                  // Method tryCreatePendingStreams:()V
      27: return

  public void close();
    Code:
       0: aload_0
       1: getfield      #17                 // Field closed:Z
       4: ifne          54
       7: aload_0
       8: iconst_1
       9: putfield      #17                 // Field closed:Z
      12: new           #18                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$Http2ChannelClosedException
      15: dup
      16: invokespecial #19                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$Http2ChannelClosedException."<init>":()V
      19: astore_1
      20: aload_0
      21: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      24: invokevirtual #50                 // Method java/util/TreeMap.isEmpty:()Z
      27: ifne          54
      30: aload_0
      31: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      34: invokevirtual #51                 // Method java/util/TreeMap.pollFirstEntry:()Ljava/util/Map$Entry;
      37: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      42: checkcast     #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
      45: astore_2
      46: aload_2
      47: aload_1
      48: invokevirtual #37                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.close:(Ljava/lang/Throwable;)V
      51: goto          20
      54: aload_0
      55: invokespecial #53                 // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder.close:()V
      58: goto          68
      61: astore_3
      62: aload_0
      63: invokespecial #53                 // Method io/netty/handler/codec/http2/DecoratingHttp2ConnectionEncoder.close:()V
      66: aload_3
      67: athrow
      68: return
    Exception table:
       from    to  target type
           0    54    61   any

  private void tryCreatePendingStreams();
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
       4: invokevirtual #50                 // Method java/util/TreeMap.isEmpty:()Z
       7: ifne          51
      10: aload_0
      11: invokespecial #22                 // Method canCreateStream:()Z
      14: ifeq          51
      17: aload_0
      18: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
      21: invokevirtual #51                 // Method java/util/TreeMap.pollFirstEntry:()Ljava/util/Map$Entry;
      24: astore_1
      25: aload_1
      26: invokeinterface #52,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      31: checkcast     #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
      34: astore_2
      35: aload_2
      36: invokevirtual #54                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.sendFrames:()V
      39: goto          48
      42: astore_3
      43: aload_2
      44: aload_3
      45: invokevirtual #37                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.close:(Ljava/lang/Throwable;)V
      48: goto          0
      51: return
    Exception table:
       from    to  target type
          35    39    42   Class java/lang/Throwable

  private void cancelGoAwayStreams(io.netty.handler.codec.http2.StreamBufferingEncoder$GoAwayDetail);
    Code:
       0: aload_0
       1: getfield      #9                  // Field pendingStreams:Ljava/util/TreeMap;
       4: invokevirtual #56                 // Method java/util/TreeMap.values:()Ljava/util/Collection;
       7: invokeinterface #57,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      12: astore_2
      13: new           #24                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$Http2GoAwayException
      16: dup
      17: aload_1
      18: invokespecial #25                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$Http2GoAwayException."<init>":(Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;)V
      21: astore_3
      22: aload_2
      23: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          69
      31: aload_2
      32: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #28                 // class io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream
      40: astore        4
      42: aload         4
      44: getfield      #60                 // Field io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.streamId:I
      47: aload_1
      48: invokestatic  #61                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail.access$000:(Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;)I
      51: if_icmple     66
      54: aload_2
      55: invokeinterface #62,  1           // InterfaceMethod java/util/Iterator.remove:()V
      60: aload         4
      62: aload_3
      63: invokevirtual #37                 // Method io/netty/handler/codec/http2/StreamBufferingEncoder$PendingStream.close:(Ljava/lang/Throwable;)V
      66: goto          22
      69: return

  private boolean canCreateStream();
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method connection:()Lio/netty/handler/codec/http2/Http2Connection;
       4: invokeinterface #48,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.local:()Lio/netty/handler/codec/http2/Http2Connection$Endpoint;
       9: invokeinterface #63,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection$Endpoint.numActiveStreams:()I
      14: aload_0
      15: getfield      #10                 // Field maxConcurrentStreams:I
      18: if_icmpge     25
      21: iconst_1
      22: goto          26
      25: iconst_0
      26: ireturn

  private boolean isExistingStream(int);
    Code:
       0: iload_1
       1: aload_0
       2: invokevirtual #11                 // Method connection:()Lio/netty/handler/codec/http2/Http2Connection;
       5: invokeinterface #48,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection.local:()Lio/netty/handler/codec/http2/Http2Connection$Endpoint;
      10: invokeinterface #64,  1           // InterfaceMethod io/netty/handler/codec/http2/Http2Connection$Endpoint.lastStreamCreated:()I
      15: if_icmpgt     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  static io.netty.handler.codec.http2.StreamBufferingEncoder$GoAwayDetail access$302(io.netty.handler.codec.http2.StreamBufferingEncoder, io.netty.handler.codec.http2.StreamBufferingEncoder$GoAwayDetail);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #4                  // Field goAwayDetail:Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;
       6: areturn

  static io.netty.handler.codec.http2.StreamBufferingEncoder$GoAwayDetail access$300(io.netty.handler.codec.http2.StreamBufferingEncoder);
    Code:
       0: aload_0
       1: getfield      #4                  // Field goAwayDetail:Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;
       4: areturn

  static void access$400(io.netty.handler.codec.http2.StreamBufferingEncoder, io.netty.handler.codec.http2.StreamBufferingEncoder$GoAwayDetail);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method cancelGoAwayStreams:(Lio/netty/handler/codec/http2/StreamBufferingEncoder$GoAwayDetail;)V
       5: return

  static void access$500(io.netty.handler.codec.http2.StreamBufferingEncoder);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method tryCreatePendingStreams:()V
       4: return
}
