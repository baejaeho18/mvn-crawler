Compiled from "EpollChannelConfig.java"
public class io.netty.channel.epoll.EpollChannelConfig extends io.netty.channel.DefaultChannelConfig {
  private volatile long maxBytesPerGatheringWrite;

  io.netty.channel.epoll.EpollChannelConfig(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/netty/channel/DefaultChannelConfig."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: getstatic     #2                  // Field io/netty/channel/unix/Limits.SSIZE_MAX:J
       9: putfield      #3                  // Field maxBytesPerGatheringWrite:J
      12: return

  io.netty.channel.epoll.EpollChannelConfig(io.netty.channel.epoll.AbstractEpollChannel, io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method io/netty/channel/DefaultChannelConfig."<init>":(Lio/netty/channel/Channel;Lio/netty/channel/RecvByteBufAllocator;)V
       6: aload_0
       7: getstatic     #2                  // Field io/netty/channel/unix/Limits.SSIZE_MAX:J
      10: putfield      #3                  // Field maxBytesPerGatheringWrite:J
      13: return

  public java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #5                  // Method io/netty/channel/DefaultChannelConfig.getOptions:()Ljava/util/Map;
       5: iconst_1
       6: anewarray     #6                  // class io/netty/channel/ChannelOption
       9: dup
      10: iconst_0
      11: getstatic     #7                  // Field io/netty/channel/epoll/EpollChannelOption.EPOLL_MODE:Lio/netty/channel/ChannelOption;
      14: aastore
      15: invokevirtual #8                  // Method getOptions:(Ljava/util/Map;[Lio/netty/channel/ChannelOption;)Ljava/util/Map;
      18: areturn

  public <T> T getOption(io.netty.channel.ChannelOption<T>);
    Code:
       0: aload_1
       1: getstatic     #7                  // Field io/netty/channel/epoll/EpollChannelOption.EPOLL_MODE:Lio/netty/channel/ChannelOption;
       4: if_acmpne     12
       7: aload_0
       8: invokevirtual #9                  // Method getEpollMode:()Lio/netty/channel/epoll/EpollMode;
      11: areturn
      12: aload_1
      13: instanceof    #10                 // class io/netty/channel/unix/IntegerUnixChannelOption
      16: ifeq          49
      19: aload_1
      20: checkcast     #10                 // class io/netty/channel/unix/IntegerUnixChannelOption
      23: astore_2
      24: aload_0
      25: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
      28: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
      31: getfield      #13                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      34: aload_2
      35: invokevirtual #14                 // Method io/netty/channel/unix/IntegerUnixChannelOption.level:()I
      38: aload_2
      39: invokevirtual #15                 // Method io/netty/channel/unix/IntegerUnixChannelOption.optname:()I
      42: invokevirtual #16                 // Method io/netty/channel/epoll/LinuxSocket.getIntOpt:(II)I
      45: invokestatic  #17                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      48: areturn
      49: aload_1
      50: instanceof    #18                 // class io/netty/channel/unix/RawUnixChannelOption
      53: ifeq          96
      56: aload_1
      57: checkcast     #18                 // class io/netty/channel/unix/RawUnixChannelOption
      60: astore_2
      61: aload_2
      62: invokevirtual #19                 // Method io/netty/channel/unix/RawUnixChannelOption.length:()I
      65: invokestatic  #20                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      68: astore_3
      69: aload_0
      70: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
      73: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
      76: getfield      #13                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      79: aload_2
      80: invokevirtual #21                 // Method io/netty/channel/unix/RawUnixChannelOption.level:()I
      83: aload_2
      84: invokevirtual #22                 // Method io/netty/channel/unix/RawUnixChannelOption.optname:()I
      87: aload_3
      88: invokevirtual #23                 // Method io/netty/channel/epoll/LinuxSocket.getRawOpt:(IILjava/nio/ByteBuffer;)V
      91: aload_3
      92: invokevirtual #24                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      95: areturn
      96: goto          109
      99: astore_2
     100: new           #26                 // class io/netty/channel/ChannelException
     103: dup
     104: aload_2
     105: invokespecial #27                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
     108: athrow
     109: aload_0
     110: aload_1
     111: invokespecial #28                 // Method io/netty/channel/DefaultChannelConfig.getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
     114: areturn
    Exception table:
       from    to  target type
          12    48    99   Class java/io/IOException
          49    95    99   Class java/io/IOException

  public <T> boolean setOption(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #29                 // Method validate:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)V
       6: aload_1
       7: getstatic     #7                  // Field io/netty/channel/epoll/EpollChannelOption.EPOLL_MODE:Lio/netty/channel/ChannelOption;
      10: if_acmpne     25
      13: aload_0
      14: aload_2
      15: checkcast     #30                 // class io/netty/channel/epoll/EpollMode
      18: invokevirtual #31                 // Method setEpollMode:(Lio/netty/channel/epoll/EpollMode;)Lio/netty/channel/epoll/EpollChannelConfig;
      21: pop
      22: goto          126
      25: aload_1
      26: instanceof    #10                 // class io/netty/channel/unix/IntegerUnixChannelOption
      29: ifeq          67
      32: aload_1
      33: checkcast     #10                 // class io/netty/channel/unix/IntegerUnixChannelOption
      36: astore_3
      37: aload_0
      38: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
      41: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
      44: getfield      #13                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      47: aload_3
      48: invokevirtual #14                 // Method io/netty/channel/unix/IntegerUnixChannelOption.level:()I
      51: aload_3
      52: invokevirtual #15                 // Method io/netty/channel/unix/IntegerUnixChannelOption.optname:()I
      55: aload_2
      56: checkcast     #32                 // class java/lang/Integer
      59: invokevirtual #33                 // Method java/lang/Integer.intValue:()I
      62: invokevirtual #34                 // Method io/netty/channel/epoll/LinuxSocket.setIntOpt:(III)V
      65: iconst_1
      66: ireturn
      67: aload_1
      68: instanceof    #18                 // class io/netty/channel/unix/RawUnixChannelOption
      71: ifeq          106
      74: aload_1
      75: checkcast     #18                 // class io/netty/channel/unix/RawUnixChannelOption
      78: astore_3
      79: aload_0
      80: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
      83: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
      86: getfield      #13                 // Field io/netty/channel/epoll/AbstractEpollChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      89: aload_3
      90: invokevirtual #21                 // Method io/netty/channel/unix/RawUnixChannelOption.level:()I
      93: aload_3
      94: invokevirtual #22                 // Method io/netty/channel/unix/RawUnixChannelOption.optname:()I
      97: aload_2
      98: checkcast     #35                 // class java/nio/ByteBuffer
     101: invokevirtual #36                 // Method io/netty/channel/epoll/LinuxSocket.setRawOpt:(IILjava/nio/ByteBuffer;)V
     104: iconst_1
     105: ireturn
     106: goto          119
     109: astore_3
     110: new           #26                 // class io/netty/channel/ChannelException
     113: dup
     114: aload_3
     115: invokespecial #27                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
     118: athrow
     119: aload_0
     120: aload_1
     121: aload_2
     122: invokespecial #37                 // Method io/netty/channel/DefaultChannelConfig.setOption:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)Z
     125: ireturn
     126: iconst_1
     127: ireturn
    Exception table:
       from    to  target type
          25    66   109   Class java/io/IOException
          67   105   109   Class java/io/IOException

  public io.netty.channel.epoll.EpollChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #38                 // Method io/netty/channel/DefaultChannelConfig.setConnectTimeoutMillis:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #39                 // Method io/netty/channel/DefaultChannelConfig.setMaxMessagesPerRead:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #40                 // Method io/netty/channel/DefaultChannelConfig.setWriteSpinCount:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #41                 // Method io/netty/channel/DefaultChannelConfig.setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_1
       1: invokeinterface #42,  1           // InterfaceMethod io/netty/channel/RecvByteBufAllocator.newHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
       6: instanceof    #43                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
       9: ifne          40
      12: new           #44                 // class java/lang/IllegalArgumentException
      15: dup
      16: new           #45                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #46                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #47                 // String allocator.newHandle() must return an object of type:
      25: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: ldc           #43                 // class io/netty/channel/RecvByteBufAllocator$ExtendedHandle
      30: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      33: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      36: invokespecial #51                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      39: athrow
      40: aload_0
      41: aload_1
      42: invokespecial #52                 // Method io/netty/channel/DefaultChannelConfig.setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/ChannelConfig;
      45: pop
      46: aload_0
      47: areturn

  public io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #53                 // Method io/netty/channel/DefaultChannelConfig.setAutoRead:(Z)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #54                 // Method io/netty/channel/DefaultChannelConfig.setWriteBufferHighWaterMark:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #55                 // Method io/netty/channel/DefaultChannelConfig.setWriteBufferLowWaterMark:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #56                 // Method io/netty/channel/DefaultChannelConfig.setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #57                 // Method io/netty/channel/DefaultChannelConfig.setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollMode getEpollMode();
    Code:
       0: aload_0
       1: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
       7: getstatic     #58                 // Field io/netty/channel/epoll/Native.EPOLLET:I
      10: invokevirtual #59                 // Method io/netty/channel/epoll/AbstractEpollChannel.isFlagSet:(I)Z
      13: ifeq          22
      16: getstatic     #60                 // Field io/netty/channel/epoll/EpollMode.EDGE_TRIGGERED:Lio/netty/channel/epoll/EpollMode;
      19: goto          25
      22: getstatic     #61                 // Field io/netty/channel/epoll/EpollMode.LEVEL_TRIGGERED:Lio/netty/channel/epoll/EpollMode;
      25: areturn

  public io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode);
    Code:
       0: aload_1
       1: ldc           #62                 // String mode
       3: invokestatic  #63                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: getstatic     #64                 // Field io/netty/channel/epoll/EpollChannelConfig$1.$SwitchMap$io$netty$channel$epoll$EpollMode:[I
      10: aload_1
      11: invokevirtual #65                 // Method io/netty/channel/epoll/EpollMode.ordinal:()I
      14: iaload
      15: lookupswitch  { // 2
                     1: 40
                     2: 60
               default: 80
          }
      40: aload_0
      41: invokespecial #66                 // Method checkChannelNotRegistered:()V
      44: aload_0
      45: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
      48: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
      51: getstatic     #58                 // Field io/netty/channel/epoll/Native.EPOLLET:I
      54: invokevirtual #67                 // Method io/netty/channel/epoll/AbstractEpollChannel.setFlag:(I)V
      57: goto          88
      60: aload_0
      61: invokespecial #66                 // Method checkChannelNotRegistered:()V
      64: aload_0
      65: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
      68: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
      71: getstatic     #58                 // Field io/netty/channel/epoll/Native.EPOLLET:I
      74: invokevirtual #68                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearFlag:(I)V
      77: goto          88
      80: new           #69                 // class java/lang/Error
      83: dup
      84: invokespecial #70                 // Method java/lang/Error."<init>":()V
      87: athrow
      88: goto          101
      91: astore_2
      92: new           #26                 // class io/netty/channel/ChannelException
      95: dup
      96: aload_2
      97: invokespecial #27                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
     100: athrow
     101: aload_0
     102: areturn
    Exception table:
       from    to  target type
           7    88    91   Class java/io/IOException

  private void checkChannelNotRegistered();
    Code:
       0: aload_0
       1: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
       4: invokeinterface #71,  1           // InterfaceMethod io/netty/channel/Channel.isRegistered:()Z
       9: ifeq          22
      12: new           #72                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #73                 // String EpollMode can only be changed before channel is registered
      18: invokespecial #74                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: return

  protected final void autoReadCleared();
    Code:
       0: aload_0
       1: getfield      #11                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #12                 // class io/netty/channel/epoll/AbstractEpollChannel
       7: invokevirtual #75                 // Method io/netty/channel/epoll/AbstractEpollChannel.clearEpollIn:()V
      10: return

  final void setMaxBytesPerGatheringWrite(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #3                  // Field maxBytesPerGatheringWrite:J
       5: return

  final long getMaxBytesPerGatheringWrite();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxBytesPerGatheringWrite:J
       4: lreturn

  public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #76                 // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #77                 // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #78                 // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #79                 // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #80                 // Method setAutoRead:(Z)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #81                 // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #82                 // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #83                 // Method setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #84                 // Method setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #85                 // Method setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: areturn
}
