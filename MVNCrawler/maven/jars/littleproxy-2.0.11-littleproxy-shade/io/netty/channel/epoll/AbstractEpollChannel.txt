Compiled from "AbstractEpollChannel.java"
abstract class io.netty.channel.epoll.AbstractEpollChannel extends io.netty.channel.AbstractChannel implements io.netty.channel.unix.UnixChannel {
  private static final io.netty.channel.ChannelMetadata METADATA;

  final io.netty.channel.epoll.LinuxSocket socket;

  private io.netty.channel.ChannelPromise connectPromise;

  private io.netty.util.concurrent.Future<?> connectTimeoutFuture;

  private java.net.SocketAddress requestedRemoteAddress;

  private volatile java.net.SocketAddress local;

  private volatile java.net.SocketAddress remote;

  protected int flags;

  boolean inputClosedSeenErrorOnRead;

  boolean epollInReadyRunnablePending;

  protected volatile boolean active;

  static final boolean $assertionsDisabled;

  io.netty.channel.epoll.AbstractEpollChannel(io.netty.channel.epoll.LinuxSocket);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_1
       3: iconst_0
       4: invokespecial #7                  // Method "<init>":(Lio/netty/channel/Channel;Lio/netty/channel/epoll/LinuxSocket;Z)V
       7: return

  io.netty.channel.epoll.AbstractEpollChannel(io.netty.channel.Channel, io.netty.channel.epoll.LinuxSocket, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method io/netty/channel/AbstractChannel."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: getstatic     #9                  // Field io/netty/channel/epoll/Native.EPOLLET:I
       9: putfield      #10                 // Field flags:I
      12: aload_0
      13: aload_2
      14: ldc           #11                 // String fd
      16: invokestatic  #12                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      19: checkcast     #13                 // class io/netty/channel/epoll/LinuxSocket
      22: putfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      25: aload_0
      26: iload_3
      27: putfield      #15                 // Field active:Z
      30: iload_3
      31: ifeq          50
      34: aload_0
      35: aload_2
      36: invokevirtual #16                 // Method io/netty/channel/epoll/LinuxSocket.localAddress:()Ljava/net/InetSocketAddress;
      39: putfield      #17                 // Field local:Ljava/net/SocketAddress;
      42: aload_0
      43: aload_2
      44: invokevirtual #18                 // Method io/netty/channel/epoll/LinuxSocket.remoteAddress:()Ljava/net/InetSocketAddress;
      47: putfield      #2                  // Field remote:Ljava/net/SocketAddress;
      50: return

  io.netty.channel.epoll.AbstractEpollChannel(io.netty.channel.Channel, io.netty.channel.epoll.LinuxSocket, java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method io/netty/channel/AbstractChannel."<init>":(Lio/netty/channel/Channel;)V
       5: aload_0
       6: getstatic     #9                  // Field io/netty/channel/epoll/Native.EPOLLET:I
       9: putfield      #10                 // Field flags:I
      12: aload_0
      13: aload_2
      14: ldc           #11                 // String fd
      16: invokestatic  #12                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      19: checkcast     #13                 // class io/netty/channel/epoll/LinuxSocket
      22: putfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      25: aload_0
      26: iconst_1
      27: putfield      #15                 // Field active:Z
      30: aload_0
      31: aload_3
      32: putfield      #2                  // Field remote:Ljava/net/SocketAddress;
      35: aload_0
      36: aload_2
      37: invokevirtual #16                 // Method io/netty/channel/epoll/LinuxSocket.localAddress:()Ljava/net/InetSocketAddress;
      40: putfield      #17                 // Field local:Ljava/net/SocketAddress;
      43: return

  static boolean isSoErrorZero(io.netty.channel.unix.Socket);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method io/netty/channel/unix/Socket.getSoError:()I
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn
      13: astore_1
      14: new           #21                 // class io/netty/channel/ChannelException
      17: dup
      18: aload_1
      19: invokespecial #22                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      22: athrow
    Exception table:
       from    to  target type
           0    12    13   Class java/io/IOException

  void setFlag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #23                 // Method isFlagSet:(I)Z
       5: ifne          22
       8: aload_0
       9: dup
      10: getfield      #10                 // Field flags:I
      13: iload_1
      14: ior
      15: putfield      #10                 // Field flags:I
      18: aload_0
      19: invokespecial #24                 // Method modifyEvents:()V
      22: return

  void clearFlag(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #23                 // Method isFlagSet:(I)Z
       5: ifeq          24
       8: aload_0
       9: dup
      10: getfield      #10                 // Field flags:I
      13: iload_1
      14: iconst_m1
      15: ixor
      16: iand
      17: putfield      #10                 // Field flags:I
      20: aload_0
      21: invokespecial #24                 // Method modifyEvents:()V
      24: return

  boolean isFlagSet(int);
    Code:
       0: aload_0
       1: getfield      #10                 // Field flags:I
       4: iload_1
       5: iand
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public final io.netty.channel.unix.FileDescriptor fd();
    Code:
       0: aload_0
       1: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       4: areturn

  public abstract io.netty.channel.epoll.EpollChannelConfig config();

  public boolean isActive();
    Code:
       0: aload_0
       1: getfield      #15                 // Field active:Z
       4: ireturn

  public io.netty.channel.ChannelMetadata metadata();
    Code:
       0: getstatic     #25                 // Field METADATA:Lio/netty/channel/ChannelMetadata;
       3: areturn

  protected void doClose() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #15                 // Field active:Z
       5: aload_0
       6: iconst_1
       7: putfield      #26                 // Field inputClosedSeenErrorOnRead:Z
      10: aload_0
      11: getfield      #5                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
      14: astore_1
      15: aload_1
      16: ifnull        38
      19: aload_1
      20: new           #27                 // class java/nio/channels/ClosedChannelException
      23: dup
      24: invokespecial #28                 // Method java/nio/channels/ClosedChannelException."<init>":()V
      27: invokeinterface #29,  2           // InterfaceMethod io/netty/channel/ChannelPromise.tryFailure:(Ljava/lang/Throwable;)Z
      32: pop
      33: aload_0
      34: aconst_null
      35: putfield      #5                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
      38: aload_0
      39: getfield      #3                  // Field connectTimeoutFuture:Lio/netty/util/concurrent/Future;
      42: astore_2
      43: aload_2
      44: ifnull        60
      47: aload_2
      48: iconst_0
      49: invokeinterface #30,  2           // InterfaceMethod io/netty/util/concurrent/Future.cancel:(Z)Z
      54: pop
      55: aload_0
      56: aconst_null
      57: putfield      #3                  // Field connectTimeoutFuture:Lio/netty/util/concurrent/Future;
      60: aload_0
      61: invokevirtual #31                 // Method isRegistered:()Z
      64: ifeq          102
      67: aload_0
      68: invokevirtual #32                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      71: astore_3
      72: aload_3
      73: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      78: ifeq          88
      81: aload_0
      82: invokevirtual #34                 // Method doDeregister:()V
      85: goto          102
      88: aload_3
      89: new           #35                 // class io/netty/channel/epoll/AbstractEpollChannel$1
      92: dup
      93: aload_0
      94: invokespecial #36                 // Method io/netty/channel/epoll/AbstractEpollChannel$1."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      97: invokeinterface #37,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
     102: aload_0
     103: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     106: invokevirtual #38                 // Method io/netty/channel/epoll/LinuxSocket.close:()V
     109: goto          124
     112: astore        4
     114: aload_0
     115: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     118: invokevirtual #38                 // Method io/netty/channel/epoll/LinuxSocket.close:()V
     121: aload         4
     123: athrow
     124: return
    Exception table:
       from    to  target type
          10   102   112   any
         112   114   112   any

  void resetCachedAddresses();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       5: invokevirtual #16                 // Method io/netty/channel/epoll/LinuxSocket.localAddress:()Ljava/net/InetSocketAddress;
       8: putfield      #17                 // Field local:Ljava/net/SocketAddress;
      11: aload_0
      12: aload_0
      13: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      16: invokevirtual #18                 // Method io/netty/channel/epoll/LinuxSocket.remoteAddress:()Ljava/net/InetSocketAddress;
      19: putfield      #2                  // Field remote:Ljava/net/SocketAddress;
      22: return

  protected void doDisconnect() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method doClose:()V
       4: return

  protected boolean isCompatible(io.netty.channel.EventLoop);
    Code:
       0: aload_1
       1: instanceof    #40                 // class io/netty/channel/epoll/EpollEventLoop
       4: ireturn

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       4: invokevirtual #41                 // Method io/netty/channel/epoll/LinuxSocket.isOpen:()Z
       7: ireturn

  protected void doDeregister() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method eventLoop:()Lio/netty/channel/EventLoop;
       4: checkcast     #40                 // class io/netty/channel/epoll/EpollEventLoop
       7: aload_0
       8: invokevirtual #42                 // Method io/netty/channel/epoll/EpollEventLoop.remove:(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      11: return

  protected final void doBeginRead() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokevirtual #43                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
       4: checkcast     #44                 // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe
       7: astore_1
       8: aload_1
       9: iconst_1
      10: putfield      #45                 // Field io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.readPending:Z
      13: aload_0
      14: getstatic     #46                 // Field io/netty/channel/epoll/Native.EPOLLIN:I
      17: invokevirtual #47                 // Method setFlag:(I)V
      20: aload_1
      21: getfield      #48                 // Field io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.maybeMoreDataToRead:Z
      24: ifeq          35
      27: aload_1
      28: aload_0
      29: invokevirtual #49                 // Method config:()Lio/netty/channel/epoll/EpollChannelConfig;
      32: invokevirtual #50                 // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.executeEpollInReadyRunnable:(Lio/netty/channel/ChannelConfig;)V
      35: return

  final boolean shouldBreakEpollInReady(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       4: invokevirtual #51                 // Method io/netty/channel/epoll/LinuxSocket.isInputShutdown:()Z
       7: ifeq          28
      10: aload_0
      11: getfield      #26                 // Field inputClosedSeenErrorOnRead:Z
      14: ifne          24
      17: aload_1
      18: invokestatic  #6                  // Method isAllowHalfClosure:(Lio/netty/channel/ChannelConfig;)Z
      21: ifne          28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  private static boolean isAllowHalfClosure(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: instanceof    #52                 // class io/netty/channel/epoll/EpollDomainSocketChannelConfig
       4: ifeq          15
       7: aload_0
       8: checkcast     #52                 // class io/netty/channel/epoll/EpollDomainSocketChannelConfig
      11: invokevirtual #53                 // Method io/netty/channel/epoll/EpollDomainSocketChannelConfig.isAllowHalfClosure:()Z
      14: ireturn
      15: aload_0
      16: instanceof    #54                 // class io/netty/channel/socket/SocketChannelConfig
      19: ifeq          38
      22: aload_0
      23: checkcast     #54                 // class io/netty/channel/socket/SocketChannelConfig
      26: invokeinterface #55,  1           // InterfaceMethod io/netty/channel/socket/SocketChannelConfig.isAllowHalfClosure:()Z
      31: ifeq          38
      34: iconst_1
      35: goto          39
      38: iconst_0
      39: ireturn

  final void clearEpollIn();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method isRegistered:()Z
       4: ifeq          54
       7: aload_0
       8: invokevirtual #32                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      11: astore_1
      12: aload_0
      13: invokevirtual #43                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
      16: checkcast     #44                 // class io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe
      19: astore_2
      20: aload_1
      21: invokeinterface #33,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      26: ifeq          36
      29: aload_2
      30: invokevirtual #56                 // Method io/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe.clearEpollIn0:()V
      33: goto          51
      36: aload_1
      37: new           #57                 // class io/netty/channel/epoll/AbstractEpollChannel$2
      40: dup
      41: aload_0
      42: aload_2
      43: invokespecial #58                 // Method io/netty/channel/epoll/AbstractEpollChannel$2."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel;Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;)V
      46: invokeinterface #37,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      51: goto          68
      54: aload_0
      55: dup
      56: getfield      #10                 // Field flags:I
      59: getstatic     #46                 // Field io/netty/channel/epoll/Native.EPOLLIN:I
      62: iconst_m1
      63: ixor
      64: iand
      65: putfield      #10                 // Field flags:I
      68: return

  private void modifyEvents() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method isOpen:()Z
       4: ifeq          25
       7: aload_0
       8: invokevirtual #31                 // Method isRegistered:()Z
      11: ifeq          25
      14: aload_0
      15: invokevirtual #32                 // Method eventLoop:()Lio/netty/channel/EventLoop;
      18: checkcast     #40                 // class io/netty/channel/epoll/EpollEventLoop
      21: aload_0
      22: invokevirtual #60                 // Method io/netty/channel/epoll/EpollEventLoop.modify:(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      25: return

  protected void doRegister() throws java.lang.Exception;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #61                 // Field epollInReadyRunnablePending:Z
       5: aload_0
       6: invokevirtual #32                 // Method eventLoop:()Lio/netty/channel/EventLoop;
       9: checkcast     #40                 // class io/netty/channel/epoll/EpollEventLoop
      12: aload_0
      13: invokevirtual #62                 // Method io/netty/channel/epoll/EpollEventLoop.add:(Lio/netty/channel/epoll/AbstractEpollChannel;)V
      16: return

  protected abstract io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe newUnsafe();

  protected final io.netty.buffer.ByteBuf newDirectBuffer(io.netty.buffer.ByteBuf);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokevirtual #63                 // Method newDirectBuffer:(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;)Lio/netty/buffer/ByteBuf;
       6: areturn

  protected final io.netty.buffer.ByteBuf newDirectBuffer(java.lang.Object, io.netty.buffer.ByteBuf);
    Code:
       0: aload_2
       1: invokevirtual #64                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
       4: istore_3
       5: iload_3
       6: ifne          18
       9: aload_1
      10: invokestatic  #65                 // Method io/netty/util/ReferenceCountUtil.release:(Ljava/lang/Object;)Z
      13: pop
      14: getstatic     #66                 // Field io/netty/buffer/Unpooled.EMPTY_BUFFER:Lio/netty/buffer/ByteBuf;
      17: areturn
      18: aload_0
      19: invokevirtual #67                 // Method alloc:()Lio/netty/buffer/ByteBufAllocator;
      22: astore        4
      24: aload         4
      26: invokeinterface #68,  1           // InterfaceMethod io/netty/buffer/ByteBufAllocator.isDirectBufferPooled:()Z
      31: ifeq          43
      34: aload_1
      35: aload_2
      36: aload         4
      38: iload_3
      39: invokestatic  #69                 // Method newDirectBuffer0:(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBufAllocator;I)Lio/netty/buffer/ByteBuf;
      42: areturn
      43: invokestatic  #70                 // Method io/netty/buffer/ByteBufUtil.threadLocalDirectBuffer:()Lio/netty/buffer/ByteBuf;
      46: astore        5
      48: aload         5
      50: ifnonnull     62
      53: aload_1
      54: aload_2
      55: aload         4
      57: iload_3
      58: invokestatic  #69                 // Method newDirectBuffer0:(Ljava/lang/Object;Lio/netty/buffer/ByteBuf;Lio/netty/buffer/ByteBufAllocator;I)Lio/netty/buffer/ByteBuf;
      61: areturn
      62: aload         5
      64: aload_2
      65: aload_2
      66: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      69: iload_3
      70: invokevirtual #72                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      73: pop
      74: aload_1
      75: invokestatic  #73                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      78: aload         5
      80: areturn

  private static io.netty.buffer.ByteBuf newDirectBuffer0(java.lang.Object, io.netty.buffer.ByteBuf, io.netty.buffer.ByteBufAllocator, int);
    Code:
       0: aload_2
       1: iload_3
       2: invokeinterface #74,  2           // InterfaceMethod io/netty/buffer/ByteBufAllocator.directBuffer:(I)Lio/netty/buffer/ByteBuf;
       7: astore        4
       9: aload         4
      11: aload_1
      12: aload_1
      13: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      16: iload_3
      17: invokevirtual #72                 // Method io/netty/buffer/ByteBuf.writeBytes:(Lio/netty/buffer/ByteBuf;II)Lio/netty/buffer/ByteBuf;
      20: pop
      21: aload_0
      22: invokestatic  #73                 // Method io/netty/util/ReferenceCountUtil.safeRelease:(Ljava/lang/Object;)V
      25: aload         4
      27: areturn

  protected static void checkResolvable(java.net.InetSocketAddress);
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method java/net/InetSocketAddress.isUnresolved:()Z
       4: ifeq          15
       7: new           #76                 // class java/nio/channels/UnresolvedAddressException
      10: dup
      11: invokespecial #77                 // Method java/nio/channels/UnresolvedAddressException."<init>":()V
      14: athrow
      15: return

  protected final int doReadBytes(io.netty.buffer.ByteBuf) throws java.lang.Exception;
    Code:
       0: aload_1
       1: invokevirtual #78                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #43                 // Method unsafe:()Lio/netty/channel/Channel$Unsafe;
       9: invokeinterface #79,  1           // InterfaceMethod io/netty/channel/Channel$Unsafe.recvBufAllocHandle:()Lio/netty/channel/RecvByteBufAllocator$Handle;
      14: aload_1
      15: invokevirtual #80                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      18: invokeinterface #81,  2           // InterfaceMethod io/netty/channel/RecvByteBufAllocator$Handle.attemptedBytesRead:(I)V
      23: aload_1
      24: invokevirtual #82                 // Method io/netty/buffer/ByteBuf.hasMemoryAddress:()Z
      27: ifeq          50
      30: aload_0
      31: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      34: aload_1
      35: invokevirtual #83                 // Method io/netty/buffer/ByteBuf.memoryAddress:()J
      38: iload_2
      39: aload_1
      40: invokevirtual #84                 // Method io/netty/buffer/ByteBuf.capacity:()I
      43: invokevirtual #85                 // Method io/netty/channel/epoll/LinuxSocket.readAddress:(JII)I
      46: istore_3
      47: goto          81
      50: aload_1
      51: iload_2
      52: aload_1
      53: invokevirtual #80                 // Method io/netty/buffer/ByteBuf.writableBytes:()I
      56: invokevirtual #86                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
      59: astore        4
      61: aload_0
      62: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      65: aload         4
      67: aload         4
      69: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I
      72: aload         4
      74: invokevirtual #88                 // Method java/nio/ByteBuffer.limit:()I
      77: invokevirtual #89                 // Method io/netty/channel/epoll/LinuxSocket.read:(Ljava/nio/ByteBuffer;II)I
      80: istore_3
      81: iload_3
      82: ifle          93
      85: aload_1
      86: iload_2
      87: iload_3
      88: iadd
      89: invokevirtual #90                 // Method io/netty/buffer/ByteBuf.writerIndex:(I)Lio/netty/buffer/ByteBuf;
      92: pop
      93: iload_3
      94: ireturn

  protected final int doWriteBytes(io.netty.channel.ChannelOutboundBuffer, io.netty.buffer.ByteBuf) throws java.lang.Exception;
    Code:
       0: aload_2
       1: invokevirtual #82                 // Method io/netty/buffer/ByteBuf.hasMemoryAddress:()Z
       4: ifeq          42
       7: aload_0
       8: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      11: aload_2
      12: invokevirtual #83                 // Method io/netty/buffer/ByteBuf.memoryAddress:()J
      15: aload_2
      16: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      19: aload_2
      20: invokevirtual #78                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
      23: invokevirtual #91                 // Method io/netty/channel/epoll/LinuxSocket.writeAddress:(JII)I
      26: istore_3
      27: iload_3
      28: ifle          39
      31: aload_1
      32: iload_3
      33: i2l
      34: invokevirtual #92                 // Method io/netty/channel/ChannelOutboundBuffer.removeBytes:(J)V
      37: iconst_1
      38: ireturn
      39: goto          114
      42: aload_2
      43: invokevirtual #93                 // Method io/netty/buffer/ByteBuf.nioBufferCount:()I
      46: iconst_1
      47: if_icmpne     65
      50: aload_2
      51: aload_2
      52: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      55: aload_2
      56: invokevirtual #64                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
      59: invokevirtual #86                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
      62: goto          69
      65: aload_2
      66: invokevirtual #94                 // Method io/netty/buffer/ByteBuf.nioBuffer:()Ljava/nio/ByteBuffer;
      69: astore_3
      70: aload_0
      71: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      74: aload_3
      75: aload_3
      76: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I
      79: aload_3
      80: invokevirtual #88                 // Method java/nio/ByteBuffer.limit:()I
      83: invokevirtual #95                 // Method io/netty/channel/epoll/LinuxSocket.write:(Ljava/nio/ByteBuffer;II)I
      86: istore        4
      88: iload         4
      90: ifle          114
      93: aload_3
      94: aload_3
      95: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I
      98: iload         4
     100: iadd
     101: invokevirtual #96                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     104: pop
     105: aload_1
     106: iload         4
     108: i2l
     109: invokevirtual #92                 // Method io/netty/channel/ChannelOutboundBuffer.removeBytes:(J)V
     112: iconst_1
     113: ireturn
     114: ldc           #97                 // int 2147483647
     116: ireturn

  final long doWriteOrSendBytes(io.netty.buffer.ByteBuf, java.net.InetSocketAddress, boolean) throws java.io.IOException;
    Code:
       0: getstatic     #98                 // Field $assertionsDisabled:Z
       3: ifne          24
       6: iload_3
       7: ifeq          24
      10: aload_2
      11: ifnonnull     24
      14: new           #99                 // class java/lang/AssertionError
      17: dup
      18: ldc           #100                // String fastOpen requires a remote address
      20: invokespecial #101                // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      23: athrow
      24: aload_1
      25: invokevirtual #82                 // Method io/netty/buffer/ByteBuf.hasMemoryAddress:()Z
      28: ifeq          88
      31: aload_1
      32: invokevirtual #83                 // Method io/netty/buffer/ByteBuf.memoryAddress:()J
      35: lstore        4
      37: aload_2
      38: ifnonnull     60
      41: aload_0
      42: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      45: lload         4
      47: aload_1
      48: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      51: aload_1
      52: invokevirtual #78                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
      55: invokevirtual #91                 // Method io/netty/channel/epoll/LinuxSocket.writeAddress:(JII)I
      58: i2l
      59: lreturn
      60: aload_0
      61: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      64: lload         4
      66: aload_1
      67: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
      70: aload_1
      71: invokevirtual #78                 // Method io/netty/buffer/ByteBuf.writerIndex:()I
      74: aload_2
      75: invokevirtual #102                // Method java/net/InetSocketAddress.getAddress:()Ljava/net/InetAddress;
      78: aload_2
      79: invokevirtual #103                // Method java/net/InetSocketAddress.getPort:()I
      82: iload_3
      83: invokevirtual #104                // Method io/netty/channel/epoll/LinuxSocket.sendToAddress:(JIILjava/net/InetAddress;IZ)I
      86: i2l
      87: lreturn
      88: aload_1
      89: invokevirtual #93                 // Method io/netty/buffer/ByteBuf.nioBufferCount:()I
      92: iconst_1
      93: if_icmple     195
      96: aload_0
      97: invokevirtual #32                 // Method eventLoop:()Lio/netty/channel/EventLoop;
     100: checkcast     #40                 // class io/netty/channel/epoll/EpollEventLoop
     103: invokevirtual #105                // Method io/netty/channel/epoll/EpollEventLoop.cleanIovArray:()Lio/netty/channel/unix/IovArray;
     106: astore        4
     108: aload         4
     110: aload_1
     111: aload_1
     112: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
     115: aload_1
     116: invokevirtual #64                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
     119: invokevirtual #106                // Method io/netty/channel/unix/IovArray.add:(Lio/netty/buffer/ByteBuf;II)Z
     122: pop
     123: aload         4
     125: invokevirtual #107                // Method io/netty/channel/unix/IovArray.count:()I
     128: istore        5
     130: getstatic     #98                 // Field $assertionsDisabled:Z
     133: ifne          149
     136: iload         5
     138: ifne          149
     141: new           #99                 // class java/lang/AssertionError
     144: dup
     145: invokespecial #108                // Method java/lang/AssertionError."<init>":()V
     148: athrow
     149: aload_2
     150: ifnonnull     169
     153: aload_0
     154: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     157: aload         4
     159: iconst_0
     160: invokevirtual #109                // Method io/netty/channel/unix/IovArray.memoryAddress:(I)J
     163: iload         5
     165: invokevirtual #110                // Method io/netty/channel/epoll/LinuxSocket.writevAddresses:(JI)J
     168: lreturn
     169: aload_0
     170: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     173: aload         4
     175: iconst_0
     176: invokevirtual #109                // Method io/netty/channel/unix/IovArray.memoryAddress:(I)J
     179: iload         5
     181: aload_2
     182: invokevirtual #102                // Method java/net/InetSocketAddress.getAddress:()Ljava/net/InetAddress;
     185: aload_2
     186: invokevirtual #103                // Method java/net/InetSocketAddress.getPort:()I
     189: iload_3
     190: invokevirtual #111                // Method io/netty/channel/epoll/LinuxSocket.sendToAddresses:(JILjava/net/InetAddress;IZ)I
     193: i2l
     194: lreturn
     195: aload_1
     196: aload_1
     197: invokevirtual #71                 // Method io/netty/buffer/ByteBuf.readerIndex:()I
     200: aload_1
     201: invokevirtual #64                 // Method io/netty/buffer/ByteBuf.readableBytes:()I
     204: invokevirtual #86                 // Method io/netty/buffer/ByteBuf.internalNioBuffer:(II)Ljava/nio/ByteBuffer;
     207: astore        4
     209: aload_2
     210: ifnonnull     234
     213: aload_0
     214: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     217: aload         4
     219: aload         4
     221: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I
     224: aload         4
     226: invokevirtual #88                 // Method java/nio/ByteBuffer.limit:()I
     229: invokevirtual #95                 // Method io/netty/channel/epoll/LinuxSocket.write:(Ljava/nio/ByteBuffer;II)I
     232: i2l
     233: lreturn
     234: aload_0
     235: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     238: aload         4
     240: aload         4
     242: invokevirtual #87                 // Method java/nio/ByteBuffer.position:()I
     245: aload         4
     247: invokevirtual #88                 // Method java/nio/ByteBuffer.limit:()I
     250: aload_2
     251: invokevirtual #102                // Method java/net/InetSocketAddress.getAddress:()Ljava/net/InetAddress;
     254: aload_2
     255: invokevirtual #103                // Method java/net/InetSocketAddress.getPort:()I
     258: iload_3
     259: invokevirtual #112                // Method io/netty/channel/epoll/LinuxSocket.sendTo:(Ljava/nio/ByteBuffer;IILjava/net/InetAddress;IZ)I
     262: i2l
     263: lreturn

  protected void doBind(java.net.SocketAddress) throws java.lang.Exception;
    Code:
       0: aload_1
       1: instanceof    #113                // class java/net/InetSocketAddress
       4: ifeq          14
       7: aload_1
       8: checkcast     #113                // class java/net/InetSocketAddress
      11: invokestatic  #114                // Method checkResolvable:(Ljava/net/InetSocketAddress;)V
      14: aload_0
      15: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      18: aload_1
      19: invokevirtual #115                // Method io/netty/channel/epoll/LinuxSocket.bind:(Ljava/net/SocketAddress;)V
      22: aload_0
      23: aload_0
      24: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      27: invokevirtual #16                 // Method io/netty/channel/epoll/LinuxSocket.localAddress:()Ljava/net/InetSocketAddress;
      30: putfield      #17                 // Field local:Ljava/net/SocketAddress;
      33: return

  protected boolean doConnect(java.net.SocketAddress, java.net.SocketAddress) throws java.lang.Exception;
    Code:
       0: aload_2
       1: instanceof    #113                // class java/net/InetSocketAddress
       4: ifeq          14
       7: aload_2
       8: checkcast     #113                // class java/net/InetSocketAddress
      11: invokestatic  #114                // Method checkResolvable:(Ljava/net/InetSocketAddress;)V
      14: aload_1
      15: instanceof    #113                // class java/net/InetSocketAddress
      18: ifeq          28
      21: aload_1
      22: checkcast     #113                // class java/net/InetSocketAddress
      25: goto          29
      28: aconst_null
      29: astore_3
      30: aload_3
      31: ifnull        38
      34: aload_3
      35: invokestatic  #114                // Method checkResolvable:(Ljava/net/InetSocketAddress;)V
      38: aload_0
      39: getfield      #2                  // Field remote:Ljava/net/SocketAddress;
      42: ifnull        53
      45: new           #116                // class java/nio/channels/AlreadyConnectedException
      48: dup
      49: invokespecial #117                // Method java/nio/channels/AlreadyConnectedException."<init>":()V
      52: athrow
      53: aload_2
      54: ifnull        65
      57: aload_0
      58: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      61: aload_2
      62: invokevirtual #115                // Method io/netty/channel/epoll/LinuxSocket.bind:(Ljava/net/SocketAddress;)V
      65: aload_0
      66: aload_1
      67: invokevirtual #118                // Method doConnect0:(Ljava/net/SocketAddress;)Z
      70: istore        4
      72: iload         4
      74: ifeq          100
      77: aload_0
      78: aload_3
      79: ifnonnull     86
      82: aload_1
      83: goto          97
      86: aload_3
      87: aload_0
      88: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
      91: invokevirtual #18                 // Method io/netty/channel/epoll/LinuxSocket.remoteAddress:()Ljava/net/InetSocketAddress;
      94: invokestatic  #119                // Method io/netty/channel/unix/UnixChannelUtil.computeRemoteAddr:(Ljava/net/InetSocketAddress;Ljava/net/InetSocketAddress;)Ljava/net/InetSocketAddress;
      97: putfield      #2                  // Field remote:Ljava/net/SocketAddress;
     100: aload_0
     101: aload_0
     102: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
     105: invokevirtual #16                 // Method io/netty/channel/epoll/LinuxSocket.localAddress:()Ljava/net/InetSocketAddress;
     108: putfield      #17                 // Field local:Ljava/net/SocketAddress;
     111: iload         4
     113: ireturn

  boolean doConnect0(java.net.SocketAddress) throws java.lang.Exception;
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #14                 // Field socket:Lio/netty/channel/epoll/LinuxSocket;
       6: aload_1
       7: invokevirtual #120                // Method io/netty/channel/epoll/LinuxSocket.connect:(Ljava/net/SocketAddress;)Z
      10: istore_3
      11: iload_3
      12: ifne          22
      15: aload_0
      16: getstatic     #121                // Field io/netty/channel/epoll/Native.EPOLLOUT:I
      19: invokevirtual #47                 // Method setFlag:(I)V
      22: iconst_1
      23: istore_2
      24: iload_3
      25: istore        4
      27: iload_2
      28: ifne          35
      31: aload_0
      32: invokevirtual #39                 // Method doClose:()V
      35: iload         4
      37: ireturn
      38: astore        5
      40: iload_2
      41: ifne          48
      44: aload_0
      45: invokevirtual #39                 // Method doClose:()V
      48: aload         5
      50: athrow
    Exception table:
       from    to  target type
           2    27    38   any
          38    40    38   any

  protected java.net.SocketAddress localAddress0();
    Code:
       0: aload_0
       1: getfield      #17                 // Field local:Ljava/net/SocketAddress;
       4: areturn

  protected java.net.SocketAddress remoteAddress0();
    Code:
       0: aload_0
       1: getfield      #2                  // Field remote:Ljava/net/SocketAddress;
       4: areturn

  protected io.netty.channel.AbstractChannel$AbstractUnsafe newUnsafe();
    Code:
       0: aload_0
       1: invokevirtual #122                // Method newUnsafe:()Lio/netty/channel/epoll/AbstractEpollChannel$AbstractEpollUnsafe;
       4: areturn

  public io.netty.channel.ChannelConfig config();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method config:()Lio/netty/channel/epoll/EpollChannelConfig;
       4: areturn

  static boolean access$000(io.netty.channel.ChannelConfig);
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method isAllowHalfClosure:(Lio/netty/channel/ChannelConfig;)Z
       4: ireturn

  static io.netty.channel.ChannelPromise access$100(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: getfield      #5                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       4: areturn

  static io.netty.channel.ChannelPromise access$102(io.netty.channel.epoll.AbstractEpollChannel, io.netty.channel.ChannelPromise);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #5                  // Field connectPromise:Lio/netty/channel/ChannelPromise;
       6: areturn

  static java.net.SocketAddress access$202(io.netty.channel.epoll.AbstractEpollChannel, java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #4                  // Field requestedRemoteAddress:Ljava/net/SocketAddress;
       6: areturn

  static io.netty.util.concurrent.Future access$302(io.netty.channel.epoll.AbstractEpollChannel, io.netty.util.concurrent.Future);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #3                  // Field connectTimeoutFuture:Lio/netty/util/concurrent/Future;
       6: areturn

  static io.netty.util.concurrent.Future access$300(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: getfield      #3                  // Field connectTimeoutFuture:Lio/netty/util/concurrent/Future;
       4: areturn

  static java.net.SocketAddress access$200(io.netty.channel.epoll.AbstractEpollChannel);
    Code:
       0: aload_0
       1: getfield      #4                  // Field requestedRemoteAddress:Ljava/net/SocketAddress;
       4: areturn

  static java.net.SocketAddress access$402(io.netty.channel.epoll.AbstractEpollChannel, java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #2                  // Field remote:Ljava/net/SocketAddress;
       6: areturn

  static {};
    Code:
       0: ldc           #123                // class io/netty/channel/epoll/AbstractEpollChannel
       2: invokevirtual #124                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #98                 // Field $assertionsDisabled:Z
      16: new           #125                // class io/netty/channel/ChannelMetadata
      19: dup
      20: iconst_0
      21: invokespecial #126                // Method io/netty/channel/ChannelMetadata."<init>":(Z)V
      24: putstatic     #25                 // Field METADATA:Lio/netty/channel/ChannelMetadata;
      27: return
}
