Compiled from "EpollDatagramChannelConfig.java"
public final class io.netty.channel.epoll.EpollDatagramChannelConfig extends io.netty.channel.epoll.EpollChannelConfig implements io.netty.channel.socket.DatagramChannelConfig {
  private static final io.netty.channel.RecvByteBufAllocator DEFAULT_RCVBUF_ALLOCATOR;

  private boolean activeOnOpen;

  private volatile int maxDatagramSize;

  private volatile boolean gro;

  io.netty.channel.epoll.EpollDatagramChannelConfig(io.netty.channel.epoll.EpollDatagramChannel);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method io/netty/channel/epoll/EpollChannelConfig."<init>":(Lio/netty/channel/epoll/AbstractEpollChannel;)V
       5: aload_0
       6: getstatic     #2                  // Field DEFAULT_RCVBUF_ALLOCATOR:Lio/netty/channel/RecvByteBufAllocator;
       9: invokevirtual #3                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
      12: pop
      13: return

  public java.util.Map<io.netty.channel.ChannelOption<?>, java.lang.Object> getOptions();
    Code:
       0: aload_0
       1: aload_0
       2: invokespecial #4                  // Method io/netty/channel/epoll/EpollChannelConfig.getOptions:()Ljava/util/Map;
       5: bipush        16
       7: anewarray     #5                  // class io/netty/channel/ChannelOption
      10: dup
      11: iconst_0
      12: getstatic     #6                  // Field io/netty/channel/ChannelOption.SO_BROADCAST:Lio/netty/channel/ChannelOption;
      15: aastore
      16: dup
      17: iconst_1
      18: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      21: aastore
      22: dup
      23: iconst_2
      24: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_SNDBUF:Lio/netty/channel/ChannelOption;
      27: aastore
      28: dup
      29: iconst_3
      30: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      33: aastore
      34: dup
      35: iconst_4
      36: getstatic     #10                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_LOOP_DISABLED:Lio/netty/channel/ChannelOption;
      39: aastore
      40: dup
      41: iconst_5
      42: getstatic     #11                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_ADDR:Lio/netty/channel/ChannelOption;
      45: aastore
      46: dup
      47: bipush        6
      49: getstatic     #12                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_IF:Lio/netty/channel/ChannelOption;
      52: aastore
      53: dup
      54: bipush        7
      56: getstatic     #13                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_TTL:Lio/netty/channel/ChannelOption;
      59: aastore
      60: dup
      61: bipush        8
      63: getstatic     #14                 // Field io/netty/channel/ChannelOption.IP_TOS:Lio/netty/channel/ChannelOption;
      66: aastore
      67: dup
      68: bipush        9
      70: getstatic     #15                 // Field io/netty/channel/ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:Lio/netty/channel/ChannelOption;
      73: aastore
      74: dup
      75: bipush        10
      77: getstatic     #16                 // Field io/netty/channel/epoll/EpollChannelOption.SO_REUSEPORT:Lio/netty/channel/ChannelOption;
      80: aastore
      81: dup
      82: bipush        11
      84: getstatic     #17                 // Field io/netty/channel/epoll/EpollChannelOption.IP_FREEBIND:Lio/netty/channel/ChannelOption;
      87: aastore
      88: dup
      89: bipush        12
      91: getstatic     #18                 // Field io/netty/channel/epoll/EpollChannelOption.IP_TRANSPARENT:Lio/netty/channel/ChannelOption;
      94: aastore
      95: dup
      96: bipush        13
      98: getstatic     #19                 // Field io/netty/channel/epoll/EpollChannelOption.IP_RECVORIGDSTADDR:Lio/netty/channel/ChannelOption;
     101: aastore
     102: dup
     103: bipush        14
     105: getstatic     #20                 // Field io/netty/channel/epoll/EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE:Lio/netty/channel/ChannelOption;
     108: aastore
     109: dup
     110: bipush        15
     112: getstatic     #21                 // Field io/netty/channel/epoll/EpollChannelOption.UDP_GRO:Lio/netty/channel/ChannelOption;
     115: aastore
     116: invokevirtual #22                 // Method getOptions:(Ljava/util/Map;[Lio/netty/channel/ChannelOption;)Ljava/util/Map;
     119: areturn

  public <T> T getOption(io.netty.channel.ChannelOption<T>);
    Code:
       0: aload_1
       1: getstatic     #6                  // Field io/netty/channel/ChannelOption.SO_BROADCAST:Lio/netty/channel/ChannelOption;
       4: if_acmpne     15
       7: aload_0
       8: invokevirtual #23                 // Method isBroadcast:()Z
      11: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      14: areturn
      15: aload_1
      16: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      19: if_acmpne     30
      22: aload_0
      23: invokevirtual #25                 // Method getReceiveBufferSize:()I
      26: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      29: areturn
      30: aload_1
      31: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_SNDBUF:Lio/netty/channel/ChannelOption;
      34: if_acmpne     45
      37: aload_0
      38: invokevirtual #27                 // Method getSendBufferSize:()I
      41: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      44: areturn
      45: aload_1
      46: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      49: if_acmpne     60
      52: aload_0
      53: invokevirtual #28                 // Method isReuseAddress:()Z
      56: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      59: areturn
      60: aload_1
      61: getstatic     #10                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_LOOP_DISABLED:Lio/netty/channel/ChannelOption;
      64: if_acmpne     75
      67: aload_0
      68: invokevirtual #29                 // Method isLoopbackModeDisabled:()Z
      71: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      74: areturn
      75: aload_1
      76: getstatic     #11                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_ADDR:Lio/netty/channel/ChannelOption;
      79: if_acmpne     87
      82: aload_0
      83: invokevirtual #30                 // Method getInterface:()Ljava/net/InetAddress;
      86: areturn
      87: aload_1
      88: getstatic     #12                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_IF:Lio/netty/channel/ChannelOption;
      91: if_acmpne     99
      94: aload_0
      95: invokevirtual #31                 // Method getNetworkInterface:()Ljava/net/NetworkInterface;
      98: areturn
      99: aload_1
     100: getstatic     #13                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_TTL:Lio/netty/channel/ChannelOption;
     103: if_acmpne     114
     106: aload_0
     107: invokevirtual #32                 // Method getTimeToLive:()I
     110: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     113: areturn
     114: aload_1
     115: getstatic     #14                 // Field io/netty/channel/ChannelOption.IP_TOS:Lio/netty/channel/ChannelOption;
     118: if_acmpne     129
     121: aload_0
     122: invokevirtual #33                 // Method getTrafficClass:()I
     125: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     128: areturn
     129: aload_1
     130: getstatic     #15                 // Field io/netty/channel/ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:Lio/netty/channel/ChannelOption;
     133: if_acmpne     144
     136: aload_0
     137: getfield      #34                 // Field activeOnOpen:Z
     140: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     143: areturn
     144: aload_1
     145: getstatic     #16                 // Field io/netty/channel/epoll/EpollChannelOption.SO_REUSEPORT:Lio/netty/channel/ChannelOption;
     148: if_acmpne     159
     151: aload_0
     152: invokevirtual #35                 // Method isReusePort:()Z
     155: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     158: areturn
     159: aload_1
     160: getstatic     #18                 // Field io/netty/channel/epoll/EpollChannelOption.IP_TRANSPARENT:Lio/netty/channel/ChannelOption;
     163: if_acmpne     174
     166: aload_0
     167: invokevirtual #36                 // Method isIpTransparent:()Z
     170: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     173: areturn
     174: aload_1
     175: getstatic     #17                 // Field io/netty/channel/epoll/EpollChannelOption.IP_FREEBIND:Lio/netty/channel/ChannelOption;
     178: if_acmpne     189
     181: aload_0
     182: invokevirtual #37                 // Method isFreeBind:()Z
     185: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     188: areturn
     189: aload_1
     190: getstatic     #19                 // Field io/netty/channel/epoll/EpollChannelOption.IP_RECVORIGDSTADDR:Lio/netty/channel/ChannelOption;
     193: if_acmpne     204
     196: aload_0
     197: invokevirtual #38                 // Method isIpRecvOrigDestAddr:()Z
     200: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     203: areturn
     204: aload_1
     205: getstatic     #20                 // Field io/netty/channel/epoll/EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE:Lio/netty/channel/ChannelOption;
     208: if_acmpne     219
     211: aload_0
     212: invokevirtual #39                 // Method getMaxDatagramPayloadSize:()I
     215: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     218: areturn
     219: aload_1
     220: getstatic     #21                 // Field io/netty/channel/epoll/EpollChannelOption.UDP_GRO:Lio/netty/channel/ChannelOption;
     223: if_acmpne     234
     226: aload_0
     227: invokevirtual #40                 // Method isUdpGro:()Z
     230: invokestatic  #24                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
     233: areturn
     234: aload_0
     235: aload_1
     236: invokespecial #41                 // Method io/netty/channel/epoll/EpollChannelConfig.getOption:(Lio/netty/channel/ChannelOption;)Ljava/lang/Object;
     239: areturn

  public <T> boolean setOption(io.netty.channel.ChannelOption<T>, T);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #42                 // Method validate:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)V
       6: aload_1
       7: getstatic     #6                  // Field io/netty/channel/ChannelOption.SO_BROADCAST:Lio/netty/channel/ChannelOption;
      10: if_acmpne     28
      13: aload_0
      14: aload_2
      15: checkcast     #43                 // class java/lang/Boolean
      18: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
      21: invokevirtual #45                 // Method setBroadcast:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
      24: pop
      25: goto          358
      28: aload_1
      29: getstatic     #7                  // Field io/netty/channel/ChannelOption.SO_RCVBUF:Lio/netty/channel/ChannelOption;
      32: if_acmpne     50
      35: aload_0
      36: aload_2
      37: checkcast     #46                 // class java/lang/Integer
      40: invokevirtual #47                 // Method java/lang/Integer.intValue:()I
      43: invokevirtual #48                 // Method setReceiveBufferSize:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
      46: pop
      47: goto          358
      50: aload_1
      51: getstatic     #8                  // Field io/netty/channel/ChannelOption.SO_SNDBUF:Lio/netty/channel/ChannelOption;
      54: if_acmpne     72
      57: aload_0
      58: aload_2
      59: checkcast     #46                 // class java/lang/Integer
      62: invokevirtual #47                 // Method java/lang/Integer.intValue:()I
      65: invokevirtual #49                 // Method setSendBufferSize:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
      68: pop
      69: goto          358
      72: aload_1
      73: getstatic     #9                  // Field io/netty/channel/ChannelOption.SO_REUSEADDR:Lio/netty/channel/ChannelOption;
      76: if_acmpne     94
      79: aload_0
      80: aload_2
      81: checkcast     #43                 // class java/lang/Boolean
      84: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
      87: invokevirtual #50                 // Method setReuseAddress:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
      90: pop
      91: goto          358
      94: aload_1
      95: getstatic     #10                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_LOOP_DISABLED:Lio/netty/channel/ChannelOption;
      98: if_acmpne     116
     101: aload_0
     102: aload_2
     103: checkcast     #43                 // class java/lang/Boolean
     106: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     109: invokevirtual #51                 // Method setLoopbackModeDisabled:(Z)Lio/netty/channel/socket/DatagramChannelConfig;
     112: pop
     113: goto          358
     116: aload_1
     117: getstatic     #11                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_ADDR:Lio/netty/channel/ChannelOption;
     120: if_acmpne     135
     123: aload_0
     124: aload_2
     125: checkcast     #52                 // class java/net/InetAddress
     128: invokevirtual #53                 // Method setInterface:(Ljava/net/InetAddress;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     131: pop
     132: goto          358
     135: aload_1
     136: getstatic     #12                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_IF:Lio/netty/channel/ChannelOption;
     139: if_acmpne     154
     142: aload_0
     143: aload_2
     144: checkcast     #54                 // class java/net/NetworkInterface
     147: invokevirtual #55                 // Method setNetworkInterface:(Ljava/net/NetworkInterface;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     150: pop
     151: goto          358
     154: aload_1
     155: getstatic     #13                 // Field io/netty/channel/ChannelOption.IP_MULTICAST_TTL:Lio/netty/channel/ChannelOption;
     158: if_acmpne     176
     161: aload_0
     162: aload_2
     163: checkcast     #46                 // class java/lang/Integer
     166: invokevirtual #47                 // Method java/lang/Integer.intValue:()I
     169: invokevirtual #56                 // Method setTimeToLive:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     172: pop
     173: goto          358
     176: aload_1
     177: getstatic     #14                 // Field io/netty/channel/ChannelOption.IP_TOS:Lio/netty/channel/ChannelOption;
     180: if_acmpne     198
     183: aload_0
     184: aload_2
     185: checkcast     #46                 // class java/lang/Integer
     188: invokevirtual #47                 // Method java/lang/Integer.intValue:()I
     191: invokevirtual #57                 // Method setTrafficClass:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     194: pop
     195: goto          358
     198: aload_1
     199: getstatic     #15                 // Field io/netty/channel/ChannelOption.DATAGRAM_CHANNEL_ACTIVE_ON_REGISTRATION:Lio/netty/channel/ChannelOption;
     202: if_acmpne     219
     205: aload_0
     206: aload_2
     207: checkcast     #43                 // class java/lang/Boolean
     210: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     213: invokespecial #58                 // Method setActiveOnOpen:(Z)V
     216: goto          358
     219: aload_1
     220: getstatic     #16                 // Field io/netty/channel/epoll/EpollChannelOption.SO_REUSEPORT:Lio/netty/channel/ChannelOption;
     223: if_acmpne     241
     226: aload_0
     227: aload_2
     228: checkcast     #43                 // class java/lang/Boolean
     231: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     234: invokevirtual #59                 // Method setReusePort:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     237: pop
     238: goto          358
     241: aload_1
     242: getstatic     #17                 // Field io/netty/channel/epoll/EpollChannelOption.IP_FREEBIND:Lio/netty/channel/ChannelOption;
     245: if_acmpne     263
     248: aload_0
     249: aload_2
     250: checkcast     #43                 // class java/lang/Boolean
     253: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     256: invokevirtual #60                 // Method setFreeBind:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     259: pop
     260: goto          358
     263: aload_1
     264: getstatic     #18                 // Field io/netty/channel/epoll/EpollChannelOption.IP_TRANSPARENT:Lio/netty/channel/ChannelOption;
     267: if_acmpne     285
     270: aload_0
     271: aload_2
     272: checkcast     #43                 // class java/lang/Boolean
     275: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     278: invokevirtual #61                 // Method setIpTransparent:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     281: pop
     282: goto          358
     285: aload_1
     286: getstatic     #19                 // Field io/netty/channel/epoll/EpollChannelOption.IP_RECVORIGDSTADDR:Lio/netty/channel/ChannelOption;
     289: if_acmpne     307
     292: aload_0
     293: aload_2
     294: checkcast     #43                 // class java/lang/Boolean
     297: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     300: invokevirtual #62                 // Method setIpRecvOrigDestAddr:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     303: pop
     304: goto          358
     307: aload_1
     308: getstatic     #20                 // Field io/netty/channel/epoll/EpollChannelOption.MAX_DATAGRAM_PAYLOAD_SIZE:Lio/netty/channel/ChannelOption;
     311: if_acmpne     329
     314: aload_0
     315: aload_2
     316: checkcast     #46                 // class java/lang/Integer
     319: invokevirtual #47                 // Method java/lang/Integer.intValue:()I
     322: invokevirtual #63                 // Method setMaxDatagramPayloadSize:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     325: pop
     326: goto          358
     329: aload_1
     330: getstatic     #21                 // Field io/netty/channel/epoll/EpollChannelOption.UDP_GRO:Lio/netty/channel/ChannelOption;
     333: if_acmpne     351
     336: aload_0
     337: aload_2
     338: checkcast     #43                 // class java/lang/Boolean
     341: invokevirtual #44                 // Method java/lang/Boolean.booleanValue:()Z
     344: invokevirtual #64                 // Method setUdpGro:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
     347: pop
     348: goto          358
     351: aload_0
     352: aload_1
     353: aload_2
     354: invokespecial #65                 // Method io/netty/channel/epoll/EpollChannelConfig.setOption:(Lio/netty/channel/ChannelOption;Ljava/lang/Object;)Z
     357: ireturn
     358: iconst_1
     359: ireturn

  private void setActiveOnOpen(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: invokeinterface #67,  1           // InterfaceMethod io/netty/channel/Channel.isRegistered:()Z
       9: ifeq          22
      12: new           #68                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #69                 // String Can only changed before channel was registered
      18: invokespecial #70                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: aload_0
      23: iload_1
      24: putfield      #34                 // Field activeOnOpen:Z
      27: return

  boolean getActiveOnOpen();
    Code:
       0: aload_0
       1: getfield      #34                 // Field activeOnOpen:Z
       4: ireturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #71                 // Method io/netty/channel/epoll/EpollChannelConfig.setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #72                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #73                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #74                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #75                 // Method io/netty/channel/epoll/EpollChannelConfig.setAutoClose:(Z)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #76                 // Method io/netty/channel/epoll/EpollChannelConfig.setAutoRead:(Z)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #77                 // Method io/netty/channel/epoll/EpollChannelConfig.setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #78                 // Method io/netty/channel/epoll/EpollChannelConfig.setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #79                 // Method io/netty/channel/epoll/EpollChannelConfig.setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #80                 // Method io/netty/channel/epoll/EpollChannelConfig.setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #81                 // Method io/netty/channel/epoll/EpollChannelConfig.setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public int getSendBufferSize();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #84                 // Method io/netty/channel/epoll/LinuxSocket.getSendBufferSize:()I
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setSendBufferSize(int);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #88                 // Method io/netty/channel/epoll/LinuxSocket.setSendBufferSize:(I)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public int getReceiveBufferSize();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #89                 // Method io/netty/channel/epoll/LinuxSocket.getReceiveBufferSize:()I
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setReceiveBufferSize(int);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #90                 // Method io/netty/channel/epoll/LinuxSocket.setReceiveBufferSize:(I)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public int getTrafficClass();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #91                 // Method io/netty/channel/epoll/LinuxSocket.getTrafficClass:()I
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setTrafficClass(int);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #92                 // Method io/netty/channel/epoll/LinuxSocket.setTrafficClass:(I)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public boolean isReuseAddress();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #93                 // Method io/netty/channel/epoll/LinuxSocket.isReuseAddress:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setReuseAddress(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #94                 // Method io/netty/channel/epoll/LinuxSocket.setReuseAddress:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public boolean isBroadcast();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #95                 // Method io/netty/channel/epoll/LinuxSocket.isBroadcast:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setBroadcast(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #96                 // Method io/netty/channel/epoll/LinuxSocket.setBroadcast:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public boolean isLoopbackModeDisabled();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #97                 // Method io/netty/channel/epoll/LinuxSocket.isLoopbackModeDisabled:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.socket.DatagramChannelConfig setLoopbackModeDisabled(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #98                 // Method io/netty/channel/epoll/LinuxSocket.setLoopbackModeDisabled:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public int getTimeToLive();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #99                 // Method io/netty/channel/epoll/LinuxSocket.getTimeToLive:()I
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setTimeToLive(int);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #100                // Method io/netty/channel/epoll/LinuxSocket.setTimeToLive:(I)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public java.net.InetAddress getInterface();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #101                // Method io/netty/channel/epoll/LinuxSocket.getInterface:()Ljava/net/InetAddress;
      13: areturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setInterface(java.net.InetAddress);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: aload_1
      11: invokevirtual #102                // Method io/netty/channel/epoll/LinuxSocket.setInterface:(Ljava/net/InetAddress;)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public java.net.NetworkInterface getNetworkInterface();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #103                // Method io/netty/channel/epoll/LinuxSocket.getNetworkInterface:()Ljava/net/NetworkInterface;
      13: areturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setNetworkInterface(java.net.NetworkInterface);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: astore_2
       8: aload_2
       9: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      12: aload_1
      13: invokevirtual #104                // Method io/netty/channel/epoll/LinuxSocket.setNetworkInterface:(Ljava/net/NetworkInterface;)V
      16: aload_0
      17: areturn
      18: astore_2
      19: new           #86                 // class io/netty/channel/ChannelException
      22: dup
      23: aload_2
      24: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      27: athrow
    Exception table:
       from    to  target type
           0    17    18   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #105                // Method io/netty/channel/epoll/EpollChannelConfig.setEpollMode:(Lio/netty/channel/epoll/EpollMode;)Lio/netty/channel/epoll/EpollChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public boolean isReusePort();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #106                // Method io/netty/channel/epoll/LinuxSocket.isReusePort:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setReusePort(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #107                // Method io/netty/channel/epoll/LinuxSocket.setReusePort:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public boolean isIpTransparent();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #108                // Method io/netty/channel/epoll/LinuxSocket.isIpTransparent:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setIpTransparent(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #109                // Method io/netty/channel/epoll/LinuxSocket.setIpTransparent:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public boolean isFreeBind();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #110                // Method io/netty/channel/epoll/LinuxSocket.isIpFreeBind:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setFreeBind(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #111                // Method io/netty/channel/epoll/LinuxSocket.setIpFreeBind:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public boolean isIpRecvOrigDestAddr();
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: invokevirtual #112                // Method io/netty/channel/epoll/LinuxSocket.isIpRecvOrigDestAddr:()Z
      13: ireturn
      14: astore_1
      15: new           #86                 // class io/netty/channel/ChannelException
      18: dup
      19: aload_1
      20: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      23: athrow
    Exception table:
       from    to  target type
           0    13    14   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setIpRecvOrigDestAddr(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #113                // Method io/netty/channel/epoll/LinuxSocket.setIpRecvOrigDestAddr:(Z)V
      14: aload_0
      15: areturn
      16: astore_2
      17: new           #86                 // class io/netty/channel/ChannelException
      20: dup
      21: aload_2
      22: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      25: athrow
    Exception table:
       from    to  target type
           0    15    16   Class java/io/IOException

  public io.netty.channel.epoll.EpollDatagramChannelConfig setMaxDatagramPayloadSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc           #114                // String maxDatagramSize
       4: invokestatic  #115                // Method io/netty/util/internal/ObjectUtil.checkPositiveOrZero:(ILjava/lang/String;)I
       7: putfield      #116                // Field maxDatagramSize:I
      10: aload_0
      11: areturn

  public int getMaxDatagramPayloadSize();
    Code:
       0: aload_0
       1: getfield      #116                // Field maxDatagramSize:I
       4: ireturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setUdpGro(boolean);
    Code:
       0: aload_0
       1: getfield      #66                 // Field channel:Lio/netty/channel/Channel;
       4: checkcast     #82                 // class io/netty/channel/epoll/EpollDatagramChannel
       7: getfield      #83                 // Field io/netty/channel/epoll/EpollDatagramChannel.socket:Lio/netty/channel/epoll/LinuxSocket;
      10: iload_1
      11: invokevirtual #117                // Method io/netty/channel/epoll/LinuxSocket.setUdpGro:(Z)V
      14: goto          27
      17: astore_2
      18: new           #86                 // class io/netty/channel/ChannelException
      21: dup
      22: aload_2
      23: invokespecial #87                 // Method io/netty/channel/ChannelException."<init>":(Ljava/lang/Throwable;)V
      26: athrow
      27: aload_0
      28: iload_1
      29: putfield      #118                // Field gro:Z
      32: aload_0
      33: areturn
    Exception table:
       from    to  target type
           0    14    17   Class java/io/IOException

  public boolean isUdpGro();
    Code:
       0: aload_0
       1: getfield      #118                // Field gro:Z
       4: ireturn

  public io.netty.channel.epoll.EpollDatagramChannelConfig setMaxMessagesPerWrite(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #119                // Method io/netty/channel/epoll/EpollChannelConfig.setMaxMessagesPerWrite:(I)Lio/netty/channel/ChannelConfig;
       5: pop
       6: aload_0
       7: areturn

  public io.netty.channel.epoll.EpollChannelConfig setEpollMode(io.netty.channel.epoll.EpollMode);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #120                // Method setEpollMode:(Lio/netty/channel/epoll/EpollMode;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #121                // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #122                // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #123                // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #124                // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #125                // Method setAutoRead:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #126                // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #127                // Method setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #128                // Method setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.epoll.EpollChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #129                // Method setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #121                // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #122                // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferLowWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #123                // Method setWriteBufferLowWaterMark:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteBufferHighWaterMark(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #124                // Method setWriteBufferHighWaterMark:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #130                // Method setAutoClose:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #125                // Method setAutoRead:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #126                // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #127                // Method setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerWrite(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #131                // Method setMaxMessagesPerWrite:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #128                // Method setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.ChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #129                // Method setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setWriteBufferWaterMark(io.netty.channel.WriteBufferWaterMark);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #122                // Method setWriteBufferWaterMark:(Lio/netty/channel/WriteBufferWaterMark;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setMessageSizeEstimator(io.netty.channel.MessageSizeEstimator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #121                // Method setMessageSizeEstimator:(Lio/netty/channel/MessageSizeEstimator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setAutoClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #130                // Method setAutoClose:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setAutoRead(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #125                // Method setAutoRead:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setRecvByteBufAllocator(io.netty.channel.RecvByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method setRecvByteBufAllocator:(Lio/netty/channel/RecvByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setAllocator(io.netty.buffer.ByteBufAllocator);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #126                // Method setAllocator:(Lio/netty/buffer/ByteBufAllocator;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setConnectTimeoutMillis(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #129                // Method setConnectTimeoutMillis:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setWriteSpinCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #127                // Method setWriteSpinCount:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setMaxMessagesPerRead(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #128                // Method setMaxMessagesPerRead:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setNetworkInterface(java.net.NetworkInterface);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #55                 // Method setNetworkInterface:(Ljava/net/NetworkInterface;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setInterface(java.net.InetAddress);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #53                 // Method setInterface:(Ljava/net/InetAddress;)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setTimeToLive(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #56                 // Method setTimeToLive:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setBroadcast(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #45                 // Method setBroadcast:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setReuseAddress(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #50                 // Method setReuseAddress:(Z)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setTrafficClass(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #57                 // Method setTrafficClass:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setReceiveBufferSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #48                 // Method setReceiveBufferSize:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  public io.netty.channel.socket.DatagramChannelConfig setSendBufferSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #49                 // Method setSendBufferSize:(I)Lio/netty/channel/epoll/EpollDatagramChannelConfig;
       5: areturn

  static {};
    Code:
       0: new           #132                // class io/netty/channel/FixedRecvByteBufAllocator
       3: dup
       4: sipush        2048
       7: invokespecial #133                // Method io/netty/channel/FixedRecvByteBufAllocator."<init>":(I)V
      10: putstatic     #2                  // Field DEFAULT_RCVBUF_ALLOCATOR:Lio/netty/channel/RecvByteBufAllocator;
      13: return
}
