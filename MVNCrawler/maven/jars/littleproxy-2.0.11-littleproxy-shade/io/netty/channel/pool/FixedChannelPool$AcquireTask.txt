Compiled from "FixedChannelPool.java"
final class io.netty.channel.pool.FixedChannelPool$AcquireTask extends io.netty.channel.pool.FixedChannelPool$AcquireListener {
  final io.netty.util.concurrent.Promise<io.netty.channel.Channel> promise;

  final long expireNanoTime;

  java.util.concurrent.ScheduledFuture<?> timeoutFuture;

  final io.netty.channel.pool.FixedChannelPool this$0;

  io.netty.channel.pool.FixedChannelPool$AcquireTask(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/netty/channel/pool/FixedChannelPool;
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokespecial #2                  // Method io/netty/channel/pool/FixedChannelPool$AcquireListener."<init>":(Lio/netty/channel/pool/FixedChannelPool;Lio/netty/util/concurrent/Promise;)V
      11: aload_0
      12: invokestatic  #3                  // Method java/lang/System.nanoTime:()J
      15: aload_0
      16: getfield      #1                  // Field this$0:Lio/netty/channel/pool/FixedChannelPool;
      19: invokestatic  #4                  // Method io/netty/channel/pool/FixedChannelPool.access$700:(Lio/netty/channel/pool/FixedChannelPool;)J
      22: ladd
      23: putfield      #5                  // Field expireNanoTime:J
      26: aload_0
      27: aload_1
      28: invokestatic  #6                  // Method io/netty/channel/pool/FixedChannelPool.access$400:(Lio/netty/channel/pool/FixedChannelPool;)Lio/netty/util/concurrent/EventExecutor;
      31: invokeinterface #7,  1            // InterfaceMethod io/netty/util/concurrent/EventExecutor.newPromise:()Lio/netty/util/concurrent/Promise;
      36: aload_0
      37: invokeinterface #8,  2            // InterfaceMethod io/netty/util/concurrent/Promise.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Promise;
      42: putfield      #9                  // Field promise:Lio/netty/util/concurrent/Promise;
      45: return
}
