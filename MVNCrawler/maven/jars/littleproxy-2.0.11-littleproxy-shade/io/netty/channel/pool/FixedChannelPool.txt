Compiled from "FixedChannelPool.java"
public class io.netty.channel.pool.FixedChannelPool extends io.netty.channel.pool.SimpleChannelPool {
  private final io.netty.util.concurrent.EventExecutor executor;

  private final long acquireTimeoutNanos;

  private final java.lang.Runnable timeoutTask;

  private final java.util.Queue<io.netty.channel.pool.FixedChannelPool$AcquireTask> pendingAcquireQueue;

  private final int maxConnections;

  private final int maxPendingAcquires;

  private final java.util.concurrent.atomic.AtomicInteger acquiredChannelCount;

  private int pendingAcquireCount;

  private boolean closed;

  static final boolean $assertionsDisabled;

  public io.netty.channel.pool.FixedChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: ldc           #14                 // int 2147483647
       6: invokespecial #15                 // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;II)V
       9: return

  public io.netty.channel.pool.FixedChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #16                 // Field io/netty/channel/pool/ChannelHealthChecker.ACTIVE:Lio/netty/channel/pool/ChannelHealthChecker;
       6: aconst_null
       7: ldc2_w        #17                 // long -1l
      10: iload_3
      11: iload         4
      13: invokespecial #19                 // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Lio/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction;JII)V
      16: return

  public io.netty.channel.pool.FixedChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction, long, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: lload         5
       8: iload         7
      10: iload         8
      12: iconst_1
      13: invokespecial #20                 // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Lio/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction;JIIZ)V
      16: return

  public io.netty.channel.pool.FixedChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction, long, int, int, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: lload         5
       8: iload         7
      10: iload         8
      12: iload         9
      14: iconst_1
      15: invokespecial #21                 // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Lio/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction;JIIZZ)V
      18: return

  public io.netty.channel.pool.FixedChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, io.netty.channel.pool.FixedChannelPool$AcquireTimeoutAction, long, int, int, boolean, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         9
       6: iload         10
       8: invokespecial #22                 // Method io/netty/channel/pool/SimpleChannelPool."<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;ZZ)V
      11: aload_0
      12: new           #23                 // class java/util/ArrayDeque
      15: dup
      16: invokespecial #24                 // Method java/util/ArrayDeque."<init>":()V
      19: putfield      #6                  // Field pendingAcquireQueue:Ljava/util/Queue;
      22: aload_0
      23: new           #25                 // class java/util/concurrent/atomic/AtomicInteger
      26: dup
      27: invokespecial #26                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      30: putfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
      33: iload         7
      35: ldc           #27                 // String maxConnections
      37: invokestatic  #28                 // Method io/netty/util/internal/ObjectUtil.checkPositive:(ILjava/lang/String;)I
      40: pop
      41: iload         8
      43: ldc           #29                 // String maxPendingAcquires
      45: invokestatic  #28                 // Method io/netty/util/internal/ObjectUtil.checkPositive:(ILjava/lang/String;)I
      48: pop
      49: aload         4
      51: ifnonnull     78
      54: lload         5
      56: ldc2_w        #17                 // long -1l
      59: lcmp
      60: ifne          78
      63: aload_0
      64: aconst_null
      65: putfield      #30                 // Field timeoutTask:Ljava/lang/Runnable;
      68: aload_0
      69: ldc2_w        #17                 // long -1l
      72: putfield      #7                  // Field acquireTimeoutNanos:J
      75: goto          234
      78: aload         4
      80: ifnonnull     102
      83: lload         5
      85: ldc2_w        #17                 // long -1l
      88: lcmp
      89: ifeq          102
      92: new           #31                 // class java/lang/NullPointerException
      95: dup
      96: ldc           #32                 // String action
      98: invokespecial #33                 // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
     101: athrow
     102: aload         4
     104: ifnull        147
     107: lload         5
     109: lconst_0
     110: lcmp
     111: ifge          147
     114: new           #34                 // class java/lang/IllegalArgumentException
     117: dup
     118: new           #35                 // class java/lang/StringBuilder
     121: dup
     122: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
     125: ldc           #37                 // String acquireTimeoutMillis:
     127: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     130: lload         5
     132: invokevirtual #39                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     135: ldc           #40                 // String  (expected: >= 0)
     137: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     140: invokevirtual #41                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     143: invokespecial #42                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     146: athrow
     147: aload_0
     148: getstatic     #43                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     151: lload         5
     153: invokevirtual #44                 // Method java/util/concurrent/TimeUnit.toNanos:(J)J
     156: putfield      #7                  // Field acquireTimeoutNanos:J
     159: getstatic     #45                 // Field io/netty/channel/pool/FixedChannelPool$7.$SwitchMap$io$netty$channel$pool$FixedChannelPool$AcquireTimeoutAction:[I
     162: aload         4
     164: invokevirtual #46                 // Method io/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction.ordinal:()I
     167: iaload
     168: lookupswitch  { // 2
                     1: 196
                     2: 211
               default: 226
          }
     196: aload_0
     197: new           #47                 // class io/netty/channel/pool/FixedChannelPool$1
     200: dup
     201: aload_0
     202: invokespecial #48                 // Method io/netty/channel/pool/FixedChannelPool$1."<init>":(Lio/netty/channel/pool/FixedChannelPool;)V
     205: putfield      #30                 // Field timeoutTask:Ljava/lang/Runnable;
     208: goto          234
     211: aload_0
     212: new           #49                 // class io/netty/channel/pool/FixedChannelPool$2
     215: dup
     216: aload_0
     217: invokespecial #50                 // Method io/netty/channel/pool/FixedChannelPool$2."<init>":(Lio/netty/channel/pool/FixedChannelPool;)V
     220: putfield      #30                 // Field timeoutTask:Ljava/lang/Runnable;
     223: goto          234
     226: new           #51                 // class java/lang/Error
     229: dup
     230: invokespecial #52                 // Method java/lang/Error."<init>":()V
     233: athrow
     234: aload_0
     235: aload_1
     236: invokevirtual #53                 // Method io/netty/bootstrap/Bootstrap.config:()Lio/netty/bootstrap/BootstrapConfig;
     239: invokevirtual #54                 // Method io/netty/bootstrap/BootstrapConfig.group:()Lio/netty/channel/EventLoopGroup;
     242: invokeinterface #55,  1           // InterfaceMethod io/netty/channel/EventLoopGroup.next:()Lio/netty/channel/EventLoop;
     247: putfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
     250: aload_0
     251: iload         7
     253: putfield      #56                 // Field maxConnections:I
     256: aload_0
     257: iload         8
     259: putfield      #57                 // Field maxPendingAcquires:I
     262: return

  public int acquiredChannelCount();
    Code:
       0: aload_0
       1: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: ireturn

  public io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
       4: invokeinterface #59,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
       9: ifeq          20
      12: aload_0
      13: aload_1
      14: invokespecial #11                 // Method acquire0:(Lio/netty/util/concurrent/Promise;)V
      17: goto          38
      20: aload_0
      21: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      24: new           #60                 // class io/netty/channel/pool/FixedChannelPool$3
      27: dup
      28: aload_0
      29: aload_1
      30: invokespecial #61                 // Method io/netty/channel/pool/FixedChannelPool$3."<init>":(Lio/netty/channel/pool/FixedChannelPool;Lio/netty/util/concurrent/Promise;)V
      33: invokeinterface #62,  2           // InterfaceMethod io/netty/util/concurrent/EventExecutor.execute:(Ljava/lang/Runnable;)V
      38: goto          50
      41: astore_2
      42: aload_1
      43: aload_2
      44: invokeinterface #64,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
      49: pop
      50: aload_1
      51: areturn
    Exception table:
       from    to  target type
           0    38    41   Class java/lang/Throwable

  private void acquire0(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #65                 // Field $assertionsDisabled:Z
       3: ifne          26
       6: aload_0
       7: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      10: invokeinterface #59,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      15: ifne          26
      18: new           #66                 // class java/lang/AssertionError
      21: dup
      22: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: aload_0
      27: getfield      #9                  // Field closed:Z
      30: ifeq          50
      33: aload_1
      34: new           #68                 // class java/lang/IllegalStateException
      37: dup
      38: ldc           #69                 // String FixedChannelPool was closed
      40: invokespecial #70                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      43: invokeinterface #71,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
      48: pop
      49: return
      50: aload_0
      51: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
      54: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      57: aload_0
      58: getfield      #56                 // Field maxConnections:I
      61: if_icmpge     129
      64: getstatic     #65                 // Field $assertionsDisabled:Z
      67: ifne          88
      70: aload_0
      71: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
      74: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
      77: ifge          88
      80: new           #66                 // class java/lang/AssertionError
      83: dup
      84: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
      87: athrow
      88: aload_0
      89: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      92: invokeinterface #72,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.newPromise:()Lio/netty/util/concurrent/Promise;
      97: astore_2
      98: new           #73                 // class io/netty/channel/pool/FixedChannelPool$AcquireListener
     101: dup
     102: aload_0
     103: aload_1
     104: invokespecial #74                 // Method io/netty/channel/pool/FixedChannelPool$AcquireListener."<init>":(Lio/netty/channel/pool/FixedChannelPool;Lio/netty/util/concurrent/Promise;)V
     107: astore_3
     108: aload_3
     109: invokevirtual #75                 // Method io/netty/channel/pool/FixedChannelPool$AcquireListener.acquired:()V
     112: aload_2
     113: aload_3
     114: invokeinterface #76,  2           // InterfaceMethod io/netty/util/concurrent/Promise.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Promise;
     119: pop
     120: aload_0
     121: aload_2
     122: invokespecial #12                 // Method io/netty/channel/pool/SimpleChannelPool.acquire:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
     125: pop
     126: goto          241
     129: aload_0
     130: getfield      #5                  // Field pendingAcquireCount:I
     133: aload_0
     134: getfield      #57                 // Field maxPendingAcquires:I
     137: if_icmplt     148
     140: aload_0
     141: aload_1
     142: invokespecial #77                 // Method tooManyOutstanding:(Lio/netty/util/concurrent/Promise;)V
     145: goto          220
     148: new           #78                 // class io/netty/channel/pool/FixedChannelPool$AcquireTask
     151: dup
     152: aload_0
     153: aload_1
     154: invokespecial #79                 // Method io/netty/channel/pool/FixedChannelPool$AcquireTask."<init>":(Lio/netty/channel/pool/FixedChannelPool;Lio/netty/util/concurrent/Promise;)V
     157: astore_2
     158: aload_0
     159: getfield      #6                  // Field pendingAcquireQueue:Ljava/util/Queue;
     162: aload_2
     163: invokeinterface #80,  2           // InterfaceMethod java/util/Queue.offer:(Ljava/lang/Object;)Z
     168: ifeq          215
     171: aload_0
     172: dup
     173: getfield      #5                  // Field pendingAcquireCount:I
     176: iconst_1
     177: iadd
     178: putfield      #5                  // Field pendingAcquireCount:I
     181: aload_0
     182: getfield      #30                 // Field timeoutTask:Ljava/lang/Runnable;
     185: ifnull        220
     188: aload_2
     189: aload_0
     190: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
     193: aload_0
     194: getfield      #30                 // Field timeoutTask:Ljava/lang/Runnable;
     197: aload_0
     198: getfield      #7                  // Field acquireTimeoutNanos:J
     201: getstatic     #81                 // Field java/util/concurrent/TimeUnit.NANOSECONDS:Ljava/util/concurrent/TimeUnit;
     204: invokeinterface #82,  5           // InterfaceMethod io/netty/util/concurrent/EventExecutor.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/netty/util/concurrent/ScheduledFuture;
     209: putfield      #83                 // Field io/netty/channel/pool/FixedChannelPool$AcquireTask.timeoutFuture:Ljava/util/concurrent/ScheduledFuture;
     212: goto          220
     215: aload_0
     216: aload_1
     217: invokespecial #77                 // Method tooManyOutstanding:(Lio/netty/util/concurrent/Promise;)V
     220: getstatic     #65                 // Field $assertionsDisabled:Z
     223: ifne          241
     226: aload_0
     227: getfield      #5                  // Field pendingAcquireCount:I
     230: ifgt          241
     233: new           #66                 // class java/lang/AssertionError
     236: dup
     237: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
     240: athrow
     241: goto          253
     244: astore_2
     245: aload_1
     246: aload_2
     247: invokeinterface #64,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
     252: pop
     253: return
    Exception table:
       from    to  target type
           0    49   244   Class java/lang/Throwable
          50   241   244   Class java/lang/Throwable

  private void tooManyOutstanding(io.netty.util.concurrent.Promise<?>);
    Code:
       0: aload_1
       1: new           #68                 // class java/lang/IllegalStateException
       4: dup
       5: ldc           #84                 // String Too many outstanding acquire operations
       7: invokespecial #70                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      10: invokeinterface #71,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
      15: pop
      16: return

  public io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: aload_2
       1: ldc           #85                 // String promise
       3: invokestatic  #86                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      11: invokeinterface #72,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.newPromise:()Lio/netty/util/concurrent/Promise;
      16: astore_3
      17: aload_0
      18: aload_1
      19: aload_3
      20: new           #87                 // class io/netty/channel/pool/FixedChannelPool$4
      23: dup
      24: aload_0
      25: aload_1
      26: aload_2
      27: invokespecial #88                 // Method io/netty/channel/pool/FixedChannelPool$4."<init>":(Lio/netty/channel/pool/FixedChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      30: invokeinterface #76,  2           // InterfaceMethod io/netty/util/concurrent/Promise.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Promise;
      35: invokespecial #89                 // Method io/netty/channel/pool/SimpleChannelPool.release:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      38: pop
      39: aload_2
      40: areturn

  private void decrementAndRunTaskQueue();
    Code:
       0: aload_0
       1: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #90                 // Method java/util/concurrent/atomic/AtomicInteger.decrementAndGet:()I
       7: istore_1
       8: getstatic     #65                 // Field $assertionsDisabled:Z
      11: ifne          26
      14: iload_1
      15: ifge          26
      18: new           #66                 // class java/lang/AssertionError
      21: dup
      22: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: aload_0
      27: invokespecial #4                  // Method runTaskQueue:()V
      30: return

  private void runTaskQueue();
    Code:
       0: aload_0
       1: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
       7: aload_0
       8: getfield      #56                 // Field maxConnections:I
      11: if_icmpge     77
      14: aload_0
      15: getfield      #6                  // Field pendingAcquireQueue:Ljava/util/Queue;
      18: invokeinterface #91,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      23: checkcast     #78                 // class io/netty/channel/pool/FixedChannelPool$AcquireTask
      26: astore_1
      27: aload_1
      28: ifnonnull     34
      31: goto          77
      34: aload_1
      35: getfield      #83                 // Field io/netty/channel/pool/FixedChannelPool$AcquireTask.timeoutFuture:Ljava/util/concurrent/ScheduledFuture;
      38: astore_2
      39: aload_2
      40: ifnull        51
      43: aload_2
      44: iconst_0
      45: invokeinterface #92,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      50: pop
      51: aload_0
      52: dup
      53: getfield      #5                  // Field pendingAcquireCount:I
      56: iconst_1
      57: isub
      58: putfield      #5                  // Field pendingAcquireCount:I
      61: aload_1
      62: invokevirtual #93                 // Method io/netty/channel/pool/FixedChannelPool$AcquireTask.acquired:()V
      65: aload_0
      66: aload_1
      67: getfield      #94                 // Field io/netty/channel/pool/FixedChannelPool$AcquireTask.promise:Lio/netty/util/concurrent/Promise;
      70: invokespecial #12                 // Method io/netty/channel/pool/SimpleChannelPool.acquire:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      73: pop
      74: goto          0
      77: getstatic     #65                 // Field $assertionsDisabled:Z
      80: ifne          98
      83: aload_0
      84: getfield      #5                  // Field pendingAcquireCount:I
      87: ifge          98
      90: new           #66                 // class java/lang/AssertionError
      93: dup
      94: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
      97: athrow
      98: getstatic     #65                 // Field $assertionsDisabled:Z
     101: ifne          122
     104: aload_0
     105: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
     108: invokevirtual #58                 // Method java/util/concurrent/atomic/AtomicInteger.get:()I
     111: ifge          122
     114: new           #66                 // class java/lang/AssertionError
     117: dup
     118: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
     121: athrow
     122: return

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method closeAsync:()Lio/netty/util/concurrent/Future;
       4: invokeinterface #96,  1           // InterfaceMethod io/netty/util/concurrent/Future.await:()Lio/netty/util/concurrent/Future;
       9: pop
      10: goto          29
      13: astore_1
      14: invokestatic  #98                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      17: invokevirtual #99                 // Method java/lang/Thread.interrupt:()V
      20: new           #100                // class java/lang/RuntimeException
      23: dup
      24: aload_1
      25: invokespecial #101                // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      28: athrow
      29: return
    Exception table:
       from    to  target type
           0    10    13   Class java/lang/InterruptedException

  public io.netty.util.concurrent.Future<java.lang.Void> closeAsync();
    Code:
       0: aload_0
       1: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
       4: invokeinterface #59,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
       9: ifeq          17
      12: aload_0
      13: invokespecial #2                  // Method close0:()Lio/netty/util/concurrent/Future;
      16: areturn
      17: aload_0
      18: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      21: invokeinterface #72,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.newPromise:()Lio/netty/util/concurrent/Promise;
      26: astore_1
      27: aload_0
      28: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      31: new           #102                // class io/netty/channel/pool/FixedChannelPool$5
      34: dup
      35: aload_0
      36: aload_1
      37: invokespecial #103                // Method io/netty/channel/pool/FixedChannelPool$5."<init>":(Lio/netty/channel/pool/FixedChannelPool;Lio/netty/util/concurrent/Promise;)V
      40: invokeinterface #62,  2           // InterfaceMethod io/netty/util/concurrent/EventExecutor.execute:(Ljava/lang/Runnable;)V
      45: aload_1
      46: areturn

  private io.netty.util.concurrent.Future<java.lang.Void> close0();
    Code:
       0: getstatic     #65                 // Field $assertionsDisabled:Z
       3: ifne          26
       6: aload_0
       7: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
      10: invokeinterface #59,  1           // InterfaceMethod io/netty/util/concurrent/EventExecutor.inEventLoop:()Z
      15: ifne          26
      18: new           #66                 // class java/lang/AssertionError
      21: dup
      22: invokespecial #67                 // Method java/lang/AssertionError."<init>":()V
      25: athrow
      26: aload_0
      27: getfield      #9                  // Field closed:Z
      30: ifne          123
      33: aload_0
      34: iconst_1
      35: putfield      #9                  // Field closed:Z
      38: aload_0
      39: getfield      #6                  // Field pendingAcquireQueue:Ljava/util/Queue;
      42: invokeinterface #91,  1           // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      47: checkcast     #78                 // class io/netty/channel/pool/FixedChannelPool$AcquireTask
      50: astore_1
      51: aload_1
      52: ifnonnull     58
      55: goto          95
      58: aload_1
      59: getfield      #83                 // Field io/netty/channel/pool/FixedChannelPool$AcquireTask.timeoutFuture:Ljava/util/concurrent/ScheduledFuture;
      62: astore_2
      63: aload_2
      64: ifnull        75
      67: aload_2
      68: iconst_0
      69: invokeinterface #92,  2           // InterfaceMethod java/util/concurrent/ScheduledFuture.cancel:(Z)Z
      74: pop
      75: aload_1
      76: getfield      #94                 // Field io/netty/channel/pool/FixedChannelPool$AcquireTask.promise:Lio/netty/util/concurrent/Promise;
      79: new           #104                // class java/nio/channels/ClosedChannelException
      82: dup
      83: invokespecial #105                // Method java/nio/channels/ClosedChannelException."<init>":()V
      86: invokeinterface #71,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setFailure:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Promise;
      91: pop
      92: goto          38
      95: aload_0
      96: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
      99: iconst_0
     100: invokevirtual #106                // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
     103: aload_0
     104: iconst_0
     105: putfield      #5                  // Field pendingAcquireCount:I
     108: getstatic     #107                // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
     111: new           #108                // class io/netty/channel/pool/FixedChannelPool$6
     114: dup
     115: aload_0
     116: invokespecial #109                // Method io/netty/channel/pool/FixedChannelPool$6."<init>":(Lio/netty/channel/pool/FixedChannelPool;)V
     119: invokevirtual #110                // Method io/netty/util/concurrent/GlobalEventExecutor.submit:(Ljava/util/concurrent/Callable;)Lio/netty/util/concurrent/Future;
     122: areturn
     123: getstatic     #107                // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
     126: aconst_null
     127: invokevirtual #111                // Method io/netty/util/concurrent/GlobalEventExecutor.newSucceededFuture:(Ljava/lang/Object;)Lio/netty/util/concurrent/Future;
     130: areturn

  static io.netty.util.concurrent.Future access$201(io.netty.channel.pool.FixedChannelPool, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #12                 // Method io/netty/channel/pool/SimpleChannelPool.acquire:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
       5: areturn

  static void access$300(io.netty.channel.pool.FixedChannelPool, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #11                 // Method acquire0:(Lio/netty/util/concurrent/Promise;)V
       5: return

  static io.netty.util.concurrent.EventExecutor access$400(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: getfield      #10                 // Field executor:Lio/netty/util/concurrent/EventExecutor;
       4: areturn

  static boolean access$500(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: getfield      #9                  // Field closed:Z
       4: ireturn

  static void access$600(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: invokespecial #8                  // Method decrementAndRunTaskQueue:()V
       4: return

  static long access$700(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: getfield      #7                  // Field acquireTimeoutNanos:J
       4: lreturn

  static java.util.Queue access$800(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: getfield      #6                  // Field pendingAcquireQueue:Ljava/util/Queue;
       4: areturn

  static int access$906(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field pendingAcquireCount:I
       5: iconst_1
       6: isub
       7: dup_x1
       8: putfield      #5                  // Field pendingAcquireCount:I
      11: ireturn

  static void access$1000(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method runTaskQueue:()V
       4: return

  static java.util.concurrent.atomic.AtomicInteger access$1100(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: getfield      #3                  // Field acquiredChannelCount:Ljava/util/concurrent/atomic/AtomicInteger;
       4: areturn

  static io.netty.util.concurrent.Future access$1200(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method close0:()Lio/netty/util/concurrent/Future;
       4: areturn

  static void access$1301(io.netty.channel.pool.FixedChannelPool);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/netty/channel/pool/SimpleChannelPool.close:()V
       4: return

  static {};
    Code:
       0: ldc           #112                // class io/netty/channel/pool/FixedChannelPool
       2: invokevirtual #113                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #65                 // Field $assertionsDisabled:Z
      16: return
}
