Compiled from "AbstractChannelPoolMap.java"
public abstract class io.netty.channel.pool.AbstractChannelPoolMap<K, P extends io.netty.channel.pool.ChannelPool> implements io.netty.channel.pool.ChannelPoolMap<K, P>, java.lang.Iterable<java.util.Map$Entry<K, P>>, java.io.Closeable {
  private final java.util.concurrent.ConcurrentMap<K, P> map;

  public io.netty.channel.pool.AbstractChannelPoolMap();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #2                  // Method io/netty/util/internal/PlatformDependent.newConcurrentHashMap:()Ljava/util/concurrent/ConcurrentMap;
       8: putfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
      11: return

  public final P get(K);
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: ldc           #4                  // String key
       7: invokestatic  #5                  // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: invokeinterface #6,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #7                  // class io/netty/channel/pool/ChannelPool
      18: astore_2
      19: aload_2
      20: ifnonnull     55
      23: aload_0
      24: aload_1
      25: invokevirtual #8                  // Method newPool:(Ljava/lang/Object;)Lio/netty/channel/pool/ChannelPool;
      28: astore_2
      29: aload_0
      30: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
      33: aload_1
      34: aload_2
      35: invokeinterface #9,  3            // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: checkcast     #7                  // class io/netty/channel/pool/ChannelPool
      43: astore_3
      44: aload_3
      45: ifnull        55
      48: aload_2
      49: invokestatic  #10                 // Method poolCloseAsyncIfSupported:(Lio/netty/channel/pool/ChannelPool;)Lio/netty/util/concurrent/Future;
      52: pop
      53: aload_3
      54: astore_2
      55: aload_2
      56: areturn

  public final boolean remove(K);
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: ldc           #4                  // String key
       7: invokestatic  #5                  // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: invokeinterface #11,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #7                  // class io/netty/channel/pool/ChannelPool
      18: astore_2
      19: aload_2
      20: ifnull        30
      23: aload_2
      24: invokestatic  #10                 // Method poolCloseAsyncIfSupported:(Lio/netty/channel/pool/ChannelPool;)Lio/netty/util/concurrent/Future;
      27: pop
      28: iconst_1
      29: ireturn
      30: iconst_0
      31: ireturn

  private io.netty.util.concurrent.Future<java.lang.Boolean> removeAsyncIfSupported(K);
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: ldc           #4                  // String key
       7: invokestatic  #5                  // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: invokeinterface #11,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      15: checkcast     #7                  // class io/netty/channel/pool/ChannelPool
      18: astore_2
      19: aload_2
      20: ifnull        51
      23: getstatic     #12                 // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
      26: invokevirtual #13                 // Method io/netty/util/concurrent/GlobalEventExecutor.newPromise:()Lio/netty/util/concurrent/Promise;
      29: astore_3
      30: aload_2
      31: invokestatic  #10                 // Method poolCloseAsyncIfSupported:(Lio/netty/channel/pool/ChannelPool;)Lio/netty/util/concurrent/Future;
      34: new           #14                 // class io/netty/channel/pool/AbstractChannelPoolMap$1
      37: dup
      38: aload_0
      39: aload_3
      40: invokespecial #15                 // Method io/netty/channel/pool/AbstractChannelPoolMap$1."<init>":(Lio/netty/channel/pool/AbstractChannelPoolMap;Lio/netty/util/concurrent/Promise;)V
      43: invokeinterface #16,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      48: pop
      49: aload_3
      50: areturn
      51: getstatic     #12                 // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
      54: getstatic     #17                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
      57: invokevirtual #18                 // Method io/netty/util/concurrent/GlobalEventExecutor.newSucceededFuture:(Ljava/lang/Object;)Lio/netty/util/concurrent/Future;
      60: areturn

  private static io.netty.util.concurrent.Future<java.lang.Void> poolCloseAsyncIfSupported(io.netty.channel.pool.ChannelPool);
    Code:
       0: aload_0
       1: instanceof    #19                 // class io/netty/channel/pool/SimpleChannelPool
       4: ifeq          15
       7: aload_0
       8: checkcast     #19                 // class io/netty/channel/pool/SimpleChannelPool
      11: invokevirtual #20                 // Method io/netty/channel/pool/SimpleChannelPool.closeAsync:()Lio/netty/util/concurrent/Future;
      14: areturn
      15: aload_0
      16: invokeinterface #21,  1           // InterfaceMethod io/netty/channel/pool/ChannelPool.close:()V
      21: getstatic     #12                 // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
      24: aconst_null
      25: invokevirtual #18                 // Method io/netty/util/concurrent/GlobalEventExecutor.newSucceededFuture:(Ljava/lang/Object;)Lio/netty/util/concurrent/Future;
      28: areturn
      29: astore_1
      30: getstatic     #12                 // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
      33: aload_1
      34: invokevirtual #23                 // Method io/netty/util/concurrent/GlobalEventExecutor.newFailedFuture:(Ljava/lang/Throwable;)Lio/netty/util/concurrent/Future;
      37: areturn
    Exception table:
       from    to  target type
          15    28    29   Class java/lang/Exception

  public final java.util.Iterator<java.util.Map$Entry<K, P>> iterator();
    Code:
       0: new           #24                 // class io/netty/util/internal/ReadOnlyIterator
       3: dup
       4: aload_0
       5: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       8: invokeinterface #25,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.entrySet:()Ljava/util/Set;
      13: invokeinterface #26,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      18: invokespecial #27                 // Method io/netty/util/internal/ReadOnlyIterator."<init>":(Ljava/util/Iterator;)V
      21: areturn

  public final int size();
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public final boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #29,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.isEmpty:()Z
       9: ireturn

  public final boolean contains(K);
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: ldc           #4                  // String key
       7: invokestatic  #5                  // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      10: invokeinterface #30,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.containsKey:(Ljava/lang/Object;)Z
      15: ireturn

  protected abstract P newPool(K);

  public final void close();
    Code:
       0: aload_0
       1: getfield      #3                  // Field map:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #31,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.keySet:()Ljava/util/Set;
       9: invokeinterface #26,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      14: astore_1
      15: aload_1
      16: invokeinterface #32,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      21: ifeq          45
      24: aload_1
      25: invokeinterface #33,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      30: astore_2
      31: aload_0
      32: aload_2
      33: invokespecial #34                 // Method removeAsyncIfSupported:(Ljava/lang/Object;)Lio/netty/util/concurrent/Future;
      36: invokeinterface #35,  1           // InterfaceMethod io/netty/util/concurrent/Future.syncUninterruptibly:()Lio/netty/util/concurrent/Future;
      41: pop
      42: goto          15
      45: return
}
