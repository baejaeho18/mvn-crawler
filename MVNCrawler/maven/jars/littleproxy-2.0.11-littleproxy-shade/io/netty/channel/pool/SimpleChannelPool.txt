Compiled from "SimpleChannelPool.java"
public class io.netty.channel.pool.SimpleChannelPool implements io.netty.channel.pool.ChannelPool {
  private static final io.netty.util.AttributeKey<io.netty.channel.pool.SimpleChannelPool> POOL_KEY;

  private final java.util.Deque<io.netty.channel.Channel> deque;

  private final io.netty.channel.pool.ChannelPoolHandler handler;

  private final io.netty.channel.pool.ChannelHealthChecker healthCheck;

  private final io.netty.bootstrap.Bootstrap bootstrap;

  private final boolean releaseHealthCheck;

  private final boolean lastRecentUsed;

  static final boolean $assertionsDisabled;

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: getstatic     #6                  // Field io/netty/channel/pool/ChannelHealthChecker.ACTIVE:Lio/netty/channel/pool/ChannelHealthChecker;
       6: invokespecial #7                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;)V
       9: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_1
       5: invokespecial #8                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Z)V
       8: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iconst_1
       7: invokespecial #9                  // Method "<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;ZZ)V
      10: return

  public io.netty.channel.pool.SimpleChannelPool(io.netty.bootstrap.Bootstrap, io.netty.channel.pool.ChannelPoolHandler, io.netty.channel.pool.ChannelHealthChecker, boolean, boolean);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #11                 // Method io/netty/util/internal/PlatformDependent.newConcurrentDeque:()Ljava/util/Deque;
       8: putfield      #12                 // Field deque:Ljava/util/Deque;
      11: aload_0
      12: aload_2
      13: ldc           #13                 // String handler
      15: invokestatic  #14                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      18: checkcast     #15                 // class io/netty/channel/pool/ChannelPoolHandler
      21: putfield      #16                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      24: aload_0
      25: aload_3
      26: ldc           #17                 // String healthCheck
      28: invokestatic  #14                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      31: checkcast     #18                 // class io/netty/channel/pool/ChannelHealthChecker
      34: putfield      #19                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
      37: aload_0
      38: iload         4
      40: putfield      #20                 // Field releaseHealthCheck:Z
      43: aload_0
      44: aload_1
      45: ldc           #21                 // String bootstrap
      47: invokestatic  #14                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      50: checkcast     #22                 // class io/netty/bootstrap/Bootstrap
      53: invokevirtual #23                 // Method io/netty/bootstrap/Bootstrap.clone:()Lio/netty/bootstrap/Bootstrap;
      56: putfield      #24                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      59: aload_0
      60: getfield      #24                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      63: new           #25                 // class io/netty/channel/pool/SimpleChannelPool$1
      66: dup
      67: aload_0
      68: aload_2
      69: invokespecial #26                 // Method io/netty/channel/pool/SimpleChannelPool$1."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/pool/ChannelPoolHandler;)V
      72: invokevirtual #27                 // Method io/netty/bootstrap/Bootstrap.handler:(Lio/netty/channel/ChannelHandler;)Lio/netty/bootstrap/AbstractBootstrap;
      75: pop
      76: aload_0
      77: iload         5
      79: putfield      #28                 // Field lastRecentUsed:Z
      82: return

  protected io.netty.bootstrap.Bootstrap bootstrap();
    Code:
       0: aload_0
       1: getfield      #24                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
       4: areturn

  protected io.netty.channel.pool.ChannelPoolHandler handler();
    Code:
       0: aload_0
       1: getfield      #16                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
       4: areturn

  protected io.netty.channel.pool.ChannelHealthChecker healthChecker();
    Code:
       0: aload_0
       1: getfield      #19                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
       4: areturn

  protected boolean releaseHealthCheck();
    Code:
       0: aload_0
       1: getfield      #20                 // Field releaseHealthCheck:Z
       4: ireturn

  public final io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #24                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
       5: invokevirtual #29                 // Method io/netty/bootstrap/Bootstrap.config:()Lio/netty/bootstrap/BootstrapConfig;
       8: invokevirtual #30                 // Method io/netty/bootstrap/BootstrapConfig.group:()Lio/netty/channel/EventLoopGroup;
      11: invokeinterface #31,  1           // InterfaceMethod io/netty/channel/EventLoopGroup.next:()Lio/netty/channel/EventLoop;
      16: invokeinterface #32,  1           // InterfaceMethod io/netty/channel/EventLoop.newPromise:()Lio/netty/util/concurrent/Promise;
      21: invokevirtual #33                 // Method acquire:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      24: areturn

  public io.netty.util.concurrent.Future<io.netty.channel.Channel> acquire(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #34                 // String promise
       4: invokestatic  #14                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       7: checkcast     #35                 // class io/netty/util/concurrent/Promise
      10: invokespecial #36                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      13: areturn

  private io.netty.util.concurrent.Future<io.netty.channel.Channel> acquireHealthyFromPoolOrNew(io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method pollChannel:()Lio/netty/channel/Channel;
       4: astore_2
       5: aload_2
       6: ifnonnull     73
       9: aload_0
      10: getfield      #24                 // Field bootstrap:Lio/netty/bootstrap/Bootstrap;
      13: invokevirtual #23                 // Method io/netty/bootstrap/Bootstrap.clone:()Lio/netty/bootstrap/Bootstrap;
      16: astore_3
      17: aload_3
      18: getstatic     #38                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      21: aload_0
      22: invokevirtual #39                 // Method io/netty/bootstrap/Bootstrap.attr:(Lio/netty/util/AttributeKey;Ljava/lang/Object;)Lio/netty/bootstrap/AbstractBootstrap;
      25: pop
      26: aload_0
      27: aload_3
      28: invokevirtual #40                 // Method connectChannel:(Lio/netty/bootstrap/Bootstrap;)Lio/netty/channel/ChannelFuture;
      31: astore        4
      33: aload         4
      35: invokeinterface #41,  1           // InterfaceMethod io/netty/channel/ChannelFuture.isDone:()Z
      40: ifeq          53
      43: aload_0
      44: aload         4
      46: aload_1
      47: invokespecial #5                  // Method notifyConnect:(Lio/netty/channel/ChannelFuture;Lio/netty/util/concurrent/Promise;)V
      50: goto          70
      53: aload         4
      55: new           #42                 // class io/netty/channel/pool/SimpleChannelPool$2
      58: dup
      59: aload_0
      60: aload_1
      61: invokespecial #43                 // Method io/netty/channel/pool/SimpleChannelPool$2."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/util/concurrent/Promise;)V
      64: invokeinterface #44,  2           // InterfaceMethod io/netty/channel/ChannelFuture.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/channel/ChannelFuture;
      69: pop
      70: goto          114
      73: aload_2
      74: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      79: astore_3
      80: aload_3
      81: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      86: ifeq          98
      89: aload_0
      90: aload_2
      91: aload_1
      92: invokespecial #4                  // Method doHealthCheck:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      95: goto          114
      98: aload_3
      99: new           #47                 // class io/netty/channel/pool/SimpleChannelPool$3
     102: dup
     103: aload_0
     104: aload_2
     105: aload_1
     106: invokespecial #48                 // Method io/netty/channel/pool/SimpleChannelPool$3."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     109: invokeinterface #49,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
     114: goto          126
     117: astore_2
     118: aload_1
     119: aload_2
     120: invokeinterface #51,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
     125: pop
     126: aload_1
     127: areturn
    Exception table:
       from    to  target type
           0   114   117   Class java/lang/Throwable

  private void notifyConnect(io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: aconst_null
       1: astore_3
       2: aload_1
       3: invokeinterface #52,  1           // InterfaceMethod io/netty/channel/ChannelFuture.isSuccess:()Z
       8: ifeq          47
      11: aload_1
      12: invokeinterface #53,  1           // InterfaceMethod io/netty/channel/ChannelFuture.channel:()Lio/netty/channel/Channel;
      17: astore_3
      18: aload_0
      19: getfield      #16                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      22: aload_3
      23: invokeinterface #54,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelAcquired:(Lio/netty/channel/Channel;)V
      28: aload_2
      29: aload_3
      30: invokeinterface #55,  2           // InterfaceMethod io/netty/util/concurrent/Promise.trySuccess:(Ljava/lang/Object;)Z
      35: ifne          60
      38: aload_0
      39: aload_3
      40: invokevirtual #56                 // Method release:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      43: pop
      44: goto          60
      47: aload_2
      48: aload_1
      49: invokeinterface #57,  1           // InterfaceMethod io/netty/channel/ChannelFuture.cause:()Ljava/lang/Throwable;
      54: invokeinterface #51,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
      59: pop
      60: goto          73
      63: astore        4
      65: aload_0
      66: aload_3
      67: aload         4
      69: aload_2
      70: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      73: return
    Exception table:
       from    to  target type
           2    60    63   Class java/lang/Throwable

  private void doHealthCheck(io.netty.channel.Channel, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #59                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_1
       7: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #60                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #61                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: getfield      #19                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
      32: aload_1
      33: invokeinterface #62,  2           // InterfaceMethod io/netty/channel/pool/ChannelHealthChecker.isHealthy:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      38: astore_3
      39: aload_3
      40: invokeinterface #63,  1           // InterfaceMethod io/netty/util/concurrent/Future.isDone:()Z
      45: ifeq          58
      48: aload_0
      49: aload_3
      50: aload_1
      51: aload_2
      52: invokespecial #3                  // Method notifyHealthCheck:(Lio/netty/util/concurrent/Future;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      55: goto          75
      58: aload_3
      59: new           #64                 // class io/netty/channel/pool/SimpleChannelPool$4
      62: dup
      63: aload_0
      64: aload_1
      65: aload_2
      66: invokespecial #65                 // Method io/netty/channel/pool/SimpleChannelPool$4."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      69: invokeinterface #66,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      74: pop
      75: goto          86
      78: astore_3
      79: aload_0
      80: aload_1
      81: aload_3
      82: aload_2
      83: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      86: return
    Exception table:
       from    to  target type
           0    75    78   Class java/lang/Throwable

  private void notifyHealthCheck(io.netty.util.concurrent.Future<java.lang.Boolean>, io.netty.channel.Channel, io.netty.util.concurrent.Promise<io.netty.channel.Channel>);
    Code:
       0: getstatic     #59                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_2
       7: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #60                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #61                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_1
      29: invokeinterface #67,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
      34: ifeq          88
      37: aload_1
      38: invokeinterface #68,  1           // InterfaceMethod io/netty/util/concurrent/Future.getNow:()Ljava/lang/Object;
      43: checkcast     #69                 // class java/lang/Boolean
      46: invokevirtual #70                 // Method java/lang/Boolean.booleanValue:()Z
      49: ifeq          88
      52: aload_2
      53: getstatic     #38                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      56: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      61: aload_0
      62: invokeinterface #72,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      67: aload_0
      68: getfield      #16                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      71: aload_2
      72: invokeinterface #54,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelAcquired:(Lio/netty/channel/Channel;)V
      77: aload_3
      78: aload_2
      79: invokeinterface #73,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      84: pop
      85: goto          99
      88: aload_0
      89: aload_2
      90: invokespecial #74                 // Method closeChannel:(Lio/netty/channel/Channel;)V
      93: aload_0
      94: aload_3
      95: invokespecial #36                 // Method acquireHealthyFromPoolOrNew:(Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      98: pop
      99: goto          112
     102: astore        4
     104: aload_0
     105: aload_2
     106: aload         4
     108: aload_3
     109: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
     112: return
    Exception table:
       from    to  target type
           0    99   102   Class java/lang/Throwable

  protected io.netty.channel.ChannelFuture connectChannel(io.netty.bootstrap.Bootstrap);
    Code:
       0: aload_1
       1: invokevirtual #75                 // Method io/netty/bootstrap/Bootstrap.connect:()Lio/netty/channel/ChannelFuture;
       4: areturn

  public final io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: aload_1
       2: aload_1
       3: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
       8: invokeinterface #32,  1           // InterfaceMethod io/netty/channel/EventLoop.newPromise:()Lio/netty/util/concurrent/Promise;
      13: invokevirtual #76                 // Method release:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)Lio/netty/util/concurrent/Future;
      16: areturn

  public io.netty.util.concurrent.Future<java.lang.Void> release(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: aload_1
       1: ldc           #77                 // String channel
       3: invokestatic  #14                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #34                 // String promise
      10: invokestatic  #14                 // Method io/netty/util/internal/ObjectUtil.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      13: pop
      14: aload_1
      15: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      20: astore_3
      21: aload_3
      22: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      27: ifeq          39
      30: aload_0
      31: aload_1
      32: aload_2
      33: invokespecial #2                  // Method doReleaseChannel:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      36: goto          55
      39: aload_3
      40: new           #78                 // class io/netty/channel/pool/SimpleChannelPool$5
      43: dup
      44: aload_0
      45: aload_1
      46: aload_2
      47: invokespecial #79                 // Method io/netty/channel/pool/SimpleChannelPool$5."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      50: invokeinterface #49,  2           // InterfaceMethod io/netty/channel/EventLoop.execute:(Ljava/lang/Runnable;)V
      55: goto          66
      58: astore_3
      59: aload_0
      60: aload_1
      61: aload_3
      62: aload_2
      63: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      66: aload_2
      67: areturn
    Exception table:
       from    to  target type
           0    55    58   Class java/lang/Throwable

  private void doReleaseChannel(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>);
    Code:
       0: getstatic     #59                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: aload_1
       7: invokeinterface #45,  1           // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      12: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/EventLoop.inEventLoop:()Z
      17: ifne          28
      20: new           #60                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #61                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_1
      29: getstatic     #38                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      32: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      37: aconst_null
      38: invokeinterface #80,  2           // InterfaceMethod io/netty/util/Attribute.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      43: aload_0
      44: if_acmpeq     87
      47: aload_0
      48: aload_1
      49: new           #81                 // class java/lang/IllegalArgumentException
      52: dup
      53: new           #82                 // class java/lang/StringBuilder
      56: dup
      57: invokespecial #83                 // Method java/lang/StringBuilder."<init>":()V
      60: ldc           #84                 // String Channel
      62: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: aload_1
      66: invokevirtual #86                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      69: ldc           #87                 // String  was not acquired from this ChannelPool
      71: invokevirtual #85                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: invokevirtual #88                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      77: invokespecial #89                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      80: aload_2
      81: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      84: goto          109
      87: aload_0
      88: getfield      #20                 // Field releaseHealthCheck:Z
      91: ifeq          103
      94: aload_0
      95: aload_1
      96: aload_2
      97: invokespecial #90                 // Method doHealthCheckOnRelease:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     100: goto          109
     103: aload_0
     104: aload_1
     105: aload_2
     106: invokespecial #91                 // Method releaseAndOffer:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
     109: goto          120
     112: astore_3
     113: aload_0
     114: aload_1
     115: aload_3
     116: aload_2
     117: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
     120: return
    Exception table:
       from    to  target type
           0   109   112   Class java/lang/Throwable

  private void doHealthCheckOnRelease(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #19                 // Field healthCheck:Lio/netty/channel/pool/ChannelHealthChecker;
       4: aload_1
       5: invokeinterface #62,  2           // InterfaceMethod io/netty/channel/pool/ChannelHealthChecker.isHealthy:(Lio/netty/channel/Channel;)Lio/netty/util/concurrent/Future;
      10: astore_3
      11: aload_3
      12: invokeinterface #63,  1           // InterfaceMethod io/netty/util/concurrent/Future.isDone:()Z
      17: ifeq          30
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: invokespecial #1                  // Method releaseAndOfferIfHealthy:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
      27: goto          48
      30: aload_3
      31: new           #92                 // class io/netty/channel/pool/SimpleChannelPool$6
      34: dup
      35: aload_0
      36: aload_1
      37: aload_2
      38: aload_3
      39: invokespecial #93                 // Method io/netty/channel/pool/SimpleChannelPool$6."<init>":(Lio/netty/channel/pool/SimpleChannelPool;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
      42: invokeinterface #66,  2           // InterfaceMethod io/netty/util/concurrent/Future.addListener:(Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      47: pop
      48: return

  private void releaseAndOfferIfHealthy(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>, io.netty.util.concurrent.Future<java.lang.Boolean>);
    Code:
       0: aload_3
       1: invokeinterface #68,  1           // InterfaceMethod io/netty/util/concurrent/Future.getNow:()Ljava/lang/Object;
       6: checkcast     #69                 // class java/lang/Boolean
       9: invokevirtual #70                 // Method java/lang/Boolean.booleanValue:()Z
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokespecial #91                 // Method releaseAndOffer:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
      21: goto          42
      24: aload_0
      25: getfield      #16                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      28: aload_1
      29: invokeinterface #94,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelReleased:(Lio/netty/channel/Channel;)V
      34: aload_2
      35: aconst_null
      36: invokeinterface #73,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      41: pop
      42: goto          55
      45: astore        4
      47: aload_0
      48: aload_1
      49: aload         4
      51: aload_2
      52: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      55: return
    Exception table:
       from    to  target type
           0    42    45   Class java/lang/Throwable

  private void releaseAndOffer(io.netty.channel.Channel, io.netty.util.concurrent.Promise<java.lang.Void>) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #95                 // Method offerChannel:(Lio/netty/channel/Channel;)Z
       5: ifeq          29
       8: aload_0
       9: getfield      #16                 // Field handler:Lio/netty/channel/pool/ChannelPoolHandler;
      12: aload_1
      13: invokeinterface #94,  2           // InterfaceMethod io/netty/channel/pool/ChannelPoolHandler.channelReleased:(Lio/netty/channel/Channel;)V
      18: aload_2
      19: aconst_null
      20: invokeinterface #73,  2           // InterfaceMethod io/netty/util/concurrent/Promise.setSuccess:(Ljava/lang/Object;)Lio/netty/util/concurrent/Promise;
      25: pop
      26: goto          43
      29: aload_0
      30: aload_1
      31: new           #96                 // class io/netty/channel/pool/SimpleChannelPool$ChannelPoolFullException
      34: dup
      35: aconst_null
      36: invokespecial #97                 // Method io/netty/channel/pool/SimpleChannelPool$ChannelPoolFullException."<init>":(Lio/netty/channel/pool/SimpleChannelPool$1;)V
      39: aload_2
      40: invokespecial #58                 // Method closeAndFail:(Lio/netty/channel/Channel;Ljava/lang/Throwable;Lio/netty/util/concurrent/Promise;)V
      43: return

  private void closeChannel(io.netty.channel.Channel) throws java.lang.Exception;
    Code:
       0: aload_1
       1: getstatic     #38                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
       4: invokeinterface #71,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
       9: aconst_null
      10: invokeinterface #80,  2           // InterfaceMethod io/netty/util/Attribute.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      15: pop
      16: aload_1
      17: invokeinterface #98,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      22: pop
      23: return

  private void closeAndFail(io.netty.channel.Channel, java.lang.Throwable, io.netty.util.concurrent.Promise<?>);
    Code:
       0: aload_1
       1: ifnull        23
       4: aload_0
       5: aload_1
       6: invokespecial #74                 // Method closeChannel:(Lio/netty/channel/Channel;)V
       9: goto          23
      12: astore        4
      14: aload_3
      15: aload         4
      17: invokeinterface #51,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
      22: pop
      23: aload_3
      24: aload_2
      25: invokeinterface #51,  2           // InterfaceMethod io/netty/util/concurrent/Promise.tryFailure:(Ljava/lang/Throwable;)Z
      30: pop
      31: return
    Exception table:
       from    to  target type
           4     9    12   Class java/lang/Throwable

  protected io.netty.channel.Channel pollChannel();
    Code:
       0: aload_0
       1: getfield      #28                 // Field lastRecentUsed:Z
       4: ifeq          22
       7: aload_0
       8: getfield      #12                 // Field deque:Ljava/util/Deque;
      11: invokeinterface #99,  1           // InterfaceMethod java/util/Deque.pollLast:()Ljava/lang/Object;
      16: checkcast     #100                // class io/netty/channel/Channel
      19: goto          34
      22: aload_0
      23: getfield      #12                 // Field deque:Ljava/util/Deque;
      26: invokeinterface #101,  1          // InterfaceMethod java/util/Deque.pollFirst:()Ljava/lang/Object;
      31: checkcast     #100                // class io/netty/channel/Channel
      34: areturn

  protected boolean offerChannel(io.netty.channel.Channel);
    Code:
       0: aload_0
       1: getfield      #12                 // Field deque:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #102,  2          // InterfaceMethod java/util/Deque.offer:(Ljava/lang/Object;)Z
      10: ireturn

  public void close();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method pollChannel:()Lio/netty/channel/Channel;
       4: astore_1
       5: aload_1
       6: ifnonnull     12
       9: goto          27
      12: aload_1
      13: invokeinterface #98,  1           // InterfaceMethod io/netty/channel/Channel.close:()Lio/netty/channel/ChannelFuture;
      18: invokeinterface #103,  1          // InterfaceMethod io/netty/channel/ChannelFuture.awaitUninterruptibly:()Lio/netty/channel/ChannelFuture;
      23: pop
      24: goto          0
      27: return

  public io.netty.util.concurrent.Future<java.lang.Void> closeAsync();
    Code:
       0: getstatic     #104                // Field io/netty/util/concurrent/GlobalEventExecutor.INSTANCE:Lio/netty/util/concurrent/GlobalEventExecutor;
       3: new           #105                // class io/netty/channel/pool/SimpleChannelPool$7
       6: dup
       7: aload_0
       8: invokespecial #106                // Method io/netty/channel/pool/SimpleChannelPool$7."<init>":(Lio/netty/channel/pool/SimpleChannelPool;)V
      11: invokevirtual #107                // Method io/netty/util/concurrent/GlobalEventExecutor.submit:(Ljava/util/concurrent/Callable;)Lio/netty/util/concurrent/Future;
      14: areturn

  static void access$000(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.ChannelFuture, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method notifyConnect:(Lio/netty/channel/ChannelFuture;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$100(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method doHealthCheck:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$200(io.netty.channel.pool.SimpleChannelPool, io.netty.util.concurrent.Future, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #3                  // Method notifyHealthCheck:(Lio/netty/util/concurrent/Future;Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       7: return

  static void access$300(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #2                  // Method doReleaseChannel:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;)V
       6: return

  static void access$400(io.netty.channel.pool.SimpleChannelPool, io.netty.channel.Channel, io.netty.util.concurrent.Promise, io.netty.util.concurrent.Future);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: invokespecial #1                  // Method releaseAndOfferIfHealthy:(Lio/netty/channel/Channel;Lio/netty/util/concurrent/Promise;Lio/netty/util/concurrent/Future;)V
       7: return

  static {};
    Code:
       0: ldc           #108                // class io/netty/channel/pool/SimpleChannelPool
       2: invokevirtual #109                // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #59                 // Field $assertionsDisabled:Z
      16: ldc           #110                // String io.netty.channel.pool.SimpleChannelPool
      18: invokestatic  #111                // Method io/netty/util/AttributeKey.newInstance:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
      21: putstatic     #38                 // Field POOL_KEY:Lio/netty/util/AttributeKey;
      24: return
}
