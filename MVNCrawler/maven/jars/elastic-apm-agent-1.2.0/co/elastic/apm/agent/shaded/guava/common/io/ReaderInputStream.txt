Compiled from "ReaderInputStream.java"
final class co.elastic.apm.agent.shaded.guava.common.io.ReaderInputStream extends java.io.InputStream {
  private final java.io.Reader reader;

  private final java.nio.charset.CharsetEncoder encoder;

  private final byte[] singleByte;

  private java.nio.CharBuffer charBuffer;

  private java.nio.ByteBuffer byteBuffer;

  private boolean endOfInput;

  private boolean draining;

  private boolean doneFlushing;

  co.elastic.apm.agent.shaded.guava.common.io.ReaderInputStream(java.io.Reader, java.nio.charset.Charset, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #28                 // Method java/nio/charset/Charset.newEncoder:()Ljava/nio/charset/CharsetEncoder;
       6: getstatic     #34                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
       9: invokevirtual #40                 // Method java/nio/charset/CharsetEncoder.onMalformedInput:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
      12: getstatic     #34                 // Field java/nio/charset/CodingErrorAction.REPLACE:Ljava/nio/charset/CodingErrorAction;
      15: invokevirtual #43                 // Method java/nio/charset/CharsetEncoder.onUnmappableCharacter:(Ljava/nio/charset/CodingErrorAction;)Ljava/nio/charset/CharsetEncoder;
      18: iload_3
      19: invokespecial #46                 // Method "<init>":(Ljava/io/Reader;Ljava/nio/charset/CharsetEncoder;I)V
      22: return

  co.elastic.apm.agent.shaded.guava.common.io.ReaderInputStream(java.io.Reader, java.nio.charset.CharsetEncoder, int);
    Code:
       0: aload_0
       1: invokespecial #55                 // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: newarray       byte
       8: putfield      #57                 // Field singleByte:[B
      11: aload_0
      12: aload_1
      13: invokestatic  #63                 // Method co/elastic/apm/agent/shaded/guava/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #65                 // class java/io/Reader
      19: putfield      #67                 // Field reader:Ljava/io/Reader;
      22: aload_0
      23: aload_2
      24: invokestatic  #63                 // Method co/elastic/apm/agent/shaded/guava/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #36                 // class java/nio/charset/CharsetEncoder
      30: putfield      #69                 // Field encoder:Ljava/nio/charset/CharsetEncoder;
      33: iload_3
      34: ifle          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ldc           #71                 // String bufferSize must be positive: %s
      44: iload_3
      45: invokestatic  #75                 // Method co/elastic/apm/agent/shaded/guava/common/base/Preconditions.checkArgument:(ZLjava/lang/String;I)V
      48: aload_2
      49: invokevirtual #78                 // Method java/nio/charset/CharsetEncoder.reset:()Ljava/nio/charset/CharsetEncoder;
      52: pop
      53: aload_0
      54: iload_3
      55: invokestatic  #84                 // Method java/nio/CharBuffer.allocate:(I)Ljava/nio/CharBuffer;
      58: putfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      61: aload_0
      62: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      65: invokevirtual #90                 // Method java/nio/CharBuffer.flip:()Ljava/nio/Buffer;
      68: pop
      69: aload_0
      70: iload_3
      71: invokestatic  #95                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      74: putfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      77: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #67                 // Field reader:Ljava/io/Reader;
       4: invokevirtual #102                // Method java/io/Reader.close:()V
       7: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #57                 // Field singleByte:[B
       5: invokevirtual #107                // Method read:([B)I
       8: iconst_1
       9: if_icmpne     24
      12: aload_0
      13: getfield      #57                 // Field singleByte:[B
      16: iconst_0
      17: baload
      18: invokestatic  #113                // Method co/elastic/apm/agent/shaded/guava/common/primitives/UnsignedBytes.toInt:(B)I
      21: goto          25
      24: iconst_m1
      25: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_2
       1: iload_2
       2: iload_3
       3: iadd
       4: aload_1
       5: arraylength
       6: invokestatic  #118                // Method co/elastic/apm/agent/shaded/guava/common/base/Preconditions.checkPositionIndexes:(III)V
       9: iload_3
      10: ifne          15
      13: iconst_0
      14: ireturn
      15: iconst_0
      16: istore        4
      18: aload_0
      19: getfield      #120                // Field endOfInput:Z
      22: istore        5
      24: aload_0
      25: getfield      #122                // Field draining:Z
      28: ifeq          87
      31: iload         4
      33: aload_0
      34: aload_1
      35: iload_2
      36: iload         4
      38: iadd
      39: iload_3
      40: iload         4
      42: isub
      43: invokespecial #125                // Method drain:([BII)I
      46: iadd
      47: istore        4
      49: iload         4
      51: iload_3
      52: if_icmpeq     62
      55: aload_0
      56: getfield      #127                // Field doneFlushing:Z
      59: ifeq          74
      62: iload         4
      64: ifle          72
      67: iload         4
      69: goto          73
      72: iconst_m1
      73: ireturn
      74: aload_0
      75: iconst_0
      76: putfield      #122                // Field draining:Z
      79: aload_0
      80: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      83: invokevirtual #130                // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      86: pop
      87: aload_0
      88: getfield      #127                // Field doneFlushing:Z
      91: ifeq          102
      94: getstatic     #136                // Field java/nio/charset/CoderResult.UNDERFLOW:Ljava/nio/charset/CoderResult;
      97: astore        6
      99: goto          144
     102: iload         5
     104: ifeq          123
     107: aload_0
     108: getfield      #69                 // Field encoder:Ljava/nio/charset/CharsetEncoder;
     111: aload_0
     112: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     115: invokevirtual #140                // Method java/nio/charset/CharsetEncoder.flush:(Ljava/nio/ByteBuffer;)Ljava/nio/charset/CoderResult;
     118: astore        6
     120: goto          144
     123: aload_0
     124: getfield      #69                 // Field encoder:Ljava/nio/charset/CharsetEncoder;
     127: aload_0
     128: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
     131: aload_0
     132: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
     135: aload_0
     136: getfield      #120                // Field endOfInput:Z
     139: invokevirtual #144                // Method java/nio/charset/CharsetEncoder.encode:(Ljava/nio/CharBuffer;Ljava/nio/ByteBuffer;Z)Ljava/nio/charset/CoderResult;
     142: astore        6
     144: aload         6
     146: invokevirtual #148                // Method java/nio/charset/CoderResult.isOverflow:()Z
     149: ifeq          160
     152: aload_0
     153: iconst_1
     154: invokespecial #152                // Method startDraining:(Z)V
     157: goto          24
     160: aload         6
     162: invokevirtual #155                // Method java/nio/charset/CoderResult.isUnderflow:()Z
     165: ifeq          206
     168: iload         5
     170: ifeq          186
     173: aload_0
     174: iconst_1
     175: putfield      #127                // Field doneFlushing:Z
     178: aload_0
     179: iconst_0
     180: invokespecial #152                // Method startDraining:(Z)V
     183: goto          24
     186: aload_0
     187: getfield      #120                // Field endOfInput:Z
     190: ifeq          199
     193: iconst_1
     194: istore        5
     196: goto          221
     199: aload_0
     200: invokespecial #158                // Method readMoreChars:()V
     203: goto          221
     206: aload         6
     208: invokevirtual #161                // Method java/nio/charset/CoderResult.isError:()Z
     211: ifeq          221
     214: aload         6
     216: invokevirtual #164                // Method java/nio/charset/CoderResult.throwException:()V
     219: iconst_0
     220: ireturn
     221: goto          87

  private static java.nio.CharBuffer grow(java.nio.CharBuffer);
    Code:
       0: aload_0
       1: invokevirtual #176                // Method java/nio/CharBuffer.array:()[C
       4: aload_0
       5: invokevirtual #179                // Method java/nio/CharBuffer.capacity:()I
       8: iconst_2
       9: imul
      10: invokestatic  #185                // Method java/util/Arrays.copyOf:([CI)[C
      13: astore_1
      14: aload_1
      15: invokestatic  #189                // Method java/nio/CharBuffer.wrap:([C)Ljava/nio/CharBuffer;
      18: astore_2
      19: aload_2
      20: aload_0
      21: invokevirtual #192                // Method java/nio/CharBuffer.position:()I
      24: invokevirtual #195                // Method java/nio/CharBuffer.position:(I)Ljava/nio/Buffer;
      27: pop
      28: aload_2
      29: aload_0
      30: invokevirtual #198                // Method java/nio/CharBuffer.limit:()I
      33: invokevirtual #200                // Method java/nio/CharBuffer.limit:(I)Ljava/nio/Buffer;
      36: pop
      37: aload_2
      38: areturn

  private void readMoreChars() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
       4: invokestatic  #208                // Method availableCapacity:(Ljava/nio/Buffer;)I
       7: ifne          45
      10: aload_0
      11: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      14: invokevirtual #192                // Method java/nio/CharBuffer.position:()I
      17: ifle          34
      20: aload_0
      21: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      24: invokevirtual #212                // Method java/nio/CharBuffer.compact:()Ljava/nio/CharBuffer;
      27: invokevirtual #90                 // Method java/nio/CharBuffer.flip:()Ljava/nio/Buffer;
      30: pop
      31: goto          45
      34: aload_0
      35: aload_0
      36: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      39: invokestatic  #214                // Method grow:(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;
      42: putfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      45: aload_0
      46: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      49: invokevirtual #198                // Method java/nio/CharBuffer.limit:()I
      52: istore_1
      53: aload_0
      54: getfield      #67                 // Field reader:Ljava/io/Reader;
      57: aload_0
      58: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      61: invokevirtual #176                // Method java/nio/CharBuffer.array:()[C
      64: iload_1
      65: aload_0
      66: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      69: invokestatic  #208                // Method availableCapacity:(Ljava/nio/Buffer;)I
      72: invokevirtual #217                // Method java/io/Reader.read:([CII)I
      75: istore_2
      76: iload_2
      77: iconst_m1
      78: if_icmpne     89
      81: aload_0
      82: iconst_1
      83: putfield      #120                // Field endOfInput:Z
      86: goto          100
      89: aload_0
      90: getfield      #86                 // Field charBuffer:Ljava/nio/CharBuffer;
      93: iload_1
      94: iload_2
      95: iadd
      96: invokevirtual #200                // Method java/nio/CharBuffer.limit:(I)Ljava/nio/Buffer;
      99: pop
     100: return

  private static int availableCapacity(java.nio.Buffer);
    Code:
       0: aload_0
       1: invokevirtual #221                // Method java/nio/Buffer.capacity:()I
       4: aload_0
       5: invokevirtual #222                // Method java/nio/Buffer.limit:()I
       8: isub
       9: ireturn

  private void startDraining(boolean);
    Code:
       0: aload_0
       1: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #225                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
       7: pop
       8: iload_1
       9: ifeq          41
      12: aload_0
      13: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      16: invokevirtual #228                // Method java/nio/ByteBuffer.remaining:()I
      19: ifne          41
      22: aload_0
      23: aload_0
      24: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      27: invokevirtual #229                // Method java/nio/ByteBuffer.capacity:()I
      30: iconst_2
      31: imul
      32: invokestatic  #95                 // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      35: putfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      38: goto          46
      41: aload_0
      42: iconst_1
      43: putfield      #122                // Field draining:Z
      46: return

  private int drain(byte[], int, int);
    Code:
       0: iload_3
       1: aload_0
       2: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #228                // Method java/nio/ByteBuffer.remaining:()I
       8: invokestatic  #236                // Method java/lang/Math.min:(II)I
      11: istore        4
      13: aload_0
      14: getfield      #97                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      17: aload_1
      18: iload_2
      19: iload         4
      21: invokevirtual #240                // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      24: pop
      25: iload         4
      27: ireturn
}
