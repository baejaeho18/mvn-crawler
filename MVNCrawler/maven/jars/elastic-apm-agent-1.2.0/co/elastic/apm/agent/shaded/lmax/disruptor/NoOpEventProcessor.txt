Compiled from "NoOpEventProcessor.java"
public final class co.elastic.apm.agent.shaded.lmax.disruptor.NoOpEventProcessor implements co.elastic.apm.agent.shaded.lmax.disruptor.EventProcessor {
  private final co.elastic.apm.agent.shaded.lmax.disruptor.NoOpEventProcessor$SequencerFollowingSequence sequence;

  private final java.util.concurrent.atomic.AtomicBoolean running;

  public co.elastic.apm.agent.shaded.lmax.disruptor.NoOpEventProcessor(co.elastic.apm.agent.shaded.lmax.disruptor.RingBuffer<?>);
    Code:
       0: aload_0
       1: invokespecial #21                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #23                 // class java/util/concurrent/atomic/AtomicBoolean
       8: dup
       9: iconst_0
      10: invokespecial #26                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      13: putfield      #28                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
      16: aload_0
      17: new           #11                 // class co/elastic/apm/agent/shaded/lmax/disruptor/NoOpEventProcessor$SequencerFollowingSequence
      20: dup
      21: aload_1
      22: aconst_null
      23: invokespecial #31                 // Method co/elastic/apm/agent/shaded/lmax/disruptor/NoOpEventProcessor$SequencerFollowingSequence."<init>":(Lco/elastic/apm/agent/shaded/lmax/disruptor/RingBuffer;Lco/elastic/apm/agent/shaded/lmax/disruptor/NoOpEventProcessor$1;)V
      26: putfield      #33                 // Field sequence:Lco/elastic/apm/agent/shaded/lmax/disruptor/NoOpEventProcessor$SequencerFollowingSequence;
      29: return

  public co.elastic.apm.agent.shaded.lmax.disruptor.Sequence getSequence();
    Code:
       0: aload_0
       1: getfield      #33                 // Field sequence:Lco/elastic/apm/agent/shaded/lmax/disruptor/NoOpEventProcessor$SequencerFollowingSequence;
       4: areturn

  public void halt();
    Code:
       0: aload_0
       1: getfield      #28                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: invokevirtual #44                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: return

  public boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #28                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #49                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  public void run();
    Code:
       0: aload_0
       1: getfield      #28                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: iconst_1
       6: invokevirtual #54                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
       9: ifne          22
      12: new           #56                 // class java/lang/IllegalStateException
      15: dup
      16: ldc           #58                 // String Thread is already running
      18: invokespecial #61                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      21: athrow
      22: return
}
