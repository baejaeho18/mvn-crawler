Compiled from "SequencedAtomicReferenceArrayQueue.java"
abstract class co.elastic.apm.agent.shaded.jctools.queues.atomic.SequencedAtomicReferenceArrayQueue<E> extends co.elastic.apm.agent.shaded.jctools.queues.atomic.AtomicReferenceArrayQueue<E> {
  protected final java.util.concurrent.atomic.AtomicLongArray sequenceBuffer;

  public co.elastic.apm.agent.shaded.jctools.queues.atomic.SequencedAtomicReferenceArrayQueue(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #12                 // Method co/elastic/apm/agent/shaded/jctools/queues/atomic/AtomicReferenceArrayQueue."<init>":(I)V
       5: aload_0
       6: getfield      #16                 // Field mask:I
       9: iconst_1
      10: iadd
      11: istore_2
      12: aload_0
      13: new           #18                 // class java/util/concurrent/atomic/AtomicLongArray
      16: dup
      17: iload_2
      18: invokespecial #19                 // Method java/util/concurrent/atomic/AtomicLongArray."<init>":(I)V
      21: putfield      #21                 // Field sequenceBuffer:Ljava/util/concurrent/atomic/AtomicLongArray;
      24: iconst_0
      25: istore_3
      26: iload_3
      27: iload_2
      28: if_icmpge     48
      31: aload_0
      32: aload_0
      33: getfield      #21                 // Field sequenceBuffer:Ljava/util/concurrent/atomic/AtomicLongArray;
      36: iload_3
      37: iload_3
      38: i2l
      39: invokevirtual #25                 // Method soSequence:(Ljava/util/concurrent/atomic/AtomicLongArray;IJ)V
      42: iinc          3, 1
      45: goto          26
      48: return

  protected final long calcSequenceOffset(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #16                 // Field mask:I
       5: invokestatic  #36                 // Method calcSequenceOffset:(JI)I
       8: i2l
       9: lreturn

  protected static int calcSequenceOffset(long, int);
    Code:
       0: lload_0
       1: l2i
       2: iload_2
       3: iand
       4: ireturn

  protected final void soSequence(java.util.concurrent.atomic.AtomicLongArray, int, long);
    Code:
       0: aload_1
       1: iload_2
       2: lload_3
       3: invokevirtual #42                 // Method java/util/concurrent/atomic/AtomicLongArray.lazySet:(IJ)V
       6: return

  protected final long lvSequence(java.util.concurrent.atomic.AtomicLongArray, int);
    Code:
       0: aload_1
       1: iload_2
       2: invokevirtual #51                 // Method java/util/concurrent/atomic/AtomicLongArray.get:(I)J
       5: lreturn
}
