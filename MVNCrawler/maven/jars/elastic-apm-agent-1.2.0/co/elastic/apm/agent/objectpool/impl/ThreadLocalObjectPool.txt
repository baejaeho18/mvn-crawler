Compiled from "ThreadLocalObjectPool.java"
public class co.elastic.apm.agent.objectpool.impl.ThreadLocalObjectPool<T extends co.elastic.apm.agent.objectpool.Recyclable> extends co.elastic.apm.agent.objectpool.impl.AbstractObjectPool<T> {
  private final java.lang.ThreadLocal<co.elastic.apm.agent.objectpool.impl.ThreadLocalObjectPool$FixedSizeStack<T>> objectPool;

  private final int maxNumPooledObjectsPerThread;

  private final boolean preAllocate;

  public co.elastic.apm.agent.objectpool.impl.ThreadLocalObjectPool(int, boolean, co.elastic.apm.agent.objectpool.Allocator<T>);
    Code:
       0: aload_0
       1: aload_3
       2: invokespecial #21                 // Method co/elastic/apm/agent/objectpool/impl/AbstractObjectPool."<init>":(Lco/elastic/apm/agent/objectpool/Allocator;)V
       5: aload_0
       6: new           #23                 // class java/lang/ThreadLocal
       9: dup
      10: invokespecial #26                 // Method java/lang/ThreadLocal."<init>":()V
      13: putfield      #28                 // Field objectPool:Ljava/lang/ThreadLocal;
      16: aload_0
      17: iload_1
      18: putfield      #30                 // Field maxNumPooledObjectsPerThread:I
      21: aload_0
      22: iload_2
      23: putfield      #32                 // Field preAllocate:Z
      26: return

  public T tryCreateInstance();
    Code:
       0: aload_0
       1: invokespecial #45                 // Method getStack:()Lco/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack;
       4: invokevirtual #49                 // Method co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack.pop:()Ljava/lang/Object;
       7: checkcast     #51                 // class co/elastic/apm/agent/objectpool/Recyclable
      10: areturn

  public void recycle(T);
    Code:
       0: aload_1
       1: invokeinterface #56,  1           // InterfaceMethod co/elastic/apm/agent/objectpool/Recyclable.resetState:()V
       6: aload_0
       7: invokespecial #45                 // Method getStack:()Lco/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack;
      10: aload_1
      11: invokevirtual #60                 // Method co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack.push:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public int getObjectsInPool();
    Code:
       0: aload_0
       1: invokespecial #45                 // Method getStack:()Lco/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack;
       4: invokevirtual #68                 // Method co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack.size:()I
       7: ireturn

  public void close();
    Code:
       0: aload_0
       1: getfield      #28                 // Field objectPool:Ljava/lang/ThreadLocal;
       4: invokevirtual #72                 // Method java/lang/ThreadLocal.remove:()V
       7: return

  public int getSize();
    Code:
       0: aload_0
       1: getfield      #30                 // Field maxNumPooledObjectsPerThread:I
       4: ireturn

  private co.elastic.apm.agent.objectpool.impl.ThreadLocalObjectPool$FixedSizeStack<T> getStack();
    Code:
       0: aload_0
       1: getfield      #28                 // Field objectPool:Ljava/lang/ThreadLocal;
       4: invokevirtual #76                 // Method java/lang/ThreadLocal.get:()Ljava/lang/Object;
       7: checkcast     #8                  // class co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack
      10: astore_1
      11: aload_1
      12: ifnonnull     32
      15: aload_0
      16: aload_0
      17: getfield      #32                 // Field preAllocate:Z
      20: invokespecial #80                 // Method createStack:(Z)Lco/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack;
      23: astore_1
      24: aload_0
      25: getfield      #28                 // Field objectPool:Ljava/lang/ThreadLocal;
      28: aload_1
      29: invokevirtual #84                 // Method java/lang/ThreadLocal.set:(Ljava/lang/Object;)V
      32: aload_1
      33: areturn

  private co.elastic.apm.agent.objectpool.impl.ThreadLocalObjectPool$FixedSizeStack<T> createStack(boolean);
    Code:
       0: new           #8                  // class co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack
       3: dup
       4: aload_0
       5: getfield      #30                 // Field maxNumPooledObjectsPerThread:I
       8: invokespecial #90                 // Method co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack."<init>":(I)V
      11: astore_2
      12: iload_1
      13: ifeq          46
      16: iconst_0
      17: istore_3
      18: iload_3
      19: aload_0
      20: getfield      #30                 // Field maxNumPooledObjectsPerThread:I
      23: if_icmpge     46
      26: aload_2
      27: aload_0
      28: getfield      #92                 // Field allocator:Lco/elastic/apm/agent/objectpool/Allocator;
      31: invokeinterface #97,  1           // InterfaceMethod co/elastic/apm/agent/objectpool/Allocator.createInstance:()Ljava/lang/Object;
      36: invokevirtual #60                 // Method co/elastic/apm/agent/objectpool/impl/ThreadLocalObjectPool$FixedSizeStack.push:(Ljava/lang/Object;)Z
      39: pop
      40: iinc          3, 1
      43: goto          18
      46: aload_2
      47: areturn

  public void recycle(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #51                 // class co/elastic/apm/agent/objectpool/Recyclable
       5: invokevirtual #100                // Method recycle:(Lco/elastic/apm/agent/objectpool/Recyclable;)V
       8: return

  public java.lang.Object tryCreateInstance();
    Code:
       0: aload_0
       1: invokevirtual #102                // Method tryCreateInstance:()Lco/elastic/apm/agent/objectpool/Recyclable;
       4: areturn
}
