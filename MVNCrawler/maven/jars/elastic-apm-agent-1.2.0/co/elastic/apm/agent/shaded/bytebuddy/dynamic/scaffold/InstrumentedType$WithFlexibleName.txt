Compiled from "InstrumentedType.java"
public interface co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName extends co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType {
  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withField(co.elastic.apm.agent.shaded.bytebuddy.description.field.FieldDescription$Token);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withMethod(co.elastic.apm.agent.shaded.bytebuddy.description.method.MethodDescription$Token);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withModifiers(int);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withInterfaces(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeList$Generic);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withNestHost(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeDescription);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withNestMembers(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeList);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withEnclosingType(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeDescription);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withEnclosingMethod(co.elastic.apm.agent.shaded.bytebuddy.description.method.MethodDescription$InDefinedShape);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withDeclaringType(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeDescription);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withDeclaredTypes(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeList);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withLocalClass(boolean);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withAnonymousClass(boolean);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withTypeVariable(co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeVariableToken);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withAnnotations(java.util.List<? extends co.elastic.apm.agent.shaded.bytebuddy.description.annotation.AnnotationDescription>);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withInitializer(co.elastic.apm.agent.shaded.bytebuddy.implementation.LoadedTypeInitializer);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withInitializer(co.elastic.apm.agent.shaded.bytebuddy.implementation.bytecode.ByteCodeAppender);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withName(java.lang.String);

  public abstract co.elastic.apm.agent.shaded.bytebuddy.dynamic.scaffold.InstrumentedType$WithFlexibleName withTypeVariables(co.elastic.apm.agent.shaded.bytebuddy.matcher.ElementMatcher<? super co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeDescription$Generic>, co.elastic.apm.agent.shaded.bytebuddy.dynamic.Transformer<co.elastic.apm.agent.shaded.bytebuddy.description.type.TypeVariableToken>);
}
