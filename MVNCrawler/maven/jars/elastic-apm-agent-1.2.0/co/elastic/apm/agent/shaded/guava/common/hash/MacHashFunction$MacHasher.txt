Compiled from "MacHashFunction.java"
final class co.elastic.apm.agent.shaded.guava.common.hash.MacHashFunction$MacHasher extends co.elastic.apm.agent.shaded.guava.common.hash.AbstractByteHasher {
  private final javax.crypto.Mac mac;

  private boolean done;

  private co.elastic.apm.agent.shaded.guava.common.hash.MacHashFunction$MacHasher(javax.crypto.Mac);
    Code:
       0: aload_0
       1: invokespecial #19                 // Method co/elastic/apm/agent/shaded/guava/common/hash/AbstractByteHasher."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #21                 // Field mac:Ljavax/crypto/Mac;
       9: return

  protected void update(byte);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method checkNotDone:()V
       4: aload_0
       5: getfield      #21                 // Field mac:Ljavax/crypto/Mac;
       8: iload_1
       9: invokevirtual #32                 // Method javax/crypto/Mac.update:(B)V
      12: return

  protected void update(byte[]);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method checkNotDone:()V
       4: aload_0
       5: getfield      #21                 // Field mac:Ljavax/crypto/Mac;
       8: aload_1
       9: invokevirtual #37                 // Method javax/crypto/Mac.update:([B)V
      12: return

  protected void update(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method checkNotDone:()V
       4: aload_0
       5: getfield      #21                 // Field mac:Ljavax/crypto/Mac;
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokevirtual #41                 // Method javax/crypto/Mac.update:([BII)V
      14: return

  protected void update(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokespecial #28                 // Method checkNotDone:()V
       4: aload_1
       5: invokestatic  #51                 // Method co/elastic/apm/agent/shaded/guava/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       8: pop
       9: aload_0
      10: getfield      #21                 // Field mac:Ljavax/crypto/Mac;
      13: aload_1
      14: invokevirtual #53                 // Method javax/crypto/Mac.update:(Ljava/nio/ByteBuffer;)V
      17: return

  private void checkNotDone();
    Code:
       0: aload_0
       1: getfield      #57                 // Field done:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ldc           #59                 // String Cannot re-use a Hasher after calling hash() on it
      14: invokestatic  #63                 // Method co/elastic/apm/agent/shaded/guava/common/base/Preconditions.checkState:(ZLjava/lang/Object;)V
      17: return

  public co.elastic.apm.agent.shaded.guava.common.hash.HashCode hash();
    Code:
       0: aload_0
       1: invokespecial #28                 // Method checkNotDone:()V
       4: aload_0
       5: iconst_1
       6: putfield      #57                 // Field done:Z
       9: aload_0
      10: getfield      #21                 // Field mac:Ljavax/crypto/Mac;
      13: invokevirtual #69                 // Method javax/crypto/Mac.doFinal:()[B
      16: invokestatic  #75                 // Method co/elastic/apm/agent/shaded/guava/common/hash/HashCode.fromBytesNoCopy:([B)Lco/elastic/apm/agent/shaded/guava/common/hash/HashCode;
      19: areturn

  co.elastic.apm.agent.shaded.guava.common.hash.MacHashFunction$MacHasher(javax.crypto.Mac, co.elastic.apm.agent.shaded.guava.common.hash.MacHashFunction$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #78                 // Method "<init>":(Ljavax/crypto/Mac;)V
       5: return
}
