Compiled from "Vector2D.java"
public class org.apache.commons.math3.geometry.euclidean.twod.Vector2D implements org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> {
  public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D ZERO;

  public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D NaN;

  public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D POSITIVE_INFINITY;

  public static final org.apache.commons.math3.geometry.euclidean.twod.Vector2D NEGATIVE_INFINITY;

  private static final long serialVersionUID;

  private final double x;

  private final double y;

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field x:D
       9: aload_0
      10: dload_3
      11: putfield      #3                  // Field y:D
      14: return

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: arraylength
       6: iconst_2
       7: if_icmpeq     21
      10: new           #4                  // class org/apache/commons/math3/exception/DimensionMismatchException
      13: dup
      14: aload_1
      15: arraylength
      16: iconst_2
      17: invokespecial #5                  // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      20: athrow
      21: aload_0
      22: aload_1
      23: iconst_0
      24: daload
      25: putfield      #2                  // Field x:D
      28: aload_0
      29: aload_1
      30: iconst_1
      31: daload
      32: putfield      #3                  // Field y:D
      35: return

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: putfield      #2                  // Field x:D
      14: aload_0
      15: dload_1
      16: aload_3
      17: getfield      #3                  // Field y:D
      20: dmul
      21: putfield      #3                  // Field y:D
      24: return

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: dload         4
      13: aload         6
      15: getfield      #2                  // Field x:D
      18: dmul
      19: dadd
      20: putfield      #2                  // Field x:D
      23: aload_0
      24: dload_1
      25: aload_3
      26: getfield      #3                  // Field y:D
      29: dmul
      30: dload         4
      32: aload         6
      34: getfield      #3                  // Field y:D
      37: dmul
      38: dadd
      39: putfield      #3                  // Field y:D
      42: return

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: dload         4
      13: aload         6
      15: getfield      #2                  // Field x:D
      18: dmul
      19: dadd
      20: dload         7
      22: aload         9
      24: getfield      #2                  // Field x:D
      27: dmul
      28: dadd
      29: putfield      #2                  // Field x:D
      32: aload_0
      33: dload_1
      34: aload_3
      35: getfield      #3                  // Field y:D
      38: dmul
      39: dload         4
      41: aload         6
      43: getfield      #3                  // Field y:D
      46: dmul
      47: dadd
      48: dload         7
      50: aload         9
      52: getfield      #3                  // Field y:D
      55: dmul
      56: dadd
      57: putfield      #3                  // Field y:D
      60: return

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D(double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: dload         4
      13: aload         6
      15: getfield      #2                  // Field x:D
      18: dmul
      19: dadd
      20: dload         7
      22: aload         9
      24: getfield      #2                  // Field x:D
      27: dmul
      28: dadd
      29: dload         10
      31: aload         12
      33: getfield      #2                  // Field x:D
      36: dmul
      37: dadd
      38: putfield      #2                  // Field x:D
      41: aload_0
      42: dload_1
      43: aload_3
      44: getfield      #3                  // Field y:D
      47: dmul
      48: dload         4
      50: aload         6
      52: getfield      #3                  // Field y:D
      55: dmul
      56: dadd
      57: dload         7
      59: aload         9
      61: getfield      #3                  // Field y:D
      64: dmul
      65: dadd
      66: dload         10
      68: aload         12
      70: getfield      #3                  // Field y:D
      73: dmul
      74: dadd
      75: putfield      #3                  // Field y:D
      78: return

  public double getX();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: dreturn

  public double getY();
    Code:
       0: aload_0
       1: getfield      #3                  // Field y:D
       4: dreturn

  public double[] toArray();
    Code:
       0: iconst_2
       1: newarray       double
       3: dup
       4: iconst_0
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: dastore
      10: dup
      11: iconst_1
      12: aload_0
      13: getfield      #3                  // Field y:D
      16: dastore
      17: areturn

  public org.apache.commons.math3.geometry.Space getSpace();
    Code:
       0: invokestatic  #6                  // Method org/apache/commons/math3/geometry/euclidean/twod/Euclidean2D.getInstance:()Lorg/apache/commons/math3/geometry/euclidean/twod/Euclidean2D;
       3: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getZero();
    Code:
       0: getstatic     #7                  // Field ZERO:Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       3: areturn

  public double getNorm1();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: aload_0
       8: getfield      #3                  // Field y:D
      11: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      14: dadd
      15: dreturn

  public double getNorm();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dmul
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: aload_0
      14: getfield      #3                  // Field y:D
      17: dmul
      18: dadd
      19: invokestatic  #9                  // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      22: dreturn

  public double getNormSq();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dmul
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: aload_0
      14: getfield      #3                  // Field y:D
      17: dmul
      18: dadd
      19: dreturn

  public double getNormInf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: aload_0
       8: getfield      #3                  // Field y:D
      11: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      14: invokestatic  #10                 // Method org/apache/commons/math3/util/FastMath.max:(DD)D
      17: dreturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       8: dup
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: aload_2
      14: invokevirtual #12                 // Method getX:()D
      17: dadd
      18: aload_0
      19: getfield      #3                  // Field y:D
      22: aload_2
      23: invokevirtual #13                 // Method getY:()D
      26: dadd
      27: invokespecial #14                 // Method "<init>":(DD)V
      30: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_3
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore        4
       6: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       9: dup
      10: aload_0
      11: getfield      #2                  // Field x:D
      14: dload_1
      15: aload         4
      17: invokevirtual #12                 // Method getX:()D
      20: dmul
      21: dadd
      22: aload_0
      23: getfield      #3                  // Field y:D
      26: dload_1
      27: aload         4
      29: invokevirtual #13                 // Method getY:()D
      32: dmul
      33: dadd
      34: invokespecial #14                 // Method "<init>":(DD)V
      37: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       8: dup
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: aload_2
      14: getfield      #2                  // Field x:D
      17: dsub
      18: aload_0
      19: getfield      #3                  // Field y:D
      22: aload_2
      23: getfield      #3                  // Field y:D
      26: dsub
      27: invokespecial #14                 // Method "<init>":(DD)V
      30: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_3
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore        4
       6: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       9: dup
      10: aload_0
      11: getfield      #2                  // Field x:D
      14: dload_1
      15: aload         4
      17: invokevirtual #12                 // Method getX:()D
      20: dmul
      21: dsub
      22: aload_0
      23: getfield      #3                  // Field y:D
      26: dload_1
      27: aload         4
      29: invokevirtual #13                 // Method getY:()D
      32: dmul
      33: dsub
      34: invokespecial #14                 // Method "<init>":(DD)V
      37: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D normalize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method getNorm:()D
       4: dstore_1
       5: dload_1
       6: dconst_0
       7: dcmpl
       8: ifne          26
      11: new           #16                 // class org/apache/commons/math3/exception/MathArithmeticException
      14: dup
      15: getstatic     #17                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: iconst_0
      19: anewarray     #18                 // class java/lang/Object
      22: invokespecial #19                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      25: athrow
      26: aload_0
      27: dconst_1
      28: dload_1
      29: ddiv
      30: invokevirtual #20                 // Method scalarMultiply:(D)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
      33: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D negate();
    Code:
       0: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       3: dup
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dneg
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: dneg
      14: invokespecial #14                 // Method "<init>":(DD)V
      17: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D scalarMultiply(double);
    Code:
       0: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       3: dup
       4: dload_1
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: dmul
      10: dload_1
      11: aload_0
      12: getfield      #3                  // Field y:D
      15: dmul
      16: invokespecial #14                 // Method "<init>":(DD)V
      19: areturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #21                 // Method java/lang/Double.isNaN:(D)Z
       7: ifne          20
      10: aload_0
      11: getfield      #3                  // Field y:D
      14: invokestatic  #21                 // Method java/lang/Double.isNaN:(D)Z
      17: ifeq          24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method isNaN:()Z
       4: ifne          31
       7: aload_0
       8: getfield      #2                  // Field x:D
      11: invokestatic  #23                 // Method java/lang/Double.isInfinite:(D)Z
      14: ifne          27
      17: aload_0
      18: getfield      #3                  // Field y:D
      21: invokestatic  #23                 // Method java/lang/Double.isInfinite:(D)Z
      24: ifeq          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public double distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: dstore_3
      18: aload_2
      19: getfield      #3                  // Field y:D
      22: aload_0
      23: getfield      #3                  // Field y:D
      26: dsub
      27: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      30: dstore        5
      32: dload_3
      33: dload         5
      35: dadd
      36: dreturn

  public double distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: dstore_3
      15: aload_2
      16: getfield      #3                  // Field y:D
      19: aload_0
      20: getfield      #3                  // Field y:D
      23: dsub
      24: dstore        5
      26: dload_3
      27: dload_3
      28: dmul
      29: dload         5
      31: dload         5
      33: dmul
      34: dadd
      35: invokestatic  #9                  // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      38: dreturn

  public double distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: dstore_3
      18: aload_2
      19: getfield      #3                  // Field y:D
      22: aload_0
      23: getfield      #3                  // Field y:D
      26: dsub
      27: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      30: dstore        5
      32: dload_3
      33: dload         5
      35: invokestatic  #10                 // Method org/apache/commons/math3/util/FastMath.max:(DD)D
      38: dreturn

  public double distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: dstore_3
      15: aload_2
      16: getfield      #3                  // Field y:D
      19: aload_0
      20: getfield      #3                  // Field y:D
      23: dsub
      24: dstore        5
      26: dload_3
      27: dload_3
      28: dmul
      29: dload         5
      31: dload         5
      33: dmul
      34: dadd
      35: dreturn

  public double dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: aload_2
      10: getfield      #2                  // Field x:D
      13: dmul
      14: aload_0
      15: getfield      #3                  // Field y:D
      18: aload_2
      19: getfield      #3                  // Field y:D
      22: dmul
      23: dadd
      24: dreturn

  public static double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #24                 // Method distance:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #25                 // Method distanceInf:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #26                 // Method distanceSq:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      11: ifeq          61
      14: aload_1
      15: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      18: astore_2
      19: aload_2
      20: invokevirtual #22                 // Method isNaN:()Z
      23: ifeq          31
      26: aload_0
      27: invokevirtual #22                 // Method isNaN:()Z
      30: ireturn
      31: aload_0
      32: getfield      #2                  // Field x:D
      35: aload_2
      36: getfield      #2                  // Field x:D
      39: dcmpl
      40: ifne          59
      43: aload_0
      44: getfield      #3                  // Field y:D
      47: aload_2
      48: getfield      #3                  // Field y:D
      51: dcmpl
      52: ifne          59
      55: iconst_1
      56: goto          60
      59: iconst_0
      60: ireturn
      61: iconst_0
      62: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #22                 // Method isNaN:()Z
       4: ifeq          11
       7: sipush        542
      10: ireturn
      11: bipush        122
      13: bipush        76
      15: aload_0
      16: getfield      #2                  // Field x:D
      19: invokestatic  #27                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      22: imul
      23: aload_0
      24: getfield      #3                  // Field y:D
      27: invokestatic  #27                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      30: iadd
      31: imul
      32: ireturn

  public java.lang.String toString();
    Code:
       0: invokestatic  #28                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.getInstance:()Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat;
       3: aload_0
       4: invokevirtual #29                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.format:(Lorg/apache/commons/math3/geometry/Vector;)Ljava/lang/String;
       7: areturn

  public java.lang.String toString(java.text.NumberFormat);
    Code:
       0: new           #30                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat
       3: dup
       4: aload_1
       5: invokespecial #31                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat."<init>":(Ljava/text/NumberFormat;)V
       8: aload_0
       9: invokevirtual #29                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2DFormat.format:(Lorg/apache/commons/math3/geometry/Vector;)Ljava/lang/String;
      12: areturn

  public org.apache.commons.math3.geometry.Vector scalarMultiply(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #20                 // Method scalarMultiply:(D)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector normalize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method normalize:()Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       4: areturn

  public org.apache.commons.math3.geometry.Vector negate();
    Code:
       0: aload_0
       1: invokevirtual #33                 // Method negate:()Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       4: areturn

  public org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: dload_1
       2: aload_3
       3: invokevirtual #34                 // Method subtract:(DLorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       6: areturn

  public org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #35                 // Method subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: dload_1
       2: aload_3
       3: invokevirtual #36                 // Method add:(DLorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       6: areturn

  public org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #37                 // Method add:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector getZero();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method getZero:()Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       4: areturn

  static {};
    Code:
       0: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       3: dup
       4: dconst_0
       5: dconst_0
       6: invokespecial #14                 // Method "<init>":(DD)V
       9: putstatic     #7                  // Field ZERO:Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
      12: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      15: dup
      16: ldc2_w        #39                 // double NaNd
      19: ldc2_w        #39                 // double NaNd
      22: invokespecial #14                 // Method "<init>":(DD)V
      25: putstatic     #41                 // Field NaN:Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
      28: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      31: dup
      32: ldc2_w        #42                 // double Infinityd
      35: ldc2_w        #42                 // double Infinityd
      38: invokespecial #14                 // Method "<init>":(DD)V
      41: putstatic     #44                 // Field POSITIVE_INFINITY:Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
      44: new           #11                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      47: dup
      48: ldc2_w        #45                 // double -Infinityd
      51: ldc2_w        #45                 // double -Infinityd
      54: invokespecial #14                 // Method "<init>":(DD)V
      57: putstatic     #47                 // Field NEGATIVE_INFINITY:Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
      60: return
}
