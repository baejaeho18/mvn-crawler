Compiled from "ChiSquaredDistribution.java"
public class org.apache.commons.math3.distribution.ChiSquaredDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final org.apache.commons.math3.distribution.GammaDistribution gamma;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.ChiSquaredDistribution(double);
    Code:
       0: aload_0
       1: dload_1
       2: ldc2_w        #1                  // double 1.0E-9d
       5: invokespecial #3                  // Method "<init>":(DD)V
       8: return

  public org.apache.commons.math3.distribution.ChiSquaredDistribution(double, double);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DD)V
      13: return

  public org.apache.commons.math3.distribution.ChiSquaredDistribution(org.apache.commons.math3.random.RandomGenerator, double, double);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: aload_0
       6: new           #8                  // class org/apache/commons/math3/distribution/GammaDistribution
       9: dup
      10: dload_2
      11: ldc2_w        #9                  // double 2.0d
      14: ddiv
      15: ldc2_w        #9                  // double 2.0d
      18: invokespecial #11                 // Method org/apache/commons/math3/distribution/GammaDistribution."<init>":(DD)V
      21: putfield      #12                 // Field gamma:Lorg/apache/commons/math3/distribution/GammaDistribution;
      24: aload_0
      25: dload         4
      27: putfield      #13                 // Field solverAbsoluteAccuracy:D
      30: return

  public double getDegreesOfFreedom();
    Code:
       0: aload_0
       1: getfield      #12                 // Field gamma:Lorg/apache/commons/math3/distribution/GammaDistribution;
       4: invokevirtual #14                 // Method org/apache/commons/math3/distribution/GammaDistribution.getShape:()D
       7: ldc2_w        #9                  // double 2.0d
      10: dmul
      11: dreturn

  public double density(double);
    Code:
       0: aload_0
       1: getfield      #12                 // Field gamma:Lorg/apache/commons/math3/distribution/GammaDistribution;
       4: dload_1
       5: invokevirtual #15                 // Method org/apache/commons/math3/distribution/GammaDistribution.density:(D)D
       8: dreturn

  public double cumulativeProbability(double);
    Code:
       0: aload_0
       1: getfield      #12                 // Field gamma:Lorg/apache/commons/math3/distribution/GammaDistribution;
       4: dload_1
       5: invokevirtual #16                 // Method org/apache/commons/math3/distribution/GammaDistribution.cumulativeProbability:(D)D
       8: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #13                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method getDegreesOfFreedom:()D
       4: dreturn

  public double getNumericalVariance();
    Code:
       0: ldc2_w        #9                  // double 2.0d
       3: aload_0
       4: invokevirtual #17                 // Method getDegreesOfFreedom:()D
       7: dmul
       8: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #18                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
