Compiled from "Line.java"
public class org.apache.commons.math3.geometry.euclidean.twod.Line implements org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>, org.apache.commons.math3.geometry.partitioning.Embedding<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> {
  private double angle;

  private double cos;

  private double sin;

  private double originOffset;

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #6                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)V
      10: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: dload_2
       7: invokevirtual #7                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;D)V
      10: return

  private org.apache.commons.math3.geometry.euclidean.twod.Line(double, double, double, double);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #8                  // Field angle:D
       9: aload_0
      10: dload_3
      11: putfield      #4                  // Field cos:D
      14: aload_0
      15: dload         5
      17: putfield      #3                  // Field sin:D
      20: aload_0
      21: dload         7
      23: putfield      #2                  // Field originOffset:D
      26: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #8                  // Field angle:D
       9: ldc2_w        #9                  // double 3.141592653589793d
      12: invokestatic  #11                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
      15: putfield      #8                  // Field angle:D
      18: aload_0
      19: aload_0
      20: getfield      #8                  // Field angle:D
      23: invokestatic  #12                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      26: putfield      #4                  // Field cos:D
      29: aload_0
      30: aload_0
      31: getfield      #8                  // Field angle:D
      34: invokestatic  #13                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      37: putfield      #3                  // Field sin:D
      40: aload_0
      41: aload_1
      42: getfield      #2                  // Field originOffset:D
      45: putfield      #2                  // Field originOffset:D
      48: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line copySelf();
    Code:
       0: new           #14                 // class org/apache/commons/math3/geometry/euclidean/twod/Line
       3: dup
       4: aload_0
       5: invokespecial #15                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/twod/Line;)V
       8: areturn

  public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_2
       1: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
       4: aload_1
       5: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
       8: dsub
       9: dstore_3
      10: aload_2
      11: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      14: aload_1
      15: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      18: dsub
      19: dstore        5
      21: dload_3
      22: dload         5
      24: invokestatic  #18                 // Method org/apache/commons/math3/util/FastMath.hypot:(DD)D
      27: dstore        7
      29: dload         7
      31: dconst_0
      32: dcmpl
      33: ifne          62
      36: aload_0
      37: dconst_0
      38: putfield      #8                  // Field angle:D
      41: aload_0
      42: dconst_1
      43: putfield      #4                  // Field cos:D
      46: aload_0
      47: dconst_0
      48: putfield      #3                  // Field sin:D
      51: aload_0
      52: aload_1
      53: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      56: putfield      #2                  // Field originOffset:D
      59: goto          126
      62: aload_0
      63: ldc2_w        #9                  // double 3.141592653589793d
      66: dload         5
      68: dneg
      69: dload_3
      70: dneg
      71: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      74: dadd
      75: putfield      #8                  // Field angle:D
      78: aload_0
      79: aload_0
      80: getfield      #8                  // Field angle:D
      83: invokestatic  #12                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      86: putfield      #4                  // Field cos:D
      89: aload_0
      90: aload_0
      91: getfield      #8                  // Field angle:D
      94: invokestatic  #13                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      97: putfield      #3                  // Field sin:D
     100: aload_0
     101: aload_2
     102: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
     105: aload_1
     106: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
     109: dmul
     110: aload_1
     111: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
     114: aload_2
     115: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
     118: dmul
     119: dsub
     120: dload         7
     122: ddiv
     123: putfield      #2                  // Field originOffset:D
     126: return

  public void reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double);
    Code:
       0: aload_0
       1: dload_2
       2: ldc2_w        #9                  // double 3.141592653589793d
       5: invokestatic  #11                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
       8: putfield      #8                  // Field angle:D
      11: aload_0
      12: aload_0
      13: getfield      #8                  // Field angle:D
      16: invokestatic  #12                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      19: putfield      #4                  // Field cos:D
      22: aload_0
      23: aload_0
      24: getfield      #8                  // Field angle:D
      27: invokestatic  #13                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      30: putfield      #3                  // Field sin:D
      33: aload_0
      34: aload_0
      35: getfield      #4                  // Field cos:D
      38: aload_1
      39: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      42: dmul
      43: aload_0
      44: getfield      #3                  // Field sin:D
      47: aload_1
      48: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      51: dmul
      52: dsub
      53: putfield      #2                  // Field originOffset:D
      56: return

  public void revertSelf();
    Code:
       0: aload_0
       1: getfield      #8                  // Field angle:D
       4: ldc2_w        #9                  // double 3.141592653589793d
       7: dcmpg
       8: ifge          26
      11: aload_0
      12: dup
      13: getfield      #8                  // Field angle:D
      16: ldc2_w        #9                  // double 3.141592653589793d
      19: dadd
      20: putfield      #8                  // Field angle:D
      23: goto          38
      26: aload_0
      27: dup
      28: getfield      #8                  // Field angle:D
      31: ldc2_w        #9                  // double 3.141592653589793d
      34: dsub
      35: putfield      #8                  // Field angle:D
      38: aload_0
      39: aload_0
      40: getfield      #4                  // Field cos:D
      43: dneg
      44: putfield      #4                  // Field cos:D
      47: aload_0
      48: aload_0
      49: getfield      #3                  // Field sin:D
      52: dneg
      53: putfield      #3                  // Field sin:D
      56: aload_0
      57: aload_0
      58: getfield      #2                  // Field originOffset:D
      61: dneg
      62: putfield      #2                  // Field originOffset:D
      65: return

  public org.apache.commons.math3.geometry.euclidean.twod.Line getReverse();
    Code:
       0: new           #14                 // class org/apache/commons/math3/geometry/euclidean/twod/Line
       3: dup
       4: aload_0
       5: getfield      #8                  // Field angle:D
       8: ldc2_w        #9                  // double 3.141592653589793d
      11: dcmpg
      12: ifge          26
      15: aload_0
      16: getfield      #8                  // Field angle:D
      19: ldc2_w        #9                  // double 3.141592653589793d
      22: dadd
      23: goto          34
      26: aload_0
      27: getfield      #8                  // Field angle:D
      30: ldc2_w        #9                  // double 3.141592653589793d
      33: dsub
      34: aload_0
      35: getfield      #4                  // Field cos:D
      38: dneg
      39: aload_0
      40: getfield      #3                  // Field sin:D
      43: dneg
      44: aload_0
      45: getfield      #2                  // Field originOffset:D
      48: dneg
      49: invokespecial #1                  // Method "<init>":(DDDD)V
      52: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: new           #21                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       8: dup
       9: aload_0
      10: getfield      #4                  // Field cos:D
      13: aload_2
      14: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      17: dmul
      18: aload_0
      19: getfield      #3                  // Field sin:D
      22: aload_2
      23: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      26: dmul
      27: dadd
      28: invokespecial #22                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D."<init>":(D)V
      31: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #21                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: invokevirtual #23                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D.getX:()D
       7: dstore_2
       8: new           #20                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      11: dup
      12: dload_2
      13: aload_0
      14: getfield      #4                  // Field cos:D
      17: dmul
      18: aload_0
      19: getfield      #2                  // Field originOffset:D
      22: aload_0
      23: getfield      #3                  // Field sin:D
      26: dmul
      27: dsub
      28: dload_2
      29: aload_0
      30: getfield      #3                  // Field sin:D
      33: dmul
      34: aload_0
      35: getfield      #2                  // Field originOffset:D
      38: aload_0
      39: getfield      #4                  // Field cos:D
      42: dmul
      43: dadd
      44: invokespecial #24                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      47: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D intersection(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sin:D
       4: aload_1
       5: getfield      #4                  // Field cos:D
       8: dmul
       9: aload_1
      10: getfield      #3                  // Field sin:D
      13: aload_0
      14: getfield      #4                  // Field cos:D
      17: dmul
      18: dsub
      19: dstore_2
      20: dload_2
      21: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      24: ldc2_w        #26                 // double 1.0E-10d
      27: dcmpg
      28: ifge          33
      31: aconst_null
      32: areturn
      33: new           #20                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      36: dup
      37: aload_0
      38: getfield      #4                  // Field cos:D
      41: aload_1
      42: getfield      #2                  // Field originOffset:D
      45: dmul
      46: aload_1
      47: getfield      #4                  // Field cos:D
      50: aload_0
      51: getfield      #2                  // Field originOffset:D
      54: dmul
      55: dsub
      56: dload_2
      57: ddiv
      58: aload_0
      59: getfield      #3                  // Field sin:D
      62: aload_1
      63: getfield      #2                  // Field originOffset:D
      66: dmul
      67: aload_1
      68: getfield      #3                  // Field sin:D
      71: aload_0
      72: getfield      #2                  // Field originOffset:D
      75: dmul
      76: dsub
      77: dload_2
      78: ddiv
      79: invokespecial #24                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      82: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.SubLine wholeHyperplane();
    Code:
       0: new           #28                 // class org/apache/commons/math3/geometry/euclidean/twod/SubLine
       3: dup
       4: aload_0
       5: new           #29                 // class org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet
       8: dup
       9: invokespecial #30                 // Method org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet."<init>":()V
      12: invokespecial #31                 // Method org/apache/commons/math3/geometry/euclidean/twod/SubLine."<init>":(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V
      15: areturn

  public org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet wholeSpace();
    Code:
       0: new           #32                 // class org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet
       3: dup
       4: invokespecial #33                 // Method org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet."<init>":()V
       7: areturn

  public double getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #2                  // Field originOffset:D
       4: aload_0
       5: getfield      #4                  // Field cos:D
       8: aload_1
       9: getfield      #4                  // Field cos:D
      12: dmul
      13: aload_0
      14: getfield      #3                  // Field sin:D
      17: aload_1
      18: getfield      #3                  // Field sin:D
      21: dmul
      22: dadd
      23: dconst_0
      24: dcmpl
      25: ifle          36
      28: aload_1
      29: getfield      #2                  // Field originOffset:D
      32: dneg
      33: goto          40
      36: aload_1
      37: getfield      #2                  // Field originOffset:D
      40: dadd
      41: dreturn

  public double getOffset(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: aload_0
       6: getfield      #3                  // Field sin:D
       9: aload_2
      10: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      13: dmul
      14: aload_0
      15: getfield      #4                  // Field cos:D
      18: aload_2
      19: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      22: dmul
      23: dsub
      24: aload_0
      25: getfield      #2                  // Field originOffset:D
      28: dadd
      29: dreturn

  public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #14                 // class org/apache/commons/math3/geometry/euclidean/twod/Line
       4: astore_2
       5: aload_0
       6: getfield      #3                  // Field sin:D
       9: aload_2
      10: getfield      #3                  // Field sin:D
      13: dmul
      14: aload_0
      15: getfield      #4                  // Field cos:D
      18: aload_2
      19: getfield      #4                  // Field cos:D
      22: dmul
      23: dadd
      24: dconst_0
      25: dcmpl
      26: iflt          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double);
    Code:
       0: aload_1
       1: invokevirtual #23                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D.getX:()D
       4: dstore        4
       6: dload_2
       7: aload_0
       8: getfield      #2                  // Field originOffset:D
      11: dsub
      12: dstore        6
      14: new           #20                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
      17: dup
      18: dload         4
      20: aload_0
      21: getfield      #4                  // Field cos:D
      24: dmul
      25: dload         6
      27: aload_0
      28: getfield      #3                  // Field sin:D
      31: dmul
      32: dadd
      33: dload         4
      35: aload_0
      36: getfield      #3                  // Field sin:D
      39: dmul
      40: dload         6
      42: aload_0
      43: getfield      #4                  // Field cos:D
      46: dmul
      47: dsub
      48: invokespecial #24                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      51: areturn

  public boolean contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #34                 // Method getOffset:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       8: ldc2_w        #26                 // double 1.0E-10d
      11: dcmpg
      12: ifge          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public double distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #34                 // Method getOffset:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       8: dreturn

  public boolean isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sin:D
       4: aload_1
       5: getfield      #4                  // Field cos:D
       8: dmul
       9: aload_0
      10: getfield      #4                  // Field cos:D
      13: aload_1
      14: getfield      #3                  // Field sin:D
      17: dmul
      18: dsub
      19: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      22: ldc2_w        #26                 // double 1.0E-10d
      25: dcmpg
      26: ifge          33
      29: iconst_1
      30: goto          34
      33: iconst_0
      34: ireturn

  public void translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D);
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field cos:D
       5: aload_1
       6: invokevirtual #17                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
       9: dmul
      10: aload_0
      11: getfield      #3                  // Field sin:D
      14: aload_1
      15: invokevirtual #16                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      18: dmul
      19: dsub
      20: putfield      #2                  // Field originOffset:D
      23: return

  public double getAngle();
    Code:
       0: aload_0
       1: getfield      #8                  // Field angle:D
       4: ldc2_w        #9                  // double 3.141592653589793d
       7: invokestatic  #11                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
      10: dreturn

  public void setAngle(double);
    Code:
       0: aload_0
       1: dload_1
       2: ldc2_w        #9                  // double 3.141592653589793d
       5: invokestatic  #11                 // Method org/apache/commons/math3/util/MathUtils.normalizeAngle:(DD)D
       8: putfield      #8                  // Field angle:D
      11: aload_0
      12: aload_0
      13: getfield      #8                  // Field angle:D
      16: invokestatic  #12                 // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      19: putfield      #4                  // Field cos:D
      22: aload_0
      23: aload_0
      24: getfield      #8                  // Field angle:D
      27: invokestatic  #13                 // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      30: putfield      #3                  // Field sin:D
      33: return

  public double getOriginOffset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field originOffset:D
       4: dreturn

  public void setOriginOffset(double);
    Code:
       0: aload_0
       1: dload_1
       2: putfield      #2                  // Field originOffset:D
       5: return

  public static org.apache.commons.math3.geometry.partitioning.Transform<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> getTransform(java.awt.geom.AffineTransform) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: new           #35                 // class org/apache/commons/math3/geometry/euclidean/twod/Line$LineTransform
       3: dup
       4: aload_0
       5: invokespecial #36                 // Method org/apache/commons/math3/geometry/euclidean/twod/Line$LineTransform."<init>":(Ljava/awt/geom/AffineTransform;)V
       8: areturn

  public org.apache.commons.math3.geometry.partitioning.Region wholeSpace();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method wholeSpace:()Lorg/apache/commons/math3/geometry/euclidean/twod/PolygonsSet;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane();
    Code:
       0: aload_0
       1: invokevirtual #38                 // Method wholeHyperplane:()Lorg/apache/commons/math3/geometry/euclidean/twod/SubLine;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method copySelf:()Lorg/apache/commons/math3/geometry/euclidean/twod/Line;
       4: areturn

  public org.apache.commons.math3.geometry.Vector toSpace(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #40                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector toSubSpace(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #41                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn

  static double access$000(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #4                  // Field cos:D
       4: dreturn

  static double access$100(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field sin:D
       4: dreturn

  static double access$200(org.apache.commons.math3.geometry.euclidean.twod.Line);
    Code:
       0: aload_0
       1: getfield      #2                  // Field originOffset:D
       4: dreturn

  org.apache.commons.math3.geometry.euclidean.twod.Line(double, double, double, double, org.apache.commons.math3.geometry.euclidean.twod.Line$1);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: dload         5
       5: dload         7
       7: invokespecial #1                  // Method "<init>":(DDDD)V
      10: return
}
