Compiled from "Array2DRowRealMatrix.java"
public class org.apache.commons.math3.linear.Array2DRowRealMatrix extends org.apache.commons.math3.linear.AbstractRealMatrix implements java.io.Serializable {
  private static final long serialVersionUID;

  private double[][] data;

  public org.apache.commons.math3.linear.Array2DRowRealMatrix();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":()V
       4: return

  public org.apache.commons.math3.linear.Array2DRowRealMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokespecial #2                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":(II)V
       6: aload_0
       7: iload_1
       8: iload_2
       9: multianewarray #3,  2             // class "[[D"
      13: putfield      #4                  // Field data:[[D
      16: return

  public org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":()V
       4: aload_0
       5: aload_1
       6: invokespecial #5                  // Method copyIn:([[D)V
       9: return

  public org.apache.commons.math3.linear.Array2DRowRealMatrix(double[][], boolean) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":()V
       4: iload_2
       5: ifeq          16
       8: aload_0
       9: aload_1
      10: invokespecial #5                  // Method copyIn:([[D)V
      13: goto          113
      16: aload_1
      17: ifnonnull     28
      20: new           #6                  // class org/apache/commons/math3/exception/NullArgumentException
      23: dup
      24: invokespecial #7                  // Method org/apache/commons/math3/exception/NullArgumentException."<init>":()V
      27: athrow
      28: aload_1
      29: arraylength
      30: istore_3
      31: iload_3
      32: ifne          46
      35: new           #8                  // class org/apache/commons/math3/exception/NoDataException
      38: dup
      39: getstatic     #9                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_ROW:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      42: invokespecial #10                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      45: athrow
      46: aload_1
      47: iconst_0
      48: aaload
      49: arraylength
      50: istore        4
      52: iload         4
      54: ifne          68
      57: new           #8                  // class org/apache/commons/math3/exception/NoDataException
      60: dup
      61: getstatic     #11                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_COLUMN:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      64: invokespecial #10                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      67: athrow
      68: iconst_1
      69: istore        5
      71: iload         5
      73: iload_3
      74: if_icmpge     108
      77: aload_1
      78: iload         5
      80: aaload
      81: arraylength
      82: iload         4
      84: if_icmpeq     102
      87: new           #12                 // class org/apache/commons/math3/exception/DimensionMismatchException
      90: dup
      91: aload_1
      92: iload         5
      94: aaload
      95: arraylength
      96: iload         4
      98: invokespecial #13                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
     101: athrow
     102: iinc          5, 1
     105: goto          71
     108: aload_0
     109: aload_1
     110: putfield      #4                  // Field data:[[D
     113: return

  public org.apache.commons.math3.linear.Array2DRowRealMatrix(double[]);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/commons/math3/linear/AbstractRealMatrix."<init>":()V
       4: aload_1
       5: arraylength
       6: istore_2
       7: aload_0
       8: iload_2
       9: iconst_1
      10: multianewarray #3,  2             // class "[[D"
      14: putfield      #4                  // Field data:[[D
      17: iconst_0
      18: istore_3
      19: iload_3
      20: iload_2
      21: if_icmpge     41
      24: aload_0
      25: getfield      #4                  // Field data:[[D
      28: iload_3
      29: aaload
      30: iconst_0
      31: aload_1
      32: iload_3
      33: daload
      34: dastore
      35: iinc          3, 1
      38: goto          19
      41: return

  public org.apache.commons.math3.linear.RealMatrix createMatrix(int, int) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: new           #14                 // class org/apache/commons/math3/linear/Array2DRowRealMatrix
       3: dup
       4: iload_1
       5: iload_2
       6: invokespecial #15                 // Method "<init>":(II)V
       9: areturn

  public org.apache.commons.math3.linear.RealMatrix copy();
    Code:
       0: new           #14                 // class org/apache/commons/math3/linear/Array2DRowRealMatrix
       3: dup
       4: aload_0
       5: invokespecial #16                 // Method copyOut:()[[D
       8: iconst_0
       9: invokespecial #17                 // Method "<init>":([[DZ)V
      12: areturn

  public org.apache.commons.math3.linear.Array2DRowRealMatrix add(org.apache.commons.math3.linear.Array2DRowRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #18                 // Method org/apache/commons/math3/linear/MatrixUtils.checkAdditionCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_0
      11: invokevirtual #20                 // Method getColumnDimension:()I
      14: istore_3
      15: iload_2
      16: iload_3
      17: multianewarray #3,  2             // class "[[D"
      21: astore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload_2
      29: if_icmpge     94
      32: aload_0
      33: getfield      #4                  // Field data:[[D
      36: iload         5
      38: aaload
      39: astore        6
      41: aload_1
      42: getfield      #4                  // Field data:[[D
      45: iload         5
      47: aaload
      48: astore        7
      50: aload         4
      52: iload         5
      54: aaload
      55: astore        8
      57: iconst_0
      58: istore        9
      60: iload         9
      62: iload_3
      63: if_icmpge     88
      66: aload         8
      68: iload         9
      70: aload         6
      72: iload         9
      74: daload
      75: aload         7
      77: iload         9
      79: daload
      80: dadd
      81: dastore
      82: iinc          9, 1
      85: goto          60
      88: iinc          5, 1
      91: goto          26
      94: new           #14                 // class org/apache/commons/math3/linear/Array2DRowRealMatrix
      97: dup
      98: aload         4
     100: iconst_0
     101: invokespecial #17                 // Method "<init>":([[DZ)V
     104: areturn

  public org.apache.commons.math3.linear.Array2DRowRealMatrix subtract(org.apache.commons.math3.linear.Array2DRowRealMatrix) throws org.apache.commons.math3.linear.MatrixDimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #21                 // Method org/apache/commons/math3/linear/MatrixUtils.checkSubtractionCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_0
      11: invokevirtual #20                 // Method getColumnDimension:()I
      14: istore_3
      15: iload_2
      16: iload_3
      17: multianewarray #3,  2             // class "[[D"
      21: astore        4
      23: iconst_0
      24: istore        5
      26: iload         5
      28: iload_2
      29: if_icmpge     94
      32: aload_0
      33: getfield      #4                  // Field data:[[D
      36: iload         5
      38: aaload
      39: astore        6
      41: aload_1
      42: getfield      #4                  // Field data:[[D
      45: iload         5
      47: aaload
      48: astore        7
      50: aload         4
      52: iload         5
      54: aaload
      55: astore        8
      57: iconst_0
      58: istore        9
      60: iload         9
      62: iload_3
      63: if_icmpge     88
      66: aload         8
      68: iload         9
      70: aload         6
      72: iload         9
      74: daload
      75: aload         7
      77: iload         9
      79: daload
      80: dsub
      81: dastore
      82: iinc          9, 1
      85: goto          60
      88: iinc          5, 1
      91: goto          26
      94: new           #14                 // class org/apache/commons/math3/linear/Array2DRowRealMatrix
      97: dup
      98: aload         4
     100: iconst_0
     101: invokespecial #17                 // Method "<init>":([[DZ)V
     104: areturn

  public org.apache.commons.math3.linear.Array2DRowRealMatrix multiply(org.apache.commons.math3.linear.Array2DRowRealMatrix) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #22                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMultiplicationCompatible:(Lorg/apache/commons/math3/linear/AnyMatrix;Lorg/apache/commons/math3/linear/AnyMatrix;)V
       5: aload_0
       6: invokevirtual #19                 // Method getRowDimension:()I
       9: istore_2
      10: aload_1
      11: invokevirtual #20                 // Method getColumnDimension:()I
      14: istore_3
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: istore        4
      21: iload_2
      22: iload_3
      23: multianewarray #3,  2             // class "[[D"
      27: astore        5
      29: iload         4
      31: newarray       double
      33: astore        6
      35: aload_1
      36: getfield      #4                  // Field data:[[D
      39: astore        7
      41: iconst_0
      42: istore        8
      44: iload         8
      46: iload_3
      47: if_icmpge     154
      50: iconst_0
      51: istore        9
      53: iload         9
      55: iload         4
      57: if_icmpge     79
      60: aload         6
      62: iload         9
      64: aload         7
      66: iload         9
      68: aaload
      69: iload         8
      71: daload
      72: dastore
      73: iinc          9, 1
      76: goto          53
      79: iconst_0
      80: istore        9
      82: iload         9
      84: iload_2
      85: if_icmpge     148
      88: aload_0
      89: getfield      #4                  // Field data:[[D
      92: iload         9
      94: aaload
      95: astore        10
      97: dconst_0
      98: dstore        11
     100: iconst_0
     101: istore        13
     103: iload         13
     105: iload         4
     107: if_icmpge     132
     110: dload         11
     112: aload         10
     114: iload         13
     116: daload
     117: aload         6
     119: iload         13
     121: daload
     122: dmul
     123: dadd
     124: dstore        11
     126: iinc          13, 1
     129: goto          103
     132: aload         5
     134: iload         9
     136: aaload
     137: iload         8
     139: dload         11
     141: dastore
     142: iinc          9, 1
     145: goto          82
     148: iinc          8, 1
     151: goto          44
     154: new           #14                 // class org/apache/commons/math3/linear/Array2DRowRealMatrix
     157: dup
     158: aload         5
     160: iconst_0
     161: invokespecial #17                 // Method "<init>":([[DZ)V
     164: areturn

  public double[][] getData();
    Code:
       0: aload_0
       1: invokespecial #16                 // Method copyOut:()[[D
       4: areturn

  public double[][] getDataRef();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[[D
       4: areturn

  public void setSubMatrix(double[][], int, int) throws org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[[D
       4: ifnonnull     184
       7: iload_2
       8: ifle          33
      11: new           #23                 // class org/apache/commons/math3/exception/MathIllegalStateException
      14: dup
      15: getstatic     #24                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: iconst_1
      19: anewarray     #25                 // class java/lang/Object
      22: dup
      23: iconst_0
      24: iload_2
      25: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: aastore
      29: invokespecial #27                 // Method org/apache/commons/math3/exception/MathIllegalStateException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      32: athrow
      33: iload_3
      34: ifle          59
      37: new           #23                 // class org/apache/commons/math3/exception/MathIllegalStateException
      40: dup
      41: getstatic     #28                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      44: iconst_1
      45: anewarray     #25                 // class java/lang/Object
      48: dup
      49: iconst_0
      50: iload_3
      51: invokestatic  #26                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      54: aastore
      55: invokespecial #27                 // Method org/apache/commons/math3/exception/MathIllegalStateException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      58: athrow
      59: aload_1
      60: invokestatic  #29                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
      63: aload_1
      64: arraylength
      65: istore        4
      67: iload         4
      69: ifne          83
      72: new           #8                  // class org/apache/commons/math3/exception/NoDataException
      75: dup
      76: getstatic     #9                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_ROW:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      79: invokespecial #10                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
      82: athrow
      83: aload_1
      84: iconst_0
      85: aaload
      86: arraylength
      87: istore        5
      89: iload         5
      91: ifne          105
      94: new           #8                  // class org/apache/commons/math3/exception/NoDataException
      97: dup
      98: getstatic     #11                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.AT_LEAST_ONE_COLUMN:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
     101: invokespecial #10                 // Method org/apache/commons/math3/exception/NoDataException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;)V
     104: athrow
     105: aload_0
     106: aload_1
     107: arraylength
     108: iload         5
     110: multianewarray #3,  2             // class "[[D"
     114: putfield      #4                  // Field data:[[D
     117: iconst_0
     118: istore        6
     120: iload         6
     122: aload_0
     123: getfield      #4                  // Field data:[[D
     126: arraylength
     127: if_icmpge     181
     130: aload_1
     131: iload         6
     133: aaload
     134: arraylength
     135: iload         5
     137: if_icmpeq     155
     140: new           #12                 // class org/apache/commons/math3/exception/DimensionMismatchException
     143: dup
     144: aload_1
     145: iload         6
     147: aaload
     148: arraylength
     149: iload         5
     151: invokespecial #13                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
     154: athrow
     155: aload_1
     156: iload         6
     158: aaload
     159: iconst_0
     160: aload_0
     161: getfield      #4                  // Field data:[[D
     164: iload         6
     166: iload_2
     167: iadd
     168: aaload
     169: iload_3
     170: iload         5
     172: invokestatic  #30                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     175: iinc          6, 1
     178: goto          120
     181: goto          191
     184: aload_0
     185: aload_1
     186: iload_2
     187: iload_3
     188: invokespecial #31                 // Method org/apache/commons/math3/linear/AbstractRealMatrix.setSubMatrix:([[DII)V
     191: return

  public double getEntry(int, int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #32                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;II)V
       6: aload_0
       7: getfield      #4                  // Field data:[[D
      10: iload_1
      11: aaload
      12: iload_2
      13: daload
      14: dreturn

  public void setEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #32                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;II)V
       6: aload_0
       7: getfield      #4                  // Field data:[[D
      10: iload_1
      11: aaload
      12: iload_2
      13: dload_3
      14: dastore
      15: return

  public void addToEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #32                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;II)V
       6: aload_0
       7: getfield      #4                  // Field data:[[D
      10: iload_1
      11: aaload
      12: iload_2
      13: dup2
      14: daload
      15: dload_3
      16: dadd
      17: dastore
      18: return

  public void multiplyEntry(int, int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokestatic  #32                 // Method org/apache/commons/math3/linear/MatrixUtils.checkMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;II)V
       6: aload_0
       7: getfield      #4                  // Field data:[[D
      10: iload_1
      11: aaload
      12: iload_2
      13: dup2
      14: daload
      15: dload_3
      16: dmul
      17: dastore
      18: return

  public int getRowDimension();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[[D
       4: ifnonnull     11
       7: iconst_0
       8: goto          16
      11: aload_0
      12: getfield      #4                  // Field data:[[D
      15: arraylength
      16: ireturn

  public int getColumnDimension();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[[D
       4: ifnull        16
       7: aload_0
       8: getfield      #4                  // Field data:[[D
      11: iconst_0
      12: aaload
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: getfield      #4                  // Field data:[[D
      24: iconst_0
      25: aaload
      26: arraylength
      27: ireturn

  public double[] operate(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: arraylength
      12: iload_3
      13: if_icmpeq     27
      16: new           #12                 // class org/apache/commons/math3/exception/DimensionMismatchException
      19: dup
      20: aload_1
      21: arraylength
      22: iload_3
      23: invokespecial #13                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      26: athrow
      27: iload_2
      28: newarray       double
      30: astore        4
      32: iconst_0
      33: istore        5
      35: iload         5
      37: iload_2
      38: if_icmpge     96
      41: aload_0
      42: getfield      #4                  // Field data:[[D
      45: iload         5
      47: aaload
      48: astore        6
      50: dconst_0
      51: dstore        7
      53: iconst_0
      54: istore        9
      56: iload         9
      58: iload_3
      59: if_icmpge     83
      62: dload         7
      64: aload         6
      66: iload         9
      68: daload
      69: aload_1
      70: iload         9
      72: daload
      73: dmul
      74: dadd
      75: dstore        7
      77: iinc          9, 1
      80: goto          56
      83: aload         4
      85: iload         5
      87: dload         7
      89: dastore
      90: iinc          5, 1
      93: goto          35
      96: aload         4
      98: areturn

  public double[] preMultiply(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: arraylength
      12: iload_2
      13: if_icmpeq     27
      16: new           #12                 // class org/apache/commons/math3/exception/DimensionMismatchException
      19: dup
      20: aload_1
      21: arraylength
      22: iload_2
      23: invokespecial #13                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      26: athrow
      27: iload_3
      28: newarray       double
      30: astore        4
      32: iconst_0
      33: istore        5
      35: iload         5
      37: iload_3
      38: if_icmpge     92
      41: dconst_0
      42: dstore        6
      44: iconst_0
      45: istore        8
      47: iload         8
      49: iload_2
      50: if_icmpge     79
      53: dload         6
      55: aload_0
      56: getfield      #4                  // Field data:[[D
      59: iload         8
      61: aaload
      62: iload         5
      64: daload
      65: aload_1
      66: iload         8
      68: daload
      69: dmul
      70: dadd
      71: dstore        6
      73: iinc          8, 1
      76: goto          47
      79: aload         4
      81: iload         5
      83: dload         6
      85: dastore
      86: iinc          5, 1
      89: goto          35
      92: aload         4
      94: areturn

  public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #33,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_2
      32: if_icmpge     85
      35: aload_0
      36: getfield      #4                  // Field data:[[D
      39: iload         4
      41: aaload
      42: astore        5
      44: iconst_0
      45: istore        6
      47: iload         6
      49: iload_3
      50: if_icmpge     79
      53: aload         5
      55: iload         6
      57: aload_1
      58: iload         4
      60: iload         6
      62: aload         5
      64: iload         6
      66: daload
      67: invokeinterface #34,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.visit:(IID)D
      72: dastore
      73: iinc          6, 1
      76: goto          47
      79: iinc          4, 1
      82: goto          29
      85: aload_1
      86: invokeinterface #35,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.end:()D
      91: dreturn

  public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #36,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_2
      32: if_icmpge     80
      35: aload_0
      36: getfield      #4                  // Field data:[[D
      39: iload         4
      41: aaload
      42: astore        5
      44: iconst_0
      45: istore        6
      47: iload         6
      49: iload_3
      50: if_icmpge     74
      53: aload_1
      54: iload         4
      56: iload         6
      58: aload         5
      60: iload         6
      62: daload
      63: invokeinterface #37,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.visit:(IID)V
      68: iinc          6, 1
      71: goto          47
      74: iinc          4, 1
      77: goto          29
      80: aload_1
      81: invokeinterface #38,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.end:()D
      86: dreturn

  public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokestatic  #39                 // Method org/apache/commons/math3/linear/MatrixUtils.checkSubMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #33,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.start:(IIIIII)V
      30: iload_2
      31: istore        6
      33: iload         6
      35: iload_3
      36: if_icmpgt     91
      39: aload_0
      40: getfield      #4                  // Field data:[[D
      43: iload         6
      45: aaload
      46: astore        7
      48: iload         4
      50: istore        8
      52: iload         8
      54: iload         5
      56: if_icmpgt     85
      59: aload         7
      61: iload         8
      63: aload_1
      64: iload         6
      66: iload         8
      68: aload         7
      70: iload         8
      72: daload
      73: invokeinterface #34,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.visit:(IID)D
      78: dastore
      79: iinc          8, 1
      82: goto          52
      85: iinc          6, 1
      88: goto          33
      91: aload_1
      92: invokeinterface #35,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.end:()D
      97: dreturn

  public double walkInRowOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokestatic  #39                 // Method org/apache/commons/math3/linear/MatrixUtils.checkSubMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #36,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.start:(IIIIII)V
      30: iload_2
      31: istore        6
      33: iload         6
      35: iload_3
      36: if_icmpgt     86
      39: aload_0
      40: getfield      #4                  // Field data:[[D
      43: iload         6
      45: aaload
      46: astore        7
      48: iload         4
      50: istore        8
      52: iload         8
      54: iload         5
      56: if_icmpgt     80
      59: aload_1
      60: iload         6
      62: iload         8
      64: aload         7
      66: iload         8
      68: daload
      69: invokeinterface #37,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.visit:(IID)V
      74: iinc          8, 1
      77: goto          52
      80: iinc          6, 1
      83: goto          33
      86: aload_1
      87: invokeinterface #38,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.end:()D
      92: dreturn

  public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #33,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_3
      32: if_icmpge     85
      35: iconst_0
      36: istore        5
      38: iload         5
      40: iload_2
      41: if_icmpge     79
      44: aload_0
      45: getfield      #4                  // Field data:[[D
      48: iload         5
      50: aaload
      51: astore        6
      53: aload         6
      55: iload         4
      57: aload_1
      58: iload         5
      60: iload         4
      62: aload         6
      64: iload         4
      66: daload
      67: invokeinterface #34,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.visit:(IID)D
      72: dastore
      73: iinc          5, 1
      76: goto          38
      79: iinc          4, 1
      82: goto          29
      85: aload_1
      86: invokeinterface #35,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.end:()D
      91: dreturn

  public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_2
       5: aload_0
       6: invokevirtual #20                 // Method getColumnDimension:()I
       9: istore_3
      10: aload_1
      11: iload_2
      12: iload_3
      13: iconst_0
      14: iload_2
      15: iconst_1
      16: isub
      17: iconst_0
      18: iload_3
      19: iconst_1
      20: isub
      21: invokeinterface #36,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.start:(IIIIII)V
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_3
      32: if_icmpge     76
      35: iconst_0
      36: istore        5
      38: iload         5
      40: iload_2
      41: if_icmpge     70
      44: aload_1
      45: iload         5
      47: iload         4
      49: aload_0
      50: getfield      #4                  // Field data:[[D
      53: iload         5
      55: aaload
      56: iload         4
      58: daload
      59: invokeinterface #37,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.visit:(IID)V
      64: iinc          5, 1
      67: goto          38
      70: iinc          4, 1
      73: goto          29
      76: aload_1
      77: invokeinterface #38,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.end:()D
      82: dreturn

  public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixChangingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokestatic  #39                 // Method org/apache/commons/math3/linear/MatrixUtils.checkSubMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #33,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.start:(IIIIII)V
      30: iload         4
      32: istore        6
      34: iload         6
      36: iload         5
      38: if_icmpgt     91
      41: iload_2
      42: istore        7
      44: iload         7
      46: iload_3
      47: if_icmpgt     85
      50: aload_0
      51: getfield      #4                  // Field data:[[D
      54: iload         7
      56: aaload
      57: astore        8
      59: aload         8
      61: iload         6
      63: aload_1
      64: iload         7
      66: iload         6
      68: aload         8
      70: iload         6
      72: daload
      73: invokeinterface #34,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.visit:(IID)D
      78: dastore
      79: iinc          7, 1
      82: goto          44
      85: iinc          6, 1
      88: goto          34
      91: aload_1
      92: invokeinterface #35,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixChangingVisitor.end:()D
      97: dreturn

  public double walkInColumnOrder(org.apache.commons.math3.linear.RealMatrixPreservingVisitor, int, int, int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NumberIsTooSmallException;
    Code:
       0: aload_0
       1: iload_2
       2: iload_3
       3: iload         4
       5: iload         5
       7: invokestatic  #39                 // Method org/apache/commons/math3/linear/MatrixUtils.checkSubMatrixIndex:(Lorg/apache/commons/math3/linear/AnyMatrix;IIII)V
      10: aload_1
      11: aload_0
      12: invokevirtual #19                 // Method getRowDimension:()I
      15: aload_0
      16: invokevirtual #20                 // Method getColumnDimension:()I
      19: iload_2
      20: iload_3
      21: iload         4
      23: iload         5
      25: invokeinterface #36,  7           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.start:(IIIIII)V
      30: iload         4
      32: istore        6
      34: iload         6
      36: iload         5
      38: if_icmpgt     82
      41: iload_2
      42: istore        7
      44: iload         7
      46: iload_3
      47: if_icmpgt     76
      50: aload_1
      51: iload         7
      53: iload         6
      55: aload_0
      56: getfield      #4                  // Field data:[[D
      59: iload         7
      61: aaload
      62: iload         6
      64: daload
      65: invokeinterface #37,  5           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.visit:(IID)V
      70: iinc          7, 1
      73: goto          44
      76: iinc          6, 1
      79: goto          34
      82: aload_1
      83: invokeinterface #38,  1           // InterfaceMethod org/apache/commons/math3/linear/RealMatrixPreservingVisitor.end:()D
      88: dreturn

  private double[][] copyOut();
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method getRowDimension:()I
       4: istore_1
       5: iload_1
       6: aload_0
       7: invokevirtual #20                 // Method getColumnDimension:()I
      10: multianewarray #3,  2             // class "[[D"
      14: astore_2
      15: iconst_0
      16: istore_3
      17: iload_3
      18: iload_1
      19: if_icmpge     49
      22: aload_0
      23: getfield      #4                  // Field data:[[D
      26: iload_3
      27: aaload
      28: iconst_0
      29: aload_2
      30: iload_3
      31: aaload
      32: iconst_0
      33: aload_0
      34: getfield      #4                  // Field data:[[D
      37: iload_3
      38: aaload
      39: arraylength
      40: invokestatic  #30                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      43: iinc          3, 1
      46: goto          17
      49: aload_2
      50: areturn

  private void copyIn(double[][]) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.NoDataException, org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: iconst_0
       4: invokevirtual #40                 // Method setSubMatrix:([[DII)V
       7: return
}
