Compiled from "OpenMapRealVector.java"
public class org.apache.commons.math3.linear.OpenMapRealVector extends org.apache.commons.math3.linear.SparseRealVector implements java.io.Serializable {
  public static final double DEFAULT_ZERO_TOLERANCE;

  private static final long serialVersionUID;

  private final org.apache.commons.math3.util.OpenIntToDoubleHashMap entries;

  private final int virtualSize;

  private final double epsilon;

  public org.apache.commons.math3.linear.OpenMapRealVector();
    Code:
       0: aload_0
       1: iconst_0
       2: ldc2_w        #2                  // double 1.0E-12d
       5: invokespecial #4                  // Method "<init>":(ID)V
       8: return

  public org.apache.commons.math3.linear.OpenMapRealVector(int);
    Code:
       0: aload_0
       1: iload_1
       2: ldc2_w        #2                  // double 1.0E-12d
       5: invokespecial #4                  // Method "<init>":(ID)V
       8: return

  public org.apache.commons.math3.linear.OpenMapRealVector(int, double);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #6                  // Field virtualSize:I
       9: aload_0
      10: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      13: dup
      14: dconst_0
      15: invokespecial #8                  // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(D)V
      18: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      21: aload_0
      22: dload_2
      23: putfield      #9                  // Field epsilon:D
      26: return

  protected org.apache.commons.math3.linear.OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector, int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #10                 // Method getDimension:()I
       9: iload_2
      10: iadd
      11: putfield      #6                  // Field virtualSize:I
      14: aload_0
      15: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      18: dup
      19: aload_1
      20: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      23: invokespecial #11                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V
      26: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      29: aload_0
      30: aload_1
      31: getfield      #9                  // Field epsilon:D
      34: putfield      #9                  // Field epsilon:D
      37: return

  public org.apache.commons.math3.linear.OpenMapRealVector(int, int);
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: ldc2_w        #2                  // double 1.0E-12d
       6: invokespecial #12                 // Method "<init>":(IID)V
       9: return

  public org.apache.commons.math3.linear.OpenMapRealVector(int, int, double);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: iload_1
       6: putfield      #6                  // Field virtualSize:I
       9: aload_0
      10: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      13: dup
      14: iload_2
      15: dconst_0
      16: invokespecial #13                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(ID)V
      19: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      22: aload_0
      23: dload_3
      24: putfield      #9                  // Field epsilon:D
      27: return

  public org.apache.commons.math3.linear.OpenMapRealVector(double[]);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #2                  // double 1.0E-12d
       5: invokespecial #14                 // Method "<init>":([DD)V
       8: return

  public org.apache.commons.math3.linear.OpenMapRealVector(double[], double);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: aload_1
       6: arraylength
       7: putfield      #6                  // Field virtualSize:I
      10: aload_0
      11: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      14: dup
      15: dconst_0
      16: invokespecial #8                  // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(D)V
      19: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      22: aload_0
      23: dload_2
      24: putfield      #9                  // Field epsilon:D
      27: iconst_0
      28: istore        4
      30: iload         4
      32: aload_1
      33: arraylength
      34: if_icmpge     70
      37: aload_1
      38: iload         4
      40: daload
      41: dstore        5
      43: aload_0
      44: dload         5
      46: invokevirtual #15                 // Method isDefaultValue:(D)Z
      49: ifne          64
      52: aload_0
      53: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      56: iload         4
      58: dload         5
      60: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      63: pop2
      64: iinc          4, 1
      67: goto          30
      70: return

  public org.apache.commons.math3.linear.OpenMapRealVector(java.lang.Double[]);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #2                  // double 1.0E-12d
       5: invokespecial #17                 // Method "<init>":([Ljava/lang/Double;D)V
       8: return

  public org.apache.commons.math3.linear.OpenMapRealVector(java.lang.Double[], double);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: aload_1
       6: arraylength
       7: putfield      #6                  // Field virtualSize:I
      10: aload_0
      11: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      14: dup
      15: dconst_0
      16: invokespecial #8                  // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(D)V
      19: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      22: aload_0
      23: dload_2
      24: putfield      #9                  // Field epsilon:D
      27: iconst_0
      28: istore        4
      30: iload         4
      32: aload_1
      33: arraylength
      34: if_icmpge     73
      37: aload_1
      38: iload         4
      40: aaload
      41: invokevirtual #18                 // Method java/lang/Double.doubleValue:()D
      44: dstore        5
      46: aload_0
      47: dload         5
      49: invokevirtual #15                 // Method isDefaultValue:(D)Z
      52: ifne          67
      55: aload_0
      56: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      59: iload         4
      61: dload         5
      63: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      66: pop2
      67: iinc          4, 1
      70: goto          30
      73: return

  public org.apache.commons.math3.linear.OpenMapRealVector(org.apache.commons.math3.linear.OpenMapRealVector);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #10                 // Method getDimension:()I
       9: putfield      #6                  // Field virtualSize:I
      12: aload_0
      13: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      16: dup
      17: aload_1
      18: invokespecial #19                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      21: invokespecial #11                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;)V
      24: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      27: aload_0
      28: aload_1
      29: getfield      #9                  // Field epsilon:D
      32: putfield      #9                  // Field epsilon:D
      35: return

  public org.apache.commons.math3.linear.OpenMapRealVector(org.apache.commons.math3.linear.RealVector);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method org/apache/commons/math3/linear/SparseRealVector."<init>":()V
       4: aload_0
       5: aload_1
       6: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       9: putfield      #6                  // Field virtualSize:I
      12: aload_0
      13: new           #7                  // class org/apache/commons/math3/util/OpenIntToDoubleHashMap
      16: dup
      17: dconst_0
      18: invokespecial #8                  // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap."<init>":(D)V
      21: putfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      24: aload_0
      25: ldc2_w        #2                  // double 1.0E-12d
      28: putfield      #9                  // Field epsilon:D
      31: iconst_0
      32: istore_2
      33: iload_2
      34: aload_0
      35: getfield      #6                  // Field virtualSize:I
      38: if_icmpge     71
      41: aload_1
      42: iload_2
      43: invokevirtual #21                 // Method org/apache/commons/math3/linear/RealVector.getEntry:(I)D
      46: dstore_3
      47: aload_0
      48: dload_3
      49: invokevirtual #15                 // Method isDefaultValue:(D)Z
      52: ifne          65
      55: aload_0
      56: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      59: iload_2
      60: dload_3
      61: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      64: pop2
      65: iinc          2, 1
      68: goto          33
      71: return

  private org.apache.commons.math3.util.OpenIntToDoubleHashMap getEntries();
    Code:
       0: aload_0
       1: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
       4: areturn

  protected boolean isDefaultValue(double);
    Code:
       0: dload_1
       1: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       4: aload_0
       5: getfield      #9                  // Field epsilon:D
       8: dcmpg
       9: ifge          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public org.apache.commons.math3.linear.RealVector add(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_1
       9: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      20: invokevirtual #25                 // Method add:(Lorg/apache/commons/math3/linear/OpenMapRealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;
      23: areturn
      24: aload_0
      25: aload_1
      26: invokespecial #26                 // Method org/apache/commons/math3/linear/SparseRealVector.add:(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;
      29: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector add(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_0
       9: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      12: invokevirtual #27                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.size:()I
      15: aload_1
      16: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      19: invokevirtual #27                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.size:()I
      22: if_icmple     29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: istore_2
      31: iload_2
      32: ifeq          42
      35: aload_0
      36: invokevirtual #28                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
      39: goto          46
      42: aload_1
      43: invokevirtual #28                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
      46: astore_3
      47: iload_2
      48: ifeq          61
      51: aload_1
      52: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      55: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      58: goto          68
      61: aload_0
      62: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      65: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      68: astore        4
      70: iload_2
      71: ifeq          81
      74: aload_0
      75: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      78: goto          85
      81: aload_1
      82: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      85: astore        5
      87: aload         4
      89: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      92: ifeq          153
      95: aload         4
      97: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
     100: aload         4
     102: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
     105: istore        6
     107: aload         5
     109: iload         6
     111: invokevirtual #33                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
     114: ifeq          139
     117: aload_3
     118: iload         6
     120: aload         5
     122: iload         6
     124: invokevirtual #34                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
     127: aload         4
     129: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     132: dadd
     133: invokevirtual #36                 // Method setEntry:(ID)V
     136: goto          150
     139: aload_3
     140: iload         6
     142: aload         4
     144: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     147: invokevirtual #36                 // Method setEntry:(ID)V
     150: goto          87
     153: aload_3
     154: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.OpenMapRealVector);
    Code:
       0: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
       3: dup
       4: aload_0
       5: aload_1
       6: invokevirtual #10                 // Method getDimension:()I
       9: invokespecial #37                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;I)V
      12: astore_2
      13: aload_1
      14: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      17: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      20: astore_3
      21: aload_3
      22: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      25: ifeq          52
      28: aload_3
      29: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      32: aload_2
      33: aload_3
      34: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      37: aload_0
      38: getfield      #6                  // Field virtualSize:I
      41: iadd
      42: aload_3
      43: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      46: invokevirtual #36                 // Method setEntry:(ID)V
      49: goto          21
      52: aload_2
      53: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector append(org.apache.commons.math3.linear.RealVector);
    Code:
       0: aload_1
       1: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      12: invokevirtual #38                 // Method append:(Lorg/apache/commons/math3/linear/OpenMapRealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;
      15: areturn
      16: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      19: dup
      20: aload_0
      21: aload_1
      22: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
      25: invokespecial #37                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;I)V
      28: astore_2
      29: iconst_0
      30: istore_3
      31: iload_3
      32: aload_1
      33: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
      36: if_icmpge     60
      39: aload_2
      40: iload_3
      41: aload_0
      42: getfield      #6                  // Field virtualSize:I
      45: iadd
      46: aload_1
      47: iload_3
      48: invokevirtual #21                 // Method org/apache/commons/math3/linear/RealVector.getEntry:(I)D
      51: invokevirtual #36                 // Method setEntry:(ID)V
      54: iinc          3, 1
      57: goto          31
      60: aload_2
      61: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector append(double);
    Code:
       0: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
       3: dup
       4: aload_0
       5: iconst_1
       6: invokespecial #37                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;I)V
       9: astore_3
      10: aload_3
      11: aload_0
      12: getfield      #6                  // Field virtualSize:I
      15: dload_1
      16: invokevirtual #36                 // Method setEntry:(ID)V
      19: aload_3
      20: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector copy();
    Code:
       0: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
       3: dup
       4: aload_0
       5: invokespecial #39                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V
       8: areturn

  public double dotProduct(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #40                 // Method dotProduct:(Lorg/apache/commons/math3/linear/RealVector;)D
       5: dreturn

  public org.apache.commons.math3.linear.OpenMapRealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      11: dup
      12: aload_0
      13: invokespecial #39                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V
      16: astore_2
      17: aload_0
      18: invokevirtual #10                 // Method getDimension:()I
      21: istore_3
      22: iconst_0
      23: istore        4
      25: iload         4
      27: iload_3
      28: if_icmpge     56
      31: aload_2
      32: iload         4
      34: aload_0
      35: iload         4
      37: invokevirtual #41                 // Method getEntry:(I)D
      40: aload_1
      41: iload         4
      43: invokevirtual #21                 // Method org/apache/commons/math3/linear/RealVector.getEntry:(I)D
      46: ddiv
      47: invokevirtual #36                 // Method setEntry:(ID)V
      50: iinc          4, 1
      53: goto          25
      56: aload_2
      57: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      11: dup
      12: aload_0
      13: invokespecial #39                 // Method "<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V
      16: astore_2
      17: aload_0
      18: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      21: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      24: astore_3
      25: aload_3
      26: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      29: ifeq          60
      32: aload_3
      33: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      36: aload_2
      37: aload_3
      38: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      41: aload_3
      42: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      45: aload_1
      46: aload_3
      47: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      50: invokevirtual #21                 // Method org/apache/commons/math3/linear/RealVector.getEntry:(I)D
      53: dmul
      54: invokevirtual #36                 // Method setEntry:(ID)V
      57: goto          25
      60: aload_1
      61: invokevirtual #42                 // Method org/apache/commons/math3/linear/RealVector.isNaN:()Z
      64: ifne          74
      67: aload_1
      68: invokevirtual #43                 // Method org/apache/commons/math3/linear/RealVector.isInfinite:()Z
      71: ifeq          151
      74: aload_0
      75: invokevirtual #10                 // Method getDimension:()I
      78: istore        4
      80: iconst_0
      81: istore        5
      83: iload         5
      85: iload         4
      87: if_icmpge     151
      90: aload_1
      91: iload         5
      93: invokevirtual #21                 // Method org/apache/commons/math3/linear/RealVector.getEntry:(I)D
      96: dstore        6
      98: dload         6
     100: invokestatic  #44                 // Method java/lang/Double.isNaN:(D)Z
     103: ifeq          118
     106: aload_2
     107: iload         5
     109: ldc2_w        #45                 // double NaNd
     112: invokevirtual #36                 // Method setEntry:(ID)V
     115: goto          145
     118: dload         6
     120: invokestatic  #47                 // Method java/lang/Double.isInfinite:(D)Z
     123: ifeq          145
     126: aload_0
     127: iload         5
     129: invokevirtual #41                 // Method getEntry:(I)D
     132: dstore        8
     134: aload_2
     135: iload         5
     137: dload         8
     139: dload         6
     141: dmul
     142: invokevirtual #36                 // Method setEntry:(ID)V
     145: iinc          5, 1
     148: goto          83
     151: aload_2
     152: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector getSubVector(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #48                 // Method checkIndex:(I)V
       5: iload_2
       6: ifge          24
       9: new           #49                 // class org/apache/commons/math3/exception/NotPositiveException
      12: dup
      13: getstatic     #50                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      16: iload_2
      17: invokestatic  #51                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: invokespecial #52                 // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      23: athrow
      24: aload_0
      25: iload_1
      26: iload_2
      27: iadd
      28: iconst_1
      29: isub
      30: invokevirtual #48                 // Method checkIndex:(I)V
      33: new           #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      36: dup
      37: iload_2
      38: invokespecial #53                 // Method "<init>":(I)V
      41: astore_3
      42: iload_1
      43: iload_2
      44: iadd
      45: istore        4
      47: aload_0
      48: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      51: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      54: astore        5
      56: aload         5
      58: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      61: ifeq          105
      64: aload         5
      66: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      69: aload         5
      71: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      74: istore        6
      76: iload         6
      78: iload_1
      79: if_icmplt     102
      82: iload         6
      84: iload         4
      86: if_icmpge     102
      89: aload_3
      90: iload         6
      92: iload_1
      93: isub
      94: aload         5
      96: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      99: invokevirtual #36                 // Method setEntry:(ID)V
     102: goto          56
     105: aload_3
     106: areturn

  public int getDimension();
    Code:
       0: aload_0
       1: getfield      #6                  // Field virtualSize:I
       4: ireturn

  public double getDistance(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_0
       9: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      12: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      15: astore_2
      16: dconst_0
      17: dstore_3
      18: aload_2
      19: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      22: ifeq          59
      25: aload_2
      26: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      29: aload_2
      30: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      33: istore        5
      35: aload_2
      36: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      39: aload_1
      40: iload         5
      42: invokevirtual #41                 // Method getEntry:(I)D
      45: dsub
      46: dstore        6
      48: dload_3
      49: dload         6
      51: dload         6
      53: dmul
      54: dadd
      55: dstore_3
      56: goto          18
      59: aload_1
      60: invokespecial #19                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      63: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      66: astore_2
      67: aload_2
      68: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      71: ifeq          113
      74: aload_2
      75: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      78: aload_2
      79: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      82: istore        5
      84: aload_0
      85: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      88: iload         5
      90: invokevirtual #33                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
      93: ifne          110
      96: aload_2
      97: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     100: dstore        6
     102: dload_3
     103: dload         6
     105: dload         6
     107: dmul
     108: dadd
     109: dstore_3
     110: goto          67
     113: dload_3
     114: invokestatic  #54                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
     117: dreturn

  public double getDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_1
       9: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      20: invokevirtual #55                 // Method getDistance:(Lorg/apache/commons/math3/linear/OpenMapRealVector;)D
      23: dreturn
      24: aload_0
      25: aload_1
      26: invokespecial #56                 // Method org/apache/commons/math3/linear/SparseRealVector.getDistance:(Lorg/apache/commons/math3/linear/RealVector;)D
      29: dreturn

  public double getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #48                 // Method checkIndex:(I)V
       5: aload_0
       6: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
       9: iload_1
      10: invokevirtual #34                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
      13: dreturn

  public double getL1Distance(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: dconst_0
       9: dstore_2
      10: aload_0
      11: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      14: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      17: astore        4
      19: aload         4
      21: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      24: ifeq          60
      27: aload         4
      29: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      32: aload         4
      34: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      37: aload_1
      38: aload         4
      40: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      43: invokevirtual #41                 // Method getEntry:(I)D
      46: dsub
      47: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      50: dstore        5
      52: dload_2
      53: dload         5
      55: dadd
      56: dstore_2
      57: goto          19
      60: aload_1
      61: invokespecial #19                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      64: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      67: astore        4
      69: aload         4
      71: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      74: ifeq          122
      77: aload         4
      79: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      82: aload         4
      84: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      87: istore        5
      89: aload_0
      90: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      93: iload         5
      95: invokevirtual #33                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
      98: ifne          119
     101: aload         4
     103: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     106: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     109: dstore        6
     111: dload_2
     112: dload         6
     114: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     117: dadd
     118: dstore_2
     119: goto          69
     122: dload_2
     123: dreturn

  public double getL1Distance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_1
       9: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      20: invokevirtual #57                 // Method getL1Distance:(Lorg/apache/commons/math3/linear/OpenMapRealVector;)D
      23: dreturn
      24: aload_0
      25: aload_1
      26: invokespecial #58                 // Method org/apache/commons/math3/linear/SparseRealVector.getL1Distance:(Lorg/apache/commons/math3/linear/RealVector;)D
      29: dreturn

  private double getLInfDistance(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: dconst_0
       9: dstore_2
      10: aload_0
      11: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      14: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      17: astore        4
      19: aload         4
      21: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      24: ifeq          65
      27: aload         4
      29: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      32: aload         4
      34: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      37: aload_1
      38: aload         4
      40: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      43: invokevirtual #41                 // Method getEntry:(I)D
      46: dsub
      47: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      50: dstore        5
      52: dload         5
      54: dload_2
      55: dcmpl
      56: ifle          62
      59: dload         5
      61: dstore_2
      62: goto          19
      65: aload_1
      66: invokespecial #19                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      69: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      72: astore        4
      74: aload         4
      76: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      79: ifeq          125
      82: aload         4
      84: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      87: aload         4
      89: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      92: istore        5
      94: aload_0
      95: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      98: iload         5
     100: invokevirtual #33                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
     103: ifne          122
     106: aload         4
     108: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     111: dload_2
     112: dcmpl
     113: ifle          122
     116: aload         4
     118: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     121: dstore_2
     122: goto          74
     125: dload_2
     126: dreturn

  public double getLInfDistance(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_1
       9: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      20: invokespecial #59                 // Method getLInfDistance:(Lorg/apache/commons/math3/linear/OpenMapRealVector;)D
      23: dreturn
      24: aload_0
      25: aload_1
      26: invokespecial #60                 // Method org/apache/commons/math3/linear/SparseRealVector.getLInfDistance:(Lorg/apache/commons/math3/linear/RealVector;)D
      29: dreturn

  public boolean isInfinite();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
       6: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
       9: astore_2
      10: aload_2
      11: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      14: ifeq          47
      17: aload_2
      18: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      21: aload_2
      22: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      25: dstore_3
      26: dload_3
      27: invokestatic  #44                 // Method java/lang/Double.isNaN:(D)Z
      30: ifeq          35
      33: iconst_0
      34: ireturn
      35: dload_3
      36: invokestatic  #47                 // Method java/lang/Double.isInfinite:(D)Z
      39: ifeq          44
      42: iconst_1
      43: istore_1
      44: goto          10
      47: iload_1
      48: ireturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
       4: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
       7: astore_1
       8: aload_1
       9: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      12: ifeq          31
      15: aload_1
      16: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      19: aload_1
      20: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      23: invokestatic  #44                 // Method java/lang/Double.isNaN:(D)Z
      26: ifeq          8
      29: iconst_1
      30: ireturn
      31: iconst_0
      32: ireturn

  public org.apache.commons.math3.linear.OpenMapRealVector mapAdd(double);
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
       4: dload_1
       5: invokevirtual #61                 // Method mapAddToSelf:(D)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       8: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector mapAddToSelf(double);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_0
       4: getfield      #6                  // Field virtualSize:I
       7: if_icmpge     28
      10: aload_0
      11: iload_3
      12: aload_0
      13: iload_3
      14: invokevirtual #41                 // Method getEntry:(I)D
      17: dload_1
      18: dadd
      19: invokevirtual #36                 // Method setEntry:(ID)V
      22: iinc          3, 1
      25: goto          2
      28: aload_0
      29: areturn

  public void setEntry(int, double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #48                 // Method checkIndex:(I)V
       5: aload_0
       6: dload_2
       7: invokevirtual #15                 // Method isDefaultValue:(D)Z
      10: ifne          26
      13: aload_0
      14: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      17: iload_1
      18: dload_2
      19: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      22: pop2
      23: goto          46
      26: aload_0
      27: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      30: iload_1
      31: invokevirtual #33                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
      34: ifeq          46
      37: aload_0
      38: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      41: iload_1
      42: invokevirtual #62                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.remove:(I)D
      45: pop2
      46: return

  public void setSubVector(int, org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #48                 // Method checkIndex:(I)V
       5: aload_0
       6: iload_1
       7: aload_2
       8: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
      11: iadd
      12: iconst_1
      13: isub
      14: invokevirtual #48                 // Method checkIndex:(I)V
      17: iconst_0
      18: istore_3
      19: iload_3
      20: aload_2
      21: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
      24: if_icmpge     45
      27: aload_0
      28: iload_3
      29: iload_1
      30: iadd
      31: aload_2
      32: iload_3
      33: invokevirtual #21                 // Method org/apache/commons/math3/linear/RealVector.getEntry:(I)D
      36: invokevirtual #36                 // Method setEntry:(ID)V
      39: iinc          3, 1
      42: goto          19
      45: return

  public void set(double);
    Code:
       0: iconst_0
       1: istore_3
       2: iload_3
       3: aload_0
       4: getfield      #6                  // Field virtualSize:I
       7: if_icmpge     22
      10: aload_0
      11: iload_3
      12: dload_1
      13: invokevirtual #36                 // Method setEntry:(ID)V
      16: iinc          3, 1
      19: goto          2
      22: return

  public org.apache.commons.math3.linear.OpenMapRealVector subtract(org.apache.commons.math3.linear.OpenMapRealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_0
       9: invokevirtual #28                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
      12: astore_2
      13: aload_1
      14: invokespecial #19                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      17: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      20: astore_3
      21: aload_3
      22: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      25: ifeq          87
      28: aload_3
      29: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      32: aload_3
      33: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      36: istore        4
      38: aload_0
      39: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      42: iload         4
      44: invokevirtual #33                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.containsKey:(I)Z
      47: ifeq          73
      50: aload_2
      51: iload         4
      53: aload_0
      54: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      57: iload         4
      59: invokevirtual #34                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.get:(I)D
      62: aload_3
      63: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      66: dsub
      67: invokevirtual #36                 // Method setEntry:(ID)V
      70: goto          84
      73: aload_2
      74: iload         4
      76: aload_3
      77: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      80: dneg
      81: invokevirtual #36                 // Method setEntry:(ID)V
      84: goto          21
      87: aload_2
      88: areturn

  public org.apache.commons.math3.linear.RealVector subtract(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method org/apache/commons/math3/linear/RealVector.getDimension:()I
       5: invokevirtual #23                 // Method checkVectorDimensions:(I)V
       8: aload_1
       9: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      12: ifeq          24
      15: aload_0
      16: aload_1
      17: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      20: invokevirtual #63                 // Method subtract:(Lorg/apache/commons/math3/linear/OpenMapRealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;
      23: areturn
      24: aload_0
      25: aload_1
      26: invokespecial #64                 // Method org/apache/commons/math3/linear/SparseRealVector.subtract:(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;
      29: areturn

  public org.apache.commons.math3.linear.OpenMapRealVector unitVector() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
       4: astore_1
       5: aload_1
       6: invokevirtual #65                 // Method unitize:()V
       9: aload_1
      10: areturn

  public void unitize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #66                 // Method getNorm:()D
       4: dstore_1
       5: aload_0
       6: dload_1
       7: invokevirtual #15                 // Method isDefaultValue:(D)Z
      10: ifeq          28
      13: new           #67                 // class org/apache/commons/math3/exception/MathArithmeticException
      16: dup
      17: getstatic     #68                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.ZERO_NORM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      20: iconst_0
      21: anewarray     #69                 // class java/lang/Object
      24: invokespecial #70                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      27: athrow
      28: aload_0
      29: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      32: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      35: astore_3
      36: aload_3
      37: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      40: ifeq          68
      43: aload_3
      44: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      47: aload_0
      48: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      51: aload_3
      52: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      55: aload_3
      56: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      59: dload_1
      60: ddiv
      61: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.put:(ID)D
      64: pop2
      65: goto          36
      68: return

  public double[] toArray();
    Code:
       0: aload_0
       1: getfield      #6                  // Field virtualSize:I
       4: newarray       double
       6: astore_1
       7: aload_0
       8: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      11: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      14: astore_2
      15: aload_2
      16: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      19: ifeq          39
      22: aload_2
      23: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      26: aload_1
      27: aload_2
      28: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      31: aload_2
      32: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      35: dastore
      36: goto          15
      39: aload_1
      40: areturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: aload_0
       6: getfield      #9                  // Field epsilon:D
       9: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
      12: lstore_3
      13: bipush        31
      15: iload_2
      16: imul
      17: lload_3
      18: lload_3
      19: bipush        32
      21: lushr
      22: lxor
      23: l2i
      24: iadd
      25: istore_2
      26: bipush        31
      28: iload_2
      29: imul
      30: aload_0
      31: getfield      #6                  // Field virtualSize:I
      34: iadd
      35: istore_2
      36: aload_0
      37: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      40: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      43: astore        5
      45: aload         5
      47: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      50: ifeq          83
      53: aload         5
      55: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      58: aload         5
      60: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      63: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
      66: lstore_3
      67: bipush        31
      69: iload_2
      70: imul
      71: lload_3
      72: lload_3
      73: bipush        32
      75: lshr
      76: lxor
      77: l2i
      78: iadd
      79: istore_2
      80: goto          45
      83: iload_2
      84: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #24                 // class org/apache/commons/math3/linear/OpenMapRealVector
      20: astore_2
      21: aload_0
      22: getfield      #6                  // Field virtualSize:I
      25: aload_2
      26: getfield      #6                  // Field virtualSize:I
      29: if_icmpeq     34
      32: iconst_0
      33: ireturn
      34: aload_0
      35: getfield      #9                  // Field epsilon:D
      38: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
      41: aload_2
      42: getfield      #9                  // Field epsilon:D
      45: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
      48: lcmp
      49: ifeq          54
      52: iconst_0
      53: ireturn
      54: aload_0
      55: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
      58: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
      61: astore_3
      62: aload_3
      63: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
      66: ifeq          104
      69: aload_3
      70: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
      73: aload_2
      74: aload_3
      75: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
      78: invokevirtual #41                 // Method getEntry:(I)D
      81: dstore        4
      83: dload         4
      85: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
      88: aload_3
      89: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
      92: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
      95: lcmp
      96: ifeq          101
      99: iconst_0
     100: ireturn
     101: goto          62
     104: aload_2
     105: invokespecial #19                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
     108: invokevirtual #29                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator;
     111: astore_3
     112: aload_3
     113: invokevirtual #30                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.hasNext:()Z
     116: ifeq          154
     119: aload_3
     120: invokevirtual #31                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.advance:()V
     123: aload_3
     124: invokevirtual #35                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.value:()D
     127: dstore        4
     129: dload         4
     131: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
     134: aload_0
     135: aload_3
     136: invokevirtual #32                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap$Iterator.key:()I
     139: invokevirtual #41                 // Method getEntry:(I)D
     142: invokestatic  #71                 // Method java/lang/Double.doubleToLongBits:(D)J
     145: lcmp
     146: ifeq          151
     149: iconst_0
     150: ireturn
     151: goto          112
     154: iconst_1
     155: ireturn

  public double getSparsity();
    Code:
       0: aload_0
       1: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
       4: invokevirtual #27                 // Method org/apache/commons/math3/util/OpenIntToDoubleHashMap.size:()I
       7: i2d
       8: aload_0
       9: invokevirtual #10                 // Method getDimension:()I
      12: i2d
      13: ddiv
      14: dreturn

  public java.util.Iterator<org.apache.commons.math3.linear.RealVector$Entry> sparseIterator();
    Code:
       0: new           #72                 // class org/apache/commons/math3/linear/OpenMapRealVector$OpenMapSparseIterator
       3: dup
       4: aload_0
       5: invokespecial #73                 // Method org/apache/commons/math3/linear/OpenMapRealVector$OpenMapSparseIterator."<init>":(Lorg/apache/commons/math3/linear/OpenMapRealVector;)V
       8: areturn

  public org.apache.commons.math3.linear.RealVector unitVector() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #74                 // Method unitVector:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
       4: areturn

  public org.apache.commons.math3.linear.RealVector ebeMultiply(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #75                 // Method ebeMultiply:(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       5: areturn

  public org.apache.commons.math3.linear.RealVector ebeDivide(org.apache.commons.math3.linear.RealVector) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #76                 // Method ebeDivide:(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       5: areturn

  public org.apache.commons.math3.linear.RealVector copy();
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method copy:()Lorg/apache/commons/math3/linear/OpenMapRealVector;
       4: areturn

  public org.apache.commons.math3.linear.RealVector mapAddToSelf(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #61                 // Method mapAddToSelf:(D)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       5: areturn

  public org.apache.commons.math3.linear.RealVector mapAdd(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #77                 // Method mapAdd:(D)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       5: areturn

  public org.apache.commons.math3.linear.RealVector getSubVector(int, int) throws org.apache.commons.math3.exception.NotPositiveException, org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: invokevirtual #78                 // Method getSubVector:(II)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       6: areturn

  public org.apache.commons.math3.linear.RealVector append(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #79                 // Method append:(D)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       5: areturn

  public org.apache.commons.math3.linear.RealVector append(org.apache.commons.math3.linear.RealVector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #80                 // Method append:(Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/OpenMapRealVector;
       5: areturn

  static org.apache.commons.math3.util.OpenIntToDoubleHashMap access$000(org.apache.commons.math3.linear.OpenMapRealVector);
    Code:
       0: aload_0
       1: getfield      #1                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToDoubleHashMap;
       4: areturn
}
