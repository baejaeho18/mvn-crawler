Compiled from "Vector3D.java"
public class org.apache.commons.math3.geometry.euclidean.threed.Vector3D implements java.io.Serializable, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> {
  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D ZERO;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_I;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_I;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_J;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_J;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D PLUS_K;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D MINUS_K;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D NaN;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D POSITIVE_INFINITY;

  public static final org.apache.commons.math3.geometry.euclidean.threed.Vector3D NEGATIVE_INFINITY;

  private static final long serialVersionUID;

  private final double x;

  private final double y;

  private final double z;

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, double, double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field x:D
       9: aload_0
      10: dload_3
      11: putfield      #3                  // Field y:D
      14: aload_0
      15: dload         5
      17: putfield      #4                  // Field z:D
      20: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double[]) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: arraylength
       6: iconst_3
       7: if_icmpeq     21
      10: new           #5                  // class org/apache/commons/math3/exception/DimensionMismatchException
      13: dup
      14: aload_1
      15: arraylength
      16: iconst_3
      17: invokespecial #6                  // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      20: athrow
      21: aload_0
      22: aload_1
      23: iconst_0
      24: daload
      25: putfield      #2                  // Field x:D
      28: aload_0
      29: aload_1
      30: iconst_1
      31: daload
      32: putfield      #3                  // Field y:D
      35: aload_0
      36: aload_1
      37: iconst_2
      38: daload
      39: putfield      #4                  // Field z:D
      42: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: dload_3
       5: invokestatic  #7                  // Method org/apache/commons/math3/util/FastMath.cos:(D)D
       8: dstore        5
      10: aload_0
      11: dload_1
      12: invokestatic  #7                  // Method org/apache/commons/math3/util/FastMath.cos:(D)D
      15: dload         5
      17: dmul
      18: putfield      #2                  // Field x:D
      21: aload_0
      22: dload_1
      23: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      26: dload         5
      28: dmul
      29: putfield      #3                  // Field y:D
      32: aload_0
      33: dload_3
      34: invokestatic  #8                  // Method org/apache/commons/math3/util/FastMath.sin:(D)D
      37: putfield      #4                  // Field z:D
      40: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: putfield      #2                  // Field x:D
      14: aload_0
      15: dload_1
      16: aload_3
      17: getfield      #3                  // Field y:D
      20: dmul
      21: putfield      #3                  // Field y:D
      24: aload_0
      25: dload_1
      26: aload_3
      27: getfield      #4                  // Field z:D
      30: dmul
      31: putfield      #4                  // Field z:D
      34: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dload         4
      12: aload         6
      14: getfield      #2                  // Field x:D
      17: invokestatic  #9                  // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      20: putfield      #2                  // Field x:D
      23: aload_0
      24: dload_1
      25: aload_3
      26: getfield      #3                  // Field y:D
      29: dload         4
      31: aload         6
      33: getfield      #3                  // Field y:D
      36: invokestatic  #9                  // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      39: putfield      #3                  // Field y:D
      42: aload_0
      43: dload_1
      44: aload_3
      45: getfield      #4                  // Field z:D
      48: dload         4
      50: aload         6
      52: getfield      #4                  // Field z:D
      55: invokestatic  #9                  // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      58: putfield      #4                  // Field z:D
      61: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dload         4
      12: aload         6
      14: getfield      #2                  // Field x:D
      17: dload         7
      19: aload         9
      21: getfield      #2                  // Field x:D
      24: invokestatic  #10                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDD)D
      27: putfield      #2                  // Field x:D
      30: aload_0
      31: dload_1
      32: aload_3
      33: getfield      #3                  // Field y:D
      36: dload         4
      38: aload         6
      40: getfield      #3                  // Field y:D
      43: dload         7
      45: aload         9
      47: getfield      #3                  // Field y:D
      50: invokestatic  #10                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDD)D
      53: putfield      #3                  // Field y:D
      56: aload_0
      57: dload_1
      58: aload_3
      59: getfield      #4                  // Field z:D
      62: dload         4
      64: aload         6
      66: getfield      #4                  // Field z:D
      69: dload         7
      71: aload         9
      73: getfield      #4                  // Field z:D
      76: invokestatic  #10                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDD)D
      79: putfield      #4                  // Field z:D
      82: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D(double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, double, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dload         4
      12: aload         6
      14: getfield      #2                  // Field x:D
      17: dload         7
      19: aload         9
      21: getfield      #2                  // Field x:D
      24: dload         10
      26: aload         12
      28: getfield      #2                  // Field x:D
      31: invokestatic  #11                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDDDD)D
      34: putfield      #2                  // Field x:D
      37: aload_0
      38: dload_1
      39: aload_3
      40: getfield      #3                  // Field y:D
      43: dload         4
      45: aload         6
      47: getfield      #3                  // Field y:D
      50: dload         7
      52: aload         9
      54: getfield      #3                  // Field y:D
      57: dload         10
      59: aload         12
      61: getfield      #3                  // Field y:D
      64: invokestatic  #11                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDDDD)D
      67: putfield      #3                  // Field y:D
      70: aload_0
      71: dload_1
      72: aload_3
      73: getfield      #4                  // Field z:D
      76: dload         4
      78: aload         6
      80: getfield      #4                  // Field z:D
      83: dload         7
      85: aload         9
      87: getfield      #4                  // Field z:D
      90: dload         10
      92: aload         12
      94: getfield      #4                  // Field z:D
      97: invokestatic  #11                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDDDD)D
     100: putfield      #4                  // Field z:D
     103: return

  public double getX();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: dreturn

  public double getY();
    Code:
       0: aload_0
       1: getfield      #3                  // Field y:D
       4: dreturn

  public double getZ();
    Code:
       0: aload_0
       1: getfield      #4                  // Field z:D
       4: dreturn

  public double[] toArray();
    Code:
       0: iconst_3
       1: newarray       double
       3: dup
       4: iconst_0
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: dastore
      10: dup
      11: iconst_1
      12: aload_0
      13: getfield      #3                  // Field y:D
      16: dastore
      17: dup
      18: iconst_2
      19: aload_0
      20: getfield      #4                  // Field z:D
      23: dastore
      24: areturn

  public org.apache.commons.math3.geometry.Space getSpace();
    Code:
       0: invokestatic  #12                 // Method org/apache/commons/math3/geometry/euclidean/threed/Euclidean3D.getInstance:()Lorg/apache/commons/math3/geometry/euclidean/threed/Euclidean3D;
       3: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getZero();
    Code:
       0: getstatic     #13                 // Field ZERO:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       3: areturn

  public double getNorm1();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: aload_0
       8: getfield      #3                  // Field y:D
      11: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      14: dadd
      15: aload_0
      16: getfield      #4                  // Field z:D
      19: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      22: dadd
      23: dreturn

  public double getNorm();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dmul
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: aload_0
      14: getfield      #3                  // Field y:D
      17: dmul
      18: dadd
      19: aload_0
      20: getfield      #4                  // Field z:D
      23: aload_0
      24: getfield      #4                  // Field z:D
      27: dmul
      28: dadd
      29: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      32: dreturn

  public double getNormSq();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dmul
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: aload_0
      14: getfield      #3                  // Field y:D
      17: dmul
      18: dadd
      19: aload_0
      20: getfield      #4                  // Field z:D
      23: aload_0
      24: getfield      #4                  // Field z:D
      27: dmul
      28: dadd
      29: dreturn

  public double getNormInf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: aload_0
       8: getfield      #3                  // Field y:D
      11: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      14: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.max:(DD)D
      17: aload_0
      18: getfield      #4                  // Field z:D
      21: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      24: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.max:(DD)D
      27: dreturn

  public double getAlpha();
    Code:
       0: aload_0
       1: getfield      #3                  // Field y:D
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: invokestatic  #17                 // Method org/apache/commons/math3/util/FastMath.atan2:(DD)D
      11: dreturn

  public double getDelta();
    Code:
       0: aload_0
       1: getfield      #4                  // Field z:D
       4: aload_0
       5: invokevirtual #18                 // Method getNorm:()D
       8: ddiv
       9: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.asin:(D)D
      12: dreturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       8: dup
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: aload_2
      14: getfield      #2                  // Field x:D
      17: dadd
      18: aload_0
      19: getfield      #3                  // Field y:D
      22: aload_2
      23: getfield      #3                  // Field y:D
      26: dadd
      27: aload_0
      28: getfield      #4                  // Field z:D
      31: aload_2
      32: getfield      #4                  // Field z:D
      35: dadd
      36: invokespecial #21                 // Method "<init>":(DDD)V
      39: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: dconst_1
       5: aload_0
       6: dload_1
       7: aload_3
       8: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      11: invokespecial #22                 // Method "<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      14: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       8: dup
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: aload_2
      14: getfield      #2                  // Field x:D
      17: dsub
      18: aload_0
      19: getfield      #3                  // Field y:D
      22: aload_2
      23: getfield      #3                  // Field y:D
      26: dsub
      27: aload_0
      28: getfield      #4                  // Field z:D
      31: aload_2
      32: getfield      #4                  // Field z:D
      35: dsub
      36: invokespecial #21                 // Method "<init>":(DDD)V
      39: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: dconst_1
       5: aload_0
       6: dload_1
       7: dneg
       8: aload_3
       9: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      12: invokespecial #22                 // Method "<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      15: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D normalize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method getNorm:()D
       4: dstore_1
       5: dload_1
       6: dconst_0
       7: dcmpl
       8: ifne          26
      11: new           #23                 // class org/apache/commons/math3/exception/MathArithmeticException
      14: dup
      15: getstatic     #24                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: iconst_0
      19: anewarray     #25                 // class java/lang/Object
      22: invokespecial #26                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      25: athrow
      26: aload_0
      27: dconst_1
      28: dload_1
      29: ddiv
      30: invokevirtual #27                 // Method scalarMultiply:(D)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      33: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D orthogonal() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: ldc2_w        #28                 // double 0.6d
       3: aload_0
       4: invokevirtual #18                 // Method getNorm:()D
       7: dmul
       8: dstore_1
       9: dload_1
      10: dconst_0
      11: dcmpl
      12: ifne          30
      15: new           #23                 // class org/apache/commons/math3/exception/MathArithmeticException
      18: dup
      19: getstatic     #30                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.ZERO_NORM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      22: iconst_0
      23: anewarray     #25                 // class java/lang/Object
      26: invokespecial #26                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      29: athrow
      30: aload_0
      31: getfield      #2                  // Field x:D
      34: dload_1
      35: dneg
      36: dcmpl
      37: iflt          96
      40: aload_0
      41: getfield      #2                  // Field x:D
      44: dload_1
      45: dcmpg
      46: ifgt          96
      49: dconst_1
      50: aload_0
      51: getfield      #3                  // Field y:D
      54: aload_0
      55: getfield      #3                  // Field y:D
      58: dmul
      59: aload_0
      60: getfield      #4                  // Field z:D
      63: aload_0
      64: getfield      #4                  // Field z:D
      67: dmul
      68: dadd
      69: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      72: ddiv
      73: dstore_3
      74: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      77: dup
      78: dconst_0
      79: dload_3
      80: aload_0
      81: getfield      #4                  // Field z:D
      84: dmul
      85: dload_3
      86: dneg
      87: aload_0
      88: getfield      #3                  // Field y:D
      91: dmul
      92: invokespecial #21                 // Method "<init>":(DDD)V
      95: areturn
      96: aload_0
      97: getfield      #3                  // Field y:D
     100: dload_1
     101: dneg
     102: dcmpl
     103: iflt          162
     106: aload_0
     107: getfield      #3                  // Field y:D
     110: dload_1
     111: dcmpg
     112: ifgt          162
     115: dconst_1
     116: aload_0
     117: getfield      #2                  // Field x:D
     120: aload_0
     121: getfield      #2                  // Field x:D
     124: dmul
     125: aload_0
     126: getfield      #4                  // Field z:D
     129: aload_0
     130: getfield      #4                  // Field z:D
     133: dmul
     134: dadd
     135: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
     138: ddiv
     139: dstore_3
     140: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
     143: dup
     144: dload_3
     145: dneg
     146: aload_0
     147: getfield      #4                  // Field z:D
     150: dmul
     151: dconst_0
     152: dload_3
     153: aload_0
     154: getfield      #2                  // Field x:D
     157: dmul
     158: invokespecial #21                 // Method "<init>":(DDD)V
     161: areturn
     162: dconst_1
     163: aload_0
     164: getfield      #2                  // Field x:D
     167: aload_0
     168: getfield      #2                  // Field x:D
     171: dmul
     172: aload_0
     173: getfield      #3                  // Field y:D
     176: aload_0
     177: getfield      #3                  // Field y:D
     180: dmul
     181: dadd
     182: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
     185: ddiv
     186: dstore_3
     187: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
     190: dup
     191: dload_3
     192: aload_0
     193: getfield      #3                  // Field y:D
     196: dmul
     197: dload_3
     198: dneg
     199: aload_0
     200: getfield      #2                  // Field x:D
     203: dmul
     204: dconst_0
     205: invokespecial #21                 // Method "<init>":(DDD)V
     208: areturn

  public static double angle(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method getNorm:()D
       4: aload_1
       5: invokevirtual #18                 // Method getNorm:()D
       8: dmul
       9: dstore_2
      10: dload_2
      11: dconst_0
      12: dcmpl
      13: ifne          31
      16: new           #23                 // class org/apache/commons/math3/exception/MathArithmeticException
      19: dup
      20: getstatic     #30                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.ZERO_NORM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      23: iconst_0
      24: anewarray     #25                 // class java/lang/Object
      27: invokespecial #26                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      30: athrow
      31: aload_0
      32: aload_1
      33: invokevirtual #31                 // Method dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      36: dstore        4
      38: dload_2
      39: ldc2_w        #32                 // double 0.9999d
      42: dmul
      43: dstore        6
      45: dload         4
      47: dload         6
      49: dneg
      50: dcmpg
      51: iflt          62
      54: dload         4
      56: dload         6
      58: dcmpl
      59: ifle          102
      62: aload_0
      63: aload_1
      64: invokestatic  #34                 // Method crossProduct:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      67: astore        8
      69: dload         4
      71: dconst_0
      72: dcmpl
      73: iflt          87
      76: aload         8
      78: invokevirtual #18                 // Method getNorm:()D
      81: dload_2
      82: ddiv
      83: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.asin:(D)D
      86: dreturn
      87: ldc2_w        #35                 // double 3.141592653589793d
      90: aload         8
      92: invokevirtual #18                 // Method getNorm:()D
      95: dload_2
      96: ddiv
      97: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.asin:(D)D
     100: dsub
     101: dreturn
     102: dload         4
     104: dload_2
     105: ddiv
     106: invokestatic  #37                 // Method org/apache/commons/math3/util/FastMath.acos:(D)D
     109: dreturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D negate();
    Code:
       0: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dneg
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: dneg
      14: aload_0
      15: getfield      #4                  // Field z:D
      18: dneg
      19: invokespecial #21                 // Method "<init>":(DDD)V
      22: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D scalarMultiply(double);
    Code:
       0: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: dload_1
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: dmul
      10: dload_1
      11: aload_0
      12: getfield      #3                  // Field y:D
      15: dmul
      16: dload_1
      17: aload_0
      18: getfield      #4                  // Field z:D
      21: dmul
      22: invokespecial #21                 // Method "<init>":(DDD)V
      25: areturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #38                 // Method java/lang/Double.isNaN:(D)Z
       7: ifne          30
      10: aload_0
      11: getfield      #3                  // Field y:D
      14: invokestatic  #38                 // Method java/lang/Double.isNaN:(D)Z
      17: ifne          30
      20: aload_0
      21: getfield      #4                  // Field z:D
      24: invokestatic  #38                 // Method java/lang/Double.isNaN:(D)Z
      27: ifeq          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method isNaN:()Z
       4: ifne          41
       7: aload_0
       8: getfield      #2                  // Field x:D
      11: invokestatic  #40                 // Method java/lang/Double.isInfinite:(D)Z
      14: ifne          37
      17: aload_0
      18: getfield      #3                  // Field y:D
      21: invokestatic  #40                 // Method java/lang/Double.isInfinite:(D)Z
      24: ifne          37
      27: aload_0
      28: getfield      #4                  // Field z:D
      31: invokestatic  #40                 // Method java/lang/Double.isInfinite:(D)Z
      34: ifeq          41
      37: iconst_1
      38: goto          42
      41: iconst_0
      42: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      11: ifeq          73
      14: aload_1
      15: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      18: astore_2
      19: aload_2
      20: invokevirtual #39                 // Method isNaN:()Z
      23: ifeq          31
      26: aload_0
      27: invokevirtual #39                 // Method isNaN:()Z
      30: ireturn
      31: aload_0
      32: getfield      #2                  // Field x:D
      35: aload_2
      36: getfield      #2                  // Field x:D
      39: dcmpl
      40: ifne          71
      43: aload_0
      44: getfield      #3                  // Field y:D
      47: aload_2
      48: getfield      #3                  // Field y:D
      51: dcmpl
      52: ifne          71
      55: aload_0
      56: getfield      #4                  // Field z:D
      59: aload_2
      60: getfield      #4                  // Field z:D
      63: dcmpl
      64: ifne          71
      67: iconst_1
      68: goto          72
      71: iconst_0
      72: ireturn
      73: iconst_0
      74: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #39                 // Method isNaN:()Z
       4: ifeq          11
       7: sipush        642
      10: ireturn
      11: sipush        643
      14: sipush        164
      17: aload_0
      18: getfield      #2                  // Field x:D
      21: invokestatic  #41                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      24: imul
      25: iconst_3
      26: aload_0
      27: getfield      #3                  // Field y:D
      30: invokestatic  #41                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      33: imul
      34: iadd
      35: aload_0
      36: getfield      #4                  // Field z:D
      39: invokestatic  #41                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      42: iadd
      43: imul
      44: ireturn

  public double dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: aload_2
      10: getfield      #2                  // Field x:D
      13: aload_0
      14: getfield      #3                  // Field y:D
      17: aload_2
      18: getfield      #3                  // Field y:D
      21: aload_0
      22: getfield      #4                  // Field z:D
      25: aload_2
      26: getfield      #4                  // Field z:D
      29: invokestatic  #10                 // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDDDD)D
      32: dreturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       8: dup
       9: aload_0
      10: getfield      #3                  // Field y:D
      13: aload_2
      14: getfield      #4                  // Field z:D
      17: aload_0
      18: getfield      #4                  // Field z:D
      21: dneg
      22: aload_2
      23: getfield      #3                  // Field y:D
      26: invokestatic  #9                  // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      29: aload_0
      30: getfield      #4                  // Field z:D
      33: aload_2
      34: getfield      #2                  // Field x:D
      37: aload_0
      38: getfield      #2                  // Field x:D
      41: dneg
      42: aload_2
      43: getfield      #4                  // Field z:D
      46: invokestatic  #9                  // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      49: aload_0
      50: getfield      #2                  // Field x:D
      53: aload_2
      54: getfield      #3                  // Field y:D
      57: aload_0
      58: getfield      #3                  // Field y:D
      61: dneg
      62: aload_2
      63: getfield      #2                  // Field x:D
      66: invokestatic  #9                  // Method org/apache/commons/math3/util/MathArrays.linearCombination:(DDDD)D
      69: invokespecial #21                 // Method "<init>":(DDD)V
      72: areturn

  public double distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: dstore_3
      18: aload_2
      19: getfield      #3                  // Field y:D
      22: aload_0
      23: getfield      #3                  // Field y:D
      26: dsub
      27: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      30: dstore        5
      32: aload_2
      33: getfield      #4                  // Field z:D
      36: aload_0
      37: getfield      #4                  // Field z:D
      40: dsub
      41: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      44: dstore        7
      46: dload_3
      47: dload         5
      49: dadd
      50: dload         7
      52: dadd
      53: dreturn

  public double distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: dstore_3
      15: aload_2
      16: getfield      #3                  // Field y:D
      19: aload_0
      20: getfield      #3                  // Field y:D
      23: dsub
      24: dstore        5
      26: aload_2
      27: getfield      #4                  // Field z:D
      30: aload_0
      31: getfield      #4                  // Field z:D
      34: dsub
      35: dstore        7
      37: dload_3
      38: dload_3
      39: dmul
      40: dload         5
      42: dload         5
      44: dmul
      45: dadd
      46: dload         7
      48: dload         7
      50: dmul
      51: dadd
      52: invokestatic  #15                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      55: dreturn

  public double distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: dstore_3
      18: aload_2
      19: getfield      #3                  // Field y:D
      22: aload_0
      23: getfield      #3                  // Field y:D
      26: dsub
      27: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      30: dstore        5
      32: aload_2
      33: getfield      #4                  // Field z:D
      36: aload_0
      37: getfield      #4                  // Field z:D
      40: dsub
      41: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      44: dstore        7
      46: dload_3
      47: dload         5
      49: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.max:(DD)D
      52: dload         7
      54: invokestatic  #16                 // Method org/apache/commons/math3/util/FastMath.max:(DD)D
      57: dreturn

  public double distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: dstore_3
      15: aload_2
      16: getfield      #3                  // Field y:D
      19: aload_0
      20: getfield      #3                  // Field y:D
      23: dsub
      24: dstore        5
      26: aload_2
      27: getfield      #4                  // Field z:D
      30: aload_0
      31: getfield      #4                  // Field z:D
      34: dsub
      35: dstore        7
      37: dload_3
      38: dload_3
      39: dmul
      40: dload         5
      42: dload         5
      44: dmul
      45: dadd
      46: dload         7
      48: dload         7
      50: dmul
      51: dadd
      52: dreturn

  public static double dotProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D crossProduct(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #42                 // Method crossProduct:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: areturn

  public static double distance1(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #43                 // Method distance1:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #44                 // Method distance:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distanceInf(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #45                 // Method distanceInf:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distanceSq(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #46                 // Method distanceSq:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public java.lang.String toString();
    Code:
       0: invokestatic  #47                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.getInstance:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat;
       3: aload_0
       4: invokevirtual #48                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.format:(Lorg/apache/commons/math3/geometry/Vector;)Ljava/lang/String;
       7: areturn

  public java.lang.String toString(java.text.NumberFormat);
    Code:
       0: new           #49                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat
       3: dup
       4: aload_1
       5: invokespecial #50                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat."<init>":(Ljava/text/NumberFormat;)V
       8: aload_0
       9: invokevirtual #48                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3DFormat.format:(Lorg/apache/commons/math3/geometry/Vector;)Ljava/lang/String;
      12: areturn

  public org.apache.commons.math3.geometry.Vector scalarMultiply(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #27                 // Method scalarMultiply:(D)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector normalize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #51                 // Method normalize:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.Vector negate();
    Code:
       0: aload_0
       1: invokevirtual #52                 // Method negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: dload_1
       2: aload_3
       3: invokevirtual #53                 // Method subtract:(DLorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       6: areturn

  public org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #54                 // Method subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: dload_1
       2: aload_3
       3: invokevirtual #55                 // Method add:(DLorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       6: areturn

  public org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #56                 // Method add:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector getZero();
    Code:
       0: aload_0
       1: invokevirtual #57                 // Method getZero:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  static {};
    Code:
       0: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: dconst_0
       5: dconst_0
       6: dconst_0
       7: invokespecial #21                 // Method "<init>":(DDD)V
      10: putstatic     #13                 // Field ZERO:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      16: dup
      17: dconst_1
      18: dconst_0
      19: dconst_0
      20: invokespecial #21                 // Method "<init>":(DDD)V
      23: putstatic     #58                 // Field PLUS_I:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      26: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      29: dup
      30: ldc2_w        #59                 // double -1.0d
      33: dconst_0
      34: dconst_0
      35: invokespecial #21                 // Method "<init>":(DDD)V
      38: putstatic     #61                 // Field MINUS_I:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      41: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      44: dup
      45: dconst_0
      46: dconst_1
      47: dconst_0
      48: invokespecial #21                 // Method "<init>":(DDD)V
      51: putstatic     #62                 // Field PLUS_J:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      54: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      57: dup
      58: dconst_0
      59: ldc2_w        #59                 // double -1.0d
      62: dconst_0
      63: invokespecial #21                 // Method "<init>":(DDD)V
      66: putstatic     #63                 // Field MINUS_J:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      69: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      72: dup
      73: dconst_0
      74: dconst_0
      75: dconst_1
      76: invokespecial #21                 // Method "<init>":(DDD)V
      79: putstatic     #64                 // Field PLUS_K:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      82: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      85: dup
      86: dconst_0
      87: dconst_0
      88: ldc2_w        #59                 // double -1.0d
      91: invokespecial #21                 // Method "<init>":(DDD)V
      94: putstatic     #65                 // Field MINUS_K:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      97: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
     100: dup
     101: ldc2_w        #66                 // double NaNd
     104: ldc2_w        #66                 // double NaNd
     107: ldc2_w        #66                 // double NaNd
     110: invokespecial #21                 // Method "<init>":(DDD)V
     113: putstatic     #68                 // Field NaN:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
     116: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
     119: dup
     120: ldc2_w        #69                 // double Infinityd
     123: ldc2_w        #69                 // double Infinityd
     126: ldc2_w        #69                 // double Infinityd
     129: invokespecial #21                 // Method "<init>":(DDD)V
     132: putstatic     #71                 // Field POSITIVE_INFINITY:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
     135: new           #20                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
     138: dup
     139: ldc2_w        #72                 // double -Infinityd
     142: ldc2_w        #72                 // double -Infinityd
     145: ldc2_w        #72                 // double -Infinityd
     148: invokespecial #21                 // Method "<init>":(DDD)V
     151: putstatic     #74                 // Field NEGATIVE_INFINITY:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
     154: return
}
