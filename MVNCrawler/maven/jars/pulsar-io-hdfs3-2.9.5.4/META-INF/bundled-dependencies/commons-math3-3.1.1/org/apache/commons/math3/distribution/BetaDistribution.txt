Compiled from "BetaDistribution.java"
public class org.apache.commons.math3.distribution.BetaDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double alpha;

  private final double beta;

  private double z;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.BetaDistribution(double, double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #1                  // double 1.0E-9d
       6: invokespecial #3                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.BetaDistribution(double, double, double);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.BetaDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: aload_0
       6: dload_2
       7: putfield      #8                  // Field alpha:D
      10: aload_0
      11: dload         4
      13: putfield      #9                  // Field beta:D
      16: aload_0
      17: ldc2_w        #10                 // double NaNd
      20: putfield      #12                 // Field z:D
      23: aload_0
      24: dload         6
      26: putfield      #13                 // Field solverAbsoluteAccuracy:D
      29: return

  public double getAlpha();
    Code:
       0: aload_0
       1: getfield      #8                  // Field alpha:D
       4: dreturn

  public double getBeta();
    Code:
       0: aload_0
       1: getfield      #9                  // Field beta:D
       4: dreturn

  private void recomputeZ();
    Code:
       0: aload_0
       1: getfield      #12                 // Field z:D
       4: invokestatic  #14                 // Method java/lang/Double.isNaN:(D)Z
       7: ifeq          42
      10: aload_0
      11: aload_0
      12: getfield      #8                  // Field alpha:D
      15: invokestatic  #15                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      18: aload_0
      19: getfield      #9                  // Field beta:D
      22: invokestatic  #15                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      25: dadd
      26: aload_0
      27: getfield      #8                  // Field alpha:D
      30: aload_0
      31: getfield      #9                  // Field beta:D
      34: dadd
      35: invokestatic  #15                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      38: dsub
      39: putfield      #12                 // Field z:D
      42: return

  public double density(double);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method recomputeZ:()V
       4: dload_1
       5: dconst_0
       6: dcmpg
       7: iflt          16
      10: dload_1
      11: dconst_1
      12: dcmpl
      13: ifle          18
      16: dconst_0
      17: dreturn
      18: dload_1
      19: dconst_0
      20: dcmpl
      21: ifne          58
      24: aload_0
      25: getfield      #8                  // Field alpha:D
      28: dconst_1
      29: dcmpg
      30: ifge          56
      33: new           #17                 // class org/apache/commons/math3/exception/NumberIsTooSmallException
      36: dup
      37: getstatic     #18                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      40: aload_0
      41: getfield      #8                  // Field alpha:D
      44: invokestatic  #19                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      47: iconst_1
      48: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      51: iconst_0
      52: invokespecial #21                 // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      55: athrow
      56: dconst_0
      57: dreturn
      58: dload_1
      59: dconst_1
      60: dcmpl
      61: ifne          98
      64: aload_0
      65: getfield      #9                  // Field beta:D
      68: dconst_1
      69: dcmpg
      70: ifge          96
      73: new           #17                 // class org/apache/commons/math3/exception/NumberIsTooSmallException
      76: dup
      77: getstatic     #22                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      80: aload_0
      81: getfield      #9                  // Field beta:D
      84: invokestatic  #19                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      87: iconst_1
      88: invokestatic  #20                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      91: iconst_0
      92: invokespecial #21                 // Method org/apache/commons/math3/exception/NumberIsTooSmallException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      95: athrow
      96: dconst_0
      97: dreturn
      98: dload_1
      99: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
     102: dstore_3
     103: dload_1
     104: dneg
     105: invokestatic  #24                 // Method org/apache/commons/math3/util/FastMath.log1p:(D)D
     108: dstore        5
     110: aload_0
     111: getfield      #8                  // Field alpha:D
     114: dconst_1
     115: dsub
     116: dload_3
     117: dmul
     118: aload_0
     119: getfield      #9                  // Field beta:D
     122: dconst_1
     123: dsub
     124: dload         5
     126: dmul
     127: dadd
     128: aload_0
     129: getfield      #12                 // Field z:D
     132: dsub
     133: invokestatic  #25                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
     136: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          8
       6: dconst_0
       7: dreturn
       8: dload_1
       9: dconst_1
      10: dcmpl
      11: iflt          16
      14: dconst_1
      15: dreturn
      16: dload_1
      17: aload_0
      18: getfield      #8                  // Field alpha:D
      21: aload_0
      22: getfield      #9                  // Field beta:D
      25: invokestatic  #26                 // Method org/apache/commons/math3/special/Beta.regularizedBeta:(DDD)D
      28: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #13                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getAlpha:()D
       4: dstore_1
       5: dload_1
       6: dload_1
       7: aload_0
       8: invokevirtual #28                 // Method getBeta:()D
      11: dadd
      12: ddiv
      13: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getAlpha:()D
       4: dstore_1
       5: aload_0
       6: invokevirtual #28                 // Method getBeta:()D
       9: dstore_3
      10: dload_1
      11: dload_3
      12: dadd
      13: dstore        5
      15: dload_1
      16: dload_3
      17: dmul
      18: dload         5
      20: dload         5
      22: dmul
      23: dload         5
      25: dconst_1
      26: dadd
      27: dmul
      28: ddiv
      29: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: dconst_1
       1: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
