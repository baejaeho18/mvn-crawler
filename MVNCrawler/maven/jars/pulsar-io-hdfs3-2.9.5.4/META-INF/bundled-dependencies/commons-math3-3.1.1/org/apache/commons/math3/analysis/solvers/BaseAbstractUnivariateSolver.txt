Compiled from "BaseAbstractUnivariateSolver.java"
public abstract class org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver<FUNC extends org.apache.commons.math3.analysis.UnivariateFunction> implements org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver<FUNC> {
  private static final double DEFAULT_RELATIVE_ACCURACY;

  private static final double DEFAULT_FUNCTION_VALUE_ACCURACY;

  private final double functionValueAccuracy;

  private final double absoluteAccuracy;

  private final double relativeAccuracy;

  private final org.apache.commons.math3.util.Incrementor evaluations;

  private double searchMin;

  private double searchMax;

  private double searchStart;

  private FUNC function;

  protected org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver(double);
    Code:
       0: aload_0
       1: ldc2_w        #1                  // double 1.0E-14d
       4: dload_1
       5: ldc2_w        #3                  // double 1.0E-15d
       8: invokespecial #5                  // Method "<init>":(DDD)V
      11: return

  protected org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver(double, double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #3                  // double 1.0E-15d
       6: invokespecial #5                  // Method "<init>":(DDD)V
       9: return

  protected org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver(double, double, double);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class org/apache/commons/math3/util/Incrementor
       8: dup
       9: invokespecial #8                  // Method org/apache/commons/math3/util/Incrementor."<init>":()V
      12: putfield      #9                  // Field evaluations:Lorg/apache/commons/math3/util/Incrementor;
      15: aload_0
      16: dload_3
      17: putfield      #10                 // Field absoluteAccuracy:D
      20: aload_0
      21: dload_1
      22: putfield      #11                 // Field relativeAccuracy:D
      25: aload_0
      26: dload         5
      28: putfield      #12                 // Field functionValueAccuracy:D
      31: return

  public int getMaxEvaluations();
    Code:
       0: aload_0
       1: getfield      #9                  // Field evaluations:Lorg/apache/commons/math3/util/Incrementor;
       4: invokevirtual #13                 // Method org/apache/commons/math3/util/Incrementor.getMaximalCount:()I
       7: ireturn

  public int getEvaluations();
    Code:
       0: aload_0
       1: getfield      #9                  // Field evaluations:Lorg/apache/commons/math3/util/Incrementor;
       4: invokevirtual #14                 // Method org/apache/commons/math3/util/Incrementor.getCount:()I
       7: ireturn

  public double getMin();
    Code:
       0: aload_0
       1: getfield      #15                 // Field searchMin:D
       4: dreturn

  public double getMax();
    Code:
       0: aload_0
       1: getfield      #16                 // Field searchMax:D
       4: dreturn

  public double getStartValue();
    Code:
       0: aload_0
       1: getfield      #17                 // Field searchStart:D
       4: dreturn

  public double getAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #10                 // Field absoluteAccuracy:D
       4: dreturn

  public double getRelativeAccuracy();
    Code:
       0: aload_0
       1: getfield      #11                 // Field relativeAccuracy:D
       4: dreturn

  public double getFunctionValueAccuracy();
    Code:
       0: aload_0
       1: getfield      #12                 // Field functionValueAccuracy:D
       4: dreturn

  protected double computeObjectiveValue(double) throws org.apache.commons.math3.exception.TooManyEvaluationsException;
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method incrementEvaluationCount:()V
       4: aload_0
       5: getfield      #19                 // Field function:Lorg/apache/commons/math3/analysis/UnivariateFunction;
       8: dload_1
       9: invokeinterface #20,  3           // InterfaceMethod org/apache/commons/math3/analysis/UnivariateFunction.value:(D)D
      14: dreturn

  protected void setup(int, FUNC, double, double, double);
    Code:
       0: aload_2
       1: invokestatic  #21                 // Method org/apache/commons/math3/util/MathUtils.checkNotNull:(Ljava/lang/Object;)V
       4: aload_0
       5: dload_3
       6: putfield      #15                 // Field searchMin:D
       9: aload_0
      10: dload         5
      12: putfield      #16                 // Field searchMax:D
      15: aload_0
      16: dload         7
      18: putfield      #17                 // Field searchStart:D
      21: aload_0
      22: aload_2
      23: putfield      #19                 // Field function:Lorg/apache/commons/math3/analysis/UnivariateFunction;
      26: aload_0
      27: getfield      #9                  // Field evaluations:Lorg/apache/commons/math3/util/Incrementor;
      30: iload_1
      31: invokevirtual #22                 // Method org/apache/commons/math3/util/Incrementor.setMaximalCount:(I)V
      34: aload_0
      35: getfield      #9                  // Field evaluations:Lorg/apache/commons/math3/util/Incrementor;
      38: invokevirtual #23                 // Method org/apache/commons/math3/util/Incrementor.resetCount:()V
      41: return

  public double solve(int, FUNC, double, double, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: dload_3
       4: dload         5
       6: dload         7
       8: invokevirtual #24                 // Method setup:(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)V
      11: aload_0
      12: invokevirtual #25                 // Method doSolve:()D
      15: dreturn

  public double solve(int, FUNC, double, double);
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: dload_3
       4: dload         5
       6: dload_3
       7: ldc2_w        #26                 // double 0.5d
      10: dload         5
      12: dload_3
      13: dsub
      14: dmul
      15: dadd
      16: invokevirtual #28                 // Method solve:(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D
      19: dreturn

  public double solve(int, FUNC, double) throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException;
    Code:
       0: aload_0
       1: iload_1
       2: aload_2
       3: ldc2_w        #29                 // double NaNd
       6: ldc2_w        #29                 // double NaNd
       9: dload_3
      10: invokevirtual #28                 // Method solve:(ILorg/apache/commons/math3/analysis/UnivariateFunction;DDD)D
      13: dreturn

  protected abstract double doSolve() throws org.apache.commons.math3.exception.TooManyEvaluationsException, org.apache.commons.math3.exception.NoBracketingException;

  protected boolean isBracketing(double, double);
    Code:
       0: aload_0
       1: getfield      #19                 // Field function:Lorg/apache/commons/math3/analysis/UnivariateFunction;
       4: dload_1
       5: dload_3
       6: invokestatic  #31                 // Method org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.isBracketing:(Lorg/apache/commons/math3/analysis/UnivariateFunction;DD)Z
       9: ireturn

  protected boolean isSequence(double, double, double);
    Code:
       0: dload_1
       1: dload_3
       2: dload         5
       4: invokestatic  #32                 // Method org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.isSequence:(DDD)Z
       7: ireturn

  protected void verifyInterval(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: dload_1
       1: dload_3
       2: invokestatic  #33                 // Method org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.verifyInterval:(DD)V
       5: return

  protected void verifySequence(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: dload_1
       1: dload_3
       2: dload         5
       4: invokestatic  #34                 // Method org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.verifySequence:(DDD)V
       7: return

  protected void verifyBracketing(double, double) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.NoBracketingException;
    Code:
       0: aload_0
       1: getfield      #19                 // Field function:Lorg/apache/commons/math3/analysis/UnivariateFunction;
       4: dload_1
       5: dload_3
       6: invokestatic  #35                 // Method org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils.verifyBracketing:(Lorg/apache/commons/math3/analysis/UnivariateFunction;DD)V
       9: return

  protected void incrementEvaluationCount() throws org.apache.commons.math3.exception.TooManyEvaluationsException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field evaluations:Lorg/apache/commons/math3/util/Incrementor;
       4: invokevirtual #36                 // Method org/apache/commons/math3/util/Incrementor.incrementCount:()V
       7: goto          23
      10: astore_1
      11: new           #38                 // class org/apache/commons/math3/exception/TooManyEvaluationsException
      14: dup
      15: aload_1
      16: invokevirtual #39                 // Method org/apache/commons/math3/exception/MaxCountExceededException.getMax:()Ljava/lang/Number;
      19: invokespecial #40                 // Method org/apache/commons/math3/exception/TooManyEvaluationsException."<init>":(Ljava/lang/Number;)V
      22: athrow
      23: return
    Exception table:
       from    to  target type
           0     7    10   Class org/apache/commons/math3/exception/MaxCountExceededException
}
