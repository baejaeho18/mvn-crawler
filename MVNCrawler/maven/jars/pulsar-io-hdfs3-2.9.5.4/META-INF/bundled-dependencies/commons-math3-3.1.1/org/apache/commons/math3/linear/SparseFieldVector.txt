Compiled from "SparseFieldVector.java"
public class org.apache.commons.math3.linear.SparseFieldVector<T extends org.apache.commons.math3.FieldElement<T>> implements org.apache.commons.math3.linear.FieldVector<T>, java.io.Serializable {
  private static final long serialVersionUID;

  private final org.apache.commons.math3.Field<T> field;

  private final org.apache.commons.math3.util.OpenIntToFieldHashMap<T> entries;

  private final int virtualSize;

  public org.apache.commons.math3.linear.SparseFieldVector(org.apache.commons.math3.Field<T>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/math3/Field;I)V
       6: return

  public org.apache.commons.math3.linear.SparseFieldVector(org.apache.commons.math3.Field<T>, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       9: aload_0
      10: iload_2
      11: putfield      #4                  // Field virtualSize:I
      14: aload_0
      15: new           #5                  // class org/apache/commons/math3/util/OpenIntToFieldHashMap
      18: dup
      19: aload_1
      20: invokespecial #6                  // Method org/apache/commons/math3/util/OpenIntToFieldHashMap."<init>":(Lorg/apache/commons/math3/Field;)V
      23: putfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      26: return

  protected org.apache.commons.math3.linear.SparseFieldVector(org.apache.commons.math3.linear.SparseFieldVector<T>, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       9: putfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      12: aload_0
      13: aload_1
      14: invokevirtual #8                  // Method getDimension:()I
      17: iload_2
      18: iadd
      19: putfield      #4                  // Field virtualSize:I
      22: aload_0
      23: new           #5                  // class org/apache/commons/math3/util/OpenIntToFieldHashMap
      26: dup
      27: aload_1
      28: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      31: invokespecial #9                  // Method org/apache/commons/math3/util/OpenIntToFieldHashMap."<init>":(Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;)V
      34: putfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      37: return

  public org.apache.commons.math3.linear.SparseFieldVector(org.apache.commons.math3.Field<T>, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       9: aload_0
      10: iload_2
      11: putfield      #4                  // Field virtualSize:I
      14: aload_0
      15: new           #5                  // class org/apache/commons/math3/util/OpenIntToFieldHashMap
      18: dup
      19: aload_1
      20: iload_3
      21: invokespecial #10                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap."<init>":(Lorg/apache/commons/math3/Field;I)V
      24: putfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      27: return

  public org.apache.commons.math3.linear.SparseFieldVector(org.apache.commons.math3.Field<T>, T[]);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       9: aload_0
      10: aload_2
      11: arraylength
      12: putfield      #4                  // Field virtualSize:I
      15: aload_0
      16: new           #5                  // class org/apache/commons/math3/util/OpenIntToFieldHashMap
      19: dup
      20: aload_1
      21: invokespecial #6                  // Method org/apache/commons/math3/util/OpenIntToFieldHashMap."<init>":(Lorg/apache/commons/math3/Field;)V
      24: putfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      27: iconst_0
      28: istore_3
      29: iload_3
      30: aload_2
      31: arraylength
      32: if_icmpge     57
      35: aload_2
      36: iload_3
      37: aaload
      38: astore        4
      40: aload_0
      41: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      44: iload_3
      45: aload         4
      47: invokevirtual #11                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.put:(ILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      50: pop
      51: iinc          3, 1
      54: goto          29
      57: return

  public org.apache.commons.math3.linear.SparseFieldVector(org.apache.commons.math3.linear.SparseFieldVector<T>);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       9: putfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      12: aload_0
      13: aload_1
      14: invokevirtual #8                  // Method getDimension:()I
      17: putfield      #4                  // Field virtualSize:I
      20: aload_0
      21: new           #5                  // class org/apache/commons/math3/util/OpenIntToFieldHashMap
      24: dup
      25: aload_1
      26: invokespecial #12                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      29: invokespecial #9                  // Method org/apache/commons/math3/util/OpenIntToFieldHashMap."<init>":(Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;)V
      32: putfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      35: return

  private org.apache.commons.math3.util.OpenIntToFieldHashMap<T> getEntries();
    Code:
       0: aload_0
       1: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
       4: areturn

  public org.apache.commons.math3.linear.FieldVector<T> add(org.apache.commons.math3.linear.SparseFieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method getDimension:()I
       5: invokevirtual #13                 // Method checkVectorDimensions:(I)V
       8: aload_0
       9: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
      12: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      15: astore_2
      16: aload_1
      17: invokespecial #12                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      20: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      23: astore_3
      24: aload_3
      25: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      28: ifeq          98
      31: aload_3
      32: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      35: aload_3
      36: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      39: istore        4
      41: aload_3
      42: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      45: astore        5
      47: aload_0
      48: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      51: iload         4
      53: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.containsKey:(I)Z
      56: ifeq          87
      59: aload_2
      60: iload         4
      62: aload_0
      63: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      66: iload         4
      68: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.get:(I)Lorg/apache/commons/math3/FieldElement;
      71: aload         5
      73: invokeinterface #23,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      78: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      81: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      84: goto          95
      87: aload_2
      88: iload         4
      90: aload         5
      92: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      95: goto          24
      98: aload_2
      99: areturn

  public org.apache.commons.math3.linear.FieldVector<T> append(org.apache.commons.math3.linear.SparseFieldVector<T>);
    Code:
       0: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       3: dup
       4: aload_0
       5: aload_1
       6: invokevirtual #8                  // Method getDimension:()I
       9: invokespecial #26                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;I)V
      12: astore_2
      13: aload_1
      14: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      17: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      20: astore_3
      21: aload_3
      22: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      25: ifeq          52
      28: aload_3
      29: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      32: aload_2
      33: aload_3
      34: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      37: aload_0
      38: getfield      #4                  // Field virtualSize:I
      41: iadd
      42: aload_3
      43: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      46: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      49: goto          21
      52: aload_2
      53: areturn

  public org.apache.commons.math3.linear.FieldVector<T> append(org.apache.commons.math3.linear.FieldVector<T>);
    Code:
       0: aload_1
       1: instanceof    #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      12: invokevirtual #27                 // Method append:(Lorg/apache/commons/math3/linear/SparseFieldVector;)Lorg/apache/commons/math3/linear/FieldVector;
      15: areturn
      16: aload_1
      17: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      22: istore_2
      23: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      26: dup
      27: aload_0
      28: iload_2
      29: invokespecial #26                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;I)V
      32: astore_3
      33: iconst_0
      34: istore        4
      36: iload         4
      38: iload_2
      39: if_icmpge     69
      42: aload_3
      43: iload         4
      45: aload_0
      46: getfield      #4                  // Field virtualSize:I
      49: iadd
      50: aload_1
      51: iload         4
      53: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      58: invokeinterface #30,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      63: iinc          4, 1
      66: goto          36
      69: aload_3
      70: areturn

  public org.apache.commons.math3.linear.FieldVector<T> append(T);
    Code:
       0: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       3: dup
       4: aload_0
       5: iconst_1
       6: invokespecial #26                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;I)V
       9: astore_2
      10: aload_2
      11: aload_0
      12: getfield      #4                  // Field virtualSize:I
      15: aload_1
      16: invokeinterface #30,  3           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      21: aload_2
      22: areturn

  public org.apache.commons.math3.linear.FieldVector<T> copy();
    Code:
       0: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       3: dup
       4: aload_0
       5: invokespecial #31                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;)V
       8: areturn

  public T dotProduct(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
       7: invokevirtual #13                 // Method checkVectorDimensions:(I)V
      10: aload_0
      11: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      14: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      19: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      22: astore_2
      23: aload_0
      24: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      27: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      30: astore_3
      31: aload_3
      32: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      35: ifeq          74
      38: aload_3
      39: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      42: aload_2
      43: aload_1
      44: aload_3
      45: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      48: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      53: aload_3
      54: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      57: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      62: invokeinterface #23,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      67: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      70: astore_2
      71: goto          31
      74: aload_2
      75: areturn

  public org.apache.commons.math3.linear.FieldVector<T> ebeDivide(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
       7: invokevirtual #13                 // Method checkVectorDimensions:(I)V
      10: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      13: dup
      14: aload_0
      15: invokespecial #31                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;)V
      18: astore_2
      19: aload_2
      20: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      23: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      26: astore_3
      27: aload_3
      28: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      31: ifeq          71
      34: aload_3
      35: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      38: aload_2
      39: aload_3
      40: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      43: aload_3
      44: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      47: aload_1
      48: aload_3
      49: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      52: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      57: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.divide:(Ljava/lang/Object;)Ljava/lang/Object;
      62: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      65: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      68: goto          27
      71: aload_2
      72: areturn

  public org.apache.commons.math3.linear.FieldVector<T> ebeMultiply(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
       7: invokevirtual #13                 // Method checkVectorDimensions:(I)V
      10: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      13: dup
      14: aload_0
      15: invokespecial #31                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;)V
      18: astore_2
      19: aload_2
      20: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      23: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      26: astore_3
      27: aload_3
      28: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      31: ifeq          71
      34: aload_3
      35: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      38: aload_2
      39: aload_3
      40: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      43: aload_3
      44: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      47: aload_1
      48: aload_3
      49: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      52: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      57: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      62: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      65: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      68: goto          27
      71: aload_2
      72: areturn

  public T[] getData();
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method toArray:()[Lorg/apache/commons/math3/FieldElement;
       4: areturn

  public int getDimension();
    Code:
       0: aload_0
       1: getfield      #4                  // Field virtualSize:I
       4: ireturn

  public T getEntry(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #36                 // Method checkIndex:(I)V
       5: aload_0
       6: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
       9: iload_1
      10: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.get:(I)Lorg/apache/commons/math3/FieldElement;
      13: areturn

  public org.apache.commons.math3.Field<T> getField();
    Code:
       0: aload_0
       1: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       4: areturn

  public org.apache.commons.math3.linear.FieldVector<T> getSubVector(int, int) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.NotPositiveException;
    Code:
       0: iload_2
       1: ifge          19
       4: new           #37                 // class org/apache/commons/math3/exception/NotPositiveException
       7: dup
       8: getstatic     #38                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      11: iload_2
      12: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      15: invokespecial #40                 // Method org/apache/commons/math3/exception/NotPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      18: athrow
      19: aload_0
      20: iload_1
      21: invokespecial #36                 // Method checkIndex:(I)V
      24: aload_0
      25: iload_1
      26: iload_2
      27: iadd
      28: iconst_1
      29: isub
      30: invokespecial #36                 // Method checkIndex:(I)V
      33: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      36: dup
      37: aload_0
      38: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      41: iload_2
      42: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/math3/Field;I)V
      45: astore_3
      46: iload_1
      47: iload_2
      48: iadd
      49: istore        4
      51: aload_0
      52: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      55: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      58: astore        5
      60: aload         5
      62: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      65: ifeq          109
      68: aload         5
      70: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      73: aload         5
      75: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      78: istore        6
      80: iload         6
      82: iload_1
      83: if_icmplt     106
      86: iload         6
      88: iload         4
      90: if_icmpge     106
      93: aload_3
      94: iload         6
      96: iload_1
      97: isub
      98: aload         5
     100: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
     103: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
     106: goto          60
     109: aload_3
     110: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapAdd(T) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
       4: aload_1
       5: invokeinterface #41,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.mapAddToSelf:(Lorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/linear/FieldVector;
      10: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapAddToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_0
       4: getfield      #4                  // Field virtualSize:I
       7: if_icmpge     35
      10: aload_0
      11: iload_2
      12: aload_0
      13: iload_2
      14: invokevirtual #42                 // Method getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      17: aload_1
      18: invokeinterface #23,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      26: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      29: iinc          2, 1
      32: goto          2
      35: aload_0
      36: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapDivide(T) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
       4: aload_1
       5: invokeinterface #43,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.mapDivideToSelf:(Lorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/linear/FieldVector;
      10: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapDivideToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
       4: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
       7: astore_2
       8: aload_2
       9: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      12: ifeq          47
      15: aload_2
      16: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      19: aload_0
      20: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      23: aload_2
      24: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      27: aload_2
      28: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      31: aload_1
      32: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.divide:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      40: invokevirtual #11                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.put:(ILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      43: pop
      44: goto          8
      47: aload_0
      48: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapInv() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
       4: invokeinterface #44,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.mapInvToSelf:()Lorg/apache/commons/math3/linear/FieldVector;
       9: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapInvToSelf() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #4                  // Field virtualSize:I
       7: if_icmpge     46
      10: aload_0
      11: iload_1
      12: aload_0
      13: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      16: invokeinterface #45,  1           // InterfaceMethod org/apache/commons/math3/Field.getOne:()Ljava/lang/Object;
      21: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      24: aload_0
      25: iload_1
      26: invokevirtual #42                 // Method getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      29: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.divide:(Ljava/lang/Object;)Ljava/lang/Object;
      34: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      37: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      40: iinc          1, 1
      43: goto          2
      46: aload_0
      47: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapMultiply(T) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
       4: aload_1
       5: invokeinterface #46,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.mapMultiplyToSelf:(Lorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/linear/FieldVector;
      10: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapMultiplyToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
       4: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
       7: astore_2
       8: aload_2
       9: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      12: ifeq          47
      15: aload_2
      16: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      19: aload_0
      20: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      23: aload_2
      24: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      27: aload_2
      28: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      31: aload_1
      32: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      37: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      40: invokevirtual #11                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.put:(ILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      43: pop
      44: goto          8
      47: aload_0
      48: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapSubtract(T) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
       4: aload_1
       5: invokeinterface #47,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.mapSubtractToSelf:(Lorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/linear/FieldVector;
      10: areturn

  public org.apache.commons.math3.linear.FieldVector<T> mapSubtractToSelf(T) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       5: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      10: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      13: aload_1
      14: invokeinterface #48,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.subtract:(Ljava/lang/Object;)Ljava/lang/Object;
      19: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      22: invokevirtual #49                 // Method mapAddToSelf:(Lorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/linear/FieldVector;
      25: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> outerProduct(org.apache.commons.math3.linear.SparseFieldVector<T>);
    Code:
       0: aload_1
       1: invokevirtual #8                  // Method getDimension:()I
       4: istore_2
       5: new           #50                 // class org/apache/commons/math3/linear/SparseFieldMatrix
       8: dup
       9: aload_0
      10: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      13: aload_0
      14: getfield      #4                  // Field virtualSize:I
      17: iload_2
      18: invokespecial #51                 // Method org/apache/commons/math3/linear/SparseFieldMatrix."<init>":(Lorg/apache/commons/math3/Field;II)V
      21: astore_3
      22: aload_0
      23: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      26: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      29: astore        4
      31: aload         4
      33: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      36: ifeq          104
      39: aload         4
      41: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      44: aload_1
      45: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      48: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      51: astore        5
      53: aload         5
      55: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      58: ifeq          101
      61: aload         5
      63: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      66: aload_3
      67: aload         4
      69: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      72: aload         5
      74: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      77: aload         4
      79: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      82: aload         5
      84: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      87: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
      92: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      95: invokevirtual #52                 // Method org/apache/commons/math3/linear/SparseFieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
      98: goto          53
     101: goto          31
     104: aload_3
     105: areturn

  public org.apache.commons.math3.linear.FieldMatrix<T> outerProduct(org.apache.commons.math3.linear.FieldVector<T>);
    Code:
       0: aload_1
       1: instanceof    #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      12: invokevirtual #53                 // Method outerProduct:(Lorg/apache/commons/math3/linear/SparseFieldVector;)Lorg/apache/commons/math3/linear/FieldMatrix;
      15: areturn
      16: aload_1
      17: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      22: istore_2
      23: new           #50                 // class org/apache/commons/math3/linear/SparseFieldMatrix
      26: dup
      27: aload_0
      28: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      31: aload_0
      32: getfield      #4                  // Field virtualSize:I
      35: iload_2
      36: invokespecial #51                 // Method org/apache/commons/math3/linear/SparseFieldMatrix."<init>":(Lorg/apache/commons/math3/Field;II)V
      39: astore_3
      40: aload_0
      41: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      44: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      47: astore        4
      49: aload         4
      51: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      54: ifeq          122
      57: aload         4
      59: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      62: aload         4
      64: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      67: istore        5
      69: aload         4
      71: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      74: astore        6
      76: iconst_0
      77: istore        7
      79: iload         7
      81: iload_2
      82: if_icmpge     119
      85: aload_3
      86: iload         5
      88: iload         7
      90: aload         6
      92: aload_1
      93: iload         7
      95: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
     100: invokeinterface #33,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.multiply:(Ljava/lang/Object;)Ljava/lang/Object;
     105: checkcast     #24                 // class org/apache/commons/math3/FieldElement
     108: invokeinterface #54,  4           // InterfaceMethod org/apache/commons/math3/linear/FieldMatrix.setEntry:(IILorg/apache/commons/math3/FieldElement;)V
     113: iinc          7, 1
     116: goto          79
     119: goto          49
     122: aload_3
     123: areturn

  public org.apache.commons.math3.linear.FieldVector<T> projection(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException, org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
       7: invokevirtual #13                 // Method checkVectorDimensions:(I)V
      10: aload_1
      11: aload_0
      12: aload_1
      13: invokevirtual #55                 // Method dotProduct:(Lorg/apache/commons/math3/linear/FieldVector;)Lorg/apache/commons/math3/FieldElement;
      16: aload_1
      17: aload_1
      18: invokeinterface #56,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.dotProduct:(Lorg/apache/commons/math3/linear/FieldVector;)Lorg/apache/commons/math3/FieldElement;
      23: invokeinterface #34,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.divide:(Ljava/lang/Object;)Ljava/lang/Object;
      28: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      31: invokeinterface #57,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.mapMultiply:(Lorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/linear/FieldVector;
      36: areturn

  public void set(T);
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_0
       4: getfield      #4                  // Field virtualSize:I
       7: if_icmpge     22
      10: aload_0
      11: iload_2
      12: aload_1
      13: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      16: iinc          2, 1
      19: goto          2
      22: return

  public void setEntry(int, T) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #36                 // Method checkIndex:(I)V
       5: aload_0
       6: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
       9: iload_1
      10: aload_2
      11: invokevirtual #11                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.put:(ILorg/apache/commons/math3/FieldElement;)Lorg/apache/commons/math3/FieldElement;
      14: pop
      15: return

  public void setSubVector(int, org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #36                 // Method checkIndex:(I)V
       5: aload_0
       6: iload_1
       7: aload_2
       8: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      13: iadd
      14: iconst_1
      15: isub
      16: invokespecial #36                 // Method checkIndex:(I)V
      19: aload_2
      20: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      25: istore_3
      26: iconst_0
      27: istore        4
      29: iload         4
      31: iload_3
      32: if_icmpge     57
      35: aload_0
      36: iload         4
      38: iload_1
      39: iadd
      40: aload_2
      41: iload         4
      43: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      48: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      51: iinc          4, 1
      54: goto          29
      57: return

  public org.apache.commons.math3.linear.SparseFieldVector<T> subtract(org.apache.commons.math3.linear.SparseFieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method getDimension:()I
       5: invokevirtual #13                 // Method checkVectorDimensions:(I)V
       8: aload_0
       9: invokevirtual #14                 // Method copy:()Lorg/apache/commons/math3/linear/FieldVector;
      12: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      15: astore_2
      16: aload_1
      17: invokespecial #12                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      20: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      23: astore_3
      24: aload_3
      25: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      28: ifeq          116
      31: aload_3
      32: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      35: aload_3
      36: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      39: istore        4
      41: aload_0
      42: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      45: iload         4
      47: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.containsKey:(I)Z
      50: ifeq          83
      53: aload_2
      54: iload         4
      56: aload_0
      57: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      60: iload         4
      62: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.get:(I)Lorg/apache/commons/math3/FieldElement;
      65: aload_3
      66: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      69: invokeinterface #48,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.subtract:(Ljava/lang/Object;)Ljava/lang/Object;
      74: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      77: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      80: goto          113
      83: aload_2
      84: iload         4
      86: aload_0
      87: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      90: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
      95: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      98: aload_3
      99: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
     102: invokeinterface #48,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.subtract:(Ljava/lang/Object;)Ljava/lang/Object;
     107: checkcast     #24                 // class org/apache/commons/math3/FieldElement
     110: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
     113: goto          24
     116: aload_2
     117: areturn

  public org.apache.commons.math3.linear.FieldVector<T> subtract(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_1
       1: instanceof    #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      12: invokevirtual #58                 // Method subtract:(Lorg/apache/commons/math3/linear/SparseFieldVector;)Lorg/apache/commons/math3/linear/SparseFieldVector;
      15: areturn
      16: aload_1
      17: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      22: istore_2
      23: aload_0
      24: iload_2
      25: invokevirtual #13                 // Method checkVectorDimensions:(I)V
      28: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      31: dup
      32: aload_0
      33: invokespecial #31                 // Method "<init>":(Lorg/apache/commons/math3/linear/SparseFieldVector;)V
      36: astore_3
      37: iconst_0
      38: istore        4
      40: iload         4
      42: iload_2
      43: if_icmpge     132
      46: aload_0
      47: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      50: iload         4
      52: invokevirtual #21                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.containsKey:(I)Z
      55: ifeq          92
      58: aload_3
      59: iload         4
      61: aload_0
      62: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      65: iload         4
      67: invokevirtual #22                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.get:(I)Lorg/apache/commons/math3/FieldElement;
      70: aload_1
      71: iload         4
      73: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      78: invokeinterface #48,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.subtract:(Ljava/lang/Object;)Ljava/lang/Object;
      83: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      86: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      89: goto          126
      92: aload_3
      93: iload         4
      95: aload_0
      96: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      99: invokeinterface #32,  1           // InterfaceMethod org/apache/commons/math3/Field.getZero:()Ljava/lang/Object;
     104: checkcast     #24                 // class org/apache/commons/math3/FieldElement
     107: aload_1
     108: iload         4
     110: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
     115: invokeinterface #48,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.subtract:(Ljava/lang/Object;)Ljava/lang/Object;
     120: checkcast     #24                 // class org/apache/commons/math3/FieldElement
     123: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
     126: iinc          4, 1
     129: goto          40
     132: aload_3
     133: areturn

  public T[] toArray();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field virtualSize:I
       5: invokespecial #59                 // Method buildArray:(I)[Lorg/apache/commons/math3/FieldElement;
       8: astore_1
       9: aload_0
      10: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      13: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      16: astore_2
      17: aload_2
      18: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      21: ifeq          41
      24: aload_2
      25: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      28: aload_1
      29: aload_2
      30: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      33: aload_2
      34: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      37: aastore
      38: goto          17
      41: aload_1
      42: areturn

  private void checkIndex(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: invokevirtual #8                  // Method getDimension:()I
       9: if_icmplt     37
      12: new           #60                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: iload_1
      17: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: iconst_0
      21: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: aload_0
      25: invokevirtual #8                  // Method getDimension:()I
      28: iconst_1
      29: isub
      30: invokestatic  #39                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: invokespecial #61                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      36: athrow
      37: return

  protected void checkVectorDimensions(int) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getDimension:()I
       4: iload_1
       5: if_icmpeq     21
       8: new           #62                 // class org/apache/commons/math3/exception/DimensionMismatchException
      11: dup
      12: aload_0
      13: invokevirtual #8                  // Method getDimension:()I
      16: iload_1
      17: invokespecial #63                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      20: athrow
      21: return

  public org.apache.commons.math3.linear.FieldVector<T> add(org.apache.commons.math3.linear.FieldVector<T>) throws org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_1
       1: instanceof    #15                 // class org/apache/commons/math3/linear/SparseFieldVector
       4: ifeq          16
       7: aload_0
       8: aload_1
       9: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      12: invokevirtual #64                 // Method add:(Lorg/apache/commons/math3/linear/SparseFieldVector;)Lorg/apache/commons/math3/linear/FieldVector;
      15: areturn
      16: aload_1
      17: invokeinterface #28,  1           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getDimension:()I
      22: istore_2
      23: aload_0
      24: iload_2
      25: invokevirtual #13                 // Method checkVectorDimensions:(I)V
      28: new           #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      31: dup
      32: aload_0
      33: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      36: aload_0
      37: invokevirtual #8                  // Method getDimension:()I
      40: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/math3/Field;I)V
      43: astore_3
      44: iconst_0
      45: istore        4
      47: iload         4
      49: iload_2
      50: if_icmpge     87
      53: aload_3
      54: iload         4
      56: aload_1
      57: iload         4
      59: invokeinterface #29,  2           // InterfaceMethod org/apache/commons/math3/linear/FieldVector.getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      64: aload_0
      65: iload         4
      67: invokevirtual #42                 // Method getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      70: invokeinterface #23,  2           // InterfaceMethod org/apache/commons/math3/FieldElement.add:(Ljava/lang/Object;)Ljava/lang/Object;
      75: checkcast     #24                 // class org/apache/commons/math3/FieldElement
      78: invokevirtual #25                 // Method setEntry:(ILorg/apache/commons/math3/FieldElement;)V
      81: iinc          4, 1
      84: goto          47
      87: aload_3
      88: areturn

  private T[] buildArray(int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
       4: invokeinterface #65,  1           // InterfaceMethod org/apache/commons/math3/Field.getRuntimeClass:()Ljava/lang/Class;
       9: iload_1
      10: invokestatic  #66                 // Method java/lang/reflect/Array.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;
      13: checkcast     #67                 // class "[Lorg/apache/commons/math3/FieldElement;"
      16: checkcast     #67                 // class "[Lorg/apache/commons/math3/FieldElement;"
      19: areturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      24: invokevirtual #68                 // Method java/lang/Object.hashCode:()I
      27: iadd
      28: istore_2
      29: bipush        31
      31: iload_2
      32: imul
      33: aload_0
      34: getfield      #4                  // Field virtualSize:I
      37: iadd
      38: istore_2
      39: aload_0
      40: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      43: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      46: astore_3
      47: aload_3
      48: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      51: ifeq          78
      54: aload_3
      55: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      58: aload_3
      59: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
      62: invokevirtual #68                 // Method java/lang/Object.hashCode:()I
      65: istore        4
      67: bipush        31
      69: iload_2
      70: imul
      71: iload         4
      73: iadd
      74: istore_2
      75: goto          47
      78: iload_2
      79: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #15                 // class org/apache/commons/math3/linear/SparseFieldVector
      20: astore_2
      21: aload_0
      22: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      25: ifnonnull     37
      28: aload_2
      29: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      32: ifnull        53
      35: iconst_0
      36: ireturn
      37: aload_0
      38: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      41: aload_2
      42: getfield      #3                  // Field field:Lorg/apache/commons/math3/Field;
      45: invokevirtual #69                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      48: ifne          53
      51: iconst_0
      52: ireturn
      53: aload_0
      54: getfield      #4                  // Field virtualSize:I
      57: aload_2
      58: getfield      #4                  // Field virtualSize:I
      61: if_icmpeq     66
      64: iconst_0
      65: ireturn
      66: aload_0
      67: getfield      #7                  // Field entries:Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
      70: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
      73: astore_3
      74: aload_3
      75: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
      78: ifeq          112
      81: aload_3
      82: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
      85: aload_2
      86: aload_3
      87: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
      90: invokevirtual #42                 // Method getEntry:(I)Lorg/apache/commons/math3/FieldElement;
      93: astore        4
      95: aload         4
      97: aload_3
      98: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
     101: invokevirtual #69                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     104: ifne          109
     107: iconst_0
     108: ireturn
     109: goto          74
     112: aload_2
     113: invokespecial #12                 // Method getEntries:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap;
     116: invokevirtual #16                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap.iterator:()Lorg/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator;
     119: astore_3
     120: aload_3
     121: invokevirtual #17                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.hasNext:()Z
     124: ifeq          158
     127: aload_3
     128: invokevirtual #18                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.advance:()V
     131: aload_3
     132: invokevirtual #20                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.value:()Lorg/apache/commons/math3/FieldElement;
     135: astore        4
     137: aload         4
     139: aload_0
     140: aload_3
     141: invokevirtual #19                 // Method org/apache/commons/math3/util/OpenIntToFieldHashMap$Iterator.key:()I
     144: invokevirtual #42                 // Method getEntry:(I)Lorg/apache/commons/math3/FieldElement;
     147: invokevirtual #69                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     150: ifne          155
     153: iconst_0
     154: ireturn
     155: goto          120
     158: iconst_1
     159: ireturn
}
