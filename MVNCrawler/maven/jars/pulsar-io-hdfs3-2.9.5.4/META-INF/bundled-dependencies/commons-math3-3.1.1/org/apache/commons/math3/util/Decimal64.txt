Compiled from "Decimal64.java"
public class org.apache.commons.math3.util.Decimal64 extends java.lang.Number implements org.apache.commons.math3.FieldElement<org.apache.commons.math3.util.Decimal64>, java.lang.Comparable<org.apache.commons.math3.util.Decimal64> {
  public static final org.apache.commons.math3.util.Decimal64 ZERO;

  public static final org.apache.commons.math3.util.Decimal64 ONE;

  public static final org.apache.commons.math3.util.Decimal64 NEGATIVE_INFINITY;

  public static final org.apache.commons.math3.util.Decimal64 POSITIVE_INFINITY;

  public static final org.apache.commons.math3.util.Decimal64 NAN;

  private static final long serialVersionUID;

  private final double value;

  public org.apache.commons.math3.util.Decimal64(double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Number."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field value:D
       9: return

  public org.apache.commons.math3.Field<org.apache.commons.math3.util.Decimal64> getField();
    Code:
       0: invokestatic  #3                  // Method org/apache/commons/math3/util/Decimal64Field.getInstance:()Lorg/apache/commons/math3/util/Decimal64Field;
       3: areturn

  public org.apache.commons.math3.util.Decimal64 add(org.apache.commons.math3.util.Decimal64);
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: aload_0
       5: getfield      #2                  // Field value:D
       8: aload_1
       9: getfield      #2                  // Field value:D
      12: dadd
      13: invokespecial #5                  // Method "<init>":(D)V
      16: areturn

  public org.apache.commons.math3.util.Decimal64 subtract(org.apache.commons.math3.util.Decimal64);
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: aload_0
       5: getfield      #2                  // Field value:D
       8: aload_1
       9: getfield      #2                  // Field value:D
      12: dsub
      13: invokespecial #5                  // Method "<init>":(D)V
      16: areturn

  public org.apache.commons.math3.util.Decimal64 negate();
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: aload_0
       5: getfield      #2                  // Field value:D
       8: dneg
       9: invokespecial #5                  // Method "<init>":(D)V
      12: areturn

  public org.apache.commons.math3.util.Decimal64 multiply(org.apache.commons.math3.util.Decimal64);
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: aload_0
       5: getfield      #2                  // Field value:D
       8: aload_1
       9: getfield      #2                  // Field value:D
      12: dmul
      13: invokespecial #5                  // Method "<init>":(D)V
      16: areturn

  public org.apache.commons.math3.util.Decimal64 multiply(int);
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: iload_1
       5: i2d
       6: aload_0
       7: getfield      #2                  // Field value:D
      10: dmul
      11: invokespecial #5                  // Method "<init>":(D)V
      14: areturn

  public org.apache.commons.math3.util.Decimal64 divide(org.apache.commons.math3.util.Decimal64);
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: aload_0
       5: getfield      #2                  // Field value:D
       8: aload_1
       9: getfield      #2                  // Field value:D
      12: ddiv
      13: invokespecial #5                  // Method "<init>":(D)V
      16: areturn

  public org.apache.commons.math3.util.Decimal64 reciprocal();
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: dconst_1
       5: aload_0
       6: getfield      #2                  // Field value:D
       9: ddiv
      10: invokespecial #5                  // Method "<init>":(D)V
      13: areturn

  public byte byteValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2i
       5: i2b
       6: ireturn

  public short shortValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2i
       5: i2s
       6: ireturn

  public int intValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2i
       5: ireturn

  public long longValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2l
       5: lreturn

  public float floatValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: d2f
       5: freturn

  public double doubleValue();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: dreturn

  public int compareTo(org.apache.commons.math3.util.Decimal64);
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: aload_1
       5: getfield      #2                  // Field value:D
       8: invokestatic  #6                  // Method java/lang/Double.compare:(DD)I
      11: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #4                  // class org/apache/commons/math3/util/Decimal64
       4: ifeq          36
       7: aload_1
       8: checkcast     #4                  // class org/apache/commons/math3/util/Decimal64
      11: astore_2
      12: aload_0
      13: getfield      #2                  // Field value:D
      16: invokestatic  #7                  // Method java/lang/Double.doubleToLongBits:(D)J
      19: aload_2
      20: getfield      #2                  // Field value:D
      23: invokestatic  #7                  // Method java/lang/Double.doubleToLongBits:(D)J
      26: lcmp
      27: ifne          34
      30: iconst_1
      31: goto          35
      34: iconst_0
      35: ireturn
      36: iconst_0
      37: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #7                  // Method java/lang/Double.doubleToLongBits:(D)J
       7: lstore_1
       8: lload_1
       9: lload_1
      10: bipush        32
      12: lushr
      13: lxor
      14: l2i
      15: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #8                  // Method java/lang/Double.toString:(D)Ljava/lang/String;
       7: areturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #9                  // Method java/lang/Double.isInfinite:(D)Z
       7: ireturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field value:D
       4: invokestatic  #10                 // Method java/lang/Double.isNaN:(D)Z
       7: ireturn

  public java.lang.Object reciprocal() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #11                 // Method reciprocal:()Lorg/apache/commons/math3/util/Decimal64;
       4: areturn

  public java.lang.Object divide(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException, org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #4                  // class org/apache/commons/math3/util/Decimal64
       5: invokevirtual #12                 // Method divide:(Lorg/apache/commons/math3/util/Decimal64;)Lorg/apache/commons/math3/util/Decimal64;
       8: areturn

  public java.lang.Object multiply(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #4                  // class org/apache/commons/math3/util/Decimal64
       5: invokevirtual #13                 // Method multiply:(Lorg/apache/commons/math3/util/Decimal64;)Lorg/apache/commons/math3/util/Decimal64;
       8: areturn

  public java.lang.Object multiply(int);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #14                 // Method multiply:(I)Lorg/apache/commons/math3/util/Decimal64;
       5: areturn

  public java.lang.Object negate();
    Code:
       0: aload_0
       1: invokevirtual #15                 // Method negate:()Lorg/apache/commons/math3/util/Decimal64;
       4: areturn

  public java.lang.Object subtract(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #4                  // class org/apache/commons/math3/util/Decimal64
       5: invokevirtual #16                 // Method subtract:(Lorg/apache/commons/math3/util/Decimal64;)Lorg/apache/commons/math3/util/Decimal64;
       8: areturn

  public java.lang.Object add(java.lang.Object) throws org.apache.commons.math3.exception.NullArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #4                  // class org/apache/commons/math3/util/Decimal64
       5: invokevirtual #17                 // Method add:(Lorg/apache/commons/math3/util/Decimal64;)Lorg/apache/commons/math3/util/Decimal64;
       8: areturn

  public int compareTo(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #4                  // class org/apache/commons/math3/util/Decimal64
       5: invokevirtual #18                 // Method compareTo:(Lorg/apache/commons/math3/util/Decimal64;)I
       8: ireturn

  static {};
    Code:
       0: new           #4                  // class org/apache/commons/math3/util/Decimal64
       3: dup
       4: dconst_0
       5: invokespecial #5                  // Method "<init>":(D)V
       8: putstatic     #19                 // Field ZERO:Lorg/apache/commons/math3/util/Decimal64;
      11: new           #4                  // class org/apache/commons/math3/util/Decimal64
      14: dup
      15: dconst_1
      16: invokespecial #5                  // Method "<init>":(D)V
      19: putstatic     #20                 // Field ONE:Lorg/apache/commons/math3/util/Decimal64;
      22: new           #4                  // class org/apache/commons/math3/util/Decimal64
      25: dup
      26: ldc2_w        #21                 // double -Infinityd
      29: invokespecial #5                  // Method "<init>":(D)V
      32: putstatic     #23                 // Field NEGATIVE_INFINITY:Lorg/apache/commons/math3/util/Decimal64;
      35: new           #4                  // class org/apache/commons/math3/util/Decimal64
      38: dup
      39: ldc2_w        #24                 // double Infinityd
      42: invokespecial #5                  // Method "<init>":(D)V
      45: putstatic     #26                 // Field POSITIVE_INFINITY:Lorg/apache/commons/math3/util/Decimal64;
      48: new           #4                  // class org/apache/commons/math3/util/Decimal64
      51: dup
      52: ldc2_w        #27                 // double NaNd
      55: invokespecial #5                  // Method "<init>":(D)V
      58: putstatic     #29                 // Field NAN:Lorg/apache/commons/math3/util/Decimal64;
      61: return
}
