Compiled from "Vector1D.java"
public class org.apache.commons.math3.geometry.euclidean.oned.Vector1D implements org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> {
  public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D ZERO;

  public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D ONE;

  public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D NaN;

  public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D POSITIVE_INFINITY;

  public static final org.apache.commons.math3.geometry.euclidean.oned.Vector1D NEGATIVE_INFINITY;

  private static final long serialVersionUID;

  private final double x;

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: putfield      #2                  // Field x:D
       9: return

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: putfield      #2                  // Field x:D
      14: return

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: dload         4
      13: aload         6
      15: getfield      #2                  // Field x:D
      18: dmul
      19: dadd
      20: putfield      #2                  // Field x:D
      23: return

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: dload         4
      13: aload         6
      15: getfield      #2                  // Field x:D
      18: dmul
      19: dadd
      20: dload         7
      22: aload         9
      24: getfield      #2                  // Field x:D
      27: dmul
      28: dadd
      29: putfield      #2                  // Field x:D
      32: return

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D(double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D, double, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: dload_1
       6: aload_3
       7: getfield      #2                  // Field x:D
      10: dmul
      11: dload         4
      13: aload         6
      15: getfield      #2                  // Field x:D
      18: dmul
      19: dadd
      20: dload         7
      22: aload         9
      24: getfield      #2                  // Field x:D
      27: dmul
      28: dadd
      29: dload         10
      31: aload         12
      33: getfield      #2                  // Field x:D
      36: dmul
      37: dadd
      38: putfield      #2                  // Field x:D
      41: return

  public double getX();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: dreturn

  public org.apache.commons.math3.geometry.Space getSpace();
    Code:
       0: invokestatic  #3                  // Method org/apache/commons/math3/geometry/euclidean/oned/Euclidean1D.getInstance:()Lorg/apache/commons/math3/geometry/euclidean/oned/Euclidean1D;
       3: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D getZero();
    Code:
       0: getstatic     #4                  // Field ZERO:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       3: areturn

  public double getNorm1();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: dreturn

  public double getNorm();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: dreturn

  public double getNormSq();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dmul
       9: dreturn

  public double getNormInf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       7: dreturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       8: dup
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: aload_2
      14: invokevirtual #7                  // Method getX:()D
      17: dadd
      18: invokespecial #8                  // Method "<init>":(D)V
      21: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D add(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_3
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore        4
       6: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       9: dup
      10: aload_0
      11: getfield      #2                  // Field x:D
      14: dload_1
      15: aload         4
      17: invokevirtual #7                  // Method getX:()D
      20: dmul
      21: dadd
      22: invokespecial #8                  // Method "<init>":(D)V
      25: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       8: dup
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: aload_2
      14: getfield      #2                  // Field x:D
      17: dsub
      18: invokespecial #8                  // Method "<init>":(D)V
      21: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D subtract(double, org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_3
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore        4
       6: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       9: dup
      10: aload_0
      11: getfield      #2                  // Field x:D
      14: dload_1
      15: aload         4
      17: invokevirtual #7                  // Method getX:()D
      20: dmul
      21: dsub
      22: invokespecial #8                  // Method "<init>":(D)V
      25: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D normalize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getNorm:()D
       4: dstore_1
       5: dload_1
       6: dconst_0
       7: dcmpl
       8: ifne          26
      11: new           #10                 // class org/apache/commons/math3/exception/MathArithmeticException
      14: dup
      15: getstatic     #11                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: iconst_0
      19: anewarray     #12                 // class java/lang/Object
      22: invokespecial #13                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      25: athrow
      26: aload_0
      27: dconst_1
      28: dload_1
      29: ddiv
      30: invokevirtual #14                 // Method scalarMultiply:(D)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      33: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D negate();
    Code:
       0: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       3: dup
       4: aload_0
       5: getfield      #2                  // Field x:D
       8: dneg
       9: invokespecial #8                  // Method "<init>":(D)V
      12: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D scalarMultiply(double);
    Code:
       0: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       3: dup
       4: dload_1
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: dmul
      10: invokespecial #8                  // Method "<init>":(D)V
      13: areturn

  public boolean isNaN();
    Code:
       0: aload_0
       1: getfield      #2                  // Field x:D
       4: invokestatic  #15                 // Method java/lang/Double.isNaN:(D)Z
       7: ireturn

  public boolean isInfinite();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method isNaN:()Z
       4: ifne          21
       7: aload_0
       8: getfield      #2                  // Field x:D
      11: invokestatic  #17                 // Method java/lang/Double.isInfinite:(D)Z
      14: ifeq          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public double distance1(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: dstore_3
      18: dload_3
      19: dreturn

  public double distance(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: dstore_3
      15: dload_3
      16: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      19: dreturn

  public double distanceInf(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: invokestatic  #5                  // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      17: dstore_3
      18: dload_3
      19: dreturn

  public double distanceSq(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: aload_2
       6: getfield      #2                  // Field x:D
       9: aload_0
      10: getfield      #2                  // Field x:D
      13: dsub
      14: dstore_3
      15: dload_3
      16: dload_3
      17: dmul
      18: dreturn

  public double dotProduct(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_1
       1: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       4: astore_2
       5: aload_0
       6: getfield      #2                  // Field x:D
       9: aload_2
      10: getfield      #2                  // Field x:D
      13: dmul
      14: dreturn

  public static double distance(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #18                 // Method distance:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distanceInf(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #19                 // Method distanceInf:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public static double distanceSq(org.apache.commons.math3.geometry.euclidean.oned.Vector1D, org.apache.commons.math3.geometry.euclidean.oned.Vector1D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #20                 // Method distanceSq:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: dreturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
      11: ifeq          49
      14: aload_1
      15: checkcast     #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
      18: astore_2
      19: aload_2
      20: invokevirtual #16                 // Method isNaN:()Z
      23: ifeq          31
      26: aload_0
      27: invokevirtual #16                 // Method isNaN:()Z
      30: ireturn
      31: aload_0
      32: getfield      #2                  // Field x:D
      35: aload_2
      36: getfield      #2                  // Field x:D
      39: dcmpl
      40: ifne          47
      43: iconst_1
      44: goto          48
      47: iconst_0
      48: ireturn
      49: iconst_0
      50: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method isNaN:()Z
       4: ifeq          11
       7: sipush        7785
      10: ireturn
      11: sipush        997
      14: aload_0
      15: getfield      #2                  // Field x:D
      18: invokestatic  #21                 // Method org/apache/commons/math3/util/MathUtils.hash:(D)I
      21: imul
      22: ireturn

  public java.lang.String toString();
    Code:
       0: invokestatic  #22                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.getInstance:()Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat;
       3: aload_0
       4: invokevirtual #23                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.format:(Lorg/apache/commons/math3/geometry/Vector;)Ljava/lang/String;
       7: areturn

  public java.lang.String toString(java.text.NumberFormat);
    Code:
       0: new           #24                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat
       3: dup
       4: aload_1
       5: invokespecial #25                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat."<init>":(Ljava/text/NumberFormat;)V
       8: aload_0
       9: invokevirtual #23                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1DFormat.format:(Lorg/apache/commons/math3/geometry/Vector;)Ljava/lang/String;
      12: areturn

  public org.apache.commons.math3.geometry.Vector scalarMultiply(double);
    Code:
       0: aload_0
       1: dload_1
       2: invokevirtual #14                 // Method scalarMultiply:(D)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector normalize() throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokevirtual #26                 // Method normalize:()Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       4: areturn

  public org.apache.commons.math3.geometry.Vector negate();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method negate:()Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       4: areturn

  public org.apache.commons.math3.geometry.Vector subtract(double, org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: dload_1
       2: aload_3
       3: invokevirtual #28                 // Method subtract:(DLorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       6: areturn

  public org.apache.commons.math3.geometry.Vector subtract(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #29                 // Method subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector add(double, org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: dload_1
       2: aload_3
       3: invokevirtual #30                 // Method add:(DLorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       6: areturn

  public org.apache.commons.math3.geometry.Vector add(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method add:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector getZero();
    Code:
       0: aload_0
       1: invokevirtual #32                 // Method getZero:()Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       4: areturn

  static {};
    Code:
       0: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       3: dup
       4: dconst_0
       5: invokespecial #8                  // Method "<init>":(D)V
       8: putstatic     #4                  // Field ZERO:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      11: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
      14: dup
      15: dconst_1
      16: invokespecial #8                  // Method "<init>":(D)V
      19: putstatic     #33                 // Field ONE:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      22: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
      25: dup
      26: ldc2_w        #34                 // double NaNd
      29: invokespecial #8                  // Method "<init>":(D)V
      32: putstatic     #36                 // Field NaN:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      35: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
      38: dup
      39: ldc2_w        #37                 // double Infinityd
      42: invokespecial #8                  // Method "<init>":(D)V
      45: putstatic     #39                 // Field POSITIVE_INFINITY:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      48: new           #6                  // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
      51: dup
      52: ldc2_w        #40                 // double -Infinityd
      55: invokespecial #8                  // Method "<init>":(D)V
      58: putstatic     #42                 // Field NEGATIVE_INFINITY:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      61: return
}
