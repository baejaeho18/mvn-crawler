Compiled from "WeibullDistribution.java"
public class org.apache.commons.math3.distribution.WeibullDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double shape;

  private final double scale;

  private final double solverAbsoluteAccuracy;

  private double numericalMean;

  private boolean numericalMeanIsCalculated;

  private double numericalVariance;

  private boolean numericalVarianceIsCalculated;

  public org.apache.commons.math3.distribution.WeibullDistribution(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #1                  // double 1.0E-9d
       6: invokespecial #3                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.WeibullDistribution(double, double, double);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.WeibullDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: aload_0
       6: ldc2_w        #8                  // double NaNd
       9: putfield      #10                 // Field numericalMean:D
      12: aload_0
      13: iconst_0
      14: putfield      #11                 // Field numericalMeanIsCalculated:Z
      17: aload_0
      18: ldc2_w        #8                  // double NaNd
      21: putfield      #12                 // Field numericalVariance:D
      24: aload_0
      25: iconst_0
      26: putfield      #13                 // Field numericalVarianceIsCalculated:Z
      29: dload_2
      30: dconst_0
      31: dcmpg
      32: ifgt          50
      35: new           #14                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      38: dup
      39: getstatic     #15                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SHAPE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      42: dload_2
      43: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      46: invokespecial #17                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      49: athrow
      50: dload         4
      52: dconst_0
      53: dcmpg
      54: ifgt          73
      57: new           #14                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      60: dup
      61: getstatic     #18                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SCALE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      64: dload         4
      66: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      69: invokespecial #17                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      72: athrow
      73: aload_0
      74: dload         4
      76: putfield      #19                 // Field scale:D
      79: aload_0
      80: dload_2
      81: putfield      #20                 // Field shape:D
      84: aload_0
      85: dload         6
      87: putfield      #21                 // Field solverAbsoluteAccuracy:D
      90: return

  public double getShape();
    Code:
       0: aload_0
       1: getfield      #20                 // Field shape:D
       4: dreturn

  public double getScale();
    Code:
       0: aload_0
       1: getfield      #19                 // Field scale:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifge          8
       6: dconst_0
       7: dreturn
       8: dload_1
       9: aload_0
      10: getfield      #19                 // Field scale:D
      13: ddiv
      14: dstore_3
      15: dload_3
      16: aload_0
      17: getfield      #20                 // Field shape:D
      20: dconst_1
      21: dsub
      22: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      25: dstore        5
      27: dload         5
      29: dload_3
      30: dmul
      31: dstore        7
      33: aload_0
      34: getfield      #20                 // Field shape:D
      37: aload_0
      38: getfield      #19                 // Field scale:D
      41: ddiv
      42: dload         5
      44: dmul
      45: dload         7
      47: dneg
      48: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      51: dmul
      52: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          11
       6: dconst_0
       7: dstore_3
       8: goto          31
      11: dconst_1
      12: dload_1
      13: aload_0
      14: getfield      #19                 // Field scale:D
      17: ddiv
      18: aload_0
      19: getfield      #20                 // Field shape:D
      22: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      25: dneg
      26: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      29: dsub
      30: dstore_3
      31: dload_3
      32: dreturn

  public double inverseCumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: iflt          12
       6: dload_1
       7: dconst_1
       8: dcmpl
       9: ifle          32
      12: new           #24                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: dload_1
      17: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      20: dconst_0
      21: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: dconst_1
      25: invokestatic  #16                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      28: invokespecial #25                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      31: athrow
      32: dload_1
      33: dconst_0
      34: dcmpl
      35: ifne          43
      38: dconst_0
      39: dstore_3
      40: goto          78
      43: dload_1
      44: dconst_1
      45: dcmpl
      46: ifne          56
      49: ldc2_w        #26                 // double Infinityd
      52: dstore_3
      53: goto          78
      56: aload_0
      57: getfield      #19                 // Field scale:D
      60: dconst_1
      61: dload_1
      62: dsub
      63: invokestatic  #28                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      66: dneg
      67: dconst_1
      68: aload_0
      69: getfield      #20                 // Field shape:D
      72: ddiv
      73: invokestatic  #22                 // Method org/apache/commons/math3/util/FastMath.pow:(DD)D
      76: dmul
      77: dstore_3
      78: dload_3
      79: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #21                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: getfield      #11                 // Field numericalMeanIsCalculated:Z
       4: ifne          20
       7: aload_0
       8: aload_0
       9: invokevirtual #29                 // Method calculateNumericalMean:()D
      12: putfield      #10                 // Field numericalMean:D
      15: aload_0
      16: iconst_1
      17: putfield      #11                 // Field numericalMeanIsCalculated:Z
      20: aload_0
      21: getfield      #10                 // Field numericalMean:D
      24: dreturn

  protected double calculateNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method getShape:()D
       4: dstore_1
       5: aload_0
       6: invokevirtual #31                 // Method getScale:()D
       9: dstore_3
      10: dload_3
      11: dconst_1
      12: dconst_1
      13: dload_1
      14: ddiv
      15: dadd
      16: invokestatic  #32                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      19: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      22: dmul
      23: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #13                 // Field numericalVarianceIsCalculated:Z
       4: ifne          20
       7: aload_0
       8: aload_0
       9: invokevirtual #33                 // Method calculateNumericalVariance:()D
      12: putfield      #12                 // Field numericalVariance:D
      15: aload_0
      16: iconst_1
      17: putfield      #13                 // Field numericalVarianceIsCalculated:Z
      20: aload_0
      21: getfield      #12                 // Field numericalVariance:D
      24: dreturn

  protected double calculateNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #30                 // Method getShape:()D
       4: dstore_1
       5: aload_0
       6: invokevirtual #31                 // Method getScale:()D
       9: dstore_3
      10: aload_0
      11: invokevirtual #34                 // Method getNumericalMean:()D
      14: dstore        5
      16: dload_3
      17: dload_3
      18: dmul
      19: dconst_1
      20: ldc2_w        #35                 // double 2.0d
      23: dload_1
      24: ddiv
      25: dadd
      26: invokestatic  #32                 // Method org/apache/commons/math3/special/Gamma.logGamma:(D)D
      29: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      32: dmul
      33: dload         5
      35: dload         5
      37: dmul
      38: dsub
      39: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #26                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
