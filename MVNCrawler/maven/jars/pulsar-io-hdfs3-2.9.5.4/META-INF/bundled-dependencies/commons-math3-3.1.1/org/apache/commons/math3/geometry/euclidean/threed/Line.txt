Compiled from "Line.java"
public class org.apache.commons.math3.geometry.euclidean.threed.Line implements org.apache.commons.math3.geometry.partitioning.Embedding<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D> {
  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D zero;

  public org.apache.commons.math3.geometry.euclidean.threed.Line(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #2                  // Method reset:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      10: return

  public org.apache.commons.math3.geometry.euclidean.threed.Line(org.apache.commons.math3.geometry.euclidean.threed.Line);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: putfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: aload_0
      13: aload_1
      14: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      17: putfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: return

  public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathIllegalArgumentException;
    Code:
       0: aload_2
       1: aload_1
       2: invokevirtual #5                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: astore_3
       6: aload_3
       7: invokevirtual #6                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getNormSq:()D
      10: dstore        4
      12: dload         4
      14: dconst_0
      15: dcmpl
      16: ifne          34
      19: new           #7                  // class org/apache/commons/math3/exception/MathIllegalArgumentException
      22: dup
      23: getstatic     #8                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.ZERO_NORM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      26: iconst_0
      27: anewarray     #9                  // class java/lang/Object
      30: invokespecial #10                 // Method org/apache/commons/math3/exception/MathIllegalArgumentException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      33: athrow
      34: aload_0
      35: new           #11                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      38: dup
      39: dconst_1
      40: dload         4
      42: invokestatic  #12                 // Method org/apache/commons/math3/util/FastMath.sqrt:(D)D
      45: ddiv
      46: aload_3
      47: invokespecial #13                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      50: putfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      53: aload_0
      54: new           #11                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      57: dup
      58: dconst_1
      59: aload_1
      60: aload_1
      61: aload_3
      62: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      65: dneg
      66: dload         4
      68: ddiv
      69: aload_3
      70: invokespecial #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      73: putfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      76: return

  public org.apache.commons.math3.geometry.euclidean.threed.Line revert();
    Code:
       0: new           #16                 // class org/apache/commons/math3/geometry/euclidean/threed/Line
       3: dup
       4: aload_0
       5: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: aload_0
       9: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: aload_0
      13: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      16: invokevirtual #5                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      19: invokespecial #17                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      22: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getDirection();
    Code:
       0: aload_0
       1: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin();
    Code:
       0: aload_0
       1: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public double getAbscissa(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: invokevirtual #5                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: aload_0
       9: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      15: dreturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D pointAt(double);
    Code:
       0: new           #11                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: dconst_1
       5: aload_0
       6: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: dload_1
      10: aload_0
      11: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      14: invokespecial #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      17: areturn

  public org.apache.commons.math3.geometry.euclidean.oned.Vector1D toSubSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: new           #18                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       3: dup
       4: aload_0
       5: aload_1
       6: checkcast     #11                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       9: invokevirtual #19                 // Method getAbscissa:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      12: invokespecial #20                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D."<init>":(D)V
      15: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D>);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #18                 // class org/apache/commons/math3/geometry/euclidean/oned/Vector1D
       5: invokevirtual #21                 // Method org/apache/commons/math3/geometry/euclidean/oned/Vector1D.getX:()D
       8: invokevirtual #22                 // Method pointAt:(D)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: areturn

  public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokestatic  #23                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.angle:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      11: dstore_2
      12: dload_2
      13: ldc2_w        #24                 // double 1.0E-10d
      16: dcmpg
      17: iflt          28
      20: dload_2
      21: ldc2_w        #26                 // double 3.141592653489793d
      24: dcmpl
      25: ifle          43
      28: aload_0
      29: aload_1
      30: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      33: invokevirtual #28                 // Method contains:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Z
      36: ifeq          43
      39: iconst_1
      40: goto          44
      43: iconst_0
      44: ireturn

  public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #29                 // Method distance:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
       5: ldc2_w        #24                 // double 1.0E-10d
       8: dcmpg
       9: ifge          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public double distance(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: invokevirtual #5                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: astore_2
       9: new           #11                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      12: dup
      13: dconst_1
      14: aload_2
      15: aload_2
      16: aload_0
      17: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      23: dneg
      24: aload_0
      25: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      28: invokespecial #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      31: astore_3
      32: aload_3
      33: invokevirtual #30                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getNorm:()D
      36: dreturn

  public double distance(org.apache.commons.math3.geometry.euclidean.threed.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokestatic  #31                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.crossProduct:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: astore_2
      12: aload_2
      13: invokevirtual #30                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getNorm:()D
      16: dstore_3
      17: dload_3
      18: getstatic     #32                 // Field org/apache/commons/math3/util/Precision.SAFE_MIN:D
      21: dcmpg
      22: ifge          34
      25: aload_0
      26: aload_1
      27: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      30: invokevirtual #29                 // Method distance:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      33: dreturn
      34: aload_1
      35: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      38: aload_0
      39: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      42: invokevirtual #5                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      45: aload_2
      46: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      49: dload_3
      50: ddiv
      51: dstore        5
      53: dload         5
      55: invokestatic  #33                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      58: dreturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D closestPoint(org.apache.commons.math3.geometry.euclidean.threed.Line);
    Code:
       0: aload_0
       1: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      11: dstore_2
      12: dconst_1
      13: dload_2
      14: dload_2
      15: dmul
      16: dsub
      17: dstore        4
      19: dload         4
      21: getstatic     #34                 // Field org/apache/commons/math3/util/Precision.EPSILON:D
      24: dcmpg
      25: ifge          33
      28: aload_0
      29: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      32: areturn
      33: aload_1
      34: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      37: aload_0
      38: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      41: invokevirtual #5                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      44: astore        6
      46: aload         6
      48: aload_0
      49: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      52: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      55: dstore        7
      57: aload         6
      59: aload_1
      60: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      63: invokevirtual #14                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      66: dstore        9
      68: new           #11                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      71: dup
      72: dconst_1
      73: aload_0
      74: getfield      #4                  // Field zero:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      77: dload         7
      79: dload         9
      81: dload_2
      82: dmul
      83: dsub
      84: dload         4
      86: ddiv
      87: aload_0
      88: getfield      #3                  // Field direction:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      91: invokespecial #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      94: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #35                 // Method closestPoint:(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: astore_2
       6: aload_1
       7: aload_2
       8: invokevirtual #28                 // Method contains:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Z
      11: ifeq          18
      14: aload_2
      15: goto          19
      18: aconst_null
      19: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.SubLine wholeLine();
    Code:
       0: new           #36                 // class org/apache/commons/math3/geometry/euclidean/threed/SubLine
       3: dup
       4: aload_0
       5: new           #37                 // class org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet
       8: dup
       9: invokespecial #38                 // Method org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet."<init>":()V
      12: invokespecial #39                 // Method org/apache/commons/math3/geometry/euclidean/threed/SubLine."<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Line;Lorg/apache/commons/math3/geometry/euclidean/oned/IntervalsSet;)V
      15: areturn

  public org.apache.commons.math3.geometry.Vector toSpace(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #40                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector toSubSpace(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #41                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
       5: areturn
}
