Compiled from "UniformRealDistribution.java"
public class org.apache.commons.math3.distribution.UniformRealDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double lower;

  private final double upper;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.UniformRealDistribution();
    Code:
       0: aload_0
       1: dconst_0
       2: dconst_1
       3: invokespecial #1                  // Method "<init>":(DD)V
       6: return

  public org.apache.commons.math3.distribution.UniformRealDistribution(double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #2                  // double 1.0E-9d
       6: invokespecial #4                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.UniformRealDistribution(double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: new           #5                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #6                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.UniformRealDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NumberIsTooLargeException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload_2
       6: dload         4
       8: dcmpl
       9: iflt          33
      12: new           #9                  // class org/apache/commons/math3/exception/NumberIsTooLargeException
      15: dup
      16: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: dload_2
      20: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      23: dload         4
      25: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      28: iconst_0
      29: invokespecial #12                 // Method org/apache/commons/math3/exception/NumberIsTooLargeException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;Ljava/lang/Number;Z)V
      32: athrow
      33: aload_0
      34: dload_2
      35: putfield      #13                 // Field lower:D
      38: aload_0
      39: dload         4
      41: putfield      #14                 // Field upper:D
      44: aload_0
      45: dload         6
      47: putfield      #15                 // Field solverAbsoluteAccuracy:D
      50: return

  public double density(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #13                 // Field lower:D
       5: dcmpg
       6: iflt          18
       9: dload_1
      10: aload_0
      11: getfield      #14                 // Field upper:D
      14: dcmpl
      15: ifle          20
      18: dconst_0
      19: dreturn
      20: dconst_1
      21: aload_0
      22: getfield      #14                 // Field upper:D
      25: aload_0
      26: getfield      #13                 // Field lower:D
      29: dsub
      30: ddiv
      31: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #13                 // Field lower:D
       5: dcmpg
       6: ifgt          11
       9: dconst_0
      10: dreturn
      11: dload_1
      12: aload_0
      13: getfield      #14                 // Field upper:D
      16: dcmpl
      17: iflt          22
      20: dconst_1
      21: dreturn
      22: dload_1
      23: aload_0
      24: getfield      #13                 // Field lower:D
      27: dsub
      28: aload_0
      29: getfield      #14                 // Field upper:D
      32: aload_0
      33: getfield      #13                 // Field lower:D
      36: dsub
      37: ddiv
      38: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #15                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: ldc2_w        #16                 // double 0.5d
       3: aload_0
       4: getfield      #13                 // Field lower:D
       7: aload_0
       8: getfield      #14                 // Field upper:D
      11: dadd
      12: dmul
      13: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #14                 // Field upper:D
       4: aload_0
       5: getfield      #13                 // Field lower:D
       8: dsub
       9: dstore_1
      10: dload_1
      11: dload_1
      12: dmul
      13: ldc2_w        #18                 // double 12.0d
      16: ddiv
      17: dreturn

  public double getSupportLowerBound();
    Code:
       0: aload_0
       1: getfield      #13                 // Field lower:D
       4: dreturn

  public double getSupportUpperBound();
    Code:
       0: aload_0
       1: getfield      #14                 // Field upper:D
       4: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn

  public double sample();
    Code:
       0: aload_0
       1: getfield      #20                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
       4: invokeinterface #21,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextDouble:()D
       9: dstore_1
      10: dload_1
      11: aload_0
      12: getfield      #14                 // Field upper:D
      15: dmul
      16: dconst_1
      17: dload_1
      18: dsub
      19: aload_0
      20: getfield      #13                 // Field lower:D
      23: dmul
      24: dadd
      25: dreturn
}
