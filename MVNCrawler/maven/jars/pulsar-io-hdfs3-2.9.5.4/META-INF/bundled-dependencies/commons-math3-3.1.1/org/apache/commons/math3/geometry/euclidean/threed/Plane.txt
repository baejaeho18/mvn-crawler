Compiled from "Plane.java"
public class org.apache.commons.math3.geometry.euclidean.threed.Plane implements org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>, org.apache.commons.math3.geometry.partitioning.Embedding<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D, org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> {
  private double originOffset;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D origin;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D u;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D v;

  private org.apache.commons.math3.geometry.euclidean.threed.Vector3D w;

  public org.apache.commons.math3.geometry.euclidean.threed.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: invokespecial #2                  // Method setNormal:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
       9: aload_0
      10: dconst_0
      11: putfield      #3                  // Field originOffset:D
      14: aload_0
      15: invokespecial #4                  // Method setFrame:()V
      18: return

  public org.apache.commons.math3.geometry.euclidean.threed.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_2
       6: invokespecial #2                  // Method setNormal:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
       9: aload_0
      10: aload_1
      11: aload_0
      12: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      15: invokevirtual #6                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      18: dneg
      19: putfield      #3                  // Field originOffset:D
      22: aload_0
      23: invokespecial #4                  // Method setFrame:()V
      26: return

  public org.apache.commons.math3.geometry.euclidean.threed.Plane(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_1
       4: invokevirtual #7                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       7: aload_3
       8: aload_1
       9: invokevirtual #7                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: invokevirtual #8                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.crossProduct:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      15: invokespecial #9                  // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      18: return

  public org.apache.commons.math3.geometry.euclidean.threed.Plane(org.apache.commons.math3.geometry.euclidean.threed.Plane);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: getfield      #3                  // Field originOffset:D
       9: putfield      #3                  // Field originOffset:D
      12: aload_0
      13: aload_1
      14: getfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      17: putfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: aload_0
      21: aload_1
      22: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      25: putfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      28: aload_0
      29: aload_1
      30: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      33: putfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      36: aload_0
      37: aload_1
      38: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      41: putfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      44: return

  public org.apache.commons.math3.geometry.euclidean.threed.Plane copySelf();
    Code:
       0: new           #13                 // class org/apache/commons/math3/geometry/euclidean/threed/Plane
       3: dup
       4: aload_0
       5: invokespecial #14                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Plane;)V
       8: areturn

  public void reset(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #2                  // Method setNormal:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
       5: aload_0
       6: aload_1
       7: aload_0
       8: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: invokevirtual #6                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      14: dneg
      15: putfield      #3                  // Field originOffset:D
      18: aload_0
      19: invokespecial #4                  // Method setFrame:()V
      22: return

  public void reset(org.apache.commons.math3.geometry.euclidean.threed.Plane);
    Code:
       0: aload_0
       1: aload_1
       2: getfield      #3                  // Field originOffset:D
       5: putfield      #3                  // Field originOffset:D
       8: aload_0
       9: aload_1
      10: getfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: putfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      16: aload_0
      17: aload_1
      18: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      21: putfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      24: aload_0
      25: aload_1
      26: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      29: putfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      32: aload_0
      33: aload_1
      34: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      37: putfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      40: return

  private void setNormal(org.apache.commons.math3.geometry.euclidean.threed.Vector3D) throws org.apache.commons.math3.exception.MathArithmeticException;
    Code:
       0: aload_1
       1: invokevirtual #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getNorm:()D
       4: dstore_2
       5: dload_2
       6: ldc2_w        #16                 // double 1.0E-10d
       9: dcmpg
      10: ifge          28
      13: new           #18                 // class org/apache/commons/math3/exception/MathArithmeticException
      16: dup
      17: getstatic     #19                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.ZERO_NORM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      20: iconst_0
      21: anewarray     #20                 // class java/lang/Object
      24: invokespecial #21                 // Method org/apache/commons/math3/exception/MathArithmeticException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;[Ljava/lang/Object;)V
      27: athrow
      28: aload_0
      29: new           #22                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      32: dup
      33: dconst_1
      34: dload_2
      35: ddiv
      36: aload_1
      37: invokespecial #23                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      40: putfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      43: return

  private void setFrame();
    Code:
       0: aload_0
       1: new           #22                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       4: dup
       5: aload_0
       6: getfield      #3                  // Field originOffset:D
       9: dneg
      10: aload_0
      11: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      14: invokespecial #23                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      17: putfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: aload_0
      21: aload_0
      22: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      25: invokevirtual #24                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.orthogonal:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      28: putfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      31: aload_0
      32: aload_0
      33: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      36: aload_0
      37: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      40: invokestatic  #25                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.crossProduct:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      43: putfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      46: return

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getOrigin();
    Code:
       0: aload_0
       1: getfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getNormal();
    Code:
       0: aload_0
       1: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getU();
    Code:
       0: aload_0
       1: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getV();
    Code:
       0: aload_0
       1: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: areturn

  public void revertSelf();
    Code:
       0: aload_0
       1: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: astore_1
       5: aload_0
       6: aload_0
       7: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      10: putfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      13: aload_0
      14: aload_1
      15: putfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      18: aload_0
      19: aload_0
      20: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      23: invokevirtual #26                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.negate:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      26: putfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      29: aload_0
      30: aload_0
      31: getfield      #3                  // Field originOffset:D
      34: dneg
      35: putfield      #3                  // Field originOffset:D
      38: return

  public org.apache.commons.math3.geometry.euclidean.twod.Vector2D toSubSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: new           #27                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       3: dup
       4: aload_1
       5: aload_0
       6: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: invokeinterface #28,  2           // InterfaceMethod org/apache/commons/math3/geometry/Vector.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      14: aload_1
      15: aload_0
      16: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      19: invokeinterface #28,  2           // InterfaceMethod org/apache/commons/math3/geometry/Vector.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      24: invokespecial #29                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D."<init>":(DD)V
      27: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D toSpace(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>);
    Code:
       0: aload_1
       1: checkcast     #27                 // class org/apache/commons/math3/geometry/euclidean/twod/Vector2D
       4: astore_2
       5: new           #22                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       8: dup
       9: aload_2
      10: invokevirtual #30                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
      13: aload_0
      14: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      17: aload_2
      18: invokevirtual #31                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      21: aload_0
      22: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      25: aload_0
      26: getfield      #3                  // Field originOffset:D
      29: dneg
      30: aload_0
      31: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      34: invokespecial #32                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      37: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D getPointAt(org.apache.commons.math3.geometry.euclidean.twod.Vector2D, double);
    Code:
       0: new           #22                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
       3: dup
       4: aload_1
       5: invokevirtual #30                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getX:()D
       8: aload_0
       9: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: aload_1
      13: invokevirtual #31                 // Method org/apache/commons/math3/geometry/euclidean/twod/Vector2D.getY:()D
      16: aload_0
      17: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      20: dload_2
      21: aload_0
      22: getfield      #3                  // Field originOffset:D
      25: dsub
      26: aload_0
      27: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      30: invokespecial #32                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      33: areturn

  public boolean isSimilarTo(org.apache.commons.math3.geometry.euclidean.threed.Plane);
    Code:
       0: aload_0
       1: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokestatic  #33                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.angle:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)D
      11: dstore_2
      12: dload_2
      13: ldc2_w        #16                 // double 1.0E-10d
      16: dcmpg
      17: ifge          39
      20: aload_0
      21: getfield      #3                  // Field originOffset:D
      24: aload_1
      25: getfield      #3                  // Field originOffset:D
      28: dsub
      29: invokestatic  #34                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      32: ldc2_w        #16                 // double 1.0E-10d
      35: dcmpg
      36: iflt          66
      39: dload_2
      40: ldc2_w        #35                 // double 3.141592653489793d
      43: dcmpl
      44: ifle          70
      47: aload_0
      48: getfield      #3                  // Field originOffset:D
      51: aload_1
      52: getfield      #3                  // Field originOffset:D
      55: dadd
      56: invokestatic  #34                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      59: ldc2_w        #16                 // double 1.0E-10d
      62: dcmpg
      63: ifge          70
      66: iconst_1
      67: goto          71
      70: iconst_0
      71: ireturn

  public org.apache.commons.math3.geometry.euclidean.threed.Plane rotate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D, org.apache.commons.math3.geometry.euclidean.threed.Rotation);
    Code:
       0: aload_0
       1: getfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: invokevirtual #7                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.subtract:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: astore_3
       9: new           #13                 // class org/apache/commons/math3/geometry/euclidean/threed/Plane
      12: dup
      13: aload_1
      14: aload_2
      15: aload_3
      16: invokevirtual #37                 // Method org/apache/commons/math3/geometry/euclidean/threed/Rotation.applyTo:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      19: invokevirtual #38                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.add:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      22: aload_2
      23: aload_0
      24: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      27: invokevirtual #37                 // Method org/apache/commons/math3/geometry/euclidean/threed/Rotation.applyTo:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      30: invokespecial #9                  // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      33: astore        4
      35: aload         4
      37: aload_2
      38: aload_0
      39: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      42: invokevirtual #37                 // Method org/apache/commons/math3/geometry/euclidean/threed/Rotation.applyTo:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      45: putfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      48: aload         4
      50: aload_2
      51: aload_0
      52: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      55: invokevirtual #37                 // Method org/apache/commons/math3/geometry/euclidean/threed/Rotation.applyTo:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      58: putfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      61: aload         4
      63: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Plane translate(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: new           #13                 // class org/apache/commons/math3/geometry/euclidean/threed/Plane
       3: dup
       4: aload_0
       5: getfield      #10                 // Field origin:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: aload_1
       9: invokevirtual #38                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.add:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: aload_0
      13: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      16: invokespecial #9                  // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      19: astore_2
      20: aload_2
      21: aload_0
      22: getfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      25: putfield      #11                 // Field u:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      28: aload_2
      29: aload_0
      30: getfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      33: putfield      #12                 // Field v:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      36: aload_2
      37: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Line);
    Code:
       0: aload_1
       1: invokevirtual #39                 // Method org/apache/commons/math3/geometry/euclidean/threed/Line.getDirection:()Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: astore_2
       5: aload_0
       6: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       9: aload_2
      10: invokevirtual #6                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      13: dstore_3
      14: dload_3
      15: invokestatic  #34                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
      18: ldc2_w        #16                 // double 1.0E-10d
      21: dcmpg
      22: ifge          27
      25: aconst_null
      26: areturn
      27: aload_1
      28: getstatic     #40                 // Field org/apache/commons/math3/geometry/euclidean/oned/Vector1D.ZERO:Lorg/apache/commons/math3/geometry/euclidean/oned/Vector1D;
      31: invokevirtual #41                 // Method org/apache/commons/math3/geometry/euclidean/threed/Line.toSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      34: astore        5
      36: aload_0
      37: getfield      #3                  // Field originOffset:D
      40: aload_0
      41: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      44: aload         5
      46: invokevirtual #6                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      49: dadd
      50: dneg
      51: dload_3
      52: ddiv
      53: dstore        6
      55: new           #22                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
      58: dup
      59: dconst_1
      60: aload         5
      62: dload         6
      64: aload_2
      65: invokespecial #42                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;DLorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      68: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.Line intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane);
    Code:
       0: aload_0
       1: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: aload_1
       5: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       8: invokestatic  #25                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.crossProduct:(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: astore_2
      12: aload_2
      13: invokevirtual #15                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getNorm:()D
      16: ldc2_w        #16                 // double 1.0E-10d
      19: dcmpg
      20: ifge          25
      23: aconst_null
      24: areturn
      25: aload_0
      26: aload_1
      27: new           #13                 // class org/apache/commons/math3/geometry/euclidean/threed/Plane
      30: dup
      31: aload_2
      32: invokespecial #43                 // Method "<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      35: invokestatic  #44                 // Method intersection:(Lorg/apache/commons/math3/geometry/euclidean/threed/Plane;Lorg/apache/commons/math3/geometry/euclidean/threed/Plane;Lorg/apache/commons/math3/geometry/euclidean/threed/Plane;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      38: astore_3
      39: new           #45                 // class org/apache/commons/math3/geometry/euclidean/threed/Line
      42: dup
      43: aload_3
      44: aload_3
      45: aload_2
      46: invokevirtual #38                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.add:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      49: invokespecial #46                 // Method org/apache/commons/math3/geometry/euclidean/threed/Line."<init>":(Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;)V
      52: areturn

  public static org.apache.commons.math3.geometry.euclidean.threed.Vector3D intersection(org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane, org.apache.commons.math3.geometry.euclidean.threed.Plane);
    Code:
       0: aload_0
       1: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       4: invokevirtual #47                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getX:()D
       7: dstore_3
       8: aload_0
       9: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      12: invokevirtual #48                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getY:()D
      15: dstore        5
      17: aload_0
      18: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      21: invokevirtual #49                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getZ:()D
      24: dstore        7
      26: aload_0
      27: getfield      #3                  // Field originOffset:D
      30: dstore        9
      32: aload_1
      33: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      36: invokevirtual #47                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getX:()D
      39: dstore        11
      41: aload_1
      42: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      45: invokevirtual #48                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getY:()D
      48: dstore        13
      50: aload_1
      51: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      54: invokevirtual #49                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getZ:()D
      57: dstore        15
      59: aload_1
      60: getfield      #3                  // Field originOffset:D
      63: dstore        17
      65: aload_2
      66: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      69: invokevirtual #47                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getX:()D
      72: dstore        19
      74: aload_2
      75: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      78: invokevirtual #48                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getY:()D
      81: dstore        21
      83: aload_2
      84: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      87: invokevirtual #49                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.getZ:()D
      90: dstore        23
      92: aload_2
      93: getfield      #3                  // Field originOffset:D
      96: dstore        25
      98: dload         13
     100: dload         23
     102: dmul
     103: dload         21
     105: dload         15
     107: dmul
     108: dsub
     109: dstore        27
     111: dload         15
     113: dload         19
     115: dmul
     116: dload         23
     118: dload         11
     120: dmul
     121: dsub
     122: dstore        29
     124: dload         11
     126: dload         21
     128: dmul
     129: dload         19
     131: dload         13
     133: dmul
     134: dsub
     135: dstore        31
     137: dload_3
     138: dload         27
     140: dmul
     141: dload         5
     143: dload         29
     145: dmul
     146: dadd
     147: dload         7
     149: dload         31
     151: dmul
     152: dadd
     153: dstore        33
     155: dload         33
     157: invokestatic  #34                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
     160: ldc2_w        #16                 // double 1.0E-10d
     163: dcmpg
     164: ifge          169
     167: aconst_null
     168: areturn
     169: dconst_1
     170: dload         33
     172: ddiv
     173: dstore        35
     175: new           #22                 // class org/apache/commons/math3/geometry/euclidean/threed/Vector3D
     178: dup
     179: dload         27
     181: dneg
     182: dload         9
     184: dmul
     185: dload         7
     187: dload         21
     189: dmul
     190: dload         23
     192: dload         5
     194: dmul
     195: dsub
     196: dload         17
     198: dmul
     199: dsub
     200: dload         15
     202: dload         5
     204: dmul
     205: dload         7
     207: dload         13
     209: dmul
     210: dsub
     211: dload         25
     213: dmul
     214: dsub
     215: dload         35
     217: dmul
     218: dload         29
     220: dneg
     221: dload         9
     223: dmul
     224: dload         23
     226: dload_3
     227: dmul
     228: dload         7
     230: dload         19
     232: dmul
     233: dsub
     234: dload         17
     236: dmul
     237: dsub
     238: dload         7
     240: dload         11
     242: dmul
     243: dload         15
     245: dload_3
     246: dmul
     247: dsub
     248: dload         25
     250: dmul
     251: dsub
     252: dload         35
     254: dmul
     255: dload         31
     257: dneg
     258: dload         9
     260: dmul
     261: dload         5
     263: dload         19
     265: dmul
     266: dload         21
     268: dload_3
     269: dmul
     270: dsub
     271: dload         17
     273: dmul
     274: dsub
     275: dload         13
     277: dload_3
     278: dmul
     279: dload         5
     281: dload         11
     283: dmul
     284: dsub
     285: dload         25
     287: dmul
     288: dsub
     289: dload         35
     291: dmul
     292: invokespecial #50                 // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D."<init>":(DDD)V
     295: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.SubPlane wholeHyperplane();
    Code:
       0: new           #51                 // class org/apache/commons/math3/geometry/euclidean/threed/SubPlane
       3: dup
       4: aload_0
       5: new           #52                 // class org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet
       8: dup
       9: invokespecial #53                 // Method org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet."<init>":()V
      12: invokespecial #54                 // Method org/apache/commons/math3/geometry/euclidean/threed/SubPlane."<init>":(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;Lorg/apache/commons/math3/geometry/partitioning/Region;)V
      15: areturn

  public org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet wholeSpace();
    Code:
       0: new           #55                 // class org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet
       3: dup
       4: invokespecial #56                 // Method org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet."<init>":()V
       7: areturn

  public boolean contains(org.apache.commons.math3.geometry.euclidean.threed.Vector3D);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #57                 // Method getOffset:(Lorg/apache/commons/math3/geometry/Vector;)D
       5: invokestatic  #34                 // Method org/apache/commons/math3/util/FastMath.abs:(D)D
       8: ldc2_w        #16                 // double 1.0E-10d
      11: dcmpg
      12: ifge          19
      15: iconst_1
      16: goto          20
      19: iconst_0
      20: ireturn

  public double getOffset(org.apache.commons.math3.geometry.euclidean.threed.Plane);
    Code:
       0: aload_0
       1: getfield      #3                  // Field originOffset:D
       4: aload_0
       5: aload_1
       6: invokevirtual #58                 // Method sameOrientationAs:(Lorg/apache/commons/math3/geometry/partitioning/Hyperplane;)Z
       9: ifeq          20
      12: aload_1
      13: getfield      #3                  // Field originOffset:D
      16: dneg
      17: goto          24
      20: aload_1
      21: getfield      #3                  // Field originOffset:D
      24: dadd
      25: dreturn

  public double getOffset(org.apache.commons.math3.geometry.Vector<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: invokeinterface #28,  2           // InterfaceMethod org/apache/commons/math3/geometry/Vector.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      10: aload_0
      11: getfield      #3                  // Field originOffset:D
      14: dadd
      15: dreturn

  public boolean sameOrientationAs(org.apache.commons.math3.geometry.partitioning.Hyperplane<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>);
    Code:
       0: aload_1
       1: checkcast     #13                 // class org/apache/commons/math3/geometry/euclidean/threed/Plane
       4: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       7: aload_0
       8: getfield      #5                  // Field w:Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
      11: invokevirtual #6                  // Method org/apache/commons/math3/geometry/euclidean/threed/Vector3D.dotProduct:(Lorg/apache/commons/math3/geometry/Vector;)D
      14: dconst_0
      15: dcmpl
      16: ifle          23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  public org.apache.commons.math3.geometry.partitioning.Region wholeSpace();
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method wholeSpace:()Lorg/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.SubHyperplane wholeHyperplane();
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method wholeHyperplane:()Lorg/apache/commons/math3/geometry/euclidean/threed/SubPlane;
       4: areturn

  public org.apache.commons.math3.geometry.partitioning.Hyperplane copySelf();
    Code:
       0: aload_0
       1: invokevirtual #61                 // Method copySelf:()Lorg/apache/commons/math3/geometry/euclidean/threed/Plane;
       4: areturn

  public org.apache.commons.math3.geometry.Vector toSpace(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #62                 // Method toSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/threed/Vector3D;
       5: areturn

  public org.apache.commons.math3.geometry.Vector toSubSpace(org.apache.commons.math3.geometry.Vector);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #63                 // Method toSubSpace:(Lorg/apache/commons/math3/geometry/Vector;)Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;
       5: areturn
}
