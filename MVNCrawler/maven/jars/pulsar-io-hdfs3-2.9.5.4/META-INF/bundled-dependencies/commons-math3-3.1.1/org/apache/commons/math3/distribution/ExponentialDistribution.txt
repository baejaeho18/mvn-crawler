Compiled from "ExponentialDistribution.java"
public class org.apache.commons.math3.distribution.ExponentialDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private static final double[] EXPONENTIAL_SA_QI;

  private final double mean;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.ExponentialDistribution(double);
    Code:
       0: aload_0
       1: dload_1
       2: ldc2_w        #1                  // double 1.0E-9d
       5: invokespecial #3                  // Method "<init>":(DD)V
       8: return

  public org.apache.commons.math3.distribution.ExponentialDistribution(double, double);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DD)V
      13: return

  public org.apache.commons.math3.distribution.ExponentialDistribution(org.apache.commons.math3.random.RandomGenerator, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload_2
       6: dconst_0
       7: dcmpg
       8: ifgt          26
      11: new           #8                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      14: dup
      15: getstatic     #9                  // Field org/apache/commons/math3/exception/util/LocalizedFormats.MEAN:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      18: dload_2
      19: invokestatic  #10                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      22: invokespecial #11                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      25: athrow
      26: aload_0
      27: dload_2
      28: putfield      #12                 // Field mean:D
      31: aload_0
      32: dload         4
      34: putfield      #13                 // Field solverAbsoluteAccuracy:D
      37: return

  public double getMean();
    Code:
       0: aload_0
       1: getfield      #12                 // Field mean:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifge          8
       6: dconst_0
       7: dreturn
       8: dload_1
       9: dneg
      10: aload_0
      11: getfield      #12                 // Field mean:D
      14: ddiv
      15: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      18: aload_0
      19: getfield      #12                 // Field mean:D
      22: ddiv
      23: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          11
       6: dconst_0
       7: dstore_3
       8: goto          24
      11: dconst_1
      12: dload_1
      13: dneg
      14: aload_0
      15: getfield      #12                 // Field mean:D
      18: ddiv
      19: invokestatic  #14                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      22: dsub
      23: dstore_3
      24: dload_3
      25: dreturn

  public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: iflt          12
       6: dload_1
       7: dconst_1
       8: dcmpl
       9: ifle          32
      12: new           #15                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: dload_1
      17: invokestatic  #10                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      20: dconst_0
      21: invokestatic  #10                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: dconst_1
      25: invokestatic  #10                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      28: invokespecial #16                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      31: athrow
      32: dload_1
      33: dconst_1
      34: dcmpl
      35: ifne          45
      38: ldc2_w        #17                 // double Infinityd
      41: dstore_3
      42: goto          58
      45: aload_0
      46: getfield      #12                 // Field mean:D
      49: dneg
      50: dconst_1
      51: dload_1
      52: dsub
      53: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      56: dmul
      57: dstore_3
      58: dload_3
      59: dreturn

  public double sample();
    Code:
       0: dconst_0
       1: dstore_1
       2: aload_0
       3: getfield      #20                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
       6: invokeinterface #21,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextDouble:()D
      11: dstore_3
      12: dload_3
      13: ldc2_w        #22                 // double 0.5d
      16: dcmpg
      17: ifge          37
      20: dload_1
      21: getstatic     #24                 // Field EXPONENTIAL_SA_QI:[D
      24: iconst_0
      25: daload
      26: dadd
      27: dstore_1
      28: dload_3
      29: ldc2_w        #25                 // double 2.0d
      32: dmul
      33: dstore_3
      34: goto          12
      37: dload_3
      38: dload_3
      39: dconst_1
      40: dsub
      41: dadd
      42: dstore_3
      43: dload_3
      44: getstatic     #24                 // Field EXPONENTIAL_SA_QI:[D
      47: iconst_0
      48: daload
      49: dcmpg
      50: ifgt          62
      53: aload_0
      54: getfield      #12                 // Field mean:D
      57: dload_1
      58: dload_3
      59: dadd
      60: dmul
      61: dreturn
      62: iconst_0
      63: istore        5
      65: aload_0
      66: getfield      #20                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
      69: invokeinterface #21,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextDouble:()D
      74: dstore        6
      76: dload         6
      78: dstore        8
      80: iinc          5, 1
      83: aload_0
      84: getfield      #20                 // Field random:Lorg/apache/commons/math3/random/RandomGenerator;
      87: invokeinterface #21,  1           // InterfaceMethod org/apache/commons/math3/random/RandomGenerator.nextDouble:()D
      92: dstore        6
      94: dload         6
      96: dload         8
      98: dcmpg
      99: ifge          106
     102: dload         6
     104: dstore        8
     106: dload_3
     107: getstatic     #24                 // Field EXPONENTIAL_SA_QI:[D
     110: iload         5
     112: daload
     113: dcmpl
     114: ifgt          80
     117: aload_0
     118: getfield      #12                 // Field mean:D
     121: dload_1
     122: dload         8
     124: getstatic     #24                 // Field EXPONENTIAL_SA_QI:[D
     127: iconst_0
     128: daload
     129: dmul
     130: dadd
     131: dmul
     132: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #13                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMean:()D
       4: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getMean:()D
       4: dstore_1
       5: dload_1
       6: dload_1
       7: dmul
       8: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #17                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_1
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn

  static {};
    Code:
       0: ldc2_w        #25                 // double 2.0d
       3: invokestatic  #19                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
       6: dstore_0
       7: dconst_0
       8: dstore_2
       9: iconst_1
      10: istore        4
      12: new           #28                 // class org/apache/commons/math3/util/ResizableDoubleArray
      15: dup
      16: bipush        20
      18: invokespecial #29                 // Method org/apache/commons/math3/util/ResizableDoubleArray."<init>":(I)V
      21: astore        5
      23: dload_2
      24: dconst_1
      25: dcmpg
      26: ifge          57
      29: dload_2
      30: dload_0
      31: iload         4
      33: invokestatic  #30                 // Method org/apache/commons/math3/util/FastMath.pow:(DI)D
      36: iload         4
      38: invokestatic  #31                 // Method org/apache/commons/math3/util/ArithmeticUtils.factorial:(I)J
      41: l2d
      42: ddiv
      43: dadd
      44: dstore_2
      45: aload         5
      47: dload_2
      48: invokevirtual #32                 // Method org/apache/commons/math3/util/ResizableDoubleArray.addElement:(D)V
      51: iinc          4, 1
      54: goto          23
      57: aload         5
      59: invokevirtual #33                 // Method org/apache/commons/math3/util/ResizableDoubleArray.getElements:()[D
      62: putstatic     #24                 // Field EXPONENTIAL_SA_QI:[D
      65: return
}
