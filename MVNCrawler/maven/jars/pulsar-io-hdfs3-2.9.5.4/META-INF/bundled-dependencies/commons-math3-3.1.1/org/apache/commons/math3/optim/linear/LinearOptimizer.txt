Compiled from "LinearOptimizer.java"
public abstract class org.apache.commons.math3.optim.linear.LinearOptimizer extends org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer {
  private org.apache.commons.math3.optim.linear.LinearObjectiveFunction function;

  private java.util.Collection<org.apache.commons.math3.optim.linear.LinearConstraint> linearConstraints;

  private boolean nonNegative;

  protected org.apache.commons.math3.optim.linear.LinearOptimizer();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #1                  // Method org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer."<init>":(Lorg/apache/commons/math3/optim/ConvergenceChecker;)V
       5: return

  protected boolean isRestrictedToNonNegative();
    Code:
       0: aload_0
       1: getfield      #2                  // Field nonNegative:Z
       4: ireturn

  protected org.apache.commons.math3.optim.linear.LinearObjectiveFunction getFunction();
    Code:
       0: aload_0
       1: getfield      #3                  // Field function:Lorg/apache/commons/math3/optim/linear/LinearObjectiveFunction;
       4: areturn

  protected java.util.Collection<org.apache.commons.math3.optim.linear.LinearConstraint> getConstraints();
    Code:
       0: aload_0
       1: getfield      #4                  // Field linearConstraints:Ljava/util/Collection;
       4: invokestatic  #5                  // Method java/util/Collections.unmodifiableCollection:(Ljava/util/Collection;)Ljava/util/Collection;
       7: areturn

  public org.apache.commons.math3.optim.PointValuePair optimize(org.apache.commons.math3.optim.OptimizationData...) throws org.apache.commons.math3.exception.TooManyIterationsException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method parseOptimizationData:([Lorg/apache/commons/math3/optim/OptimizationData;)V
       5: aload_0
       6: aload_1
       7: invokespecial #7                  // Method org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer.optimize:([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;
      10: areturn

  private void parseOptimizationData(org.apache.commons.math3.optim.OptimizationData...);
    Code:
       0: aload_1
       1: astore_2
       2: aload_2
       3: arraylength
       4: istore_3
       5: iconst_0
       6: istore        4
       8: iload         4
      10: iload_3
      11: if_icmpge     92
      14: aload_2
      15: iload         4
      17: aaload
      18: astore        5
      20: aload         5
      22: instanceof    #8                  // class org/apache/commons/math3/optim/linear/LinearObjectiveFunction
      25: ifeq          40
      28: aload_0
      29: aload         5
      31: checkcast     #8                  // class org/apache/commons/math3/optim/linear/LinearObjectiveFunction
      34: putfield      #3                  // Field function:Lorg/apache/commons/math3/optim/linear/LinearObjectiveFunction;
      37: goto          86
      40: aload         5
      42: instanceof    #9                  // class org/apache/commons/math3/optim/linear/LinearConstraintSet
      45: ifeq          63
      48: aload_0
      49: aload         5
      51: checkcast     #9                  // class org/apache/commons/math3/optim/linear/LinearConstraintSet
      54: invokevirtual #10                 // Method org/apache/commons/math3/optim/linear/LinearConstraintSet.getConstraints:()Ljava/util/Collection;
      57: putfield      #4                  // Field linearConstraints:Ljava/util/Collection;
      60: goto          86
      63: aload         5
      65: instanceof    #11                 // class org/apache/commons/math3/optim/linear/NonNegativeConstraint
      68: ifeq          86
      71: aload_0
      72: aload         5
      74: checkcast     #11                 // class org/apache/commons/math3/optim/linear/NonNegativeConstraint
      77: invokevirtual #12                 // Method org/apache/commons/math3/optim/linear/NonNegativeConstraint.isRestrictedToNonNegative:()Z
      80: putfield      #2                  // Field nonNegative:Z
      83: goto          86
      86: iinc          4, 1
      89: goto          8
      92: return

  public java.lang.Object optimize(org.apache.commons.math3.optim.OptimizationData[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #13                 // Method optimize:([Lorg/apache/commons/math3/optim/OptimizationData;)Lorg/apache/commons/math3/optim/PointValuePair;
       5: areturn
}
