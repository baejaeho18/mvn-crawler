Compiled from "FDistribution.java"
public class org.apache.commons.math3.distribution.FDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double numeratorDegreesOfFreedom;

  private final double denominatorDegreesOfFreedom;

  private final double solverAbsoluteAccuracy;

  private double numericalVariance;

  private boolean numericalVarianceIsCalculated;

  public org.apache.commons.math3.distribution.FDistribution(double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #1                  // double 1.0E-9d
       6: invokespecial #3                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.FDistribution(double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #5                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #6                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.FDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: aload_0
       6: ldc2_w        #8                  // double NaNd
       9: putfield      #10                 // Field numericalVariance:D
      12: aload_0
      13: iconst_0
      14: putfield      #11                 // Field numericalVarianceIsCalculated:Z
      17: dload_2
      18: dconst_0
      19: dcmpg
      20: ifgt          38
      23: new           #12                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      26: dup
      27: getstatic     #13                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.DEGREES_OF_FREEDOM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      30: dload_2
      31: invokestatic  #14                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      34: invokespecial #15                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      37: athrow
      38: dload         4
      40: dconst_0
      41: dcmpg
      42: ifgt          61
      45: new           #12                 // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      48: dup
      49: getstatic     #13                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.DEGREES_OF_FREEDOM:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      52: dload         4
      54: invokestatic  #14                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      57: invokespecial #15                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      60: athrow
      61: aload_0
      62: dload_2
      63: putfield      #16                 // Field numeratorDegreesOfFreedom:D
      66: aload_0
      67: dload         4
      69: putfield      #17                 // Field denominatorDegreesOfFreedom:D
      72: aload_0
      73: dload         6
      75: putfield      #18                 // Field solverAbsoluteAccuracy:D
      78: return

  public double density(double);
    Code:
       0: aload_0
       1: getfield      #16                 // Field numeratorDegreesOfFreedom:D
       4: ldc2_w        #19                 // double 2.0d
       7: ddiv
       8: dstore_3
       9: aload_0
      10: getfield      #17                 // Field denominatorDegreesOfFreedom:D
      13: ldc2_w        #19                 // double 2.0d
      16: ddiv
      17: dstore        5
      19: dload_1
      20: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      23: dstore        7
      25: aload_0
      26: getfield      #16                 // Field numeratorDegreesOfFreedom:D
      29: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      32: dstore        9
      34: aload_0
      35: getfield      #17                 // Field denominatorDegreesOfFreedom:D
      38: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      41: dstore        11
      43: aload_0
      44: getfield      #16                 // Field numeratorDegreesOfFreedom:D
      47: dload_1
      48: dmul
      49: aload_0
      50: getfield      #17                 // Field denominatorDegreesOfFreedom:D
      53: dadd
      54: invokestatic  #21                 // Method org/apache/commons/math3/util/FastMath.log:(D)D
      57: dstore        13
      59: dload_3
      60: dload         9
      62: dmul
      63: dload_3
      64: dload         7
      66: dmul
      67: dadd
      68: dload         7
      70: dsub
      71: dload         5
      73: dload         11
      75: dmul
      76: dadd
      77: dload_3
      78: dload         13
      80: dmul
      81: dsub
      82: dload         5
      84: dload         13
      86: dmul
      87: dsub
      88: dload_3
      89: dload         5
      91: invokestatic  #22                 // Method org/apache/commons/math3/special/Beta.logBeta:(DD)D
      94: dsub
      95: invokestatic  #23                 // Method org/apache/commons/math3/util/FastMath.exp:(D)D
      98: dreturn

  public double cumulativeProbability(double);
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: ifgt          11
       6: dconst_0
       7: dstore_3
       8: goto          51
      11: aload_0
      12: getfield      #16                 // Field numeratorDegreesOfFreedom:D
      15: dstore        5
      17: aload_0
      18: getfield      #17                 // Field denominatorDegreesOfFreedom:D
      21: dstore        7
      23: dload         5
      25: dload_1
      26: dmul
      27: dload         7
      29: dload         5
      31: dload_1
      32: dmul
      33: dadd
      34: ddiv
      35: ldc2_w        #24                 // double 0.5d
      38: dload         5
      40: dmul
      41: ldc2_w        #24                 // double 0.5d
      44: dload         7
      46: dmul
      47: invokestatic  #26                 // Method org/apache/commons/math3/special/Beta.regularizedBeta:(DDD)D
      50: dstore_3
      51: dload_3
      52: dreturn

  public double getNumeratorDegreesOfFreedom();
    Code:
       0: aload_0
       1: getfield      #16                 // Field numeratorDegreesOfFreedom:D
       4: dreturn

  public double getDenominatorDegreesOfFreedom();
    Code:
       0: aload_0
       1: getfield      #17                 // Field denominatorDegreesOfFreedom:D
       4: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #18                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getDenominatorDegreesOfFreedom:()D
       4: dstore_1
       5: dload_1
       6: ldc2_w        #19                 // double 2.0d
       9: dcmpl
      10: ifle          21
      13: dload_1
      14: dload_1
      15: ldc2_w        #19                 // double 2.0d
      18: dsub
      19: ddiv
      20: dreturn
      21: ldc2_w        #8                  // double NaNd
      24: dreturn

  public double getNumericalVariance();
    Code:
       0: aload_0
       1: getfield      #11                 // Field numericalVarianceIsCalculated:Z
       4: ifne          20
       7: aload_0
       8: aload_0
       9: invokevirtual #28                 // Method calculateNumericalVariance:()D
      12: putfield      #10                 // Field numericalVariance:D
      15: aload_0
      16: iconst_1
      17: putfield      #11                 // Field numericalVarianceIsCalculated:Z
      20: aload_0
      21: getfield      #10                 // Field numericalVariance:D
      24: dreturn

  protected double calculateNumericalVariance();
    Code:
       0: aload_0
       1: invokevirtual #27                 // Method getDenominatorDegreesOfFreedom:()D
       4: dstore_1
       5: dload_1
       6: ldc2_w        #29                 // double 4.0d
       9: dcmpl
      10: ifle          55
      13: aload_0
      14: invokevirtual #31                 // Method getNumeratorDegreesOfFreedom:()D
      17: dstore_3
      18: dload_1
      19: ldc2_w        #19                 // double 2.0d
      22: dsub
      23: dstore        5
      25: ldc2_w        #19                 // double 2.0d
      28: dload_1
      29: dload_1
      30: dmul
      31: dmul
      32: dload_3
      33: dload_1
      34: dadd
      35: ldc2_w        #19                 // double 2.0d
      38: dsub
      39: dmul
      40: dload_3
      41: dload         5
      43: dload         5
      45: dmul
      46: dmul
      47: dload_1
      48: ldc2_w        #29                 // double 4.0d
      51: dsub
      52: dmul
      53: ddiv
      54: dreturn
      55: ldc2_w        #8                  // double NaNd
      58: dreturn

  public double getSupportLowerBound();
    Code:
       0: dconst_0
       1: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #32                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
