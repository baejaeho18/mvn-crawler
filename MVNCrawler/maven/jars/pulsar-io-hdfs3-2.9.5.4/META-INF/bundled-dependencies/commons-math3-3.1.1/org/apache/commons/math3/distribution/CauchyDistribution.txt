Compiled from "CauchyDistribution.java"
public class org.apache.commons.math3.distribution.CauchyDistribution extends org.apache.commons.math3.distribution.AbstractRealDistribution {
  public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY;

  private static final long serialVersionUID;

  private final double median;

  private final double scale;

  private final double solverAbsoluteAccuracy;

  public org.apache.commons.math3.distribution.CauchyDistribution();
    Code:
       0: aload_0
       1: dconst_0
       2: dconst_1
       3: invokespecial #1                  // Method "<init>":(DD)V
       6: return

  public org.apache.commons.math3.distribution.CauchyDistribution(double, double);
    Code:
       0: aload_0
       1: dload_1
       2: dload_3
       3: ldc2_w        #2                  // double 1.0E-9d
       6: invokespecial #4                  // Method "<init>":(DDD)V
       9: return

  public org.apache.commons.math3.distribution.CauchyDistribution(double, double, double);
    Code:
       0: aload_0
       1: new           #5                  // class org/apache/commons/math3/random/Well19937c
       4: dup
       5: invokespecial #6                  // Method org/apache/commons/math3/random/Well19937c."<init>":()V
       8: dload_1
       9: dload_3
      10: dload         5
      12: invokespecial #7                  // Method "<init>":(Lorg/apache/commons/math3/random/RandomGenerator;DDD)V
      15: return

  public org.apache.commons.math3.distribution.CauchyDistribution(org.apache.commons.math3.random.RandomGenerator, double, double, double);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method org/apache/commons/math3/distribution/AbstractRealDistribution."<init>":(Lorg/apache/commons/math3/random/RandomGenerator;)V
       5: dload         4
       7: dconst_0
       8: dcmpg
       9: ifgt          28
      12: new           #9                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
      15: dup
      16: getstatic     #10                 // Field org/apache/commons/math3/exception/util/LocalizedFormats.SCALE:Lorg/apache/commons/math3/exception/util/LocalizedFormats;
      19: dload         4
      21: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      24: invokespecial #12                 // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Lorg/apache/commons/math3/exception/util/Localizable;Ljava/lang/Number;)V
      27: athrow
      28: aload_0
      29: dload         4
      31: putfield      #13                 // Field scale:D
      34: aload_0
      35: dload_2
      36: putfield      #14                 // Field median:D
      39: aload_0
      40: dload         6
      42: putfield      #15                 // Field solverAbsoluteAccuracy:D
      45: return

  public double cumulativeProbability(double);
    Code:
       0: ldc2_w        #16                 // double 0.5d
       3: dload_1
       4: aload_0
       5: getfield      #14                 // Field median:D
       8: dsub
       9: aload_0
      10: getfield      #13                 // Field scale:D
      13: ddiv
      14: invokestatic  #18                 // Method org/apache/commons/math3/util/FastMath.atan:(D)D
      17: ldc2_w        #19                 // double 3.141592653589793d
      20: ddiv
      21: dadd
      22: dreturn

  public double getMedian();
    Code:
       0: aload_0
       1: getfield      #14                 // Field median:D
       4: dreturn

  public double getScale();
    Code:
       0: aload_0
       1: getfield      #13                 // Field scale:D
       4: dreturn

  public double density(double);
    Code:
       0: dload_1
       1: aload_0
       2: getfield      #14                 // Field median:D
       5: dsub
       6: dstore_3
       7: ldc2_w        #21                 // double 0.3183098861837907d
      10: aload_0
      11: getfield      #13                 // Field scale:D
      14: dload_3
      15: dload_3
      16: dmul
      17: aload_0
      18: getfield      #13                 // Field scale:D
      21: aload_0
      22: getfield      #13                 // Field scale:D
      25: dmul
      26: dadd
      27: ddiv
      28: dmul
      29: dreturn

  public double inverseCumulativeProbability(double) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: dload_1
       1: dconst_0
       2: dcmpg
       3: iflt          12
       6: dload_1
       7: dconst_1
       8: dcmpl
       9: ifle          32
      12: new           #23                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: dload_1
      17: invokestatic  #11                 // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;
      20: iconst_0
      21: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: iconst_1
      25: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      28: invokespecial #25                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      31: athrow
      32: dload_1
      33: dconst_0
      34: dcmpl
      35: ifne          45
      38: ldc2_w        #26                 // double -Infinityd
      41: dstore_3
      42: goto          81
      45: dload_1
      46: dconst_1
      47: dcmpl
      48: ifne          58
      51: ldc2_w        #28                 // double Infinityd
      54: dstore_3
      55: goto          81
      58: aload_0
      59: getfield      #14                 // Field median:D
      62: aload_0
      63: getfield      #13                 // Field scale:D
      66: ldc2_w        #19                 // double 3.141592653589793d
      69: dload_1
      70: ldc2_w        #16                 // double 0.5d
      73: dsub
      74: dmul
      75: invokestatic  #30                 // Method org/apache/commons/math3/util/FastMath.tan:(D)D
      78: dmul
      79: dadd
      80: dstore_3
      81: dload_3
      82: dreturn

  protected double getSolverAbsoluteAccuracy();
    Code:
       0: aload_0
       1: getfield      #15                 // Field solverAbsoluteAccuracy:D
       4: dreturn

  public double getNumericalMean();
    Code:
       0: ldc2_w        #31                 // double NaNd
       3: dreturn

  public double getNumericalVariance();
    Code:
       0: ldc2_w        #31                 // double NaNd
       3: dreturn

  public double getSupportLowerBound();
    Code:
       0: ldc2_w        #26                 // double -Infinityd
       3: dreturn

  public double getSupportUpperBound();
    Code:
       0: ldc2_w        #28                 // double Infinityd
       3: dreturn

  public boolean isSupportLowerBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportUpperBoundInclusive();
    Code:
       0: iconst_0
       1: ireturn

  public boolean isSupportConnected();
    Code:
       0: iconst_1
       1: ireturn
}
