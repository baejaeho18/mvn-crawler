Compiled from "MultidimensionalCounter.java"
public class org.apache.commons.math3.util.MultidimensionalCounter implements java.lang.Iterable<java.lang.Integer> {
  private final int dimension;

  private final int[] uniCounterOffset;

  private final int[] size;

  private final int totalSize;

  private final int last;

  public org.apache.commons.math3.util.MultidimensionalCounter(int...) throws org.apache.commons.math3.exception.NotStrictlyPositiveException;
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: arraylength
       7: putfield      #3                  // Field dimension:I
      10: aload_0
      11: aload_1
      12: invokestatic  #5                  // Method org/apache/commons/math3/util/MathArrays.copyOf:([I)[I
      15: putfield      #1                  // Field size:[I
      18: aload_0
      19: aload_0
      20: getfield      #3                  // Field dimension:I
      23: newarray       int
      25: putfield      #6                  // Field uniCounterOffset:[I
      28: aload_0
      29: aload_0
      30: getfield      #3                  // Field dimension:I
      33: iconst_1
      34: isub
      35: putfield      #2                  // Field last:I
      38: aload_1
      39: aload_0
      40: getfield      #2                  // Field last:I
      43: iaload
      44: istore_2
      45: iconst_0
      46: istore_3
      47: iload_3
      48: aload_0
      49: getfield      #2                  // Field last:I
      52: if_icmpge     107
      55: iconst_1
      56: istore        4
      58: iload_3
      59: iconst_1
      60: iadd
      61: istore        5
      63: iload         5
      65: aload_0
      66: getfield      #3                  // Field dimension:I
      69: if_icmpge     87
      72: iload         4
      74: aload_1
      75: iload         5
      77: iaload
      78: imul
      79: istore        4
      81: iinc          5, 1
      84: goto          63
      87: aload_0
      88: getfield      #6                  // Field uniCounterOffset:[I
      91: iload_3
      92: iload         4
      94: iastore
      95: iload_2
      96: aload_1
      97: iload_3
      98: iaload
      99: imul
     100: istore_2
     101: iinc          3, 1
     104: goto          47
     107: aload_0
     108: getfield      #6                  // Field uniCounterOffset:[I
     111: aload_0
     112: getfield      #2                  // Field last:I
     115: iconst_0
     116: iastore
     117: iload_2
     118: ifgt          133
     121: new           #7                  // class org/apache/commons/math3/exception/NotStrictlyPositiveException
     124: dup
     125: iload_2
     126: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     129: invokespecial #9                  // Method org/apache/commons/math3/exception/NotStrictlyPositiveException."<init>":(Ljava/lang/Number;)V
     132: athrow
     133: aload_0
     134: iload_2
     135: putfield      #10                 // Field totalSize:I
     138: return

  public org.apache.commons.math3.util.MultidimensionalCounter$Iterator iterator();
    Code:
       0: new           #11                 // class org/apache/commons/math3/util/MultidimensionalCounter$Iterator
       3: dup
       4: aload_0
       5: invokespecial #12                 // Method org/apache/commons/math3/util/MultidimensionalCounter$Iterator."<init>":(Lorg/apache/commons/math3/util/MultidimensionalCounter;)V
       8: areturn

  public int getDimension();
    Code:
       0: aload_0
       1: getfield      #3                  // Field dimension:I
       4: ireturn

  public int[] getCounts(int) throws org.apache.commons.math3.exception.OutOfRangeException;
    Code:
       0: iload_1
       1: iflt          12
       4: iload_1
       5: aload_0
       6: getfield      #10                 // Field totalSize:I
       9: if_icmplt     35
      12: new           #13                 // class org/apache/commons/math3/exception/OutOfRangeException
      15: dup
      16: iload_1
      17: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      20: iconst_0
      21: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      24: aload_0
      25: getfield      #10                 // Field totalSize:I
      28: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      31: invokespecial #14                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      34: athrow
      35: aload_0
      36: getfield      #3                  // Field dimension:I
      39: newarray       int
      41: astore_2
      42: iconst_0
      43: istore_3
      44: iconst_0
      45: istore        4
      47: iload         4
      49: aload_0
      50: getfield      #2                  // Field last:I
      53: if_icmpge     104
      56: iconst_0
      57: istore        5
      59: aload_0
      60: getfield      #6                  // Field uniCounterOffset:[I
      63: iload         4
      65: iaload
      66: istore        6
      68: iload_3
      69: iload_1
      70: if_icmpgt     84
      73: iload_3
      74: iload         6
      76: iadd
      77: istore_3
      78: iinc          5, 1
      81: goto          68
      84: iinc          5, -1
      87: iload_3
      88: iload         6
      90: isub
      91: istore_3
      92: aload_2
      93: iload         4
      95: iload         5
      97: iastore
      98: iinc          4, 1
     101: goto          47
     104: aload_2
     105: aload_0
     106: getfield      #2                  // Field last:I
     109: iload_1
     110: iload_3
     111: isub
     112: iastore
     113: aload_2
     114: areturn

  public int getCount(int...) throws org.apache.commons.math3.exception.OutOfRangeException, org.apache.commons.math3.exception.DimensionMismatchException;
    Code:
       0: aload_1
       1: arraylength
       2: aload_0
       3: getfield      #3                  // Field dimension:I
       6: if_icmpeq     23
       9: new           #15                 // class org/apache/commons/math3/exception/DimensionMismatchException
      12: dup
      13: aload_1
      14: arraylength
      15: aload_0
      16: getfield      #3                  // Field dimension:I
      19: invokespecial #16                 // Method org/apache/commons/math3/exception/DimensionMismatchException."<init>":(II)V
      22: athrow
      23: iconst_0
      24: istore_2
      25: iconst_0
      26: istore_3
      27: iload_3
      28: aload_0
      29: getfield      #3                  // Field dimension:I
      32: if_icmpge     103
      35: aload_1
      36: iload_3
      37: iaload
      38: istore        4
      40: iload         4
      42: iflt          56
      45: iload         4
      47: aload_0
      48: getfield      #1                  // Field size:[I
      51: iload_3
      52: iaload
      53: if_icmplt     84
      56: new           #13                 // class org/apache/commons/math3/exception/OutOfRangeException
      59: dup
      60: iload         4
      62: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      65: iconst_0
      66: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      69: aload_0
      70: getfield      #1                  // Field size:[I
      73: iload_3
      74: iaload
      75: iconst_1
      76: isub
      77: invokestatic  #8                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      80: invokespecial #14                 // Method org/apache/commons/math3/exception/OutOfRangeException."<init>":(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/Number;)V
      83: athrow
      84: iload_2
      85: aload_0
      86: getfield      #6                  // Field uniCounterOffset:[I
      89: iload_3
      90: iaload
      91: aload_1
      92: iload_3
      93: iaload
      94: imul
      95: iadd
      96: istore_2
      97: iinc          3, 1
     100: goto          27
     103: iload_2
     104: aload_1
     105: aload_0
     106: getfield      #2                  // Field last:I
     109: iaload
     110: iadd
     111: ireturn

  public int getSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field totalSize:I
       4: ireturn

  public int[] getSizes();
    Code:
       0: aload_0
       1: getfield      #1                  // Field size:[I
       4: invokestatic  #5                  // Method org/apache/commons/math3/util/MathArrays.copyOf:([I)[I
       7: areturn

  public java.lang.String toString();
    Code:
       0: new           #17                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: iconst_0
       9: istore_2
      10: iload_2
      11: aload_0
      12: getfield      #3                  // Field dimension:I
      15: if_icmpge     50
      18: aload_1
      19: ldc           #19                 // String [
      21: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: iconst_1
      26: newarray       int
      28: dup
      29: iconst_0
      30: iload_2
      31: iastore
      32: invokevirtual #21                 // Method getCount:([I)I
      35: invokevirtual #22                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      38: ldc           #23                 // String ]
      40: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: pop
      44: iinc          2, 1
      47: goto          10
      50: aload_1
      51: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: areturn

  public java.util.Iterator iterator();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method iterator:()Lorg/apache/commons/math3/util/MultidimensionalCounter$Iterator;
       4: areturn

  static int access$000(org.apache.commons.math3.util.MultidimensionalCounter);
    Code:
       0: aload_0
       1: getfield      #3                  // Field dimension:I
       4: ireturn

  static int access$100(org.apache.commons.math3.util.MultidimensionalCounter);
    Code:
       0: aload_0
       1: getfield      #2                  // Field last:I
       4: ireturn

  static int[] access$200(org.apache.commons.math3.util.MultidimensionalCounter);
    Code:
       0: aload_0
       1: getfield      #1                  // Field size:[I
       4: areturn
}
