Compiled from "KrbIdentity.java"
public class org.apache.kerby.kerberos.kerb.identity.KrbIdentity {
  private org.apache.kerby.kerberos.kerb.type.base.PrincipalName principal;

  private int keyVersion;

  private int kdcFlags;

  private boolean disabled;

  private boolean locked;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime expireTime;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime createdTime;

  private java.util.Map<org.apache.kerby.kerberos.kerb.type.base.EncryptionType, org.apache.kerby.kerberos.kerb.type.base.EncryptionKey> keys;

  public org.apache.kerby.kerberos.kerb.identity.KrbIdentity(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field keyVersion:I
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field kdcFlags:I
      14: aload_0
      15: getstatic     #4                  // Field org/apache/kerby/kerberos/kerb/type/KerberosTime.NEVER:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      18: putfield      #5                  // Field expireTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      21: aload_0
      22: invokestatic  #6                  // Method org/apache/kerby/kerberos/kerb/type/KerberosTime.now:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      25: putfield      #7                  // Field createdTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      28: aload_0
      29: new           #8                  // class java/util/HashMap
      32: dup
      33: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      36: putfield      #10                 // Field keys:Ljava/util/Map;
      39: aload_0
      40: new           #11                 // class org/apache/kerby/kerberos/kerb/type/base/PrincipalName
      43: dup
      44: aload_1
      45: invokespecial #12                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName."<init>":(Ljava/lang/String;)V
      48: putfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      51: return

  public java.lang.String getPrincipalName();
    Code:
       0: aload_0
       1: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: invokevirtual #14                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.getName:()Ljava/lang/String;
       7: areturn

  public void setPrincipalName(java.lang.String);
    Code:
       0: aload_0
       1: new           #11                 // class org/apache/kerby/kerberos/kerb/type/base/PrincipalName
       4: dup
       5: aload_1
       6: invokespecial #12                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName."<init>":(Ljava/lang/String;)V
       9: putfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      12: return

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName getPrincipal();
    Code:
       0: aload_0
       1: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: areturn

  public void setPrincipal(org.apache.kerby.kerberos.kerb.type.base.PrincipalName);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       5: return

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getExpireTime();
    Code:
       0: aload_0
       1: getfield      #5                  // Field expireTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  public void setExpireTime(org.apache.kerby.kerberos.kerb.type.KerberosTime);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field expireTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       5: return

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getCreatedTime();
    Code:
       0: aload_0
       1: getfield      #7                  // Field createdTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  public void setCreatedTime(org.apache.kerby.kerberos.kerb.type.KerberosTime);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field createdTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       5: return

  public boolean isDisabled();
    Code:
       0: aload_0
       1: getfield      #15                 // Field disabled:Z
       4: ireturn

  public void setDisabled(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #15                 // Field disabled:Z
       5: return

  public boolean isLocked();
    Code:
       0: aload_0
       1: getfield      #16                 // Field locked:Z
       4: ireturn

  public void setLocked(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #16                 // Field locked:Z
       5: return

  public void addKey(org.apache.kerby.kerberos.kerb.type.base.EncryptionKey);
    Code:
       0: aload_0
       1: getfield      #10                 // Field keys:Ljava/util/Map;
       4: aload_1
       5: invokevirtual #17                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.getKeyType:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       8: aload_1
       9: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: return

  public void addKeys(java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionKey>);
    Code:
       0: aload_1
       1: invokeinterface #19,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          44
      16: aload_2
      17: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #22                 // class org/apache/kerby/kerberos/kerb/type/base/EncryptionKey
      25: astore_3
      26: aload_0
      27: getfield      #10                 // Field keys:Ljava/util/Map;
      30: aload_3
      31: invokevirtual #17                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.getKeyType:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
      34: aload_3
      35: invokeinterface #18,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      40: pop
      41: goto          7
      44: return

  public java.util.Map<org.apache.kerby.kerberos.kerb.type.base.EncryptionType, org.apache.kerby.kerberos.kerb.type.base.EncryptionKey> getKeys();
    Code:
       0: aload_0
       1: getfield      #10                 // Field keys:Ljava/util/Map;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getKey(org.apache.kerby.kerberos.kerb.type.base.EncryptionType);
    Code:
       0: aload_0
       1: getfield      #10                 // Field keys:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #23,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #22                 // class org/apache/kerby/kerberos/kerb/type/base/EncryptionKey
      13: areturn

  public int getKdcFlags();
    Code:
       0: aload_0
       1: getfield      #3                  // Field kdcFlags:I
       4: ireturn

  public void setKdcFlags(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field kdcFlags:I
       5: return

  public int getKeyVersion();
    Code:
       0: aload_0
       1: getfield      #2                  // Field keyVersion:I
       4: ireturn

  public void setKeyVersion(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field keyVersion:I
       5: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnonnull     13
      11: iconst_0
      12: ireturn
      13: aload_1
      14: instanceof    #24                 // class org/apache/kerby/kerberos/kerb/identity/KrbIdentity
      17: ifeq          59
      20: aload_1
      21: checkcast     #24                 // class org/apache/kerby/kerberos/kerb/identity/KrbIdentity
      24: astore_2
      25: aload_0
      26: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      29: ifnonnull     41
      32: aload_2
      33: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      36: ifnull        57
      39: iconst_0
      40: ireturn
      41: aload_0
      42: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      45: aload_2
      46: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      49: invokevirtual #25                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.equals:(Ljava/lang/Object;)Z
      52: ifne          57
      55: iconst_0
      56: ireturn
      57: iconst_1
      58: ireturn
      59: iconst_0
      60: ireturn

  public int hashCode();
    Code:
       0: bipush        31
       2: istore_1
       3: iconst_1
       4: istore_2
       5: bipush        31
       7: iload_2
       8: imul
       9: aload_0
      10: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      13: ifnonnull     20
      16: iconst_0
      17: goto          27
      20: aload_0
      21: getfield      #13                 // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      24: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.hashCode:()I
      27: iadd
      28: istore_2
      29: iload_2
      30: ireturn
}
