Compiled from "AsyncJSON.java"
public class org.eclipse.jetty.util.ajax.AsyncJSON$Factory {
  private org.eclipse.jetty.util.Trie<org.eclipse.jetty.util.ajax.AsyncJSON$Factory$CachedString> cache;

  private java.util.Map<java.lang.String, org.eclipse.jetty.util.ajax.JSON$Convertor> convertors;

  private java.util.function.Function<java.util.List<?>, java.lang.Object> arrayConverter;

  private boolean detailedParseException;

  public org.eclipse.jetty.util.ajax.AsyncJSON$Factory();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokedynamic #2,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      10: putfield      #3                  // Field arrayConverter:Ljava/util/function/Function;
      13: return

  public java.util.function.Function<java.util.List<?>, java.lang.Object> getArrayConverter();
    Code:
       0: aload_0
       1: getfield      #3                  // Field arrayConverter:Ljava/util/function/Function;
       4: areturn

  public void setArrayConverter(java.util.function.Function<java.util.List<?>, java.lang.Object>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #4                  // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;)Ljava/lang/Object;
       5: checkcast     #5                  // class java/util/function/Function
       8: putfield      #3                  // Field arrayConverter:Ljava/util/function/Function;
      11: return

  public boolean isDetailedParseException();
    Code:
       0: aload_0
       1: getfield      #6                  // Field detailedParseException:Z
       4: ireturn

  public void setDetailedParseException(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field detailedParseException:Z
       5: return

  public boolean cache(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Lorg/eclipse/jetty/util/Trie;
       4: ifnonnull     23
       7: aload_0
       8: new           #8                  // class org/eclipse/jetty/util/ArrayTernaryTrie$Growing
      11: dup
      12: iconst_0
      13: bipush        64
      15: bipush        64
      17: invokespecial #9                  // Method org/eclipse/jetty/util/ArrayTernaryTrie$Growing."<init>":(ZII)V
      20: putfield      #7                  // Field cache:Lorg/eclipse/jetty/util/Trie;
      23: new           #10                 // class org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString
      26: dup
      27: aload_1
      28: aconst_null
      29: invokespecial #11                 // Method org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString."<init>":(Ljava/lang/String;Lorg/eclipse/jetty/util/ajax/AsyncJSON$1;)V
      32: astore_2
      33: aload_2
      34: invokestatic  #12                 // Method org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString.access$100:(Lorg/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString;)Z
      37: ifeq          57
      40: aload_0
      41: getfield      #7                  // Field cache:Lorg/eclipse/jetty/util/Trie;
      44: aload_2
      45: invokestatic  #13                 // Method org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString.access$200:(Lorg/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString;)Ljava/lang/String;
      48: aload_2
      49: invokeinterface #14,  3           // InterfaceMethod org/eclipse/jetty/util/Trie.put:(Ljava/lang/String;Ljava/lang/Object;)Z
      54: pop
      55: iconst_1
      56: ireturn
      57: iconst_0
      58: ireturn

  protected java.lang.String cached(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #7                  // Field cache:Lorg/eclipse/jetty/util/Trie;
       4: ifnull        52
       7: aload_0
       8: getfield      #7                  // Field cache:Lorg/eclipse/jetty/util/Trie;
      11: aload_1
      12: iconst_0
      13: aload_1
      14: invokevirtual #15                 // Method java/nio/ByteBuffer.remaining:()I
      17: invokeinterface #16,  4           // InterfaceMethod org/eclipse/jetty/util/Trie.getBest:(Ljava/nio/ByteBuffer;II)Ljava/lang/Object;
      22: checkcast     #10                 // class org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString
      25: astore_2
      26: aload_2
      27: ifnull        52
      30: aload_1
      31: aload_1
      32: invokevirtual #17                 // Method java/nio/ByteBuffer.position:()I
      35: aload_2
      36: invokestatic  #13                 // Method org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString.access$200:(Lorg/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString;)Ljava/lang/String;
      39: invokevirtual #18                 // Method java/lang/String.length:()I
      42: iadd
      43: invokevirtual #19                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      46: pop
      47: aload_2
      48: invokestatic  #20                 // Method org/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString.access$300:(Lorg/eclipse/jetty/util/ajax/AsyncJSON$Factory$CachedString;)Ljava/lang/String;
      51: areturn
      52: aconst_null
      53: areturn

  public org.eclipse.jetty.util.ajax.AsyncJSON newAsyncJSON();
    Code:
       0: new           #21                 // class org/eclipse/jetty/util/ajax/AsyncJSON
       3: dup
       4: aload_0
       5: invokespecial #22                 // Method org/eclipse/jetty/util/ajax/AsyncJSON."<init>":(Lorg/eclipse/jetty/util/ajax/AsyncJSON$Factory;)V
       8: areturn

  public void putConvertor(java.lang.String, org.eclipse.jetty.util.ajax.JSON$Convertor);
    Code:
       0: aload_0
       1: getfield      #23                 // Field convertors:Ljava/util/Map;
       4: ifnonnull     18
       7: aload_0
       8: new           #24                 // class java/util/concurrent/ConcurrentHashMap
      11: dup
      12: invokespecial #25                 // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      15: putfield      #23                 // Field convertors:Ljava/util/Map;
      18: aload_0
      19: getfield      #23                 // Field convertors:Ljava/util/Map;
      22: aload_1
      23: aload_2
      24: invokeinterface #26,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: return

  public org.eclipse.jetty.util.ajax.JSON$Convertor removeConvertor(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #23                 // Field convertors:Ljava/util/Map;
       4: ifnull        21
       7: aload_0
       8: getfield      #23                 // Field convertors:Ljava/util/Map;
      11: aload_1
      12: invokeinterface #27,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      17: checkcast     #28                 // class org/eclipse/jetty/util/ajax/JSON$Convertor
      20: areturn
      21: aconst_null
      22: areturn

  public org.eclipse.jetty.util.ajax.JSON$Convertor getConvertor(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #23                 // Field convertors:Ljava/util/Map;
       4: ifnonnull     11
       7: aconst_null
       8: goto          24
      11: aload_0
      12: getfield      #23                 // Field convertors:Ljava/util/Map;
      15: aload_1
      16: invokeinterface #29,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      21: checkcast     #28                 // class org/eclipse/jetty/util/ajax/JSON$Convertor
      24: areturn

  private static java.lang.Object lambda$new$0(java.util.List);
    Code:
       0: aload_0
       1: areturn
}
