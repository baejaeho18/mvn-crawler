Compiled from "ValueNode.java"
public abstract class org.codehaus.jackson.node.ValueNode extends org.codehaus.jackson.node.BaseJsonNode {
  protected org.codehaus.jackson.node.ValueNode();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/codehaus/jackson/node/BaseJsonNode."<init>":()V
       4: return

  public boolean isValueNode();
    Code:
       0: iconst_1
       1: ireturn

  public abstract org.codehaus.jackson.JsonToken asToken();

  public void serializeWithType(org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException;
    Code:
       0: aload_3
       1: aload_0
       2: aload_1
       3: invokevirtual #2                  // Method org/codehaus/jackson/map/TypeSerializer.writeTypePrefixForScalar:(Ljava/lang/Object;Lorg/codehaus/jackson/JsonGenerator;)V
       6: aload_0
       7: aload_1
       8: aload_2
       9: invokevirtual #3                  // Method serialize:(Lorg/codehaus/jackson/JsonGenerator;Lorg/codehaus/jackson/map/SerializerProvider;)V
      12: aload_3
      13: aload_0
      14: aload_1
      15: invokevirtual #4                  // Method org/codehaus/jackson/map/TypeSerializer.writeTypeSuffixForScalar:(Ljava/lang/Object;Lorg/codehaus/jackson/JsonGenerator;)V
      18: return

  public org.codehaus.jackson.JsonNode path(java.lang.String);
    Code:
       0: invokestatic  #5                  // Method org/codehaus/jackson/node/MissingNode.getInstance:()Lorg/codehaus/jackson/node/MissingNode;
       3: areturn

  public org.codehaus.jackson.JsonNode path(int);
    Code:
       0: invokestatic  #5                  // Method org/codehaus/jackson/node/MissingNode.getInstance:()Lorg/codehaus/jackson/node/MissingNode;
       3: areturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #6                  // Method asText:()Ljava/lang/String;
       4: areturn
}
