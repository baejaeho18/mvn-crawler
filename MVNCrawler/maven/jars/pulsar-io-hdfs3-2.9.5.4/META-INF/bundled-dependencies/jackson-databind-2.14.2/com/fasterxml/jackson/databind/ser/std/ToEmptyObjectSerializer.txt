Compiled from "ToEmptyObjectSerializer.java"
public class com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer extends com.fasterxml.jackson.databind.ser.std.StdSerializer<java.lang.Object> {
  protected com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #1                  // Method com/fasterxml/jackson/databind/ser/std/StdSerializer."<init>":(Ljava/lang/Class;Z)V
       6: return

  public com.fasterxml.jackson.databind.ser.std.ToEmptyObjectSerializer(com.fasterxml.jackson.databind.JavaType);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method com/fasterxml/jackson/databind/ser/std/StdSerializer."<init>":(Lcom/fasterxml/jackson/databind/JavaType;)V
       5: return

  public void serialize(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider) throws java.io.IOException;
    Code:
       0: aload_2
       1: aload_1
       2: iconst_0
       3: invokevirtual #3                  // Method com/fasterxml/jackson/core/JsonGenerator.writeStartObject:(Ljava/lang/Object;I)V
       6: aload_2
       7: invokevirtual #4                  // Method com/fasterxml/jackson/core/JsonGenerator.writeEndObject:()V
      10: return

  public void serializeWithType(java.lang.Object, com.fasterxml.jackson.core.JsonGenerator, com.fasterxml.jackson.databind.SerializerProvider, com.fasterxml.jackson.databind.jsontype.TypeSerializer) throws java.io.IOException;
    Code:
       0: aload         4
       2: aload_2
       3: aload         4
       5: aload_1
       6: getstatic     #5                  // Field com/fasterxml/jackson/core/JsonToken.START_OBJECT:Lcom/fasterxml/jackson/core/JsonToken;
       9: invokevirtual #6                  // Method com/fasterxml/jackson/databind/jsontype/TypeSerializer.typeId:(Ljava/lang/Object;Lcom/fasterxml/jackson/core/JsonToken;)Lcom/fasterxml/jackson/core/type/WritableTypeId;
      12: invokevirtual #7                  // Method com/fasterxml/jackson/databind/jsontype/TypeSerializer.writeTypePrefix:(Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/core/type/WritableTypeId;)Lcom/fasterxml/jackson/core/type/WritableTypeId;
      15: astore        5
      17: aload         4
      19: aload_2
      20: aload         5
      22: invokevirtual #8                  // Method com/fasterxml/jackson/databind/jsontype/TypeSerializer.writeTypeSuffix:(Lcom/fasterxml/jackson/core/JsonGenerator;Lcom/fasterxml/jackson/core/type/WritableTypeId;)Lcom/fasterxml/jackson/core/type/WritableTypeId;
      25: pop
      26: return

  public boolean isEmpty(com.fasterxml.jackson.databind.SerializerProvider, java.lang.Object);
    Code:
       0: iconst_1
       1: ireturn

  public com.fasterxml.jackson.databind.JsonNode getSchema(com.fasterxml.jackson.databind.SerializerProvider, java.lang.reflect.Type) throws com.fasterxml.jackson.databind.JsonMappingException;
    Code:
       0: aconst_null
       1: areturn

  public void acceptJsonFormatVisitor(com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper, com.fasterxml.jackson.databind.JavaType) throws com.fasterxml.jackson.databind.JsonMappingException;
    Code:
       0: aload_1
       1: aload_2
       2: invokeinterface #9,  2            // InterfaceMethod com/fasterxml/jackson/databind/jsonFormatVisitors/JsonFormatVisitorWrapper.expectObjectFormat:(Lcom/fasterxml/jackson/databind/JavaType;)Lcom/fasterxml/jackson/databind/jsonFormatVisitors/JsonObjectFormatVisitor;
       7: pop
       8: return
}
