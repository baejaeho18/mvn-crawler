Compiled from "ConsumerBuilder.java"
public interface org.apache.pulsar.client.api.ConsumerBuilder<T> extends java.lang.Cloneable {
  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> clone();

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> loadConf(java.util.Map<java.lang.String, java.lang.Object>);

  public abstract org.apache.pulsar.client.api.Consumer<T> subscribe() throws org.apache.pulsar.client.api.PulsarClientException;

  public abstract java.util.concurrent.CompletableFuture<org.apache.pulsar.client.api.Consumer<T>> subscribeAsync();

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> topic(java.lang.String...);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> topics(java.util.List<java.lang.String>);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> topicsPattern(java.util.regex.Pattern);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> topicsPattern(java.lang.String);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> subscriptionName(java.lang.String);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> ackTimeout(long, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> isAckReceiptEnabled(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> ackTimeoutTickTime(long, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> negativeAckRedeliveryDelay(long, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> subscriptionType(org.apache.pulsar.client.api.SubscriptionType);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> subscriptionMode(org.apache.pulsar.client.api.SubscriptionMode);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> messageListener(org.apache.pulsar.client.api.MessageListener<T>);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> cryptoKeyReader(org.apache.pulsar.client.api.CryptoKeyReader);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> defaultCryptoKeyReader(java.lang.String);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> defaultCryptoKeyReader(java.util.Map<java.lang.String, java.lang.String>);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> messageCrypto(org.apache.pulsar.client.api.MessageCrypto);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> cryptoFailureAction(org.apache.pulsar.client.api.ConsumerCryptoFailureAction);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> receiverQueueSize(int);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> acknowledgmentGroupTime(long, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> replicateSubscriptionState(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> maxTotalReceiverQueueSizeAcrossPartitions(int);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> consumerName(java.lang.String);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> consumerEventListener(org.apache.pulsar.client.api.ConsumerEventListener);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> readCompacted(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> patternAutoDiscoveryPeriod(int);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> patternAutoDiscoveryPeriod(int, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> priorityLevel(int);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> property(java.lang.String, java.lang.String);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> properties(java.util.Map<java.lang.String, java.lang.String>);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> subscriptionInitialPosition(org.apache.pulsar.client.api.SubscriptionInitialPosition);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> subscriptionTopicsMode(org.apache.pulsar.client.api.RegexSubscriptionMode);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> intercept(org.apache.pulsar.client.api.ConsumerInterceptor<T>...);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> deadLetterPolicy(org.apache.pulsar.client.api.DeadLetterPolicy);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> autoUpdatePartitions(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> autoUpdatePartitionsInterval(int, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> keySharedPolicy(org.apache.pulsar.client.api.KeySharedPolicy);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> startMessageIdInclusive();

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> batchReceivePolicy(org.apache.pulsar.client.api.BatchReceivePolicy);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> enableRetry(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> enableBatchIndexAcknowledgment(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> maxPendingChuckedMessage(int);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> maxPendingChunkedMessage(int);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> autoAckOldestChunkedMessageOnQueueFull(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> expireTimeOfIncompleteChunkedMessage(long, java.util.concurrent.TimeUnit);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> poolMessages(boolean);

  public abstract org.apache.pulsar.client.api.ConsumerBuilder<T> messagePayloadProcessor(org.apache.pulsar.client.api.MessagePayloadProcessor);
}
