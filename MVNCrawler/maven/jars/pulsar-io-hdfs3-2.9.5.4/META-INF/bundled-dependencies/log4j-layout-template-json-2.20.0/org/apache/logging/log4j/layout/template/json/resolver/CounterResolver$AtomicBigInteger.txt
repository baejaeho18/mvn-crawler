Compiled from "CounterResolver.java"
final class org.apache.logging.log4j.layout.template.json.resolver.CounterResolver$AtomicBigInteger {
  private final java.util.concurrent.atomic.AtomicReference<java.math.BigInteger> lastNumber;

  private org.apache.logging.log4j.layout.template.json.resolver.CounterResolver$AtomicBigInteger(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: aload_1
      10: invokespecial #5                  // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      13: putfield      #6                  // Field lastNumber:Ljava/util/concurrent/atomic/AtomicReference;
      16: return

  private java.math.BigInteger getAndIncrement();
    Code:
       0: aload_0
       1: getfield      #6                  // Field lastNumber:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #8                  // class java/math/BigInteger
      10: astore_1
      11: aload_1
      12: getstatic     #9                  // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
      15: invokevirtual #10                 // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      18: astore_2
      19: aload_0
      20: aload_1
      21: aload_2
      22: invokespecial #11                 // Method compareAndSetWithBackOff:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z
      25: ifeq          0
      28: aload_1
      29: areturn

  private boolean compareAndSetWithBackOff(java.math.BigInteger, java.math.BigInteger);
    Code:
       0: aload_0
       1: getfield      #6                  // Field lastNumber:Ljava/util/concurrent/atomic/AtomicReference;
       4: aload_1
       5: aload_2
       6: invokevirtual #12                 // Method java/util/concurrent/atomic/AtomicReference.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z
       9: ifeq          14
      12: iconst_1
      13: ireturn
      14: lconst_1
      15: invokestatic  #13                 // Method java/util/concurrent/locks/LockSupport.parkNanos:(J)V
      18: iconst_0
      19: ireturn

  org.apache.logging.log4j.layout.template.json.resolver.CounterResolver$AtomicBigInteger(java.math.BigInteger, org.apache.logging.log4j.layout.template.json.resolver.CounterResolver$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method "<init>":(Ljava/math/BigInteger;)V
       5: return

  static java.math.BigInteger access$100(org.apache.logging.log4j.layout.template.json.resolver.CounterResolver$AtomicBigInteger);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method getAndIncrement:()Ljava/math/BigInteger;
       4: areturn
}
