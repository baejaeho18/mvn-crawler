Compiled from "ReadOnlyStringMapResolver.java"
final class org.apache.logging.log4j.layout.template.json.resolver.ReadOnlyStringMapResolver$2 implements org.apache.logging.log4j.layout.template.json.resolver.EventResolver {
  final boolean val$flatten;

  final java.util.function.Function val$mapAccessor;

  final org.apache.logging.log4j.layout.template.json.util.Recycler val$loopContextRecycler;

  org.apache.logging.log4j.layout.template.json.resolver.ReadOnlyStringMapResolver$2(boolean, java.util.function.Function, org.apache.logging.log4j.layout.template.json.util.Recycler);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field val$flatten:Z
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$mapAccessor:Ljava/util/function/Function;
      10: aload_0
      11: aload_3
      12: putfield      #3                  // Field val$loopContextRecycler:Lorg/apache/logging/log4j/layout/template/json/util/Recycler;
      15: aload_0
      16: invokespecial #4                  // Method java/lang/Object."<init>":()V
      19: return

  public boolean isFlattening();
    Code:
       0: aload_0
       1: getfield      #1                  // Field val$flatten:Z
       4: ireturn

  public boolean isResolvable(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$mapAccessor:Ljava/util/function/Function;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #6                  // class org/apache/logging/log4j/util/ReadOnlyStringMap
      13: astore_2
      14: aload_2
      15: ifnull        31
      18: aload_2
      19: invokeinterface #7,  1            // InterfaceMethod org/apache/logging/log4j/util/ReadOnlyStringMap.isEmpty:()Z
      24: ifne          31
      27: iconst_1
      28: goto          32
      31: iconst_0
      32: ireturn

  public void resolve(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.layout.template.json.util.JsonWriter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_0
       4: invokevirtual #8                  // Method resolve:(Lorg/apache/logging/log4j/core/LogEvent;Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;Z)V
       7: return

  public void resolve(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.layout.template.json.util.JsonWriter, boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$mapAccessor:Ljava/util/function/Function;
       4: aload_1
       5: invokeinterface #5,  2            // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #6                  // class org/apache/logging/log4j/util/ReadOnlyStringMap
      13: astore        4
      15: aload         4
      17: ifnull        30
      20: aload         4
      22: invokeinterface #7,  1            // InterfaceMethod org/apache/logging/log4j/util/ReadOnlyStringMap.isEmpty:()Z
      27: ifeq          42
      30: aload_0
      31: getfield      #1                  // Field val$flatten:Z
      34: ifne          41
      37: aload_2
      38: invokevirtual #9                  // Method org/apache/logging/log4j/layout/template/json/util/JsonWriter.writeNull:()V
      41: return
      42: aload_0
      43: getfield      #1                  // Field val$flatten:Z
      46: ifne          53
      49: aload_2
      50: invokevirtual #10                 // Method org/apache/logging/log4j/layout/template/json/util/JsonWriter.writeObjectStart:()V
      53: aload_0
      54: getfield      #3                  // Field val$loopContextRecycler:Lorg/apache/logging/log4j/layout/template/json/util/Recycler;
      57: invokeinterface #11,  1           // InterfaceMethod org/apache/logging/log4j/layout/template/json/util/Recycler.acquire:()Ljava/lang/Object;
      62: checkcast     #12                 // class org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext
      65: astore        5
      67: aload         5
      69: aload_2
      70: invokestatic  #13                 // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext.access$002:(Lorg/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext;Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;)Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;
      73: pop
      74: aload         5
      76: aload_2
      77: invokevirtual #14                 // Method org/apache/logging/log4j/layout/template/json/util/JsonWriter.getStringBuilder:()Ljava/lang/StringBuilder;
      80: invokevirtual #15                 // Method java/lang/StringBuilder.length:()I
      83: invokestatic  #16                 // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext.access$102:(Lorg/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext;I)I
      86: pop
      87: aload         5
      89: aload_0
      90: getfield      #1                  // Field val$flatten:Z
      93: ifeq          104
      96: iload_3
      97: ifeq          104
     100: iconst_1
     101: goto          105
     104: iconst_0
     105: invokestatic  #17                 // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext.access$202:(Lorg/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopContext;Z)Z
     108: pop
     109: aload         4
     111: getstatic     #18                 // Field org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopMethod.INSTANCE:Lorg/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver$LoopMethod;
     114: aload         5
     116: invokeinterface #19,  3           // InterfaceMethod org/apache/logging/log4j/util/ReadOnlyStringMap.forEach:(Lorg/apache/logging/log4j/util/TriConsumer;Ljava/lang/Object;)V
     121: aload_0
     122: getfield      #3                  // Field val$loopContextRecycler:Lorg/apache/logging/log4j/layout/template/json/util/Recycler;
     125: aload         5
     127: invokeinterface #20,  2           // InterfaceMethod org/apache/logging/log4j/layout/template/json/util/Recycler.release:(Ljava/lang/Object;)V
     132: goto          151
     135: astore        6
     137: aload_0
     138: getfield      #3                  // Field val$loopContextRecycler:Lorg/apache/logging/log4j/layout/template/json/util/Recycler;
     141: aload         5
     143: invokeinterface #20,  2           // InterfaceMethod org/apache/logging/log4j/layout/template/json/util/Recycler.release:(Ljava/lang/Object;)V
     148: aload         6
     150: athrow
     151: aload_0
     152: getfield      #1                  // Field val$flatten:Z
     155: ifne          162
     158: aload_2
     159: invokevirtual #21                 // Method org/apache/logging/log4j/layout/template/json/util/JsonWriter.writeObjectEnd:()V
     162: return
    Exception table:
       from    to  target type
         109   121   135   any
         135   137   135   any

  public void resolve(java.lang.Object, org.apache.logging.log4j.layout.template.json.util.JsonWriter, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #22                 // class org/apache/logging/log4j/core/LogEvent
       5: aload_2
       6: iload_3
       7: invokevirtual #8                  // Method resolve:(Lorg/apache/logging/log4j/core/LogEvent;Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;Z)V
      10: return

  public void resolve(java.lang.Object, org.apache.logging.log4j.layout.template.json.util.JsonWriter);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #22                 // class org/apache/logging/log4j/core/LogEvent
       5: aload_2
       6: invokevirtual #23                 // Method resolve:(Lorg/apache/logging/log4j/core/LogEvent;Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;)V
       9: return

  public boolean isResolvable(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #22                 // class org/apache/logging/log4j/core/LogEvent
       5: invokevirtual #24                 // Method isResolvable:(Lorg/apache/logging/log4j/core/LogEvent;)Z
       8: ireturn
}
