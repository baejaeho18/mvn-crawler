Compiled from "MapResolver.java"
public final class org.apache.logging.log4j.layout.template.json.resolver.MapResolver extends org.apache.logging.log4j.layout.template.json.resolver.ReadOnlyStringMapResolver {
  org.apache.logging.log4j.layout.template.json.resolver.MapResolver(org.apache.logging.log4j.layout.template.json.resolver.EventResolverContext, org.apache.logging.log4j.layout.template.json.resolver.TemplateResolverConfig);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #1,  0              // InvokeDynamic #0:apply:()Ljava/util/function/Function;
       8: invokespecial #2                  // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver."<init>":(Lorg/apache/logging/log4j/layout/template/json/resolver/EventResolverContext;Lorg/apache/logging/log4j/layout/template/json/resolver/TemplateResolverConfig;Ljava/util/function/Function;)V
      11: return

  private static org.apache.logging.log4j.util.ReadOnlyStringMap toMap(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: invokeinterface #3,  1            // InterfaceMethod org/apache/logging/log4j/core/LogEvent.getMessage:()Lorg/apache/logging/log4j/message/Message;
       6: astore_1
       7: aload_1
       8: instanceof    #4                  // class org/apache/logging/log4j/message/MapMessage
      11: ifne          16
      14: aconst_null
      15: areturn
      16: aload_1
      17: checkcast     #4                  // class org/apache/logging/log4j/message/MapMessage
      20: astore_2
      21: aload_2
      22: invokevirtual #5                  // Method org/apache/logging/log4j/message/MapMessage.getIndexedReadOnlyStringMap:()Lorg/apache/logging/log4j/util/IndexedReadOnlyStringMap;
      25: areturn

  static java.lang.String getName();
    Code:
       0: ldc           #6                  // String map
       2: areturn

  public void resolve(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.layout.template.json.util.JsonWriter, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: invokespecial #7                  // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver.resolve:(Lorg/apache/logging/log4j/core/LogEvent;Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;Z)V
       7: return

  public void resolve(org.apache.logging.log4j.core.LogEvent, org.apache.logging.log4j.layout.template.json.util.JsonWriter);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #8                  // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver.resolve:(Lorg/apache/logging/log4j/core/LogEvent;Lorg/apache/logging/log4j/layout/template/json/util/JsonWriter;)V
       6: return

  public boolean isResolvable(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #9                  // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver.isResolvable:(Lorg/apache/logging/log4j/core/LogEvent;)Z
       5: ireturn

  public boolean isFlattening();
    Code:
       0: aload_0
       1: invokespecial #10                 // Method org/apache/logging/log4j/layout/template/json/resolver/ReadOnlyStringMapResolver.isFlattening:()Z
       4: ireturn
}
