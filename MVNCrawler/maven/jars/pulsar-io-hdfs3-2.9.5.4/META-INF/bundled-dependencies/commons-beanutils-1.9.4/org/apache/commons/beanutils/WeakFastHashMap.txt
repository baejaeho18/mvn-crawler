Compiled from "WeakFastHashMap.java"
class org.apache.commons.beanutils.WeakFastHashMap<K, V> extends java.util.HashMap<K, V> {
  private java.util.Map<K, V> map;

  private boolean fast;

  public org.apache.commons.beanutils.WeakFastHashMap();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #1                  // Field map:Ljava/util/Map;
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field fast:Z
      14: aload_0
      15: aload_0
      16: invokevirtual #4                  // Method createMap:()Ljava/util/Map;
      19: putfield      #1                  // Field map:Ljava/util/Map;
      22: return

  public org.apache.commons.beanutils.WeakFastHashMap(int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #1                  // Field map:Ljava/util/Map;
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field fast:Z
      14: aload_0
      15: aload_0
      16: iload_1
      17: invokevirtual #5                  // Method createMap:(I)Ljava/util/Map;
      20: putfield      #1                  // Field map:Ljava/util/Map;
      23: return

  public org.apache.commons.beanutils.WeakFastHashMap(int, float);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #1                  // Field map:Ljava/util/Map;
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field fast:Z
      14: aload_0
      15: aload_0
      16: iload_1
      17: fload_2
      18: invokevirtual #6                  // Method createMap:(IF)Ljava/util/Map;
      21: putfield      #1                  // Field map:Ljava/util/Map;
      24: return

  public org.apache.commons.beanutils.WeakFastHashMap(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/util/HashMap."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #1                  // Field map:Ljava/util/Map;
       9: aload_0
      10: iconst_0
      11: putfield      #2                  // Field fast:Z
      14: aload_0
      15: aload_0
      16: aload_1
      17: invokevirtual #7                  // Method createMap:(Ljava/util/Map;)Ljava/util/Map;
      20: putfield      #1                  // Field map:Ljava/util/Map;
      23: return

  public boolean getFast();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ireturn

  public void setFast(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field fast:Z
       5: return

  public V get(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #1                  // Field map:Ljava/util/Map;
      11: aload_1
      12: invokeinterface #8,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      17: areturn
      18: aload_0
      19: getfield      #1                  // Field map:Ljava/util/Map;
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #1                  // Field map:Ljava/util/Map;
      29: aload_1
      30: invokeinterface #8,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      35: aload_2
      36: monitorexit
      37: areturn
      38: astore_3
      39: aload_2
      40: monitorexit
      41: aload_3
      42: athrow
    Exception table:
       from    to  target type
          25    37    38   any
          38    41    38   any

  public int size();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          17
       7: aload_0
       8: getfield      #1                  // Field map:Ljava/util/Map;
      11: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
      16: ireturn
      17: aload_0
      18: getfield      #1                  // Field map:Ljava/util/Map;
      21: dup
      22: astore_1
      23: monitorenter
      24: aload_0
      25: getfield      #1                  // Field map:Ljava/util/Map;
      28: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
      33: aload_1
      34: monitorexit
      35: ireturn
      36: astore_2
      37: aload_1
      38: monitorexit
      39: aload_2
      40: athrow
    Exception table:
       from    to  target type
          24    35    36   any
          36    39    36   any

  public boolean isEmpty();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          17
       7: aload_0
       8: getfield      #1                  // Field map:Ljava/util/Map;
      11: invokeinterface #10,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      16: ireturn
      17: aload_0
      18: getfield      #1                  // Field map:Ljava/util/Map;
      21: dup
      22: astore_1
      23: monitorenter
      24: aload_0
      25: getfield      #1                  // Field map:Ljava/util/Map;
      28: invokeinterface #10,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
      33: aload_1
      34: monitorexit
      35: ireturn
      36: astore_2
      37: aload_1
      38: monitorexit
      39: aload_2
      40: athrow
    Exception table:
       from    to  target type
          24    35    36   any
          36    39    36   any

  public boolean containsKey(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #1                  // Field map:Ljava/util/Map;
      11: aload_1
      12: invokeinterface #11,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      17: ireturn
      18: aload_0
      19: getfield      #1                  // Field map:Ljava/util/Map;
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #1                  // Field map:Ljava/util/Map;
      29: aload_1
      30: invokeinterface #11,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      35: aload_2
      36: monitorexit
      37: ireturn
      38: astore_3
      39: aload_2
      40: monitorexit
      41: aload_3
      42: athrow
    Exception table:
       from    to  target type
          25    37    38   any
          38    41    38   any

  public boolean containsValue(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #1                  // Field map:Ljava/util/Map;
      11: aload_1
      12: invokeinterface #12,  2           // InterfaceMethod java/util/Map.containsValue:(Ljava/lang/Object;)Z
      17: ireturn
      18: aload_0
      19: getfield      #1                  // Field map:Ljava/util/Map;
      22: dup
      23: astore_2
      24: monitorenter
      25: aload_0
      26: getfield      #1                  // Field map:Ljava/util/Map;
      29: aload_1
      30: invokeinterface #12,  2           // InterfaceMethod java/util/Map.containsValue:(Ljava/lang/Object;)Z
      35: aload_2
      36: monitorexit
      37: ireturn
      38: astore_3
      39: aload_2
      40: monitorexit
      41: aload_3
      42: athrow
    Exception table:
       from    to  target type
          25    37    38   any
          38    41    38   any

  public V put(K, V);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          50
       7: aload_0
       8: dup
       9: astore_3
      10: monitorenter
      11: aload_0
      12: aload_0
      13: getfield      #1                  // Field map:Ljava/util/Map;
      16: invokevirtual #13                 // Method cloneMap:(Ljava/util/Map;)Ljava/util/Map;
      19: astore        4
      21: aload         4
      23: aload_1
      24: aload_2
      25: invokeinterface #14,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      30: astore        5
      32: aload_0
      33: aload         4
      35: putfield      #1                  // Field map:Ljava/util/Map;
      38: aload         5
      40: aload_3
      41: monitorexit
      42: areturn
      43: astore        6
      45: aload_3
      46: monitorexit
      47: aload         6
      49: athrow
      50: aload_0
      51: getfield      #1                  // Field map:Ljava/util/Map;
      54: dup
      55: astore_3
      56: monitorenter
      57: aload_0
      58: getfield      #1                  // Field map:Ljava/util/Map;
      61: aload_1
      62: aload_2
      63: invokeinterface #14,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      68: aload_3
      69: monitorexit
      70: areturn
      71: astore        7
      73: aload_3
      74: monitorexit
      75: aload         7
      77: athrow
    Exception table:
       from    to  target type
          11    42    43   any
          43    47    43   any
          57    70    71   any
          71    75    71   any

  public void putAll(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          47
       7: aload_0
       8: dup
       9: astore_2
      10: monitorenter
      11: aload_0
      12: aload_0
      13: getfield      #1                  // Field map:Ljava/util/Map;
      16: invokevirtual #13                 // Method cloneMap:(Ljava/util/Map;)Ljava/util/Map;
      19: astore_3
      20: aload_3
      21: aload_1
      22: invokeinterface #15,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      27: aload_0
      28: aload_3
      29: putfield      #1                  // Field map:Ljava/util/Map;
      32: aload_2
      33: monitorexit
      34: goto          44
      37: astore        4
      39: aload_2
      40: monitorexit
      41: aload         4
      43: athrow
      44: goto          76
      47: aload_0
      48: getfield      #1                  // Field map:Ljava/util/Map;
      51: dup
      52: astore_2
      53: monitorenter
      54: aload_0
      55: getfield      #1                  // Field map:Ljava/util/Map;
      58: aload_1
      59: invokeinterface #15,  2           // InterfaceMethod java/util/Map.putAll:(Ljava/util/Map;)V
      64: aload_2
      65: monitorexit
      66: goto          76
      69: astore        5
      71: aload_2
      72: monitorexit
      73: aload         5
      75: athrow
      76: return
    Exception table:
       from    to  target type
          11    34    37   any
          37    41    37   any
          54    66    69   any
          69    73    69   any

  public V remove(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          46
       7: aload_0
       8: dup
       9: astore_2
      10: monitorenter
      11: aload_0
      12: aload_0
      13: getfield      #1                  // Field map:Ljava/util/Map;
      16: invokevirtual #13                 // Method cloneMap:(Ljava/util/Map;)Ljava/util/Map;
      19: astore_3
      20: aload_3
      21: aload_1
      22: invokeinterface #16,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      27: astore        4
      29: aload_0
      30: aload_3
      31: putfield      #1                  // Field map:Ljava/util/Map;
      34: aload         4
      36: aload_2
      37: monitorexit
      38: areturn
      39: astore        5
      41: aload_2
      42: monitorexit
      43: aload         5
      45: athrow
      46: aload_0
      47: getfield      #1                  // Field map:Ljava/util/Map;
      50: dup
      51: astore_2
      52: monitorenter
      53: aload_0
      54: getfield      #1                  // Field map:Ljava/util/Map;
      57: aload_1
      58: invokeinterface #16,  2           // InterfaceMethod java/util/Map.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      63: aload_2
      64: monitorexit
      65: areturn
      66: astore        6
      68: aload_2
      69: monitorexit
      70: aload         6
      72: athrow
    Exception table:
       from    to  target type
          11    38    39   any
          39    43    39   any
          53    65    66   any
          66    70    66   any

  public void clear();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          32
       7: aload_0
       8: dup
       9: astore_1
      10: monitorenter
      11: aload_0
      12: aload_0
      13: invokevirtual #4                  // Method createMap:()Ljava/util/Map;
      16: putfield      #1                  // Field map:Ljava/util/Map;
      19: aload_1
      20: monitorexit
      21: goto          29
      24: astore_2
      25: aload_1
      26: monitorexit
      27: aload_2
      28: athrow
      29: goto          58
      32: aload_0
      33: getfield      #1                  // Field map:Ljava/util/Map;
      36: dup
      37: astore_1
      38: monitorenter
      39: aload_0
      40: getfield      #1                  // Field map:Ljava/util/Map;
      43: invokeinterface #17,  1           // InterfaceMethod java/util/Map.clear:()V
      48: aload_1
      49: monitorexit
      50: goto          58
      53: astore_3
      54: aload_1
      55: monitorexit
      56: aload_3
      57: athrow
      58: return
    Exception table:
       from    to  target type
          11    21    24   any
          24    27    24   any
          39    50    53   any
          53    56    53   any

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #18                 // class java/util/Map
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #18                 // class java/util/Map
      20: astore_2
      21: aload_0
      22: getfield      #2                  // Field fast:Z
      25: ifeq          153
      28: aload_2
      29: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
      34: aload_0
      35: getfield      #1                  // Field map:Ljava/util/Map;
      38: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
      43: if_icmpeq     48
      46: iconst_0
      47: ireturn
      48: aload_0
      49: getfield      #1                  // Field map:Ljava/util/Map;
      52: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      57: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      62: astore_3
      63: aload_3
      64: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      69: ifeq          151
      72: aload_3
      73: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      78: checkcast     #23                 // class java/util/Map$Entry
      81: astore        4
      83: aload         4
      85: invokeinterface #24,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
      90: astore        5
      92: aload         4
      94: invokeinterface #25,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      99: astore        6
     101: aload         6
     103: ifnonnull     130
     106: aload_2
     107: aload         5
     109: invokeinterface #8,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     114: ifnonnull     128
     117: aload_2
     118: aload         5
     120: invokeinterface #11,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     125: ifne          148
     128: iconst_0
     129: ireturn
     130: aload         6
     132: aload_2
     133: aload         5
     135: invokeinterface #8,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     140: invokevirtual #26                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     143: ifne          148
     146: iconst_0
     147: ireturn
     148: goto          63
     151: iconst_1
     152: ireturn
     153: aload_0
     154: getfield      #1                  // Field map:Ljava/util/Map;
     157: dup
     158: astore_3
     159: monitorenter
     160: aload_2
     161: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
     166: aload_0
     167: getfield      #1                  // Field map:Ljava/util/Map;
     170: invokeinterface #9,  1            // InterfaceMethod java/util/Map.size:()I
     175: if_icmpeq     182
     178: iconst_0
     179: aload_3
     180: monitorexit
     181: ireturn
     182: aload_0
     183: getfield      #1                  // Field map:Ljava/util/Map;
     186: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
     191: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
     196: astore        4
     198: aload         4
     200: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     205: ifeq          292
     208: aload         4
     210: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     215: checkcast     #23                 // class java/util/Map$Entry
     218: astore        5
     220: aload         5
     222: invokeinterface #24,  1           // InterfaceMethod java/util/Map$Entry.getKey:()Ljava/lang/Object;
     227: astore        6
     229: aload         5
     231: invokeinterface #25,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
     236: astore        7
     238: aload         7
     240: ifnonnull     269
     243: aload_2
     244: aload         6
     246: invokeinterface #8,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     251: ifnonnull     265
     254: aload_2
     255: aload         6
     257: invokeinterface #11,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     262: ifne          289
     265: iconst_0
     266: aload_3
     267: monitorexit
     268: ireturn
     269: aload         7
     271: aload_2
     272: aload         6
     274: invokeinterface #8,  2            // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     279: invokevirtual #26                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     282: ifne          289
     285: iconst_0
     286: aload_3
     287: monitorexit
     288: ireturn
     289: goto          198
     292: iconst_1
     293: aload_3
     294: monitorexit
     295: ireturn
     296: astore        8
     298: aload_3
     299: monitorexit
     300: aload         8
     302: athrow
    Exception table:
       from    to  target type
         160   181   296   any
         182   268   296   any
         269   288   296   any
         289   295   296   any
         296   300   296   any

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ifeq          57
       7: iconst_0
       8: istore_1
       9: aload_0
      10: getfield      #1                  // Field map:Ljava/util/Map;
      13: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      18: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      23: astore_2
      24: aload_2
      25: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          55
      33: aload_2
      34: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      39: checkcast     #23                 // class java/util/Map$Entry
      42: astore_3
      43: iload_1
      44: aload_3
      45: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.hashCode:()I
      50: iadd
      51: istore_1
      52: goto          24
      55: iload_1
      56: ireturn
      57: aload_0
      58: getfield      #1                  // Field map:Ljava/util/Map;
      61: dup
      62: astore_1
      63: monitorenter
      64: iconst_0
      65: istore_2
      66: aload_0
      67: getfield      #1                  // Field map:Ljava/util/Map;
      70: invokeinterface #19,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      75: invokeinterface #20,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      80: astore_3
      81: aload_3
      82: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      87: ifeq          114
      90: aload_3
      91: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      96: checkcast     #23                 // class java/util/Map$Entry
      99: astore        4
     101: iload_2
     102: aload         4
     104: invokeinterface #27,  1           // InterfaceMethod java/util/Map$Entry.hashCode:()I
     109: iadd
     110: istore_2
     111: goto          81
     114: iload_2
     115: aload_1
     116: monitorexit
     117: ireturn
     118: astore        5
     120: aload_1
     121: monitorexit
     122: aload         5
     124: athrow
    Exception table:
       from    to  target type
          64   117   118   any
         118   122   118   any

  public java.lang.Object clone();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #2                  // Field fast:Z
       6: ifeq          24
       9: new           #28                 // class org/apache/commons/beanutils/WeakFastHashMap
      12: dup
      13: aload_0
      14: getfield      #1                  // Field map:Ljava/util/Map;
      17: invokespecial #29                 // Method "<init>":(Ljava/util/Map;)V
      20: astore_1
      21: goto          53
      24: aload_0
      25: getfield      #1                  // Field map:Ljava/util/Map;
      28: dup
      29: astore_2
      30: monitorenter
      31: new           #28                 // class org/apache/commons/beanutils/WeakFastHashMap
      34: dup
      35: aload_0
      36: getfield      #1                  // Field map:Ljava/util/Map;
      39: invokespecial #29                 // Method "<init>":(Ljava/util/Map;)V
      42: astore_1
      43: aload_2
      44: monitorexit
      45: goto          53
      48: astore_3
      49: aload_2
      50: monitorexit
      51: aload_3
      52: athrow
      53: aload_1
      54: aload_0
      55: invokevirtual #30                 // Method getFast:()Z
      58: invokevirtual #31                 // Method setFast:(Z)V
      61: aload_1
      62: areturn
    Exception table:
       from    to  target type
          31    45    48   any
          48    51    48   any

  public java.util.Set<java.util.Map$Entry<K, V>> entrySet();
    Code:
       0: new           #32                 // class org/apache/commons/beanutils/WeakFastHashMap$EntrySet
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #33                 // Method org/apache/commons/beanutils/WeakFastHashMap$EntrySet."<init>":(Lorg/apache/commons/beanutils/WeakFastHashMap;Lorg/apache/commons/beanutils/WeakFastHashMap$1;)V
       9: areturn

  public java.util.Set<K> keySet();
    Code:
       0: new           #34                 // class org/apache/commons/beanutils/WeakFastHashMap$KeySet
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #35                 // Method org/apache/commons/beanutils/WeakFastHashMap$KeySet."<init>":(Lorg/apache/commons/beanutils/WeakFastHashMap;Lorg/apache/commons/beanutils/WeakFastHashMap$1;)V
       9: areturn

  public java.util.Collection<V> values();
    Code:
       0: new           #36                 // class org/apache/commons/beanutils/WeakFastHashMap$Values
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #37                 // Method org/apache/commons/beanutils/WeakFastHashMap$Values."<init>":(Lorg/apache/commons/beanutils/WeakFastHashMap;Lorg/apache/commons/beanutils/WeakFastHashMap$1;)V
       9: areturn

  protected java.util.Map<K, V> createMap();
    Code:
       0: new           #38                 // class java/util/WeakHashMap
       3: dup
       4: invokespecial #39                 // Method java/util/WeakHashMap."<init>":()V
       7: areturn

  protected java.util.Map<K, V> createMap(int);
    Code:
       0: new           #38                 // class java/util/WeakHashMap
       3: dup
       4: iload_1
       5: invokespecial #40                 // Method java/util/WeakHashMap."<init>":(I)V
       8: areturn

  protected java.util.Map<K, V> createMap(int, float);
    Code:
       0: new           #38                 // class java/util/WeakHashMap
       3: dup
       4: iload_1
       5: fload_2
       6: invokespecial #41                 // Method java/util/WeakHashMap."<init>":(IF)V
       9: areturn

  protected java.util.Map<K, V> createMap(java.util.Map<? extends K, ? extends V>);
    Code:
       0: new           #38                 // class java/util/WeakHashMap
       3: dup
       4: aload_1
       5: invokespecial #42                 // Method java/util/WeakHashMap."<init>":(Ljava/util/Map;)V
       8: areturn

  protected java.util.Map<K, V> cloneMap(java.util.Map<? extends K, ? extends V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method createMap:(Ljava/util/Map;)Ljava/util/Map;
       5: areturn

  static boolean access$300(org.apache.commons.beanutils.WeakFastHashMap);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fast:Z
       4: ireturn

  static java.util.Map access$402(org.apache.commons.beanutils.WeakFastHashMap, java.util.Map);
    Code:
       0: aload_0
       1: aload_1
       2: dup_x1
       3: putfield      #1                  // Field map:Ljava/util/Map;
       6: areturn

  static java.util.Map access$400(org.apache.commons.beanutils.WeakFastHashMap);
    Code:
       0: aload_0
       1: getfield      #1                  // Field map:Ljava/util/Map;
       4: areturn
}
