Compiled from "Credential.java"
public class org.apache.kerby.kerberos.kerb.ccache.Credential {
  private static final java.lang.String CONF_REALM;

  private org.apache.kerby.kerberos.kerb.type.base.PrincipalName clientName;

  private java.lang.String clientRealm;

  private org.apache.kerby.kerberos.kerb.type.base.PrincipalName serverName;

  private java.lang.String serverRealm;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionKey key;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime authTime;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime startTime;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime endTime;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime renewTill;

  private org.apache.kerby.kerberos.kerb.type.base.HostAddresses clientAddresses;

  private org.apache.kerby.kerberos.kerb.type.ad.AuthorizationData authzData;

  private boolean isEncInSKey;

  private org.apache.kerby.kerberos.kerb.type.ticket.TicketFlags ticketFlags;

  private org.apache.kerby.kerberos.kerb.type.ticket.Ticket ticket;

  private org.apache.kerby.kerberos.kerb.type.ticket.Ticket secondTicket;

  public org.apache.kerby.kerberos.kerb.ccache.Credential();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.apache.kerby.kerberos.kerb.ccache.Credential(org.apache.kerby.kerberos.kerb.type.ticket.TgtTicket);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: invokevirtual #2                  // Method org/apache/kerby/kerberos/kerb/type/ticket/TgtTicket.getClientPrincipal:()Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       8: astore_2
       9: aload_2
      10: aload_1
      11: invokevirtual #3                  // Method org/apache/kerby/kerberos/kerb/type/ticket/TgtTicket.getRealm:()Ljava/lang/String;
      14: invokevirtual #4                  // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.setRealm:(Ljava/lang/String;)V
      17: aload_0
      18: aload_1
      19: aload_2
      20: invokespecial #5                  // Method init:(Lorg/apache/kerby/kerberos/kerb/type/ticket/KrbTicket;Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;)V
      23: return

  public org.apache.kerby.kerberos.kerb.ccache.Credential(org.apache.kerby.kerberos.kerb.type.ticket.KrbTicket, org.apache.kerby.kerberos.kerb.type.base.PrincipalName);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokespecial #5                  // Method init:(Lorg/apache/kerby/kerberos/kerb/type/ticket/KrbTicket;Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;)V
      10: return

  private void init(org.apache.kerby.kerberos.kerb.type.ticket.KrbTicket, org.apache.kerby.kerberos.kerb.type.base.PrincipalName);
    Code:
       0: aload_1
       1: invokevirtual #6                  // Method org/apache/kerby/kerberos/kerb/type/ticket/KrbTicket.getEncKdcRepPart:()Lorg/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart;
       4: astore_3
       5: aload_0
       6: aload_3
       7: invokevirtual #7                  // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getSname:()Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      10: putfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      13: aload_0
      14: aload_3
      15: invokevirtual #9                  // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getSrealm:()Ljava/lang/String;
      18: putfield      #10                 // Field serverRealm:Ljava/lang/String;
      21: aload_0
      22: getfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      25: aload_0
      26: getfield      #10                 // Field serverRealm:Ljava/lang/String;
      29: invokevirtual #4                  // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.setRealm:(Ljava/lang/String;)V
      32: aload_0
      33: aload_2
      34: putfield      #11                 // Field clientName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      37: aload_0
      38: aload_3
      39: invokevirtual #12                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getKey:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      42: putfield      #13                 // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      45: aload_0
      46: aload_3
      47: invokevirtual #14                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getAuthTime:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      50: putfield      #15                 // Field authTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      53: aload_0
      54: aload_3
      55: invokevirtual #16                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getStartTime:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      58: putfield      #17                 // Field startTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      61: aload_0
      62: aload_3
      63: invokevirtual #18                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getEndTime:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      66: putfield      #19                 // Field endTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      69: aload_0
      70: aload_3
      71: invokevirtual #20                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getRenewTill:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      74: putfield      #21                 // Field renewTill:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      77: aload_0
      78: aload_3
      79: invokevirtual #22                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getFlags:()Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;
      82: putfield      #23                 // Field ticketFlags:Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;
      85: aload_0
      86: aload_3
      87: invokevirtual #24                 // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getCaddr:()Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
      90: putfield      #25                 // Field clientAddresses:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
      93: aload_0
      94: aload_1
      95: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/type/ticket/KrbTicket.getTicket:()Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
      98: putfield      #27                 // Field ticket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     101: aload_0
     102: aload_3
     103: invokevirtual #9                  // Method org/apache/kerby/kerberos/kerb/type/kdc/EncKdcRepPart.getSrealm:()Ljava/lang/String;
     106: putfield      #28                 // Field clientRealm:Ljava/lang/String;
     109: aload_0
     110: iconst_0
     111: putfield      #29                 // Field isEncInSKey:Z
     114: aload_0
     115: aconst_null
     116: putfield      #30                 // Field secondTicket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     119: return

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName getServicePrincipal();
    Code:
       0: aload_0
       1: getfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getAuthTime();
    Code:
       0: aload_0
       1: getfield      #15                 // Field authTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getEndTime();
    Code:
       0: aload_0
       1: getfield      #19                 // Field endTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  public int getEType();
    Code:
       0: aload_0
       1: getfield      #13                 // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: invokevirtual #31                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.getKeyType:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       7: invokevirtual #32                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionType.getValue:()I
      10: ireturn

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName getClientName();
    Code:
       0: aload_0
       1: getfield      #11                 // Field clientName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName getServerName();
    Code:
       0: aload_0
       1: getfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: areturn

  public java.lang.String getClientRealm();
    Code:
       0: aload_0
       1: getfield      #28                 // Field clientRealm:Ljava/lang/String;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getKey();
    Code:
       0: aload_0
       1: getfield      #13                 // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getStartTime();
    Code:
       0: aload_0
       1: getfield      #17                 // Field startTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getRenewTill();
    Code:
       0: aload_0
       1: getfield      #21                 // Field renewTill:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.base.HostAddresses getClientAddresses();
    Code:
       0: aload_0
       1: getfield      #25                 // Field clientAddresses:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.ad.AuthorizationData getAuthzData();
    Code:
       0: aload_0
       1: getfield      #33                 // Field authzData:Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationData;
       4: areturn

  public boolean isEncInSKey();
    Code:
       0: aload_0
       1: getfield      #29                 // Field isEncInSKey:Z
       4: ireturn

  public org.apache.kerby.kerberos.kerb.type.ticket.TicketFlags getTicketFlags();
    Code:
       0: aload_0
       1: getfield      #23                 // Field ticketFlags:Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.ticket.Ticket getTicket();
    Code:
       0: aload_0
       1: getfield      #27                 // Field ticket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.ticket.Ticket getSecondTicket();
    Code:
       0: aload_0
       1: getfield      #30                 // Field secondTicket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
       4: areturn

  public void load(org.apache.kerby.kerberos.kerb.ccache.CredCacheInputStream, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokevirtual #34                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readPrincipal:(I)Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       6: putfield      #11                 // Field clientName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       9: aload_0
      10: getfield      #11                 // Field clientName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      13: ifnonnull     26
      16: new           #35                 // class java/io/IOException
      19: dup
      20: ldc           #36                 // String Invalid client principal name
      22: invokespecial #37                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: aload_1
      28: iload_2
      29: invokevirtual #34                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readPrincipal:(I)Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      32: putfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      35: aload_0
      36: getfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      39: ifnonnull     52
      42: new           #35                 // class java/io/IOException
      45: dup
      46: ldc           #38                 // String Invalid server principal name
      48: invokespecial #37                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: iconst_0
      53: istore_3
      54: aload_0
      55: getfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      58: invokevirtual #39                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.getRealm:()Ljava/lang/String;
      61: ldc           #40                 // String X-CACHECONF:
      63: invokevirtual #41                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      66: ifeq          71
      69: iconst_1
      70: istore_3
      71: aload_0
      72: aload_1
      73: iload_2
      74: invokevirtual #42                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readKey:(I)Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      77: putfield      #13                 // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      80: aload_1
      81: invokevirtual #43                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readTimes:()[Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      84: astore        4
      86: aload_0
      87: aload         4
      89: iconst_0
      90: aaload
      91: putfield      #15                 // Field authTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      94: aload_0
      95: aload         4
      97: iconst_1
      98: aaload
      99: putfield      #17                 // Field startTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
     102: aload_0
     103: aload         4
     105: iconst_2
     106: aaload
     107: putfield      #19                 // Field endTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
     110: aload_0
     111: aload         4
     113: iconst_3
     114: aaload
     115: putfield      #21                 // Field renewTill:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
     118: aload_0
     119: aload_1
     120: invokevirtual #44                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readIsSkey:()Z
     123: putfield      #29                 // Field isEncInSKey:Z
     126: aload_0
     127: aload_1
     128: invokevirtual #45                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readTicketFlags:()Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;
     131: putfield      #23                 // Field ticketFlags:Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;
     134: aload_0
     135: aload_1
     136: invokevirtual #46                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readAddr:()Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
     139: putfield      #25                 // Field clientAddresses:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
     142: aload_0
     143: aload_1
     144: invokevirtual #47                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readAuthzData:()Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationData;
     147: putfield      #33                 // Field authzData:Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationData;
     150: iload_3
     151: ifeq          163
     154: aload_1
     155: invokevirtual #48                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readCountedOctets:()[B
     158: astore        5
     160: goto          171
     163: aload_0
     164: aload_1
     165: invokevirtual #49                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readTicket:()Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     168: putfield      #27                 // Field ticket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     171: aload_0
     172: aload_1
     173: invokevirtual #49                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheInputStream.readTicket:()Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     176: putfield      #30                 // Field secondTicket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     179: return

  public void store(org.apache.kerby.kerberos.kerb.ccache.CredCacheOutputStream, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #11                 // Field clientName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       5: iload_2
       6: invokevirtual #50                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writePrincipal:(Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;I)V
       9: aload_1
      10: aload_0
      11: getfield      #8                  // Field serverName:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      14: iload_2
      15: invokevirtual #50                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writePrincipal:(Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;I)V
      18: aload_1
      19: aload_0
      20: getfield      #13                 // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      23: iload_2
      24: invokevirtual #51                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeKey:(Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;I)V
      27: aload_1
      28: iconst_4
      29: anewarray     #52                 // class org/apache/kerby/kerberos/kerb/type/KerberosTime
      32: dup
      33: iconst_0
      34: aload_0
      35: getfield      #15                 // Field authTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      38: aastore
      39: dup
      40: iconst_1
      41: aload_0
      42: getfield      #17                 // Field startTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      45: aastore
      46: dup
      47: iconst_2
      48: aload_0
      49: getfield      #19                 // Field endTime:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      52: aastore
      53: dup
      54: iconst_3
      55: aload_0
      56: getfield      #21                 // Field renewTill:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      59: aastore
      60: invokevirtual #53                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeTimes:([Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)V
      63: aload_1
      64: aload_0
      65: getfield      #29                 // Field isEncInSKey:Z
      68: invokevirtual #54                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeIsSkey:(Z)V
      71: aload_1
      72: aload_0
      73: getfield      #23                 // Field ticketFlags:Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;
      76: invokevirtual #55                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeTicketFlags:(Lorg/apache/kerby/kerberos/kerb/type/ticket/TicketFlags;)V
      79: aload_1
      80: aload_0
      81: getfield      #25                 // Field clientAddresses:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
      84: invokevirtual #56                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeAddresses:(Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;)V
      87: aload_1
      88: aload_0
      89: getfield      #33                 // Field authzData:Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationData;
      92: invokevirtual #57                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeAuthzData:(Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationData;)V
      95: aload_1
      96: aload_0
      97: getfield      #27                 // Field ticket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     100: invokevirtual #58                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeTicket:(Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;)V
     103: aload_1
     104: aload_0
     105: getfield      #30                 // Field secondTicket:Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;
     108: invokevirtual #58                 // Method org/apache/kerby/kerberos/kerb/ccache/CredCacheOutputStream.writeTicket:(Lorg/apache/kerby/kerberos/kerb/type/ticket/Ticket;)V
     111: return
}
