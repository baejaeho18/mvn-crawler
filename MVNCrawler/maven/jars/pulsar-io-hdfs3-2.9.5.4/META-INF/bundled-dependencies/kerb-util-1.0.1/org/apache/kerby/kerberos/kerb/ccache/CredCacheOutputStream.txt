Compiled from "CredCacheOutputStream.java"
public class org.apache.kerby.kerberos.kerb.ccache.CredCacheOutputStream extends org.apache.kerby.kerberos.kerb.KrbOutputStream {
  public org.apache.kerby.kerberos.kerb.ccache.CredCacheOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method org/apache/kerby/kerberos/kerb/KrbOutputStream."<init>":(Ljava/io/OutputStream;)V
       5: return

  public void writePrincipal(org.apache.kerby.kerberos.kerb.type.base.PrincipalName, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.getNameStrings:()Ljava/util/List;
       4: astore_3
       5: iload_2
       6: sipush        1281
       9: if_icmpeq     23
      12: aload_0
      13: aload_1
      14: invokevirtual #3                  // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.getNameType:()Lorg/apache/kerby/kerberos/kerb/type/base/NameType;
      17: invokevirtual #4                  // Method org/apache/kerby/kerberos/kerb/type/base/NameType.getValue:()I
      20: invokevirtual #5                  // Method writeInt:(I)V
      23: aload_3
      24: invokeinterface #6,  1            // InterfaceMethod java/util/List.size:()I
      29: istore        4
      31: iload_2
      32: sipush        1281
      35: if_icmpne     41
      38: iinc          4, 1
      41: aload_0
      42: iload         4
      44: invokevirtual #5                  // Method writeInt:(I)V
      47: aload_0
      48: aload_1
      49: invokevirtual #7                  // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.getRealm:()Ljava/lang/String;
      52: invokevirtual #8                  // Method writeRealm:(Ljava/lang/String;)V
      55: aload_3
      56: invokeinterface #9,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      61: astore        5
      63: aload         5
      65: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      70: ifeq          94
      73: aload         5
      75: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      80: checkcast     #12                 // class java/lang/String
      83: astore        6
      85: aload_0
      86: aload         6
      88: invokevirtual #13                 // Method writeCountedString:(Ljava/lang/String;)V
      91: goto          63
      94: return

  public void writeKey(org.apache.kerby.kerberos.kerb.type.base.EncryptionKey, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #14                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.getKeyType:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       5: invokevirtual #15                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionType.getValue:()I
       8: invokevirtual #16                 // Method writeShort:(I)V
      11: iload_2
      12: sipush        1283
      15: if_icmpne     29
      18: aload_0
      19: aload_1
      20: invokevirtual #14                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.getKeyType:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
      23: invokevirtual #15                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionType.getValue:()I
      26: invokevirtual #16                 // Method writeShort:(I)V
      29: aload_0
      30: aload_1
      31: invokevirtual #17                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.getKeyData:()[B
      34: invokevirtual #18                 // Method writeCountedOctets:([B)V
      37: return

  public void writeTimes(org.apache.kerby.kerberos.kerb.type.KerberosTime[]) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: aload_1
       4: arraylength
       5: if_icmpge     21
       8: aload_0
       9: aload_1
      10: iload_2
      11: aaload
      12: invokevirtual #19                 // Method writeTime:(Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)V
      15: iinc          2, 1
      18: goto          2
      21: return

  public void writeAddresses(org.apache.kerby.kerberos.kerb.type.base.HostAddresses) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: iconst_0
       6: invokevirtual #5                  // Method writeInt:(I)V
       9: goto          63
      12: aload_1
      13: invokevirtual #20                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddresses.getElements:()Ljava/util/List;
      16: astore_2
      17: aload_0
      18: aload_2
      19: invokeinterface #6,  1            // InterfaceMethod java/util/List.size:()I
      24: invokevirtual #5                  // Method writeInt:(I)V
      27: aload_2
      28: invokeinterface #9,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      33: astore_3
      34: aload_3
      35: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          63
      43: aload_3
      44: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      49: checkcast     #21                 // class org/apache/kerby/kerberos/kerb/type/base/HostAddress
      52: astore        4
      54: aload_0
      55: aload         4
      57: invokevirtual #22                 // Method writeAddress:(Lorg/apache/kerby/kerberos/kerb/type/base/HostAddress;)V
      60: goto          34
      63: return

  public void writeAddress(org.apache.kerby.kerberos.kerb.type.base.HostAddress) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddress.getAddrType:()Lorg/apache/kerby/kerberos/kerb/type/base/HostAddrType;
       5: invokevirtual #24                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddrType.getValue:()I
       8: invokevirtual #25                 // Method write:(I)V
      11: aload_0
      12: aload_1
      13: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddress.getAddress:()[B
      16: arraylength
      17: invokevirtual #25                 // Method write:(I)V
      20: aload_0
      21: aload_1
      22: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddress.getAddress:()[B
      25: iconst_0
      26: aload_1
      27: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddress.getAddress:()[B
      30: arraylength
      31: invokevirtual #27                 // Method write:([BII)V
      34: return

  public void writeAuthzData(org.apache.kerby.kerberos.kerb.type.ad.AuthorizationData) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: iconst_0
       6: invokevirtual #5                  // Method writeInt:(I)V
       9: goto          72
      12: aload_1
      13: invokevirtual #28                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationData.getElements:()Ljava/util/List;
      16: invokeinterface #9,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore_2
      22: aload_2
      23: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      28: ifeq          72
      31: aload_2
      32: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      37: checkcast     #29                 // class org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry
      40: astore_3
      41: aload_0
      42: aload_3
      43: invokevirtual #30                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry.getAuthzType:()Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationType;
      46: invokevirtual #31                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationType.getValue:()I
      49: invokevirtual #25                 // Method write:(I)V
      52: aload_0
      53: aload_3
      54: invokevirtual #32                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry.getAuthzData:()[B
      57: arraylength
      58: invokevirtual #25                 // Method write:(I)V
      61: aload_0
      62: aload_3
      63: invokevirtual #32                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry.getAuthzData:()[B
      66: invokevirtual #33                 // Method write:([B)V
      69: goto          22
      72: return

  public void writeTicket(org.apache.kerby.kerberos.kerb.type.ticket.Ticket) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     12
       4: aload_0
       5: iconst_0
       6: invokevirtual #5                  // Method writeInt:(I)V
       9: goto          28
      12: aload_1
      13: invokevirtual #34                 // Method org/apache/kerby/kerberos/kerb/type/ticket/Ticket.encode:()[B
      16: astore_2
      17: aload_0
      18: aload_2
      19: arraylength
      20: invokevirtual #5                  // Method writeInt:(I)V
      23: aload_0
      24: aload_2
      25: invokevirtual #33                 // Method write:([B)V
      28: return

  public void writeIsSkey(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: ifeq          9
       5: iconst_1
       6: goto          10
       9: iconst_0
      10: invokevirtual #35                 // Method writeByte:(I)V
      13: return

  public void writeTicketFlags(org.apache.kerby.kerberos.kerb.type.ticket.TicketFlags) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #36                 // Method org/apache/kerby/kerberos/kerb/type/ticket/TicketFlags.getFlags:()I
       5: invokevirtual #5                  // Method writeInt:(I)V
       8: return
}
