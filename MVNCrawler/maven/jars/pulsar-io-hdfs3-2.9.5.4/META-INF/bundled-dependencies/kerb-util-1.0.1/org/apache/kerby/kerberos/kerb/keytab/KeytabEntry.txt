Compiled from "KeytabEntry.java"
public class org.apache.kerby.kerberos.kerb.keytab.KeytabEntry {
  private org.apache.kerby.kerberos.kerb.type.base.PrincipalName principal;

  private org.apache.kerby.kerberos.kerb.type.KerberosTime timestamp;

  private int kvno;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionKey key;

  public org.apache.kerby.kerberos.kerb.keytab.KeytabEntry(org.apache.kerby.kerberos.kerb.type.base.PrincipalName, org.apache.kerby.kerberos.kerb.type.KerberosTime, int, org.apache.kerby.kerberos.kerb.type.base.EncryptionKey);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       9: aload_0
      10: aload_2
      11: putfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field kvno:I
      19: aload_0
      20: aload         4
      22: putfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      25: return

  public org.apache.kerby.kerberos.kerb.keytab.KeytabEntry();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  void load(org.apache.kerby.kerberos.kerb.keytab.KeytabInputStream, int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #6                  // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.available:()I
       4: istore        4
       6: aload_0
       7: aload_1
       8: iload_2
       9: invokevirtual #7                  // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.readPrincipal:(I)Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      12: putfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      15: aload_0
      16: aload_1
      17: invokevirtual #8                  // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.readTime:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      20: putfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      23: aload_0
      24: aload_1
      25: invokevirtual #9                  // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.readByte:()B
      28: putfield      #4                  // Field kvno:I
      31: aload_0
      32: aload_1
      33: invokevirtual #10                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.readKey:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      36: putfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      39: iload         4
      41: aload_1
      42: invokevirtual #6                  // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.available:()I
      45: isub
      46: istore        5
      48: iload         5
      50: iconst_4
      51: iadd
      52: iload_3
      53: if_icmpgt     76
      56: aload_1
      57: invokevirtual #11                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabInputStream.readInt:()I
      60: istore        6
      62: iload         6
      64: ifeq          73
      67: aload_0
      68: iload         6
      70: putfield      #4                  // Field kvno:I
      73: goto          114
      76: iload         5
      78: iload_3
      79: if_icmpeq     114
      82: new           #12                 // class java/io/IOException
      85: dup
      86: ldc           #13                 // String Bad input stream with less data read [%d] than expected [%d] for keytab entry.
      88: iconst_2
      89: anewarray     #14                 // class java/lang/Object
      92: dup
      93: iconst_0
      94: iload         5
      96: invokestatic  #15                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      99: aastore
     100: dup
     101: iconst_1
     102: iload_3
     103: invokestatic  #15                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     106: aastore
     107: invokestatic  #16                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     110: invokespecial #17                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     113: athrow
     114: return

  void store(org.apache.kerby.kerberos.kerb.keytab.KeytabOutputStream) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_2
       2: new           #18                 // class java/io/ByteArrayOutputStream
       5: dup
       6: invokespecial #19                 // Method java/io/ByteArrayOutputStream."<init>":()V
       9: astore_3
      10: new           #20                 // class org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream
      13: dup
      14: aload_3
      15: invokespecial #21                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream."<init>":(Ljava/io/OutputStream;)V
      18: astore        4
      20: aload_0
      21: aload         4
      23: iconst_0
      24: invokevirtual #22                 // Method writeBody:(Lorg/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream;I)V
      27: aload         4
      29: invokevirtual #23                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.flush:()V
      32: aload_3
      33: invokevirtual #24                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      36: astore_2
      37: aload_1
      38: aload_2
      39: arraylength
      40: invokevirtual #25                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.writeInt:(I)V
      43: aload_1
      44: aload_2
      45: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.write:([B)V
      48: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getKey();
    Code:
       0: aload_0
       1: getfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: areturn

  public int getKvno();
    Code:
       0: aload_0
       1: getfield      #4                  // Field kvno:I
       4: ireturn

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName getPrincipal();
    Code:
       0: aload_0
       1: getfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getTimestamp();
    Code:
       0: aload_0
       1: getfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       4: areturn

  void writeBody(org.apache.kerby.kerberos.kerb.keytab.KeytabOutputStream, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       5: iload_2
       6: invokevirtual #27                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.writePrincipal:(Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;I)V
       9: aload_1
      10: aload_0
      11: getfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      14: invokevirtual #28                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.writeTime:(Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)V
      17: aload_1
      18: aload_0
      19: getfield      #4                  // Field kvno:I
      22: invokevirtual #29                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.writeByte:(I)V
      25: aload_1
      26: aload_0
      27: getfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      30: iload_2
      31: invokevirtual #30                 // Method org/apache/kerby/kerberos/kerb/keytab/KeytabOutputStream.writeKey:(Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;I)V
      34: return

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: ifnull        22
      11: aload_0
      12: invokevirtual #31                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: aload_1
      16: invokevirtual #31                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      19: if_acmpeq     24
      22: iconst_0
      23: ireturn
      24: aload_1
      25: checkcast     #32                 // class org/apache/kerby/kerberos/kerb/keytab/KeytabEntry
      28: astore_2
      29: aload_0
      30: getfield      #4                  // Field kvno:I
      33: aload_2
      34: getfield      #4                  // Field kvno:I
      37: if_icmpeq     42
      40: iconst_0
      41: ireturn
      42: aload_0
      43: getfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      46: aload_2
      47: getfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      50: invokevirtual #33                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.equals:(Ljava/lang/Object;)Z
      53: ifne          58
      56: iconst_0
      57: ireturn
      58: aload_0
      59: getfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      62: aload_2
      63: getfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      66: invokevirtual #34                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.equals:(Ljava/lang/Object;)Z
      69: ifne          74
      72: iconst_0
      73: ireturn
      74: aload_0
      75: getfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      78: aload_2
      79: getfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      82: invokevirtual #35                 // Method org/apache/kerby/kerberos/kerb/type/KerberosTime.equals:(Ljava/lang/Object;)Z
      85: ifne          90
      88: iconst_0
      89: ireturn
      90: iconst_1
      91: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #2                  // Field principal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: invokevirtual #36                 // Method org/apache/kerby/kerberos/kerb/type/base/PrincipalName.hashCode:()I
       7: istore_1
       8: bipush        31
      10: iload_1
      11: imul
      12: aload_0
      13: getfield      #3                  // Field timestamp:Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
      16: invokevirtual #37                 // Method org/apache/kerby/kerberos/kerb/type/KerberosTime.hashCode:()I
      19: iadd
      20: istore_1
      21: bipush        31
      23: iload_1
      24: imul
      25: aload_0
      26: getfield      #4                  // Field kvno:I
      29: iadd
      30: istore_1
      31: bipush        31
      33: iload_1
      34: imul
      35: aload_0
      36: getfield      #5                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
      39: invokevirtual #38                 // Method org/apache/kerby/kerberos/kerb/type/base/EncryptionKey.hashCode:()I
      42: iadd
      43: istore_1
      44: iload_1
      45: ireturn
}
