Compiled from "AbstractCounterGroup.java"
public abstract class org.apache.hadoop.mapreduce.counters.AbstractCounterGroup<T extends org.apache.hadoop.mapreduce.Counter> implements org.apache.hadoop.mapreduce.counters.CounterGroupBase<T> {
  private final java.lang.String name;

  private java.lang.String displayName;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, T> counters;

  private final org.apache.hadoop.mapreduce.counters.Limits limits;

  public org.apache.hadoop.mapreduce.counters.AbstractCounterGroup(java.lang.String, java.lang.String, org.apache.hadoop.mapreduce.counters.Limits);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentSkipListMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentSkipListMap."<init>":()V
      12: putfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
      15: aload_0
      16: aload_1
      17: putfield      #5                  // Field name:Ljava/lang/String;
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field displayName:Ljava/lang/String;
      25: aload_0
      26: aload_3
      27: putfield      #7                  // Field limits:Lorg/apache/hadoop/mapreduce/counters/Limits;
      30: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #5                  // Field name:Ljava/lang/String;
       4: areturn

  public synchronized java.lang.String getDisplayName();
    Code:
       0: aload_0
       1: getfield      #6                  // Field displayName:Ljava/lang/String;
       4: areturn

  public synchronized void setDisplayName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field displayName:Ljava/lang/String;
       5: return

  public synchronized void addCounter(T);
    Code:
       0: aload_0
       1: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #8,  1            // InterfaceMethod org/apache/hadoop/mapreduce/Counter.getName:()Ljava/lang/String;
      10: aload_1
      11: invokeinterface #9,  3            // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: getfield      #7                  // Field limits:Lorg/apache/hadoop/mapreduce/counters/Limits;
      21: invokevirtual #10                 // Method org/apache/hadoop/mapreduce/counters/Limits.incrCounters:()V
      24: return

  public synchronized T addCounter(java.lang.String, java.lang.String, long);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method org/apache/hadoop/mapreduce/counters/Limits.filterCounterName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore        5
       6: aload_0
       7: aload         5
       9: iconst_0
      10: invokespecial #12                 // Method findCounterImpl:(Ljava/lang/String;Z)Lorg/apache/hadoop/mapreduce/Counter;
      13: astore        6
      15: aload         6
      17: ifnonnull     29
      20: aload_0
      21: aload         5
      23: aload_2
      24: lload_3
      25: invokespecial #13                 // Method addCounterImpl:(Ljava/lang/String;Ljava/lang/String;J)Lorg/apache/hadoop/mapreduce/Counter;
      28: areturn
      29: aload         6
      31: lload_3
      32: invokeinterface #14,  3           // InterfaceMethod org/apache/hadoop/mapreduce/Counter.setValue:(J)V
      37: aload         6
      39: areturn

  private T addCounterImpl(java.lang.String, java.lang.String, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: lload_3
       4: invokevirtual #15                 // Method newCounter:(Ljava/lang/String;Ljava/lang/String;J)Lorg/apache/hadoop/mapreduce/Counter;
       7: astore        5
       9: aload_0
      10: aload         5
      12: invokevirtual #16                 // Method addCounter:(Lorg/apache/hadoop/mapreduce/Counter;)V
      15: aload         5
      17: areturn

  public synchronized T findCounter(java.lang.String, java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #11                 // Method org/apache/hadoop/mapreduce/counters/Limits.filterCounterName:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_3
       5: aload_0
       6: aload_3
       7: iconst_0
       8: invokespecial #12                 // Method findCounterImpl:(Ljava/lang/String;Z)Lorg/apache/hadoop/mapreduce/Counter;
      11: astore        4
      13: aload         4
      15: ifnonnull     26
      18: aload_0
      19: aload_3
      20: aload_2
      21: lconst_0
      22: invokespecial #13                 // Method addCounterImpl:(Ljava/lang/String;Ljava/lang/String;J)Lorg/apache/hadoop/mapreduce/Counter;
      25: areturn
      26: aload         4
      28: areturn

  public T findCounter(java.lang.String, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #11                 // Method org/apache/hadoop/mapreduce/counters/Limits.filterCounterName:(Ljava/lang/String;)Ljava/lang/String;
       5: iload_2
       6: invokespecial #12                 // Method findCounterImpl:(Ljava/lang/String;Z)Lorg/apache/hadoop/mapreduce/Counter;
       9: areturn

  private synchronized T findCounterImpl(java.lang.String, boolean);
    Code:
       0: aload_0
       1: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
       4: aload_1
       5: invokeinterface #17,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #18                 // class org/apache/hadoop/mapreduce/Counter
      13: astore_3
      14: aload_3
      15: ifnonnull     42
      18: iload_2
      19: ifeq          42
      22: aload_0
      23: invokevirtual #19                 // Method getName:()Ljava/lang/String;
      26: aload_1
      27: aload_1
      28: invokestatic  #20                 // Method org/apache/hadoop/mapreduce/util/ResourceBundles.getCounterName:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      31: astore        4
      33: aload_0
      34: aload_1
      35: aload         4
      37: lconst_0
      38: invokespecial #13                 // Method addCounterImpl:(Ljava/lang/String;Ljava/lang/String;J)Lorg/apache/hadoop/mapreduce/Counter;
      41: areturn
      42: aload_3
      43: areturn

  public T findCounter(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_1
       3: invokevirtual #21                 // Method findCounter:(Ljava/lang/String;Z)Lorg/apache/hadoop/mapreduce/Counter;
       6: areturn

  protected abstract T newCounter(java.lang.String, java.lang.String, long);

  protected abstract T newCounter();

  public java.util.Iterator<T> iterator();
    Code:
       0: aload_0
       1: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
       9: invokeinterface #23,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      14: areturn

  public synchronized void write(java.io.DataOutput) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #6                  // Field displayName:Ljava/lang/String;
       5: invokestatic  #24                 // Method org/apache/hadoop/io/Text.writeString:(Ljava/io/DataOutput;Ljava/lang/String;)I
       8: pop
       9: aload_1
      10: aload_0
      11: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
      14: invokeinterface #25,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
      19: invokestatic  #26                 // Method org/apache/hadoop/io/WritableUtils.writeVInt:(Ljava/io/DataOutput;I)V
      22: aload_0
      23: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
      26: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.values:()Ljava/util/Collection;
      31: invokeinterface #23,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      36: astore_2
      37: aload_2
      38: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      43: ifeq          66
      46: aload_2
      47: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      52: checkcast     #18                 // class org/apache/hadoop/mapreduce/Counter
      55: astore_3
      56: aload_3
      57: aload_1
      58: invokeinterface #29,  2           // InterfaceMethod org/apache/hadoop/mapreduce/Counter.write:(Ljava/io/DataOutput;)V
      63: goto          37
      66: return

  public synchronized void readFields(java.io.DataInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #30                 // Method org/apache/hadoop/io/Text.readString:(Ljava/io/DataInput;)Ljava/lang/String;
       5: invokestatic  #31                 // Method org/apache/hadoop/util/StringInterner.weakIntern:(Ljava/lang/String;)Ljava/lang/String;
       8: putfield      #6                  // Field displayName:Ljava/lang/String;
      11: aload_0
      12: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
      15: invokeinterface #32,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      20: aload_1
      21: invokestatic  #33                 // Method org/apache/hadoop/io/WritableUtils.readVInt:(Ljava/io/DataInput;)I
      24: istore_2
      25: iconst_0
      26: istore_3
      27: iload_3
      28: iload_2
      29: if_icmpge     78
      32: aload_0
      33: invokevirtual #34                 // Method newCounter:()Lorg/apache/hadoop/mapreduce/Counter;
      36: astore        4
      38: aload         4
      40: aload_1
      41: invokeinterface #35,  2           // InterfaceMethod org/apache/hadoop/mapreduce/Counter.readFields:(Ljava/io/DataInput;)V
      46: aload_0
      47: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
      50: aload         4
      52: invokeinterface #8,  1            // InterfaceMethod org/apache/hadoop/mapreduce/Counter.getName:()Ljava/lang/String;
      57: aload         4
      59: invokeinterface #9,  3            // InterfaceMethod java/util/concurrent/ConcurrentMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      64: pop
      65: aload_0
      66: getfield      #7                  // Field limits:Lorg/apache/hadoop/mapreduce/counters/Limits;
      69: invokevirtual #10                 // Method org/apache/hadoop/mapreduce/counters/Limits.incrCounters:()V
      72: iinc          3, 1
      75: goto          27
      78: return

  public synchronized int size();
    Code:
       0: aload_0
       1: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
       4: invokeinterface #25,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.size:()I
       9: ireturn

  public synchronized boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #36                 // class org/apache/hadoop/mapreduce/counters/CounterGroupBase
       4: ifeq          26
       7: aload_1
       8: checkcast     #36                 // class org/apache/hadoop/mapreduce/counters/CounterGroupBase
      11: astore_2
      12: aload_0
      13: invokevirtual #37                 // Method iterator:()Ljava/util/Iterator;
      16: aload_2
      17: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/mapreduce/counters/CounterGroupBase.iterator:()Ljava/util/Iterator;
      22: invokestatic  #39                 // Method com/google/common/collect/Iterators.elementsEqual:(Ljava/util/Iterator;Ljava/util/Iterator;)Z
      25: ireturn
      26: iconst_0
      27: ireturn

  public synchronized int hashCode();
    Code:
       0: aload_0
       1: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
       4: invokevirtual #40                 // Method java/lang/Object.hashCode:()I
       7: ireturn

  public void incrAllCounters(org.apache.hadoop.mapreduce.counters.CounterGroupBase<T>);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/mapreduce/counters/CounterGroupBase.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #27,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          60
      16: aload_2
      17: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #18                 // class org/apache/hadoop/mapreduce/Counter
      25: astore_3
      26: aload_0
      27: aload_3
      28: invokeinterface #8,  1            // InterfaceMethod org/apache/hadoop/mapreduce/Counter.getName:()Ljava/lang/String;
      33: aload_3
      34: invokeinterface #41,  1           // InterfaceMethod org/apache/hadoop/mapreduce/Counter.getDisplayName:()Ljava/lang/String;
      39: invokevirtual #42                 // Method findCounter:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/mapreduce/Counter;
      42: astore        4
      44: aload         4
      46: aload_3
      47: invokeinterface #43,  1           // InterfaceMethod org/apache/hadoop/mapreduce/Counter.getValue:()J
      52: invokeinterface #44,  3           // InterfaceMethod org/apache/hadoop/mapreduce/Counter.increment:(J)V
      57: goto          7
      60: goto          75
      63: astore_2
      64: aload_0
      65: getfield      #4                  // Field counters:Ljava/util/concurrent/ConcurrentMap;
      68: invokeinterface #32,  1           // InterfaceMethod java/util/concurrent/ConcurrentMap.clear:()V
      73: aload_2
      74: athrow
      75: return
    Exception table:
       from    to  target type
           0    60    63   Class org/apache/hadoop/mapreduce/counters/LimitExceededException
}
