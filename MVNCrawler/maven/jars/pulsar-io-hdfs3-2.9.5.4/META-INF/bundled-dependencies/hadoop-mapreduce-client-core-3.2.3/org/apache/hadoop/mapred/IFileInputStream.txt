Compiled from "IFileInputStream.java"
public class org.apache.hadoop.mapred.IFileInputStream extends java.io.InputStream {
  private final java.io.InputStream in;

  private final java.io.FileDescriptor inFd;

  private final long length;

  private final long dataLength;

  private org.apache.hadoop.util.DataChecksum sum;

  private long currentOffset;

  private final byte[] b;

  private byte[] csum;

  private int checksumSize;

  private org.apache.hadoop.io.ReadaheadPool$ReadaheadRequest curReadahead;

  private org.apache.hadoop.io.ReadaheadPool raPool;

  private boolean readahead;

  private int readaheadLength;

  public static final org.slf4j.Logger LOG;

  private boolean disableChecksumValidation;

  public org.apache.hadoop.mapred.IFileInputStream(java.io.InputStream, long, org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #2                  // Field currentOffset:J
       9: aload_0
      10: iconst_1
      11: newarray       byte
      13: putfield      #3                  // Field b:[B
      16: aload_0
      17: aconst_null
      18: putfield      #4                  // Field csum:[B
      21: aload_0
      22: aconst_null
      23: putfield      #5                  // Field curReadahead:Lorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;
      26: aload_0
      27: invokestatic  #6                  // Method org/apache/hadoop/io/ReadaheadPool.getInstance:()Lorg/apache/hadoop/io/ReadaheadPool;
      30: putfield      #7                  // Field raPool:Lorg/apache/hadoop/io/ReadaheadPool;
      33: aload_0
      34: iconst_0
      35: putfield      #8                  // Field disableChecksumValidation:Z
      38: aload_0
      39: aload_1
      40: putfield      #9                  // Field in:Ljava/io/InputStream;
      43: aload_0
      44: aload_1
      45: invokestatic  #10                 // Method getFileDescriptorIfAvail:(Ljava/io/InputStream;)Ljava/io/FileDescriptor;
      48: putfield      #11                 // Field inFd:Ljava/io/FileDescriptor;
      51: aload_0
      52: getstatic     #12                 // Field org/apache/hadoop/util/DataChecksum$Type.CRC32:Lorg/apache/hadoop/util/DataChecksum$Type;
      55: ldc           #14                 // int 2147483647
      57: invokestatic  #15                 // Method org/apache/hadoop/util/DataChecksum.newDataChecksum:(Lorg/apache/hadoop/util/DataChecksum$Type;I)Lorg/apache/hadoop/util/DataChecksum;
      60: putfield      #16                 // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      63: aload_0
      64: aload_0
      65: getfield      #16                 // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      68: invokevirtual #17                 // Method org/apache/hadoop/util/DataChecksum.getChecksumSize:()I
      71: putfield      #18                 // Field checksumSize:I
      74: aload_0
      75: lload_2
      76: putfield      #19                 // Field length:J
      79: aload_0
      80: aload_0
      81: getfield      #19                 // Field length:J
      84: aload_0
      85: getfield      #18                 // Field checksumSize:I
      88: i2l
      89: lsub
      90: putfield      #20                 // Field dataLength:J
      93: aload         4
      95: ifnull        103
      98: aload         4
     100: goto          110
     103: new           #21                 // class org/apache/hadoop/conf/Configuration
     106: dup
     107: invokespecial #22                 // Method org/apache/hadoop/conf/Configuration."<init>":()V
     110: astore        4
     112: aload_0
     113: aload         4
     115: ldc           #24                 // String mapreduce.ifile.readahead
     117: iconst_1
     118: invokevirtual #25                 // Method org/apache/hadoop/conf/Configuration.getBoolean:(Ljava/lang/String;Z)Z
     121: putfield      #26                 // Field readahead:Z
     124: aload_0
     125: aload         4
     127: ldc           #27                 // String mapreduce.ifile.readahead.bytes
     129: ldc           #28                 // int 4194304
     131: invokevirtual #29                 // Method org/apache/hadoop/conf/Configuration.getInt:(Ljava/lang/String;I)I
     134: putfield      #30                 // Field readaheadLength:I
     137: aload_0
     138: invokespecial #31                 // Method doReadahead:()V
     141: return

  private static java.io.FileDescriptor getFileDescriptorIfAvail(java.io.InputStream);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: instanceof    #32                 // class org/apache/hadoop/fs/HasFileDescriptor
       6: ifeq          22
       9: aload_0
      10: checkcast     #32                 // class org/apache/hadoop/fs/HasFileDescriptor
      13: invokeinterface #33,  1           // InterfaceMethod org/apache/hadoop/fs/HasFileDescriptor.getFileDescriptor:()Ljava/io/FileDescriptor;
      18: astore_1
      19: goto          37
      22: aload_0
      23: instanceof    #34                 // class java/io/FileInputStream
      26: ifeq          37
      29: aload_0
      30: checkcast     #34                 // class java/io/FileInputStream
      33: invokevirtual #35                 // Method java/io/FileInputStream.getFD:()Ljava/io/FileDescriptor;
      36: astore_1
      37: goto          52
      40: astore_2
      41: getstatic     #37                 // Field LOG:Lorg/slf4j/Logger;
      44: ldc           #38                 // String Unable to determine FileDescriptor
      46: aload_2
      47: invokeinterface #39,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
      52: aload_1
      53: areturn
    Exception table:
       from    to  target type
           2    37    40   Class java/io/IOException

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field curReadahead:Lorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;
       4: ifnull        16
       7: aload_0
       8: getfield      #5                  // Field curReadahead:Lorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;
      11: invokeinterface #40,  1           // InterfaceMethod org/apache/hadoop/io/ReadaheadPool$ReadaheadRequest.cancel:()V
      16: aload_0
      17: getfield      #2                  // Field currentOffset:J
      20: aload_0
      21: getfield      #20                 // Field dataLength:J
      24: lcmp
      25: ifge          89
      28: ldc2_w        #41                 // long 2147483647l
      31: aload_0
      32: getfield      #20                 // Field dataLength:J
      35: aload_0
      36: getfield      #2                  // Field currentOffset:J
      39: lsub
      40: land
      41: l2i
      42: ldc           #43                 // int 32768
      44: invokestatic  #44                 // Method java/lang/Math.min:(II)I
      47: newarray       byte
      49: astore_1
      50: aload_0
      51: getfield      #2                  // Field currentOffset:J
      54: aload_0
      55: getfield      #20                 // Field dataLength:J
      58: lcmp
      59: ifge          89
      62: aload_0
      63: aload_1
      64: iconst_0
      65: aload_1
      66: arraylength
      67: invokevirtual #45                 // Method read:([BII)I
      70: istore_2
      71: iconst_0
      72: iload_2
      73: if_icmpne     86
      76: new           #46                 // class java/io/EOFException
      79: dup
      80: ldc           #47                 // String Could not validate checksum
      82: invokespecial #48                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      85: athrow
      86: goto          50
      89: aload_0
      90: getfield      #9                  // Field in:Ljava/io/InputStream;
      93: invokevirtual #49                 // Method java/io/InputStream.close:()V
      96: return

  public long skip(long) throws java.io.IOException;
    Code:
       0: new           #36                 // class java/io/IOException
       3: dup
       4: ldc           #50                 // String Skip not supported for IFileInputStream
       6: invokespecial #51                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
       9: athrow

  public long getPosition();
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentOffset:J
       4: aload_0
       5: getfield      #20                 // Field dataLength:J
       8: lcmp
       9: iflt          19
      12: aload_0
      13: getfield      #20                 // Field dataLength:J
      16: goto          23
      19: aload_0
      20: getfield      #2                  // Field currentOffset:J
      23: lreturn

  public long getSize();
    Code:
       0: aload_0
       1: getfield      #18                 // Field checksumSize:I
       4: i2l
       5: lreturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentOffset:J
       4: aload_0
       5: getfield      #20                 // Field dataLength:J
       8: lcmp
       9: iflt          14
      12: iconst_m1
      13: ireturn
      14: aload_0
      15: invokespecial #31                 // Method doReadahead:()V
      18: aload_0
      19: aload_1
      20: iload_2
      21: iload_3
      22: invokespecial #52                 // Method doRead:([BII)I
      25: ireturn

  private void doReadahead();
    Code:
       0: aload_0
       1: getfield      #7                  // Field raPool:Lorg/apache/hadoop/io/ReadaheadPool;
       4: ifnull        55
       7: aload_0
       8: getfield      #11                 // Field inFd:Ljava/io/FileDescriptor;
      11: ifnull        55
      14: aload_0
      15: getfield      #26                 // Field readahead:Z
      18: ifeq          55
      21: aload_0
      22: aload_0
      23: getfield      #7                  // Field raPool:Lorg/apache/hadoop/io/ReadaheadPool;
      26: ldc           #53                 // String ifile
      28: aload_0
      29: getfield      #11                 // Field inFd:Ljava/io/FileDescriptor;
      32: aload_0
      33: getfield      #2                  // Field currentOffset:J
      36: aload_0
      37: getfield      #30                 // Field readaheadLength:I
      40: i2l
      41: aload_0
      42: getfield      #20                 // Field dataLength:J
      45: aload_0
      46: getfield      #5                  // Field curReadahead:Lorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;
      49: invokevirtual #54                 // Method org/apache/hadoop/io/ReadaheadPool.readaheadStream:(Ljava/lang/String;Ljava/io/FileDescriptor;JJJLorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;)Lorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;
      52: putfield      #5                  // Field curReadahead:Lorg/apache/hadoop/io/ReadaheadPool$ReadaheadRequest;
      55: return

  public int readWithChecksum(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentOffset:J
       4: aload_0
       5: getfield      #19                 // Field length:J
       8: lcmp
       9: ifne          14
      12: iconst_m1
      13: ireturn
      14: aload_0
      15: getfield      #2                  // Field currentOffset:J
      18: aload_0
      19: getfield      #20                 // Field dataLength:J
      22: lcmp
      23: iflt          89
      26: aload_0
      27: getfield      #18                 // Field checksumSize:I
      30: i2l
      31: aload_0
      32: getfield      #2                  // Field currentOffset:J
      35: aload_0
      36: getfield      #20                 // Field dataLength:J
      39: lsub
      40: lsub
      41: l2i
      42: istore        4
      44: iload_3
      45: iload         4
      47: if_icmpge     53
      50: iload_3
      51: istore        4
      53: aload_0
      54: getfield      #4                  // Field csum:[B
      57: aload_0
      58: getfield      #2                  // Field currentOffset:J
      61: aload_0
      62: getfield      #20                 // Field dataLength:J
      65: lsub
      66: l2i
      67: aload_1
      68: iload_2
      69: iload         4
      71: invokestatic  #55                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      74: aload_0
      75: dup
      76: getfield      #2                  // Field currentOffset:J
      79: iload         4
      81: i2l
      82: ladd
      83: putfield      #2                  // Field currentOffset:J
      86: iload         4
      88: ireturn
      89: aload_0
      90: aload_1
      91: iload_2
      92: iload_3
      93: invokespecial #52                 // Method doRead:([BII)I
      96: istore        4
      98: aload_0
      99: getfield      #2                  // Field currentOffset:J
     102: aload_0
     103: getfield      #20                 // Field dataLength:J
     106: lcmp
     107: ifne          161
     110: iload_3
     111: iload         4
     113: aload_0
     114: getfield      #18                 // Field checksumSize:I
     117: iadd
     118: if_icmplt     161
     121: aload_0
     122: getfield      #4                  // Field csum:[B
     125: iconst_0
     126: aload_1
     127: iload_2
     128: iload         4
     130: iadd
     131: aload_0
     132: getfield      #18                 // Field checksumSize:I
     135: invokestatic  #55                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     138: iload         4
     140: aload_0
     141: getfield      #18                 // Field checksumSize:I
     144: iadd
     145: istore        4
     147: aload_0
     148: dup
     149: getfield      #2                  // Field currentOffset:J
     152: aload_0
     153: getfield      #18                 // Field checksumSize:I
     156: i2l
     157: ladd
     158: putfield      #2                  // Field currentOffset:J
     161: iload         4
     163: ireturn

  private int doRead(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field currentOffset:J
       4: iload_3
       5: i2l
       6: ladd
       7: aload_0
       8: getfield      #20                 // Field dataLength:J
      11: lcmp
      12: ifle          27
      15: aload_0
      16: getfield      #20                 // Field dataLength:J
      19: l2i
      20: aload_0
      21: getfield      #2                  // Field currentOffset:J
      24: l2i
      25: isub
      26: istore_3
      27: aload_0
      28: getfield      #9                  // Field in:Ljava/io/InputStream;
      31: aload_1
      32: iload_2
      33: iload_3
      34: invokevirtual #56                 // Method java/io/InputStream.read:([BII)I
      37: istore        4
      39: iload         4
      41: ifge          55
      44: new           #57                 // class org/apache/hadoop/fs/ChecksumException
      47: dup
      48: ldc           #58                 // String Checksum Error
      50: lconst_0
      51: invokespecial #59                 // Method org/apache/hadoop/fs/ChecksumException."<init>":(Ljava/lang/String;J)V
      54: athrow
      55: aload_0
      56: getfield      #16                 // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      59: aload_1
      60: iload_2
      61: iload         4
      63: invokevirtual #60                 // Method org/apache/hadoop/util/DataChecksum.update:([BII)V
      66: aload_0
      67: dup
      68: getfield      #2                  // Field currentOffset:J
      71: iload         4
      73: i2l
      74: ladd
      75: putfield      #2                  // Field currentOffset:J
      78: aload_0
      79: getfield      #8                  // Field disableChecksumValidation:Z
      82: ifeq          88
      85: iload         4
      87: ireturn
      88: aload_0
      89: getfield      #2                  // Field currentOffset:J
      92: aload_0
      93: getfield      #20                 // Field dataLength:J
      96: lcmp
      97: ifne          152
     100: aload_0
     101: aload_0
     102: getfield      #18                 // Field checksumSize:I
     105: newarray       byte
     107: putfield      #4                  // Field csum:[B
     110: aload_0
     111: getfield      #9                  // Field in:Ljava/io/InputStream;
     114: aload_0
     115: getfield      #4                  // Field csum:[B
     118: iconst_0
     119: aload_0
     120: getfield      #18                 // Field checksumSize:I
     123: invokestatic  #61                 // Method org/apache/hadoop/io/IOUtils.readFully:(Ljava/io/InputStream;[BII)V
     126: aload_0
     127: getfield      #16                 // Field sum:Lorg/apache/hadoop/util/DataChecksum;
     130: aload_0
     131: getfield      #4                  // Field csum:[B
     134: iconst_0
     135: invokevirtual #62                 // Method org/apache/hadoop/util/DataChecksum.compare:([BI)Z
     138: ifne          152
     141: new           #57                 // class org/apache/hadoop/fs/ChecksumException
     144: dup
     145: ldc           #58                 // String Checksum Error
     147: lconst_0
     148: invokespecial #59                 // Method org/apache/hadoop/fs/ChecksumException."<init>":(Ljava/lang/String;J)V
     151: athrow
     152: iload         4
     154: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field b:[B
       4: iconst_0
       5: iconst_0
       6: bastore
       7: aload_0
       8: aload_0
       9: getfield      #3                  // Field b:[B
      12: iconst_0
      13: iconst_1
      14: invokevirtual #45                 // Method read:([BII)I
      17: istore_1
      18: iload_1
      19: ifge          24
      22: iload_1
      23: ireturn
      24: sipush        255
      27: aload_0
      28: getfield      #3                  // Field b:[B
      31: iconst_0
      32: baload
      33: iand
      34: istore_2
      35: iload_2
      36: ireturn

  public byte[] getChecksum();
    Code:
       0: aload_0
       1: getfield      #4                  // Field csum:[B
       4: areturn

  void disableChecksumValidation();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #8                  // Field disableChecksumValidation:Z
       5: return

  static {};
    Code:
       0: ldc           #63                 // class org/apache/hadoop/mapred/IFileInputStream
       2: invokestatic  #64                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #37                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
