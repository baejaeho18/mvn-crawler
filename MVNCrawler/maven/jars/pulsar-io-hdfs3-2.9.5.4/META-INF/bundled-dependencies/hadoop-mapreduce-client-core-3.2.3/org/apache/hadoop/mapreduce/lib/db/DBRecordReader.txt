Compiled from "DBRecordReader.java"
public class org.apache.hadoop.mapreduce.lib.db.DBRecordReader<T extends org.apache.hadoop.mapreduce.lib.db.DBWritable> extends org.apache.hadoop.mapreduce.RecordReader<org.apache.hadoop.io.LongWritable, T> {
  private static final org.slf4j.Logger LOG;

  private java.sql.ResultSet results;

  private java.lang.Class<T> inputClass;

  private org.apache.hadoop.conf.Configuration conf;

  private org.apache.hadoop.mapreduce.lib.db.DBInputFormat$DBInputSplit split;

  private long pos;

  private org.apache.hadoop.io.LongWritable key;

  private T value;

  private java.sql.Connection connection;

  protected java.sql.PreparedStatement statement;

  private org.apache.hadoop.mapreduce.lib.db.DBConfiguration dbConf;

  private java.lang.String conditions;

  private java.lang.String[] fieldNames;

  private java.lang.String tableName;

  public org.apache.hadoop.mapreduce.lib.db.DBRecordReader(org.apache.hadoop.mapreduce.lib.db.DBInputFormat$DBInputSplit, java.lang.Class<T>, org.apache.hadoop.conf.Configuration, java.sql.Connection, org.apache.hadoop.mapreduce.lib.db.DBConfiguration, java.lang.String, java.lang.String[], java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/mapreduce/RecordReader."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field results:Ljava/sql/ResultSet;
       9: aload_0
      10: lconst_0
      11: putfield      #3                  // Field pos:J
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field key:Lorg/apache/hadoop/io/LongWritable;
      19: aload_0
      20: aconst_null
      21: putfield      #5                  // Field value:Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
      24: aload_0
      25: aload_2
      26: putfield      #6                  // Field inputClass:Ljava/lang/Class;
      29: aload_0
      30: aload_1
      31: putfield      #7                  // Field split:Lorg/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit;
      34: aload_0
      35: aload_3
      36: putfield      #8                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
      39: aload_0
      40: aload         4
      42: putfield      #9                  // Field connection:Ljava/sql/Connection;
      45: aload_0
      46: aload         5
      48: putfield      #10                 // Field dbConf:Lorg/apache/hadoop/mapreduce/lib/db/DBConfiguration;
      51: aload_0
      52: aload         6
      54: putfield      #11                 // Field conditions:Ljava/lang/String;
      57: aload_0
      58: aload         7
      60: putfield      #12                 // Field fieldNames:[Ljava/lang/String;
      63: aload_0
      64: aload         8
      66: putfield      #13                 // Field tableName:Ljava/lang/String;
      69: return

  protected java.sql.ResultSet executeQuery(java.lang.String) throws java.sql.SQLException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #9                  // Field connection:Ljava/sql/Connection;
       5: aload_1
       6: sipush        1003
       9: sipush        1007
      12: invokeinterface #15,  4           // InterfaceMethod java/sql/Connection.prepareStatement:(Ljava/lang/String;II)Ljava/sql/PreparedStatement;
      17: putfield      #16                 // Field statement:Ljava/sql/PreparedStatement;
      20: aload_0
      21: getfield      #16                 // Field statement:Ljava/sql/PreparedStatement;
      24: invokeinterface #17,  1           // InterfaceMethod java/sql/PreparedStatement.executeQuery:()Ljava/sql/ResultSet;
      29: areturn

  protected java.lang.String getSelectQuery();
    Code:
       0: new           #18                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: getfield      #10                 // Field dbConf:Lorg/apache/hadoop/mapreduce/lib/db/DBConfiguration;
      12: invokevirtual #20                 // Method org/apache/hadoop/mapreduce/lib/db/DBConfiguration.getInputQuery:()Ljava/lang/String;
      15: ifnonnull     168
      18: aload_1
      19: ldc           #21                 // String SELECT
      21: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: pop
      25: iconst_0
      26: istore_2
      27: iload_2
      28: aload_0
      29: getfield      #12                 // Field fieldNames:[Ljava/lang/String;
      32: arraylength
      33: if_icmpge     71
      36: aload_1
      37: aload_0
      38: getfield      #12                 // Field fieldNames:[Ljava/lang/String;
      41: iload_2
      42: aaload
      43: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: pop
      47: iload_2
      48: aload_0
      49: getfield      #12                 // Field fieldNames:[Ljava/lang/String;
      52: arraylength
      53: iconst_1
      54: isub
      55: if_icmpeq     65
      58: aload_1
      59: ldc           #23                 // String ,
      61: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: pop
      65: iinc          2, 1
      68: goto          27
      71: aload_1
      72: ldc           #24                 // String  FROM
      74: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      77: aload_0
      78: getfield      #13                 // Field tableName:Ljava/lang/String;
      81: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: pop
      85: aload_1
      86: ldc           #25                 // String  AS
      88: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_0
      92: getfield      #13                 // Field tableName:Ljava/lang/String;
      95: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: pop
      99: aload_0
     100: getfield      #11                 // Field conditions:Ljava/lang/String;
     103: ifnull        135
     106: aload_0
     107: getfield      #11                 // Field conditions:Ljava/lang/String;
     110: invokevirtual #26                 // Method java/lang/String.length:()I
     113: ifle          135
     116: aload_1
     117: ldc           #27                 // String  WHERE (
     119: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: aload_0
     123: getfield      #11                 // Field conditions:Ljava/lang/String;
     126: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: ldc           #28                 // String )
     131: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: pop
     135: aload_0
     136: getfield      #10                 // Field dbConf:Lorg/apache/hadoop/mapreduce/lib/db/DBConfiguration;
     139: invokevirtual #29                 // Method org/apache/hadoop/mapreduce/lib/db/DBConfiguration.getInputOrderBy:()Ljava/lang/String;
     142: astore_2
     143: aload_2
     144: ifnull        165
     147: aload_2
     148: invokevirtual #26                 // Method java/lang/String.length:()I
     151: ifle          165
     154: aload_1
     155: ldc           #30                 // String  ORDER BY
     157: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     160: aload_2
     161: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     164: pop
     165: goto          180
     168: aload_1
     169: aload_0
     170: getfield      #10                 // Field dbConf:Lorg/apache/hadoop/mapreduce/lib/db/DBConfiguration;
     173: invokevirtual #20                 // Method org/apache/hadoop/mapreduce/lib/db/DBConfiguration.getInputQuery:()Ljava/lang/String;
     176: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     179: pop
     180: aload_1
     181: ldc           #31                 // String  LIMIT
     183: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     186: aload_0
     187: getfield      #7                  // Field split:Lorg/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit;
     190: invokevirtual #32                 // Method org/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit.getLength:()J
     193: invokevirtual #33                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     196: pop
     197: aload_1
     198: ldc           #34                 // String  OFFSET
     200: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     203: aload_0
     204: getfield      #7                  // Field split:Lorg/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit;
     207: invokevirtual #35                 // Method org/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit.getStart:()J
     210: invokevirtual #33                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     213: pop
     214: goto          218
     217: astore_2
     218: aload_1
     219: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     222: areturn
    Exception table:
       from    to  target type
         180   214   217   Class java/io/IOException

  public void close() throws java.io.IOException;
    Code:
       0: aconst_null
       1: aload_0
       2: getfield      #2                  // Field results:Ljava/sql/ResultSet;
       5: if_acmpeq     17
       8: aload_0
       9: getfield      #2                  // Field results:Ljava/sql/ResultSet;
      12: invokeinterface #38,  1           // InterfaceMethod java/sql/ResultSet.close:()V
      17: aconst_null
      18: aload_0
      19: getfield      #16                 // Field statement:Ljava/sql/PreparedStatement;
      22: if_acmpeq     34
      25: aload_0
      26: getfield      #16                 // Field statement:Ljava/sql/PreparedStatement;
      29: invokeinterface #39,  1           // InterfaceMethod java/sql/PreparedStatement.close:()V
      34: aconst_null
      35: aload_0
      36: getfield      #9                  // Field connection:Ljava/sql/Connection;
      39: if_acmpeq     60
      42: aload_0
      43: getfield      #9                  // Field connection:Ljava/sql/Connection;
      46: invokeinterface #40,  1           // InterfaceMethod java/sql/Connection.commit:()V
      51: aload_0
      52: getfield      #9                  // Field connection:Ljava/sql/Connection;
      55: invokeinterface #41,  1           // InterfaceMethod java/sql/Connection.close:()V
      60: goto          76
      63: astore_1
      64: new           #36                 // class java/io/IOException
      67: dup
      68: aload_1
      69: invokevirtual #43                 // Method java/sql/SQLException.getMessage:()Ljava/lang/String;
      72: invokespecial #44                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: return
    Exception table:
       from    to  target type
           0    60    63   Class java/sql/SQLException

  public void initialize(org.apache.hadoop.mapreduce.InputSplit, org.apache.hadoop.mapreduce.TaskAttemptContext) throws java.io.IOException, java.lang.InterruptedException;
    Code:
       0: return

  public org.apache.hadoop.io.LongWritable getCurrentKey();
    Code:
       0: aload_0
       1: getfield      #4                  // Field key:Lorg/apache/hadoop/io/LongWritable;
       4: areturn

  public T getCurrentValue();
    Code:
       0: aload_0
       1: getfield      #5                  // Field value:Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
       4: areturn

  public T createValue();
    Code:
       0: aload_0
       1: getfield      #6                  // Field inputClass:Ljava/lang/Class;
       4: aload_0
       5: getfield      #8                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
       8: invokestatic  #45                 // Method org/apache/hadoop/util/ReflectionUtils.newInstance:(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;
      11: checkcast     #46                 // class org/apache/hadoop/mapreduce/lib/db/DBWritable
      14: areturn

  public long getPos() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field pos:J
       4: lreturn

  public boolean next(org.apache.hadoop.io.LongWritable, T) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field key:Lorg/apache/hadoop/io/LongWritable;
       5: aload_0
       6: aload_2
       7: putfield      #5                  // Field value:Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
      10: aload_0
      11: invokevirtual #47                 // Method nextKeyValue:()Z
      14: ireturn

  public float getProgress() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field pos:J
       4: l2f
       5: aload_0
       6: getfield      #7                  // Field split:Lorg/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit;
       9: invokevirtual #32                 // Method org/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit.getLength:()J
      12: l2f
      13: fdiv
      14: freturn

  public boolean nextKeyValue() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field key:Lorg/apache/hadoop/io/LongWritable;
       4: ifnonnull     18
       7: aload_0
       8: new           #48                 // class org/apache/hadoop/io/LongWritable
      11: dup
      12: invokespecial #49                 // Method org/apache/hadoop/io/LongWritable."<init>":()V
      15: putfield      #4                  // Field key:Lorg/apache/hadoop/io/LongWritable;
      18: aload_0
      19: getfield      #5                  // Field value:Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
      22: ifnonnull     33
      25: aload_0
      26: aload_0
      27: invokevirtual #50                 // Method createValue:()Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
      30: putfield      #5                  // Field value:Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
      33: aconst_null
      34: aload_0
      35: getfield      #2                  // Field results:Ljava/sql/ResultSet;
      38: if_acmpne     53
      41: aload_0
      42: aload_0
      43: aload_0
      44: invokevirtual #51                 // Method getSelectQuery:()Ljava/lang/String;
      47: invokevirtual #52                 // Method executeQuery:(Ljava/lang/String;)Ljava/sql/ResultSet;
      50: putfield      #2                  // Field results:Ljava/sql/ResultSet;
      53: aload_0
      54: getfield      #2                  // Field results:Ljava/sql/ResultSet;
      57: invokeinterface #53,  1           // InterfaceMethod java/sql/ResultSet.next:()Z
      62: ifne          67
      65: iconst_0
      66: ireturn
      67: aload_0
      68: getfield      #4                  // Field key:Lorg/apache/hadoop/io/LongWritable;
      71: aload_0
      72: getfield      #3                  // Field pos:J
      75: aload_0
      76: getfield      #7                  // Field split:Lorg/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit;
      79: invokevirtual #35                 // Method org/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit.getStart:()J
      82: ladd
      83: invokevirtual #54                 // Method org/apache/hadoop/io/LongWritable.set:(J)V
      86: aload_0
      87: getfield      #5                  // Field value:Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
      90: aload_0
      91: getfield      #2                  // Field results:Ljava/sql/ResultSet;
      94: invokeinterface #55,  2           // InterfaceMethod org/apache/hadoop/mapreduce/lib/db/DBWritable.readFields:(Ljava/sql/ResultSet;)V
      99: aload_0
     100: dup
     101: getfield      #3                  // Field pos:J
     104: lconst_1
     105: ladd
     106: putfield      #3                  // Field pos:J
     109: goto          124
     112: astore_1
     113: new           #36                 // class java/io/IOException
     116: dup
     117: ldc           #56                 // String SQLException in nextKeyValue
     119: aload_1
     120: invokespecial #57                 // Method java/io/IOException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     123: athrow
     124: iconst_1
     125: ireturn
    Exception table:
       from    to  target type
           0    66   112   Class java/sql/SQLException
          67   109   112   Class java/sql/SQLException

  protected org.apache.hadoop.mapreduce.lib.db.DBInputFormat$DBInputSplit getSplit();
    Code:
       0: aload_0
       1: getfield      #7                  // Field split:Lorg/apache/hadoop/mapreduce/lib/db/DBInputFormat$DBInputSplit;
       4: areturn

  protected java.lang.String[] getFieldNames();
    Code:
       0: aload_0
       1: getfield      #12                 // Field fieldNames:[Ljava/lang/String;
       4: areturn

  protected java.lang.String getTableName();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tableName:Ljava/lang/String;
       4: areturn

  protected java.lang.String getConditions();
    Code:
       0: aload_0
       1: getfield      #11                 // Field conditions:Ljava/lang/String;
       4: areturn

  protected org.apache.hadoop.mapreduce.lib.db.DBConfiguration getDBConf();
    Code:
       0: aload_0
       1: getfield      #10                 // Field dbConf:Lorg/apache/hadoop/mapreduce/lib/db/DBConfiguration;
       4: areturn

  protected java.sql.Connection getConnection();
    Code:
       0: aload_0
       1: getfield      #9                  // Field connection:Ljava/sql/Connection;
       4: areturn

  protected java.sql.PreparedStatement getStatement();
    Code:
       0: aload_0
       1: getfield      #16                 // Field statement:Ljava/sql/PreparedStatement;
       4: areturn

  protected void setStatement(java.sql.PreparedStatement);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field statement:Ljava/sql/PreparedStatement;
       5: return

  public java.lang.Object getCurrentValue() throws java.io.IOException, java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokevirtual #58                 // Method getCurrentValue:()Lorg/apache/hadoop/mapreduce/lib/db/DBWritable;
       4: areturn

  public java.lang.Object getCurrentKey() throws java.io.IOException, java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokevirtual #59                 // Method getCurrentKey:()Lorg/apache/hadoop/io/LongWritable;
       4: areturn

  static {};
    Code:
       0: ldc           #60                 // class org/apache/hadoop/mapreduce/lib/db/DBRecordReader
       2: invokestatic  #61                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #62                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
