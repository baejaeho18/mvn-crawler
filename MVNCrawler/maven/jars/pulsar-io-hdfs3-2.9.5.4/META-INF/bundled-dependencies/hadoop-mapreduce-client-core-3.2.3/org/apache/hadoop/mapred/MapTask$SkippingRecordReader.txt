Compiled from "MapTask.java"
class org.apache.hadoop.mapred.MapTask$SkippingRecordReader<K, V> extends org.apache.hadoop.mapred.MapTask$TrackedRecordReader<K, V> {
  private org.apache.hadoop.mapred.SortedRanges$SkipRangeIterator skipIt;

  private org.apache.hadoop.io.SequenceFile$Writer skipWriter;

  private boolean toWriteSkipRecs;

  private org.apache.hadoop.mapred.TaskUmbilicalProtocol umbilical;

  private org.apache.hadoop.mapred.Counters$Counter skipRecCounter;

  private long recIndex;

  final org.apache.hadoop.mapred.MapTask this$0;

  org.apache.hadoop.mapred.MapTask$SkippingRecordReader(org.apache.hadoop.mapred.MapTask, org.apache.hadoop.mapred.TaskUmbilicalProtocol, org.apache.hadoop.mapred.Task$TaskReporter, org.apache.hadoop.mapred.JobConf) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/hadoop/mapred/MapTask;
       5: aload_0
       6: aload_1
       7: aload_3
       8: aload         4
      10: invokespecial #2                  // Method org/apache/hadoop/mapred/MapTask$TrackedRecordReader."<init>":(Lorg/apache/hadoop/mapred/MapTask;Lorg/apache/hadoop/mapred/Task$TaskReporter;Lorg/apache/hadoop/mapred/JobConf;)V
      13: aload_0
      14: ldc2_w        #3                  // long -1l
      17: putfield      #5                  // Field recIndex:J
      20: aload_0
      21: aload_2
      22: putfield      #6                  // Field umbilical:Lorg/apache/hadoop/mapred/TaskUmbilicalProtocol;
      25: aload_0
      26: aload_3
      27: getstatic     #7                  // Field org/apache/hadoop/mapreduce/TaskCounter.MAP_SKIPPED_RECORDS:Lorg/apache/hadoop/mapreduce/TaskCounter;
      30: invokevirtual #8                  // Method org/apache/hadoop/mapred/Task$TaskReporter.getCounter:(Ljava/lang/Enum;)Lorg/apache/hadoop/mapred/Counters$Counter;
      33: putfield      #9                  // Field skipRecCounter:Lorg/apache/hadoop/mapred/Counters$Counter;
      36: aload_0
      37: aload_1
      38: invokevirtual #10                 // Method org/apache/hadoop/mapred/MapTask.toWriteSkipRecs:()Z
      41: ifeq          58
      44: aload_1
      45: getfield      #11                 // Field org/apache/hadoop/mapred/MapTask.conf:Lorg/apache/hadoop/mapred/JobConf;
      48: invokestatic  #12                 // Method org/apache/hadoop/mapred/SkipBadRecords.getSkipOutputPath:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path;
      51: ifnull        58
      54: iconst_1
      55: goto          59
      58: iconst_0
      59: putfield      #13                 // Field toWriteSkipRecs:Z
      62: aload_0
      63: aload_1
      64: invokevirtual #14                 // Method org/apache/hadoop/mapred/MapTask.getSkipRanges:()Lorg/apache/hadoop/mapred/SortedRanges;
      67: invokevirtual #15                 // Method org/apache/hadoop/mapred/SortedRanges.skipRangeIterator:()Lorg/apache/hadoop/mapred/SortedRanges$SkipRangeIterator;
      70: putfield      #16                 // Field skipIt:Lorg/apache/hadoop/mapred/SortedRanges$SkipRangeIterator;
      73: return

  public synchronized boolean next(K, V) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #16                 // Field skipIt:Lorg/apache/hadoop/mapred/SortedRanges$SkipRangeIterator;
       4: invokevirtual #17                 // Method org/apache/hadoop/mapred/SortedRanges$SkipRangeIterator.hasNext:()Z
       7: ifne          22
      10: invokestatic  #18                 // Method org/apache/hadoop/mapred/MapTask.access$000:()Lorg/slf4j/Logger;
      13: ldc           #19                 // String Further records got skipped.
      15: invokeinterface #20,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      20: iconst_0
      21: ireturn
      22: aload_0
      23: aload_1
      24: aload_2
      25: invokevirtual #21                 // Method moveToNext:(Ljava/lang/Object;Ljava/lang/Object;)Z
      28: istore_3
      29: aload_0
      30: getfield      #16                 // Field skipIt:Lorg/apache/hadoop/mapred/SortedRanges$SkipRangeIterator;
      33: invokevirtual #22                 // Method org/apache/hadoop/mapred/SortedRanges$SkipRangeIterator.next:()Ljava/lang/Long;
      36: invokevirtual #23                 // Method java/lang/Long.longValue:()J
      39: lstore        4
      41: lconst_0
      42: lstore        6
      44: aload_0
      45: getfield      #5                  // Field recIndex:J
      48: lload         4
      50: lcmp
      51: ifge          87
      54: iload_3
      55: ifeq          87
      58: aload_0
      59: getfield      #13                 // Field toWriteSkipRecs:Z
      62: ifeq          71
      65: aload_0
      66: aload_1
      67: aload_2
      68: invokespecial #24                 // Method writeSkippedRec:(Ljava/lang/Object;Ljava/lang/Object;)V
      71: aload_0
      72: aload_1
      73: aload_2
      74: invokevirtual #21                 // Method moveToNext:(Ljava/lang/Object;Ljava/lang/Object;)Z
      77: istore_3
      78: lload         6
      80: lconst_1
      81: ladd
      82: lstore        6
      84: goto          44
      87: lload         6
      89: lconst_0
      90: lcmp
      91: ifle          118
      94: aload_0
      95: getfield      #16                 // Field skipIt:Lorg/apache/hadoop/mapred/SortedRanges$SkipRangeIterator;
      98: invokevirtual #25                 // Method org/apache/hadoop/mapred/SortedRanges$SkipRangeIterator.skippedAllRanges:()Z
     101: ifeq          118
     104: aload_0
     105: getfield      #26                 // Field skipWriter:Lorg/apache/hadoop/io/SequenceFile$Writer;
     108: ifnull        118
     111: aload_0
     112: getfield      #26                 // Field skipWriter:Lorg/apache/hadoop/io/SequenceFile$Writer;
     115: invokevirtual #27                 // Method org/apache/hadoop/io/SequenceFile$Writer.close:()V
     118: aload_0
     119: getfield      #9                  // Field skipRecCounter:Lorg/apache/hadoop/mapred/Counters$Counter;
     122: lload         6
     124: invokevirtual #28                 // Method org/apache/hadoop/mapred/Counters$Counter.increment:(J)V
     127: aload_0
     128: getfield      #1                  // Field this$0:Lorg/apache/hadoop/mapred/MapTask;
     131: aload_0
     132: getfield      #6                  // Field umbilical:Lorg/apache/hadoop/mapred/TaskUmbilicalProtocol;
     135: aload_0
     136: getfield      #5                  // Field recIndex:J
     139: invokevirtual #29                 // Method org/apache/hadoop/mapred/MapTask.reportNextRecordRange:(Lorg/apache/hadoop/mapred/TaskUmbilicalProtocol;J)V
     142: iload_3
     143: ifeq          150
     146: aload_0
     147: invokevirtual #30                 // Method incrCounters:()V
     150: iload_3
     151: ireturn

  protected synchronized boolean moveToNext(K, V) throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #5                  // Field recIndex:J
       5: lconst_1
       6: ladd
       7: putfield      #5                  // Field recIndex:J
      10: aload_0
      11: aload_1
      12: aload_2
      13: invokespecial #31                 // Method org/apache/hadoop/mapred/MapTask$TrackedRecordReader.moveToNext:(Ljava/lang/Object;Ljava/lang/Object;)Z
      16: ireturn

  private void writeSkippedRec(K, V) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #26                 // Field skipWriter:Lorg/apache/hadoop/io/SequenceFile$Writer;
       4: ifnonnull     87
       7: aload_0
       8: getfield      #1                  // Field this$0:Lorg/apache/hadoop/mapred/MapTask;
      11: getfield      #11                 // Field org/apache/hadoop/mapred/MapTask.conf:Lorg/apache/hadoop/mapred/JobConf;
      14: invokestatic  #12                 // Method org/apache/hadoop/mapred/SkipBadRecords.getSkipOutputPath:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/Path;
      17: astore_3
      18: new           #32                 // class org/apache/hadoop/fs/Path
      21: dup
      22: aload_3
      23: aload_0
      24: getfield      #1                  // Field this$0:Lorg/apache/hadoop/mapred/MapTask;
      27: invokevirtual #33                 // Method org/apache/hadoop/mapred/MapTask.getTaskID:()Lorg/apache/hadoop/mapred/TaskAttemptID;
      30: invokevirtual #34                 // Method org/apache/hadoop/mapred/TaskAttemptID.toString:()Ljava/lang/String;
      33: invokespecial #35                 // Method org/apache/hadoop/fs/Path."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      36: astore        4
      38: aload_0
      39: aload         4
      41: aload_0
      42: getfield      #1                  // Field this$0:Lorg/apache/hadoop/mapred/MapTask;
      45: getfield      #11                 // Field org/apache/hadoop/mapred/MapTask.conf:Lorg/apache/hadoop/mapred/JobConf;
      48: invokevirtual #36                 // Method org/apache/hadoop/fs/Path.getFileSystem:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
      51: aload_0
      52: getfield      #1                  // Field this$0:Lorg/apache/hadoop/mapred/MapTask;
      55: getfield      #11                 // Field org/apache/hadoop/mapred/MapTask.conf:Lorg/apache/hadoop/mapred/JobConf;
      58: aload         4
      60: aload_0
      61: invokevirtual #37                 // Method createKey:()Ljava/lang/Object;
      64: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      67: aload_0
      68: invokevirtual #39                 // Method createValue:()Ljava/lang/Object;
      71: invokevirtual #38                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      74: getstatic     #40                 // Field org/apache/hadoop/io/SequenceFile$CompressionType.BLOCK:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
      77: aload_0
      78: invokevirtual #41                 // Method getTaskReporter:()Lorg/apache/hadoop/mapred/Task$TaskReporter;
      81: invokestatic  #42                 // Method org/apache/hadoop/io/SequenceFile.createWriter:(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/Path;Ljava/lang/Class;Ljava/lang/Class;Lorg/apache/hadoop/io/SequenceFile$CompressionType;Lorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/io/SequenceFile$Writer;
      84: putfield      #26                 // Field skipWriter:Lorg/apache/hadoop/io/SequenceFile$Writer;
      87: aload_0
      88: getfield      #26                 // Field skipWriter:Lorg/apache/hadoop/io/SequenceFile$Writer;
      91: aload_1
      92: aload_2
      93: invokevirtual #43                 // Method org/apache/hadoop/io/SequenceFile$Writer.append:(Ljava/lang/Object;Ljava/lang/Object;)V
      96: return
}
