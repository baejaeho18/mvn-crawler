Compiled from "TaskLogAppender.java"
public class org.apache.hadoop.mapred.TaskLogAppender extends org.apache.log4j.FileAppender implements java.io.Flushable {
  private java.lang.String taskId;

  private java.lang.Integer maxEvents;

  private java.util.Queue<org.apache.log4j.spi.LoggingEvent> tail;

  private java.lang.Boolean isCleanup;

  static final java.lang.String ISCLEANUP_PROPERTY;

  static final java.lang.String LOGSIZE_PROPERTY;

  static final java.lang.String TASKID_PROPERTY;

  private static final int EVENT_SIZE;

  public org.apache.hadoop.mapred.TaskLogAppender();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/log4j/FileAppender."<init>":()V
       4: aload_0
       5: aconst_null
       6: putfield      #2                  // Field tail:Ljava/util/Queue;
       9: return

  public void activateOptions();
    Code:
       0: aload_0
       1: dup
       2: astore_1
       3: monitorenter
       4: aload_0
       5: invokespecial #3                  // Method setOptionsFromSystemProperties:()V
       8: aload_0
       9: getfield      #4                  // Field maxEvents:Ljava/lang/Integer;
      12: invokevirtual #5                  // Method java/lang/Integer.intValue:()I
      15: ifle          29
      18: aload_0
      19: new           #6                  // class java/util/LinkedList
      22: dup
      23: invokespecial #7                  // Method java/util/LinkedList."<init>":()V
      26: putfield      #2                  // Field tail:Ljava/util/Queue;
      29: aload_0
      30: aload_0
      31: getfield      #8                  // Field taskId:Ljava/lang/String;
      34: invokestatic  #9                  // Method org/apache/hadoop/mapred/TaskAttemptID.forName:(Ljava/lang/String;)Lorg/apache/hadoop/mapred/TaskAttemptID;
      37: aload_0
      38: getfield      #10                 // Field isCleanup:Ljava/lang/Boolean;
      41: invokevirtual #11                 // Method java/lang/Boolean.booleanValue:()Z
      44: getstatic     #12                 // Field org/apache/hadoop/mapred/TaskLog$LogName.SYSLOG:Lorg/apache/hadoop/mapred/TaskLog$LogName;
      47: invokestatic  #13                 // Method org/apache/hadoop/mapred/TaskLog.getTaskLogFile:(Lorg/apache/hadoop/mapred/TaskAttemptID;ZLorg/apache/hadoop/mapred/TaskLog$LogName;)Ljava/io/File;
      50: invokevirtual #14                 // Method java/io/File.toString:()Ljava/lang/String;
      53: invokevirtual #15                 // Method setFile:(Ljava/lang/String;)V
      56: aload_0
      57: iconst_1
      58: invokevirtual #16                 // Method setAppend:(Z)V
      61: aload_0
      62: invokespecial #17                 // Method org/apache/log4j/FileAppender.activateOptions:()V
      65: aload_1
      66: monitorexit
      67: goto          75
      70: astore_2
      71: aload_1
      72: monitorexit
      73: aload_2
      74: athrow
      75: return
    Exception table:
       from    to  target type
           4    67    70   any
          70    73    70   any

  private synchronized void setOptionsFromSystemProperties();
    Code:
       0: aload_0
       1: getfield      #10                 // Field isCleanup:Ljava/lang/Boolean;
       4: ifnonnull     23
       7: ldc           #19                 // String hadoop.tasklog.iscleanup
       9: ldc           #20                 // String false
      11: invokestatic  #21                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      14: astore_1
      15: aload_0
      16: aload_1
      17: invokestatic  #22                 // Method java/lang/Boolean.valueOf:(Ljava/lang/String;)Ljava/lang/Boolean;
      20: putfield      #10                 // Field isCleanup:Ljava/lang/Boolean;
      23: aload_0
      24: getfield      #8                  // Field taskId:Ljava/lang/String;
      27: ifnonnull     39
      30: aload_0
      31: ldc           #23                 // String hadoop.tasklog.taskid
      33: invokestatic  #24                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      36: putfield      #8                  // Field taskId:Ljava/lang/String;
      39: aload_0
      40: getfield      #4                  // Field maxEvents:Ljava/lang/Integer;
      43: ifnonnull     62
      46: ldc           #25                 // String hadoop.tasklog.totalLogFileSize
      48: ldc           #26                 // String 0
      50: invokestatic  #21                 // Method java/lang/System.getProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      53: astore_1
      54: aload_0
      55: aload_1
      56: invokestatic  #27                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
      59: invokevirtual #28                 // Method setTotalLogFileSize:(J)V
      62: return

  public void append(org.apache.log4j.spi.LoggingEvent);
    Code:
       0: aload_0
       1: dup
       2: astore_2
       3: monitorenter
       4: aload_0
       5: getfield      #2                  // Field tail:Ljava/util/Queue;
       8: ifnonnull     19
      11: aload_0
      12: aload_1
      13: invokespecial #29                 // Method org/apache/log4j/FileAppender.append:(Lorg/apache/log4j/spi/LoggingEvent;)V
      16: goto          59
      19: aload_0
      20: getfield      #2                  // Field tail:Ljava/util/Queue;
      23: invokeinterface #30,  1           // InterfaceMethod java/util/Queue.size:()I
      28: aload_0
      29: getfield      #4                  // Field maxEvents:Ljava/lang/Integer;
      32: invokevirtual #5                  // Method java/lang/Integer.intValue:()I
      35: if_icmplt     48
      38: aload_0
      39: getfield      #2                  // Field tail:Ljava/util/Queue;
      42: invokeinterface #31,  1           // InterfaceMethod java/util/Queue.remove:()Ljava/lang/Object;
      47: pop
      48: aload_0
      49: getfield      #2                  // Field tail:Ljava/util/Queue;
      52: aload_1
      53: invokeinterface #32,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      58: pop
      59: aload_2
      60: monitorexit
      61: goto          69
      64: astore_3
      65: aload_2
      66: monitorexit
      67: aload_3
      68: athrow
      69: return
    Exception table:
       from    to  target type
           4    61    64   any
          64    67    64   any

  public void flush();
    Code:
       0: aload_0
       1: getfield      #33                 // Field qw:Lorg/apache/log4j/helpers/QuietWriter;
       4: ifnull        14
       7: aload_0
       8: getfield      #33                 // Field qw:Lorg/apache/log4j/helpers/QuietWriter;
      11: invokevirtual #34                 // Method org/apache/log4j/helpers/QuietWriter.flush:()V
      14: return

  public synchronized void close();
    Code:
       0: aload_0
       1: getfield      #2                  // Field tail:Ljava/util/Queue;
       4: ifnull        44
       7: aload_0
       8: getfield      #2                  // Field tail:Ljava/util/Queue;
      11: invokeinterface #35,  1           // InterfaceMethod java/util/Queue.iterator:()Ljava/util/Iterator;
      16: astore_1
      17: aload_1
      18: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      23: ifeq          44
      26: aload_1
      27: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #38                 // class org/apache/log4j/spi/LoggingEvent
      35: astore_2
      36: aload_0
      37: aload_2
      38: invokespecial #29                 // Method org/apache/log4j/FileAppender.append:(Lorg/apache/log4j/spi/LoggingEvent;)V
      41: goto          17
      44: aload_0
      45: invokespecial #39                 // Method org/apache/log4j/FileAppender.close:()V
      48: return

  public synchronized java.lang.String getTaskId();
    Code:
       0: aload_0
       1: getfield      #8                  // Field taskId:Ljava/lang/String;
       4: areturn

  public synchronized void setTaskId(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field taskId:Ljava/lang/String;
       5: return

  public synchronized long getTotalLogFileSize();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxEvents:Ljava/lang/Integer;
       4: invokevirtual #5                  // Method java/lang/Integer.intValue:()I
       7: bipush        100
       9: imul
      10: i2l
      11: lreturn

  public synchronized void setTotalLogFileSize(long);
    Code:
       0: aload_0
       1: lload_1
       2: l2i
       3: bipush        100
       5: idiv
       6: invokestatic  #40                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       9: putfield      #4                  // Field maxEvents:Ljava/lang/Integer;
      12: return

  public synchronized void setIsCleanup(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokestatic  #41                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
       5: putfield      #10                 // Field isCleanup:Ljava/lang/Boolean;
       8: return

  public synchronized boolean getIsCleanup();
    Code:
       0: aload_0
       1: getfield      #10                 // Field isCleanup:Ljava/lang/Boolean;
       4: invokevirtual #11                 // Method java/lang/Boolean.booleanValue:()Z
       7: ireturn
}
