Compiled from "MapFileOutputFormat.java"
public class org.apache.hadoop.mapreduce.lib.output.MapFileOutputFormat extends org.apache.hadoop.mapreduce.lib.output.FileOutputFormat<org.apache.hadoop.io.WritableComparable<?>, org.apache.hadoop.io.Writable> {
  public org.apache.hadoop.mapreduce.lib.output.MapFileOutputFormat();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/mapreduce/lib/output/FileOutputFormat."<init>":()V
       4: return

  public org.apache.hadoop.mapreduce.RecordWriter<org.apache.hadoop.io.WritableComparable<?>, org.apache.hadoop.io.Writable> getRecordWriter(org.apache.hadoop.mapreduce.TaskAttemptContext) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokeinterface #2,  1            // InterfaceMethod org/apache/hadoop/mapreduce/TaskAttemptContext.getConfiguration:()Lorg/apache/hadoop/conf/Configuration;
       6: astore_2
       7: aconst_null
       8: astore_3
       9: getstatic     #3                  // Field org/apache/hadoop/io/SequenceFile$CompressionType.NONE:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
      12: astore        4
      14: aload_1
      15: invokestatic  #4                  // Method getCompressOutput:(Lorg/apache/hadoop/mapreduce/JobContext;)Z
      18: ifeq          45
      21: aload_1
      22: invokestatic  #5                  // Method org/apache/hadoop/mapreduce/lib/output/SequenceFileOutputFormat.getOutputCompressionType:(Lorg/apache/hadoop/mapreduce/JobContext;)Lorg/apache/hadoop/io/SequenceFile$CompressionType;
      25: astore        4
      27: aload_1
      28: ldc           #6                  // class org/apache/hadoop/io/compress/DefaultCodec
      30: invokestatic  #7                  // Method getOutputCompressorClass:(Lorg/apache/hadoop/mapreduce/JobContext;Ljava/lang/Class;)Ljava/lang/Class;
      33: astore        5
      35: aload         5
      37: aload_2
      38: invokestatic  #8                  // Method org/apache/hadoop/util/ReflectionUtils.newInstance:(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;
      41: checkcast     #9                  // class org/apache/hadoop/io/compress/CompressionCodec
      44: astore_3
      45: aload_0
      46: aload_1
      47: ldc           #10                 // String
      49: invokevirtual #11                 // Method getDefaultWorkFile:(Lorg/apache/hadoop/mapreduce/TaskAttemptContext;Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
      52: astore        5
      54: aload         5
      56: aload_2
      57: invokevirtual #12                 // Method org/apache/hadoop/fs/Path.getFileSystem:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
      60: astore        6
      62: new           #13                 // class org/apache/hadoop/io/MapFile$Writer
      65: dup
      66: aload_2
      67: aload         6
      69: aload         5
      71: invokevirtual #14                 // Method org/apache/hadoop/fs/Path.toString:()Ljava/lang/String;
      74: aload_1
      75: invokeinterface #15,  1           // InterfaceMethod org/apache/hadoop/mapreduce/TaskAttemptContext.getOutputKeyClass:()Ljava/lang/Class;
      80: ldc           #16                 // class org/apache/hadoop/io/WritableComparable
      82: invokevirtual #17                 // Method java/lang/Class.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;
      85: aload_1
      86: invokeinterface #18,  1           // InterfaceMethod org/apache/hadoop/mapreduce/TaskAttemptContext.getOutputValueClass:()Ljava/lang/Class;
      91: ldc           #19                 // class org/apache/hadoop/io/Writable
      93: invokevirtual #17                 // Method java/lang/Class.asSubclass:(Ljava/lang/Class;)Ljava/lang/Class;
      96: aload         4
      98: aload_3
      99: aload_1
     100: invokespecial #20                 // Method org/apache/hadoop/io/MapFile$Writer."<init>":(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FileSystem;Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;Lorg/apache/hadoop/io/SequenceFile$CompressionType;Lorg/apache/hadoop/io/compress/CompressionCodec;Lorg/apache/hadoop/util/Progressable;)V
     103: astore        7
     105: new           #21                 // class org/apache/hadoop/mapreduce/lib/output/MapFileOutputFormat$1
     108: dup
     109: aload_0
     110: aload         7
     112: invokespecial #22                 // Method org/apache/hadoop/mapreduce/lib/output/MapFileOutputFormat$1."<init>":(Lorg/apache/hadoop/mapreduce/lib/output/MapFileOutputFormat;Lorg/apache/hadoop/io/MapFile$Writer;)V
     115: areturn

  public static org.apache.hadoop.io.MapFile$Reader[] getReaders(org.apache.hadoop.fs.Path, org.apache.hadoop.conf.Configuration) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #12                 // Method org/apache/hadoop/fs/Path.getFileSystem:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
       5: astore_2
       6: new           #23                 // class org/apache/hadoop/mapreduce/lib/output/MapFileOutputFormat$2
       9: dup
      10: invokespecial #24                 // Method org/apache/hadoop/mapreduce/lib/output/MapFileOutputFormat$2."<init>":()V
      13: astore_3
      14: aload_2
      15: aload_0
      16: aload_3
      17: invokevirtual #25                 // Method org/apache/hadoop/fs/FileSystem.listStatus:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)[Lorg/apache/hadoop/fs/FileStatus;
      20: invokestatic  #26                 // Method org/apache/hadoop/fs/FileUtil.stat2Paths:([Lorg/apache/hadoop/fs/FileStatus;)[Lorg/apache/hadoop/fs/Path;
      23: astore        4
      25: aload         4
      27: invokestatic  #27                 // Method java/util/Arrays.sort:([Ljava/lang/Object;)V
      30: aload         4
      32: arraylength
      33: anewarray     #28                 // class org/apache/hadoop/io/MapFile$Reader
      36: astore        5
      38: iconst_0
      39: istore        6
      41: iload         6
      43: aload         4
      45: arraylength
      46: if_icmpge     77
      49: aload         5
      51: iload         6
      53: new           #28                 // class org/apache/hadoop/io/MapFile$Reader
      56: dup
      57: aload_2
      58: aload         4
      60: iload         6
      62: aaload
      63: invokevirtual #14                 // Method org/apache/hadoop/fs/Path.toString:()Ljava/lang/String;
      66: aload_1
      67: invokespecial #29                 // Method org/apache/hadoop/io/MapFile$Reader."<init>":(Lorg/apache/hadoop/fs/FileSystem;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V
      70: aastore
      71: iinc          6, 1
      74: goto          41
      77: aload         5
      79: areturn

  public static <K extends org.apache.hadoop.io.WritableComparable<?>, V extends org.apache.hadoop.io.Writable> org.apache.hadoop.io.Writable getEntry(org.apache.hadoop.io.MapFile$Reader[], org.apache.hadoop.mapreduce.Partitioner<K, V>, K, V) throws java.io.IOException;
    Code:
       0: aload_0
       1: arraylength
       2: istore        4
       4: iload         4
       6: iconst_1
       7: if_icmpgt     16
      10: iconst_0
      11: istore        5
      13: goto          26
      16: aload_1
      17: aload_2
      18: aload_3
      19: aload_0
      20: arraylength
      21: invokevirtual #30                 // Method org/apache/hadoop/mapreduce/Partitioner.getPartition:(Ljava/lang/Object;Ljava/lang/Object;I)I
      24: istore        5
      26: aload_0
      27: iload         5
      29: aaload
      30: aload_2
      31: aload_3
      32: invokevirtual #31                 // Method org/apache/hadoop/io/MapFile$Reader.get:(Lorg/apache/hadoop/io/WritableComparable;Lorg/apache/hadoop/io/Writable;)Lorg/apache/hadoop/io/Writable;
      35: areturn
}
