Compiled from "JobResourceUploader.java"
class org.apache.hadoop.mapreduce.JobResourceUploader$LimitChecker {
  private long totalSizeBytes;

  private int totalNumberOfResources;

  private long currentMaxSizeOfFileBytes;

  private final long maxSizeMB;

  private final int maxNumOfResources;

  private final long maxSizeOfResourceMB;

  private final long totalConfigSizeBytes;

  private final long totalConfigSizeOfResourceBytes;

  org.apache.hadoop.mapreduce.JobResourceUploader$LimitChecker(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #5                  // Field totalSizeBytes:J
       9: aload_0
      10: iconst_0
      11: putfield      #6                  // Field totalNumberOfResources:I
      14: aload_0
      15: lconst_0
      16: putfield      #7                  // Field currentMaxSizeOfFileBytes:J
      19: aload_0
      20: aload_1
      21: ldc           #9                  // String mapreduce.job.cache.limit.max-resources
      23: iconst_0
      24: invokevirtual #10                 // Method org/apache/hadoop/conf/Configuration.getInt:(Ljava/lang/String;I)I
      27: putfield      #11                 // Field maxNumOfResources:I
      30: aload_0
      31: aload_1
      32: ldc           #12                 // String mapreduce.job.cache.limit.max-resources-mb
      34: lconst_0
      35: invokevirtual #13                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
      38: putfield      #14                 // Field maxSizeMB:J
      41: aload_0
      42: aload_1
      43: ldc           #15                 // String mapreduce.job.cache.limit.max-single-resource-mb
      45: lconst_0
      46: invokevirtual #13                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
      49: putfield      #16                 // Field maxSizeOfResourceMB:J
      52: aload_0
      53: aload_0
      54: getfield      #14                 // Field maxSizeMB:J
      57: ldc2_w        #17                 // long 1024l
      60: lmul
      61: ldc2_w        #17                 // long 1024l
      64: lmul
      65: putfield      #19                 // Field totalConfigSizeBytes:J
      68: aload_0
      69: aload_0
      70: getfield      #16                 // Field maxSizeOfResourceMB:J
      73: ldc2_w        #17                 // long 1024l
      76: lmul
      77: ldc2_w        #17                 // long 1024l
      80: lmul
      81: putfield      #20                 // Field totalConfigSizeOfResourceBytes:J
      84: return

  private boolean hasLimits();
    Code:
       0: aload_0
       1: getfield      #11                 // Field maxNumOfResources:I
       4: ifgt          25
       7: aload_0
       8: getfield      #14                 // Field maxSizeMB:J
      11: lconst_0
      12: lcmp
      13: ifgt          25
      16: aload_0
      17: getfield      #16                 // Field maxSizeOfResourceMB:J
      20: lconst_0
      21: lcmp
      22: ifle          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ireturn

  private void addFile(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: dup
       2: getfield      #6                  // Field totalNumberOfResources:I
       5: iconst_1
       6: iadd
       7: putfield      #6                  // Field totalNumberOfResources:I
      10: aload_0
      11: dup
      12: getfield      #5                  // Field totalSizeBytes:J
      15: lload_2
      16: ladd
      17: putfield      #5                  // Field totalSizeBytes:J
      20: lload_2
      21: aload_0
      22: getfield      #7                  // Field currentMaxSizeOfFileBytes:J
      25: lcmp
      26: ifle          34
      29: aload_0
      30: lload_2
      31: putfield      #7                  // Field currentMaxSizeOfFileBytes:J
      34: aload_0
      35: getfield      #19                 // Field totalConfigSizeBytes:J
      38: lconst_0
      39: lcmp
      40: ifle          90
      43: aload_0
      44: getfield      #5                  // Field totalSizeBytes:J
      47: aload_0
      48: getfield      #19                 // Field totalConfigSizeBytes:J
      51: lcmp
      52: ifle          90
      55: new           #21                 // class java/io/IOException
      58: dup
      59: new           #22                 // class java/lang/StringBuilder
      62: dup
      63: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      66: ldc           #24                 // String This job has exceeded the maximum size of submitted resources (Max:
      68: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: aload_0
      72: getfield      #14                 // Field maxSizeMB:J
      75: invokevirtual #26                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      78: ldc           #27                 // String MB).
      80: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #29                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      89: athrow
      90: aload_0
      91: getfield      #11                 // Field maxNumOfResources:I
      94: ifle          143
      97: aload_0
      98: getfield      #6                  // Field totalNumberOfResources:I
     101: aload_0
     102: getfield      #11                 // Field maxNumOfResources:I
     105: if_icmple     143
     108: new           #21                 // class java/io/IOException
     111: dup
     112: new           #22                 // class java/lang/StringBuilder
     115: dup
     116: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
     119: ldc           #30                 // String This job has exceeded the maximum number of submitted resources (Max:
     121: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: aload_0
     125: getfield      #11                 // Field maxNumOfResources:I
     128: invokevirtual #31                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     131: ldc           #32                 // String ).
     133: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     136: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     139: invokespecial #29                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     142: athrow
     143: aload_0
     144: getfield      #20                 // Field totalConfigSizeOfResourceBytes:J
     147: lconst_0
     148: lcmp
     149: ifle          208
     152: aload_0
     153: getfield      #7                  // Field currentMaxSizeOfFileBytes:J
     156: aload_0
     157: getfield      #20                 // Field totalConfigSizeOfResourceBytes:J
     160: lcmp
     161: ifle          208
     164: new           #21                 // class java/io/IOException
     167: dup
     168: new           #22                 // class java/lang/StringBuilder
     171: dup
     172: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
     175: ldc           #33                 // String This job has exceeded the maximum size of a single submitted resource (Max:
     177: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     180: aload_0
     181: getfield      #16                 // Field maxSizeOfResourceMB:J
     184: invokevirtual #26                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     187: ldc           #34                 // String MB, Violating resource:
     189: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     192: aload_1
     193: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     196: ldc           #32                 // String ).
     198: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     201: invokevirtual #28                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     204: invokespecial #29                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     207: athrow
     208: return

  static boolean access$000(org.apache.hadoop.mapreduce.JobResourceUploader$LimitChecker);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method hasLimits:()Z
       4: ireturn

  static void access$100(org.apache.hadoop.mapreduce.JobResourceUploader$LimitChecker, org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: lload_2
       3: invokespecial #2                  // Method addFile:(Lorg/apache/hadoop/fs/Path;J)V
       6: return
}
