Compiled from "BackupStore.java"
class org.apache.hadoop.mapred.BackupStore$BackupRamManager implements org.apache.hadoop.mapred.RamManager {
  private int availableSize;

  private final int maxSize;

  public org.apache.hadoop.mapred.BackupStore$BackupRamManager(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field availableSize:I
       9: aload_0
      10: aload_0
      11: iload_1
      12: dup_x1
      13: putfield      #3                  // Field maxSize:I
      16: putfield      #2                  // Field availableSize:I
      19: return

  public boolean reserve(int, java.io.InputStream);
    Code:
       0: invokestatic  #4                  // Method org/apache/hadoop/mapred/BackupStore.access$400:()Lorg/slf4j/Logger;
       3: ldc           #5                  // String Reserve(int, InputStream) not supported by BackupRamManager
       5: invokeinterface #6,  2            // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      10: iconst_0
      11: ireturn

  int reserve(int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field availableSize:I
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: iload_1
      10: aload_0
      11: getfield      #2                  // Field availableSize:I
      14: invokestatic  #7                  // Method java/lang/Math.min:(II)I
      17: istore_2
      18: aload_0
      19: dup
      20: getfield      #2                  // Field availableSize:I
      23: iload_2
      24: isub
      25: putfield      #2                  // Field availableSize:I
      28: invokestatic  #4                  // Method org/apache/hadoop/mapred/BackupStore.access$400:()Lorg/slf4j/Logger;
      31: new           #8                  // class java/lang/StringBuilder
      34: dup
      35: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      38: ldc           #10                 // String Reserving:
      40: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: iload_2
      44: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      47: ldc           #13                 // String  Requested:
      49: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: iload_1
      53: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      56: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      64: iload_2
      65: ireturn

  int reserve(int, int);
    Code:
       0: aload_0
       1: getfield      #2                  // Field availableSize:I
       4: iload_2
       5: if_icmpge     49
       8: invokestatic  #4                  // Method org/apache/hadoop/mapred/BackupStore.access$400:()Lorg/slf4j/Logger;
      11: new           #8                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #16                 // String No space available. Available:
      20: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: getfield      #2                  // Field availableSize:I
      27: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      30: ldc           #17                 // String  MinSize:
      32: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_2
      36: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      47: iconst_0
      48: ireturn
      49: aload_0
      50: iload_1
      51: invokevirtual #18                 // Method reserve:(I)I
      54: ireturn

  public void unreserve(int);
    Code:
       0: aload_0
       1: dup
       2: getfield      #2                  // Field availableSize:I
       5: iload_1
       6: iadd
       7: putfield      #2                  // Field availableSize:I
      10: invokestatic  #4                  // Method org/apache/hadoop/mapred/BackupStore.access$400:()Lorg/slf4j/Logger;
      13: new           #8                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #9                  // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #19                 // String Unreserving:
      22: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: iload_1
      26: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      29: ldc           #20                 // String . Available:
      31: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: getfield      #2                  // Field availableSize:I
      38: invokevirtual #12                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      41: invokevirtual #14                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokeinterface #15,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      49: return

  void reinitialize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field maxSize:I
       5: putfield      #2                  // Field availableSize:I
       8: return
}
