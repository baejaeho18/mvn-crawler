Compiled from "Task.java"
public class org.apache.hadoop.mapred.Task$TaskReporter$DiskLimitCheck implements java.lang.Runnable {
  private org.apache.hadoop.fs.LocalFileSystem localFS;

  private long fsLimit;

  private long checkInterval;

  private java.lang.String[] localDirs;

  private boolean killOnLimitExceeded;

  final org.apache.hadoop.mapred.Task$TaskReporter this$1;

  public org.apache.hadoop.mapred.Task$TaskReporter$DiskLimitCheck(org.apache.hadoop.mapred.Task$TaskReporter, org.apache.hadoop.mapred.JobConf) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$1:Lorg/apache/hadoop/mapred/Task$TaskReporter;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_2
      11: invokestatic  #3                  // Method org/apache/hadoop/fs/FileSystem.getLocal:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;
      14: putfield      #4                  // Field localFS:Lorg/apache/hadoop/fs/LocalFileSystem;
      17: aload_0
      18: aload_2
      19: ldc           #6                  // String mapreduce.job.local-fs.single-disk-limit.bytes
      21: ldc2_w        #7                  // long -1l
      24: invokevirtual #9                  // Method org/apache/hadoop/mapred/JobConf.getLong:(Ljava/lang/String;J)J
      27: putfield      #10                 // Field fsLimit:J
      30: aload_0
      31: aload_2
      32: invokevirtual #11                 // Method org/apache/hadoop/mapred/JobConf.getLocalDirs:()[Ljava/lang/String;
      35: putfield      #12                 // Field localDirs:[Ljava/lang/String;
      38: aload_0
      39: aload_2
      40: ldc           #13                 // String mapreduce.job.local-fs.single-disk-limit.check.interval-ms
      42: ldc2_w        #14                 // long 5000l
      45: invokevirtual #9                  // Method org/apache/hadoop/mapred/JobConf.getLong:(Ljava/lang/String;J)J
      48: putfield      #16                 // Field checkInterval:J
      51: aload_0
      52: aload_2
      53: ldc           #17                 // String mapreduce.job.local-fs.single-disk-limit.check.kill-limit-exceed
      55: iconst_1
      56: invokevirtual #18                 // Method org/apache/hadoop/mapred/JobConf.getBoolean:(Ljava/lang/String;Z)Z
      59: putfield      #19                 // Field killOnLimitExceeded:Z
      62: return

  public void run();
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$1:Lorg/apache/hadoop/mapred/Task$TaskReporter;
       4: getfield      #20                 // Field org/apache/hadoop/mapred/Task$TaskReporter.this$0:Lorg/apache/hadoop/mapred/Task;
       7: invokestatic  #21                 // Method org/apache/hadoop/mapred/Task.access$400:(Lorg/apache/hadoop/mapred/Task;)Ljava/util/concurrent/atomic/AtomicBoolean;
      10: invokevirtual #22                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
      13: ifne          209
      16: lconst_0
      17: lstore_1
      18: aconst_null
      19: astore_3
      20: aload_0
      21: getfield      #12                 // Field localDirs:[Ljava/lang/String;
      24: astore        4
      26: aload         4
      28: arraylength
      29: istore        5
      31: iconst_0
      32: istore        6
      34: iload         6
      36: iload         5
      38: if_icmpge     88
      41: aload         4
      43: iload         6
      45: aaload
      46: astore        7
      48: aload_0
      49: getfield      #4                  // Field localFS:Lorg/apache/hadoop/fs/LocalFileSystem;
      52: new           #23                 // class org/apache/hadoop/fs/Path
      55: dup
      56: aload         7
      58: invokespecial #24                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      61: invokevirtual #25                 // Method org/apache/hadoop/fs/LocalFileSystem.pathToFile:(Lorg/apache/hadoop/fs/Path;)Ljava/io/File;
      64: invokestatic  #26                 // Method org/apache/hadoop/fs/FileUtil.getDU:(Ljava/io/File;)J
      67: lstore        8
      69: lload_1
      70: lload         8
      72: lcmp
      73: ifge          82
      76: lload         8
      78: lstore_1
      79: aload         7
      81: astore_3
      82: iinc          6, 1
      85: goto          34
      88: lload_1
      89: aload_0
      90: getfield      #10                 // Field fsLimit:J
      93: lcmp
      94: ifle          182
      97: new           #27                 // class java/lang/StringBuilder
     100: dup
     101: invokespecial #28                 // Method java/lang/StringBuilder."<init>":()V
     104: ldc           #29                 // String too much data in local scratch dir=
     106: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     109: aload_3
     110: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     113: ldc           #31                 // String . current size is
     115: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: lload_1
     119: invokevirtual #32                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     122: ldc           #33                 // String  the limit is
     124: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     127: aload_0
     128: getfield      #10                 // Field fsLimit:J
     131: invokevirtual #32                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     134: invokevirtual #34                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     137: astore        4
     139: aload_0
     140: getfield      #19                 // Field killOnLimitExceeded:Z
     143: ifeq          169
     146: invokestatic  #35                 // Method org/apache/hadoop/mapred/Task.access$500:()Lorg/slf4j/Logger;
     149: aload         4
     151: invokeinterface #36,  2           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;)V
     156: aload_0
     157: getfield      #1                  // Field this$1:Lorg/apache/hadoop/mapred/Task$TaskReporter;
     160: aload         4
     162: invokestatic  #37                 // Method org/apache/hadoop/mapred/Task$TaskReporter.access$602:(Lorg/apache/hadoop/mapred/Task$TaskReporter;Ljava/lang/String;)Ljava/lang/String;
     165: pop
     166: goto          179
     169: invokestatic  #35                 // Method org/apache/hadoop/mapred/Task.access$500:()Lorg/slf4j/Logger;
     172: aload         4
     174: invokeinterface #38,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
     179: goto          209
     182: aload_0
     183: getfield      #16                 // Field checkInterval:J
     186: invokestatic  #39                 // Method java/lang/Thread.sleep:(J)V
     189: goto          0
     192: astore_1
     193: invokestatic  #35                 // Method org/apache/hadoop/mapred/Task.access$500:()Lorg/slf4j/Logger;
     196: aload_1
     197: invokevirtual #41                 // Method java/lang/Exception.getMessage:()Ljava/lang/String;
     200: aload_1
     201: invokeinterface #42,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     206: goto          0
     209: return
    Exception table:
       from    to  target type
          16   179   192   Class java/lang/Exception
         182   189   192   Class java/lang/Exception
}
