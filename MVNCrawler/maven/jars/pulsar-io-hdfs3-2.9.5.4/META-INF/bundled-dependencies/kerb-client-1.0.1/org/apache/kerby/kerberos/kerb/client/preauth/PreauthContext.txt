Compiled from "PreauthContext.java"
public class org.apache.kerby.kerberos.kerb.client.preauth.PreauthContext {
  private boolean preauthRequired;

  private org.apache.kerby.kerberos.kerb.type.pa.PaData inputPaData;

  private org.apache.kerby.kerberos.kerb.type.pa.PaData outputPaData;

  private org.apache.kerby.kerberos.kerb.type.pa.PaData errorPaData;

  private org.apache.kerby.kerberos.kerb.client.preauth.UserResponser userResponser;

  private org.apache.kerby.kerberos.kerb.type.pa.PaDataType allowedPaType;

  private final java.util.List<org.apache.kerby.kerberos.kerb.type.pa.PaDataType> triedPaTypes;

  private final java.util.List<org.apache.kerby.kerberos.kerb.client.preauth.PreauthHandle> handles;

  public org.apache.kerby.kerberos.kerb.client.preauth.PreauthContext();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field preauthRequired:Z
       9: aload_0
      10: new           #3                  // class org/apache/kerby/kerberos/kerb/client/preauth/UserResponser
      13: dup
      14: invokespecial #4                  // Method org/apache/kerby/kerberos/kerb/client/preauth/UserResponser."<init>":()V
      17: putfield      #5                  // Field userResponser:Lorg/apache/kerby/kerberos/kerb/client/preauth/UserResponser;
      20: aload_0
      21: new           #6                  // class java/util/ArrayList
      24: dup
      25: iconst_1
      26: invokespecial #7                  // Method java/util/ArrayList."<init>":(I)V
      29: putfield      #8                  // Field triedPaTypes:Ljava/util/List;
      32: aload_0
      33: new           #6                  // class java/util/ArrayList
      36: dup
      37: iconst_5
      38: invokespecial #7                  // Method java/util/ArrayList."<init>":(I)V
      41: putfield      #9                  // Field handles:Ljava/util/List;
      44: aload_0
      45: getstatic     #10                 // Field org/apache/kerby/kerberos/kerb/type/pa/PaDataType.NONE:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
      48: putfield      #11                 // Field allowedPaType:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
      51: aload_0
      52: new           #12                 // class org/apache/kerby/kerberos/kerb/type/pa/PaData
      55: dup
      56: invokespecial #13                 // Method org/apache/kerby/kerberos/kerb/type/pa/PaData."<init>":()V
      59: putfield      #14                 // Field outputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
      62: return

  public void reset();
    Code:
       0: aload_0
       1: new           #12                 // class org/apache/kerby/kerberos/kerb/type/pa/PaData
       4: dup
       5: invokespecial #13                 // Method org/apache/kerby/kerberos/kerb/type/pa/PaData."<init>":()V
       8: putfield      #14                 // Field outputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
      11: return

  public boolean isPreauthRequired();
    Code:
       0: aload_0
       1: getfield      #2                  // Field preauthRequired:Z
       4: ireturn

  public void setPreauthRequired(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field preauthRequired:Z
       5: return

  public org.apache.kerby.kerberos.kerb.client.preauth.UserResponser getUserResponser();
    Code:
       0: aload_0
       1: getfield      #5                  // Field userResponser:Lorg/apache/kerby/kerberos/kerb/client/preauth/UserResponser;
       4: areturn

  public boolean isPaTypeAllowed(org.apache.kerby.kerberos.kerb.type.pa.PaDataType);
    Code:
       0: aload_0
       1: getfield      #11                 // Field allowedPaType:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
       4: getstatic     #10                 // Field org/apache/kerby/kerberos/kerb/type/pa/PaDataType.NONE:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
       7: if_acmpeq     18
      10: aload_0
      11: getfield      #11                 // Field allowedPaType:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
      14: aload_1
      15: if_acmpne     22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public org.apache.kerby.kerberos.kerb.type.pa.PaData getOutputPaData() throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field outputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
       4: areturn

  public boolean hasInputPaData();
    Code:
       0: aload_0
       1: getfield      #15                 // Field inputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
       4: ifnull        21
       7: aload_0
       8: getfield      #15                 // Field inputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
      11: invokevirtual #16                 // Method org/apache/kerby/kerberos/kerb/type/pa/PaData.isEmpty:()Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public org.apache.kerby.kerberos.kerb.type.pa.PaData getInputPaData();
    Code:
       0: aload_0
       1: getfield      #15                 // Field inputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
       4: areturn

  public void setInputPaData(org.apache.kerby.kerberos.kerb.type.pa.PaData);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #15                 // Field inputPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
       5: return

  public org.apache.kerby.kerberos.kerb.type.pa.PaData getErrorPaData();
    Code:
       0: aload_0
       1: getfield      #17                 // Field errorPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
       4: areturn

  public void setErrorPaData(org.apache.kerby.kerberos.kerb.type.pa.PaData);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #17                 // Field errorPaData:Lorg/apache/kerby/kerberos/kerb/type/pa/PaData;
       5: return

  public void setAllowedPaType(org.apache.kerby.kerberos.kerb.type.pa.PaDataType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #11                 // Field allowedPaType:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
       5: return

  public java.util.List<org.apache.kerby.kerberos.kerb.client.preauth.PreauthHandle> getHandles();
    Code:
       0: aload_0
       1: getfield      #9                  // Field handles:Ljava/util/List;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.pa.PaDataType getAllowedPaType();
    Code:
       0: aload_0
       1: getfield      #11                 // Field allowedPaType:Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
       4: areturn

  public boolean checkAndPutTried(org.apache.kerby.kerberos.kerb.type.pa.PaDataType);
    Code:
       0: aload_0
       1: getfield      #8                  // Field triedPaTypes:Ljava/util/List;
       4: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          39
      19: aload_2
      20: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #21                 // class org/apache/kerby/kerberos/kerb/type/pa/PaDataType
      28: astore_3
      29: aload_3
      30: aload_1
      31: if_acmpne     36
      34: iconst_1
      35: ireturn
      36: goto          10
      39: aload_0
      40: getfield      #8                  // Field triedPaTypes:Ljava/util/List;
      43: aload_1
      44: invokeinterface #22,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      49: pop
      50: iconst_0
      51: ireturn
}
