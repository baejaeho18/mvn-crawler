Compiled from "AbstractPreauthPlugin.java"
public class org.apache.kerby.kerberos.kerb.client.preauth.AbstractPreauthPlugin implements org.apache.kerby.kerberos.kerb.client.preauth.KrbPreauth {
  private org.apache.kerby.kerberos.kerb.preauth.PreauthPluginMeta pluginMeta;

  protected org.apache.kerby.kerberos.kerb.client.KrbContext context;

  public org.apache.kerby.kerberos.kerb.client.preauth.AbstractPreauthPlugin(org.apache.kerby.kerberos.kerb.preauth.PreauthPluginMeta);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field pluginMeta:Lorg/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta;
       9: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pluginMeta:Lorg/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta;
       4: invokeinterface #3,  1            // InterfaceMethod org/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta.getName:()Ljava/lang/String;
       9: areturn

  public int getVersion();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pluginMeta:Lorg/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta;
       4: invokeinterface #4,  1            // InterfaceMethod org/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta.getVersion:()I
       9: ireturn

  public org.apache.kerby.kerberos.kerb.type.pa.PaDataType[] getPaTypes();
    Code:
       0: aload_0
       1: getfield      #2                  // Field pluginMeta:Lorg/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta;
       4: invokeinterface #5,  1            // InterfaceMethod org/apache/kerby/kerberos/kerb/preauth/PreauthPluginMeta.getPaTypes:()[Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;
       9: areturn

  public void init(org.apache.kerby.kerberos.kerb.client.KrbContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
       5: return

  public org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext initRequestContext(org.apache.kerby.kerberos.kerb.client.request.KdcRequest);
    Code:
       0: aconst_null
       1: areturn

  public void prepareQuestions(org.apache.kerby.kerberos.kerb.client.request.KdcRequest, org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext) throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_1
       1: invokevirtual #7                  // Method org/apache/kerby/kerberos/kerb/client/request/KdcRequest.needAsKey:()V
       4: return

  public java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType> getEncTypes(org.apache.kerby.kerberos.kerb.client.request.KdcRequest, org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext);
    Code:
       0: invokestatic  #8                  // Method java/util/Collections.emptyList:()Ljava/util/List;
       3: areturn

  public void setPreauthOptions(org.apache.kerby.kerberos.kerb.client.request.KdcRequest, org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext, org.apache.kerby.KOptions);
    Code:
       0: return

  public void tryFirst(org.apache.kerby.kerberos.kerb.client.request.KdcRequest, org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext, org.apache.kerby.kerberos.kerb.type.pa.PaData) throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: return

  public boolean process(org.apache.kerby.kerberos.kerb.client.request.KdcRequest, org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext, org.apache.kerby.kerberos.kerb.type.pa.PaDataEntry, org.apache.kerby.kerberos.kerb.type.pa.PaData) throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: iconst_0
       1: ireturn

  public boolean tryAgain(org.apache.kerby.kerberos.kerb.client.request.KdcRequest, org.apache.kerby.kerberos.kerb.preauth.PluginRequestContext, org.apache.kerby.kerberos.kerb.type.pa.PaDataType, org.apache.kerby.kerberos.kerb.type.pa.PaData, org.apache.kerby.kerberos.kerb.type.pa.PaData);
    Code:
       0: iconst_0
       1: ireturn

  public org.apache.kerby.kerberos.kerb.preauth.PaFlags getFlags(org.apache.kerby.kerberos.kerb.type.pa.PaDataType);
    Code:
       0: new           #9                  // class org/apache/kerby/kerberos/kerb/preauth/PaFlags
       3: dup
       4: iconst_0
       5: invokespecial #10                 // Method org/apache/kerby/kerberos/kerb/preauth/PaFlags."<init>":(I)V
       8: astore_2
       9: aload_2
      10: getstatic     #11                 // Field org/apache/kerby/kerberos/kerb/preauth/PaFlag.PA_REAL:Lorg/apache/kerby/kerberos/kerb/preauth/PaFlag;
      13: invokevirtual #12                 // Method org/apache/kerby/kerberos/kerb/preauth/PaFlags.setFlag:(Lorg/apache/kerby/asn1/EnumType;)V
      16: aload_2
      17: areturn

  public void destroy();
    Code:
       0: return
}
