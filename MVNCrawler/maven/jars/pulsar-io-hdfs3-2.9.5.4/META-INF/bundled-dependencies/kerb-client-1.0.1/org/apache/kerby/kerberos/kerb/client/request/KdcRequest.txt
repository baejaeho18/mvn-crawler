Compiled from "KdcRequest.java"
public abstract class org.apache.kerby.kerberos.kerb.client.request.KdcRequest {
  protected java.util.Map<java.lang.String, java.lang.Object> credCache;

  private org.apache.kerby.kerberos.kerb.client.KrbContext context;

  private java.lang.Object sessionData;

  private org.apache.kerby.KOptions requestOptions;

  private org.apache.kerby.kerberos.kerb.type.base.PrincipalName serverPrincipal;

  private java.util.List<org.apache.kerby.kerberos.kerb.type.base.HostAddress> hostAddresses;

  private org.apache.kerby.kerberos.kerb.type.kdc.KdcOptions kdcOptions;

  private java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType> encryptionTypes;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionType chosenEncryptionType;

  private int chosenNonce;

  private org.apache.kerby.kerberos.kerb.type.kdc.KdcReq kdcReq;

  private org.apache.kerby.kerberos.kerb.type.kdc.KdcReqBody reqBody;

  private org.apache.kerby.kerberos.kerb.type.kdc.KdcRep kdcRep;

  private org.apache.kerby.kerberos.kerb.client.preauth.PreauthContext preauthContext;

  private org.apache.kerby.kerberos.kerb.client.preauth.KrbFastRequestState fastRequestState;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionKey asKey;

  private byte[] outerRequestBody;

  private boolean isRetrying;

  public org.apache.kerby.kerberos.kerb.client.request.KdcRequest(org.apache.kerby.kerberos.kerb.client.KrbContext);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/ArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/ArrayList."<init>":()V
      12: putfield      #4                  // Field hostAddresses:Ljava/util/List;
      15: aload_0
      16: new           #5                  // class org/apache/kerby/kerberos/kerb/type/kdc/KdcOptions
      19: dup
      20: invokespecial #6                  // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcOptions."<init>":()V
      23: putfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
      26: aload_0
      27: aload_1
      28: putfield      #8                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
      31: aload_0
      32: iconst_0
      33: putfield      #9                  // Field isRetrying:Z
      36: aload_0
      37: new           #10                 // class java/util/HashMap
      40: dup
      41: invokespecial #11                 // Method java/util/HashMap."<init>":()V
      44: putfield      #12                 // Field credCache:Ljava/util/Map;
      47: aload_0
      48: aload_1
      49: invokevirtual #13                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.getPreauthHandler:()Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthHandler;
      52: aload_0
      53: invokevirtual #14                 // Method org/apache/kerby/kerberos/kerb/client/preauth/PreauthHandler.preparePreauthContext:(Lorg/apache/kerby/kerberos/kerb/client/request/KdcRequest;)Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
      56: putfield      #15                 // Field preauthContext:Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
      59: aload_0
      60: new           #16                 // class org/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState
      63: dup
      64: invokespecial #17                 // Method org/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState."<init>":()V
      67: putfield      #18                 // Field fastRequestState:Lorg/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState;
      70: return

  public org.apache.kerby.kerberos.kerb.client.preauth.KrbFastRequestState getFastRequestState();
    Code:
       0: aload_0
       1: getfield      #18                 // Field fastRequestState:Lorg/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState;
       4: areturn

  public void setFastRequestState(org.apache.kerby.kerberos.kerb.client.preauth.KrbFastRequestState);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field fastRequestState:Lorg/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState;
       5: return

  public byte[] getOuterRequestBody();
    Code:
       0: aload_0
       1: getfield      #19                 // Field outerRequestBody:[B
       4: invokevirtual #20                 // Method "[B".clone:()Ljava/lang/Object;
       7: checkcast     #21                 // class "[B"
      10: areturn

  public void setOuterRequestBody(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #22                 // Method "[B".clone:()Ljava/lang/Object;
       5: checkcast     #21                 // class "[B"
       8: putfield      #19                 // Field outerRequestBody:[B
      11: return

  public java.lang.Object getSessionData();
    Code:
       0: aload_0
       1: getfield      #23                 // Field sessionData:Ljava/lang/Object;
       4: areturn

  public void setSessionData(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field sessionData:Ljava/lang/Object;
       5: return

  public org.apache.kerby.KOptions getRequestOptions();
    Code:
       0: aload_0
       1: getfield      #24                 // Field requestOptions:Lorg/apache/kerby/KOptions;
       4: areturn

  public void setRequestOptions(org.apache.kerby.KOptions);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #24                 // Field requestOptions:Lorg/apache/kerby/KOptions;
       5: return

  public boolean isRetrying();
    Code:
       0: aload_0
       1: getfield      #9                  // Field isRetrying:Z
       4: ireturn

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getAsKey() throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: getfield      #25                 // Field asKey:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: areturn

  public void setAsKey(org.apache.kerby.kerberos.kerb.type.base.EncryptionKey);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #25                 // Field asKey:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       5: return

  public void setAllowedPreauth(org.apache.kerby.kerberos.kerb.type.pa.PaDataType);
    Code:
       0: aload_0
       1: getfield      #15                 // Field preauthContext:Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
       4: aload_1
       5: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/client/preauth/PreauthContext.setAllowedPaType:(Lorg/apache/kerby/kerberos/kerb/type/pa/PaDataType;)V
       8: return

  public java.util.Map<java.lang.String, java.lang.Object> getCredCache();
    Code:
       0: aload_0
       1: getfield      #12                 // Field credCache:Ljava/util/Map;
       4: areturn

  public void setPreauthRequired(boolean);
    Code:
       0: aload_0
       1: getfield      #15                 // Field preauthContext:Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
       4: iload_1
       5: invokevirtual #27                 // Method org/apache/kerby/kerberos/kerb/client/preauth/PreauthContext.setPreauthRequired:(Z)V
       8: return

  public void resetPrequthContxt();
    Code:
       0: aload_0
       1: getfield      #15                 // Field preauthContext:Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
       4: invokevirtual #28                 // Method org/apache/kerby/kerberos/kerb/client/preauth/PreauthContext.reset:()V
       7: return

  public org.apache.kerby.kerberos.kerb.client.preauth.PreauthContext getPreauthContext();
    Code:
       0: aload_0
       1: getfield      #15                 // Field preauthContext:Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
       4: areturn

  public org.apache.kerby.kerberos.kerb.type.kdc.KdcReq getKdcReq();
    Code:
       0: aload_0
       1: getfield      #29                 // Field kdcReq:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcReq;
       4: areturn

  public void setKdcReq(org.apache.kerby.kerberos.kerb.type.kdc.KdcReq);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field kdcReq:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcReq;
       5: return

  protected org.apache.kerby.kerberos.kerb.type.kdc.KdcReqBody getReqBody(org.apache.kerby.kerberos.kerb.type.KerberosTime) throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: getfield      #30                 // Field reqBody:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody;
       4: ifnonnull     16
       7: aload_0
       8: aload_0
       9: aload_1
      10: invokevirtual #31                 // Method makeReqBody:(Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody;
      13: putfield      #30                 // Field reqBody:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody;
      16: aload_0
      17: getfield      #30                 // Field reqBody:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody;
      20: areturn

  public org.apache.kerby.kerberos.kerb.type.kdc.KdcRep getKdcRep();
    Code:
       0: aload_0
       1: getfield      #32                 // Field kdcRep:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcRep;
       4: areturn

  public void setKdcRep(org.apache.kerby.kerberos.kerb.type.kdc.KdcRep);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #32                 // Field kdcRep:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcRep;
       5: return

  protected org.apache.kerby.kerberos.kerb.type.kdc.KdcReqBody makeReqBody(org.apache.kerby.kerberos.kerb.type.KerberosTime) throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: new           #33                 // class org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody
       3: dup
       4: invokespecial #34                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody."<init>":()V
       7: astore_2
       8: invokestatic  #35                 // Method java/lang/System.currentTimeMillis:()J
      11: lstore_3
      12: aload_2
      13: new           #36                 // class org/apache/kerby/kerberos/kerb/type/KerberosTime
      16: dup
      17: lload_3
      18: invokespecial #37                 // Method org/apache/kerby/kerberos/kerb/type/KerberosTime."<init>":(J)V
      21: invokevirtual #38                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setFrom:(Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)V
      24: aload_0
      25: invokevirtual #39                 // Method getClientPrincipal:()Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      28: astore        5
      30: aload_2
      31: aload         5
      33: invokevirtual #40                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setCname:(Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;)V
      36: aload_2
      37: aload_0
      38: invokevirtual #41                 // Method getContext:()Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
      41: invokevirtual #42                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.getKrbSetting:()Lorg/apache/kerby/kerberos/kerb/client/KrbSetting;
      44: invokevirtual #43                 // Method org/apache/kerby/kerberos/kerb/client/KrbSetting.getKdcRealm:()Ljava/lang/String;
      47: invokevirtual #44                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setRealm:(Ljava/lang/String;)V
      50: aload_0
      51: invokevirtual #45                 // Method getServerPrincipal:()Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
      54: astore        6
      56: aload_2
      57: aload         6
      59: invokevirtual #46                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setSname:(Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;)V
      62: aload_2
      63: new           #36                 // class org/apache/kerby/kerberos/kerb/type/KerberosTime
      66: dup
      67: lload_3
      68: aload_0
      69: invokevirtual #47                 // Method getTicketValidTime:()J
      72: ladd
      73: invokespecial #37                 // Method org/apache/kerby/kerberos/kerb/type/KerberosTime."<init>":(J)V
      76: invokevirtual #48                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setTill:(Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)V
      79: aload_1
      80: ifnull        89
      83: aload_1
      84: astore        7
      86: goto          150
      89: aload_0
      90: invokevirtual #49                 // Method getRequestOptions:()Lorg/apache/kerby/KOptions;
      93: getstatic     #50                 // Field org/apache/kerby/kerberos/kerb/client/KrbOption.RENEWABLE_TIME:Lorg/apache/kerby/kerberos/kerb/client/KrbOption;
      96: invokevirtual #51                 // Method org/apache/kerby/KOptions.contains:(Lorg/apache/kerby/KOption;)Z
      99: ifeq          118
     102: aload_0
     103: invokevirtual #49                 // Method getRequestOptions:()Lorg/apache/kerby/KOptions;
     106: getstatic     #50                 // Field org/apache/kerby/kerberos/kerb/client/KrbOption.RENEWABLE_TIME:Lorg/apache/kerby/kerberos/kerb/client/KrbOption;
     109: invokevirtual #52                 // Method org/apache/kerby/KOptions.getIntegerOption:(Lorg/apache/kerby/KOption;)I
     112: i2l
     113: lstore        8
     115: goto          133
     118: aload_0
     119: invokevirtual #41                 // Method getContext:()Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
     122: invokevirtual #42                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.getKrbSetting:()Lorg/apache/kerby/kerberos/kerb/client/KrbSetting;
     125: invokevirtual #53                 // Method org/apache/kerby/kerberos/kerb/client/KrbSetting.getKrbConfig:()Lorg/apache/kerby/kerberos/kerb/client/KrbConfig;
     128: invokevirtual #54                 // Method org/apache/kerby/kerberos/kerb/client/KrbConfig.getRenewLifetime:()J
     131: lstore        8
     133: new           #36                 // class org/apache/kerby/kerberos/kerb/type/KerberosTime
     136: dup
     137: lload_3
     138: lload         8
     140: ldc2_w        #55                 // long 1000l
     143: lmul
     144: ladd
     145: invokespecial #37                 // Method org/apache/kerby/kerberos/kerb/type/KerberosTime."<init>":(J)V
     148: astore        7
     150: aload_2
     151: aload         7
     153: invokevirtual #57                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setRtime:(Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;)V
     156: aload_0
     157: invokevirtual #58                 // Method generateNonce:()I
     160: istore        8
     162: aload_2
     163: iload         8
     165: invokevirtual #59                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setNonce:(I)V
     168: aload_0
     169: iload         8
     171: invokevirtual #60                 // Method setChosenNonce:(I)V
     174: aload_2
     175: aload_0
     176: invokevirtual #61                 // Method getKdcOptions:()Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
     179: invokevirtual #62                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setKdcOptions:(Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;)V
     182: aload_0
     183: invokevirtual #63                 // Method getHostAddresses:()Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;
     186: astore        9
     188: aload         9
     190: ifnull        199
     193: aload_2
     194: aload         9
     196: invokevirtual #64                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setAddresses:(Lorg/apache/kerby/kerberos/kerb/type/base/HostAddresses;)V
     199: aload_2
     200: aload_0
     201: invokevirtual #65                 // Method getEncryptionTypes:()Ljava/util/List;
     204: invokevirtual #66                 // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcReqBody.setEtypes:(Ljava/util/List;)V
     207: aload_2
     208: areturn

  public org.apache.kerby.kerberos.kerb.type.kdc.KdcOptions getKdcOptions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
       4: areturn

  public void setKdcOptions(org.apache.kerby.kerberos.kerb.type.kdc.KdcOptions);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.HostAddresses getHostAddresses();
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: getfield      #4                  // Field hostAddresses:Ljava/util/List;
       6: invokeinterface #67,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      11: ifne          59
      14: new           #68                 // class org/apache/kerby/kerberos/kerb/type/base/HostAddresses
      17: dup
      18: invokespecial #69                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddresses."<init>":()V
      21: astore_1
      22: aload_0
      23: getfield      #4                  // Field hostAddresses:Ljava/util/List;
      26: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      31: astore_2
      32: aload_2
      33: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      38: ifeq          59
      41: aload_2
      42: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      47: checkcast     #73                 // class org/apache/kerby/kerberos/kerb/type/base/HostAddress
      50: astore_3
      51: aload_1
      52: aload_3
      53: invokevirtual #74                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddresses.addElement:(Lorg/apache/kerby/asn1/type/Asn1Type;)V
      56: goto          32
      59: aload_1
      60: areturn

  public void setHostAddresses(java.util.List<org.apache.kerby.kerberos.kerb.type.base.HostAddress>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field hostAddresses:Ljava/util/List;
       5: return

  public org.apache.kerby.kerberos.kerb.client.KrbContext getContext();
    Code:
       0: aload_0
       1: getfield      #8                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
       4: areturn

  public void setContext(org.apache.kerby.kerberos.kerb.client.KrbContext);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
       5: return

  protected byte[] decryptWithClientKey(org.apache.kerby.kerberos.kerb.type.base.EncryptedData, org.apache.kerby.kerberos.kerb.type.base.KeyUsage) throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method getClientKey:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: astore_3
       5: aload_3
       6: ifnonnull     19
       9: new           #76                 // class org/apache/kerby/kerberos/kerb/KrbException
      12: dup
      13: ldc           #77                 // String Client key isn\'t availalbe
      15: invokespecial #78                 // Method org/apache/kerby/kerberos/kerb/KrbException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: aload_3
      21: aload_2
      22: invokestatic  #79                 // Method org/apache/kerby/kerberos/kerb/crypto/EncryptionHandler.decrypt:(Lorg/apache/kerby/kerberos/kerb/type/base/EncryptedData;Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;Lorg/apache/kerby/kerberos/kerb/type/base/KeyUsage;)[B
      25: areturn

  public abstract org.apache.kerby.kerberos.kerb.type.base.PrincipalName getClientPrincipal();

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName getServerPrincipal();
    Code:
       0: aload_0
       1: getfield      #80                 // Field serverPrincipal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       4: areturn

  public void setServerPrincipal(org.apache.kerby.kerberos.kerb.type.base.PrincipalName);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #80                 // Field serverPrincipal:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName;
       5: return

  public java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType> getEncryptionTypes();
    Code:
       0: aload_0
       1: getfield      #81                 // Field encryptionTypes:Ljava/util/List;
       4: ifnonnull     21
       7: aload_0
       8: aload_0
       9: getfield      #8                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
      12: invokevirtual #82                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.getConfig:()Lorg/apache/kerby/kerberos/kerb/client/KrbConfig;
      15: invokevirtual #83                 // Method org/apache/kerby/kerberos/kerb/client/KrbConfig.getEncryptionTypes:()Ljava/util/List;
      18: putfield      #81                 // Field encryptionTypes:Ljava/util/List;
      21: aload_0
      22: getfield      #81                 // Field encryptionTypes:Ljava/util/List;
      25: invokestatic  #84                 // Method org/apache/kerby/kerberos/kerb/common/EncryptionUtil.orderEtypesByStrength:(Ljava/util/List;)Ljava/util/List;
      28: areturn

  public void setEncryptionTypes(java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #81                 // Field encryptionTypes:Ljava/util/List;
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionType getChosenEncryptionType();
    Code:
       0: aload_0
       1: getfield      #85                 // Field chosenEncryptionType:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       4: areturn

  public void setChosenEncryptionType(org.apache.kerby.kerberos.kerb.type.base.EncryptionType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #85                 // Field chosenEncryptionType:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       5: return

  public int generateNonce();
    Code:
       0: aload_0
       1: getfield      #8                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
       4: invokevirtual #86                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.generateNonce:()I
       7: ireturn

  public int getChosenNonce();
    Code:
       0: aload_0
       1: getfield      #87                 // Field chosenNonce:I
       4: ireturn

  public void setChosenNonce(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #87                 // Field chosenNonce:I
       5: return

  public abstract org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getClientKey() throws org.apache.kerby.kerberos.kerb.KrbException;

  public long getTicketValidTime();
    Code:
       0: aload_0
       1: invokevirtual #49                 // Method getRequestOptions:()Lorg/apache/kerby/KOptions;
       4: getstatic     #88                 // Field org/apache/kerby/kerberos/kerb/client/KrbOption.LIFE_TIME:Lorg/apache/kerby/kerberos/kerb/client/KrbOption;
       7: invokevirtual #51                 // Method org/apache/kerby/KOptions.contains:(Lorg/apache/kerby/KOption;)Z
      10: ifeq          29
      13: aload_0
      14: invokevirtual #49                 // Method getRequestOptions:()Lorg/apache/kerby/KOptions;
      17: getstatic     #88                 // Field org/apache/kerby/kerberos/kerb/client/KrbOption.LIFE_TIME:Lorg/apache/kerby/kerberos/kerb/client/KrbOption;
      20: invokevirtual #52                 // Method org/apache/kerby/KOptions.getIntegerOption:(Lorg/apache/kerby/KOption;)I
      23: sipush        1000
      26: imul
      27: i2l
      28: lreturn
      29: aload_0
      30: getfield      #8                  // Field context:Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
      33: invokevirtual #89                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.getTicketValidTime:()J
      36: lreturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getTicketTillTime();
    Code:
       0: invokestatic  #35                 // Method java/lang/System.currentTimeMillis:()J
       3: lstore_1
       4: new           #36                 // class org/apache/kerby/kerberos/kerb/type/KerberosTime
       7: dup
       8: lload_1
       9: ldc2_w        #90                 // long -694967296l
      12: ladd
      13: invokespecial #37                 // Method org/apache/kerby/kerberos/kerb/type/KerberosTime."<init>":(J)V
      16: areturn

  public void addHost(java.lang.String) throws java.net.UnknownHostException;
    Code:
       0: aload_1
       1: invokestatic  #92                 // Method java/net/InetAddress.getByName:(Ljava/lang/String;)Ljava/net/InetAddress;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field hostAddresses:Ljava/util/List;
       9: new           #73                 // class org/apache/kerby/kerberos/kerb/type/base/HostAddress
      12: dup
      13: aload_2
      14: invokespecial #93                 // Method org/apache/kerby/kerberos/kerb/type/base/HostAddress."<init>":(Ljava/net/InetAddress;)V
      17: invokeinterface #94,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      22: pop
      23: return

  public void process() throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: invokevirtual #95                 // Method processKdcOptions:()V
       4: aload_0
       5: invokevirtual #96                 // Method preauth:()V
       8: return

  public abstract void processResponse(org.apache.kerby.kerberos.kerb.type.kdc.KdcRep) throws org.apache.kerby.kerberos.kerb.KrbException;

  public org.apache.kerby.KOptions getPreauthOptions();
    Code:
       0: new           #97                 // class org/apache/kerby/KOptions
       3: dup
       4: invokespecial #98                 // Method org/apache/kerby/KOptions."<init>":()V
       7: areturn

  protected void preauth() throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: invokevirtual #65                 // Method getEncryptionTypes:()Ljava/util/List;
       4: astore_1
       5: aload_1
       6: invokeinterface #67,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      11: ifeq          24
      14: new           #76                 // class org/apache/kerby/kerberos/kerb/KrbException
      17: dup
      18: ldc           #99                 // String No encryption type is configured and available
      20: invokespecial #78                 // Method org/apache/kerby/kerberos/kerb/KrbException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_1
      25: invokeinterface #100,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      30: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #101                // class org/apache/kerby/kerberos/kerb/type/base/EncryptionType
      38: astore_2
      39: aload_0
      40: aload_2
      41: invokevirtual #102                // Method setChosenEncryptionType:(Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;)V
      44: aload_0
      45: invokevirtual #103                // Method getPreauthHandler:()Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthHandler;
      48: aload_0
      49: invokevirtual #104                // Method org/apache/kerby/kerberos/kerb/client/preauth/PreauthHandler.preauth:(Lorg/apache/kerby/kerberos/kerb/client/request/KdcRequest;)V
      52: return

  protected org.apache.kerby.kerberos.kerb.client.preauth.PreauthHandler getPreauthHandler();
    Code:
       0: aload_0
       1: invokevirtual #41                 // Method getContext:()Lorg/apache/kerby/kerberos/kerb/client/KrbContext;
       4: invokevirtual #13                 // Method org/apache/kerby/kerberos/kerb/client/KrbContext.getPreauthHandler:()Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthHandler;
       7: areturn

  public void needAsKey() throws org.apache.kerby.kerberos.kerb.KrbException;
    Code:
       0: aload_0
       1: invokevirtual #75                 // Method getClientKey:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: astore_1
       5: aload_1
       6: ifnonnull     19
       9: new           #105                // class java/lang/RuntimeException
      12: dup
      13: ldc           #106                // String Client key should be prepared or prompted at this time!
      15: invokespecial #107                // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: aload_1
      21: invokevirtual #108                // Method setAsKey:(Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;)V
      24: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionType getEncType();
    Code:
       0: aload_0
       1: invokevirtual #109                // Method getChosenEncryptionType:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       4: areturn

  public void askQuestion(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: getfield      #15                 // Field preauthContext:Lorg/apache/kerby/kerberos/kerb/client/preauth/PreauthContext;
       4: invokevirtual #110                // Method org/apache/kerby/kerberos/kerb/client/preauth/PreauthContext.getUserResponser:()Lorg/apache/kerby/kerberos/kerb/client/preauth/UserResponser;
       7: aload_1
       8: aload_2
       9: invokevirtual #111                // Method org/apache/kerby/kerberos/kerb/client/preauth/UserResponser.askQuestion:(Ljava/lang/String;Ljava/lang/String;)V
      12: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getArmorKey();
    Code:
       0: aload_0
       1: getfield      #18                 // Field fastRequestState:Lorg/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState;
       4: invokevirtual #112                // Method org/apache/kerby/kerberos/kerb/client/preauth/KrbFastRequestState.getArmorKey:()Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       7: areturn

  public org.apache.kerby.kerberos.kerb.type.KerberosTime getPreauthTime();
    Code:
       0: invokestatic  #113                // Method org/apache/kerby/kerberos/kerb/type/KerberosTime.now:()Lorg/apache/kerby/kerberos/kerb/type/KerberosTime;
       3: areturn

  public java.lang.Object getCacheValue(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #12                 // Field credCache:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #114,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: areturn

  public void cacheValue(java.lang.String, java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #12                 // Field credCache:Ljava/util/Map;
       4: aload_1
       5: aload_2
       6: invokeinterface #115,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      11: pop
      12: return

  protected void processKdcOptions();
    Code:
       0: aload_0
       1: getfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
       4: getstatic     #116                // Field org/apache/kerby/kerberos/kerb/type/kdc/KdcOption.FORWARDABLE:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOption;
       7: invokevirtual #117                // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcOptions.setFlag:(Lorg/apache/kerby/asn1/EnumType;)V
      10: aload_0
      11: getfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
      14: getstatic     #118                // Field org/apache/kerby/kerberos/kerb/type/kdc/KdcOption.PROXIABLE:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOption;
      17: invokevirtual #117                // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcOptions.setFlag:(Lorg/apache/kerby/asn1/EnumType;)V
      20: aload_0
      21: getfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
      24: getstatic     #119                // Field org/apache/kerby/kerberos/kerb/type/kdc/KdcOption.RENEWABLE_OK:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOption;
      27: invokevirtual #117                // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcOptions.setFlag:(Lorg/apache/kerby/asn1/EnumType;)V
      30: aload_0
      31: getfield      #24                 // Field requestOptions:Lorg/apache/kerby/KOptions;
      34: invokevirtual #120                // Method org/apache/kerby/KOptions.getOptions:()Ljava/util/List;
      37: invokeinterface #70,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      42: astore_1
      43: aload_1
      44: invokeinterface #71,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      49: ifeq          171
      52: aload_1
      53: invokeinterface #72,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      58: checkcast     #121                // class org/apache/kerby/KOption
      61: astore_2
      62: aload_2
      63: invokeinterface #122,  1          // InterfaceMethod org/apache/kerby/KOption.getOptionInfo:()Lorg/apache/kerby/KOptionInfo;
      68: invokevirtual #123                // Method org/apache/kerby/KOptionInfo.getGroup:()Lorg/apache/kerby/KOptionGroup;
      71: getstatic     #124                // Field org/apache/kerby/kerberos/kerb/client/KrbOptionGroup.KDC_FLAGS:Lorg/apache/kerby/kerberos/kerb/client/KrbOptionGroup;
      74: if_acmpne     168
      77: aload_2
      78: checkcast     #125                // class org/apache/kerby/kerberos/kerb/client/KrbKdcOption
      81: astore_3
      82: aload_0
      83: getfield      #24                 // Field requestOptions:Lorg/apache/kerby/KOptions;
      86: aload_2
      87: iconst_1
      88: invokestatic  #126                // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      91: invokevirtual #127                // Method org/apache/kerby/KOptions.getBooleanOption:(Lorg/apache/kerby/KOption;Ljava/lang/Boolean;)Z
      94: istore        4
      96: aload_2
      97: getstatic     #128                // Field org/apache/kerby/kerberos/kerb/client/KrbKdcOption.NOT_FORWARDABLE:Lorg/apache/kerby/kerberos/kerb/client/KrbKdcOption;
     100: invokevirtual #129                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     103: ifeq          122
     106: getstatic     #130                // Field org/apache/kerby/kerberos/kerb/client/KrbKdcOption.FORWARDABLE:Lorg/apache/kerby/kerberos/kerb/client/KrbKdcOption;
     109: astore_3
     110: iload         4
     112: ifne          119
     115: iconst_1
     116: goto          120
     119: iconst_0
     120: istore        4
     122: aload_2
     123: getstatic     #131                // Field org/apache/kerby/kerberos/kerb/client/KrbKdcOption.NOT_PROXIABLE:Lorg/apache/kerby/kerberos/kerb/client/KrbKdcOption;
     126: invokevirtual #129                // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     129: ifeq          148
     132: getstatic     #132                // Field org/apache/kerby/kerberos/kerb/client/KrbKdcOption.PROXIABLE:Lorg/apache/kerby/kerberos/kerb/client/KrbKdcOption;
     135: astore_3
     136: iload         4
     138: ifne          145
     141: iconst_1
     142: goto          146
     145: iconst_0
     146: istore        4
     148: aload_3
     149: invokevirtual #133                // Method org/apache/kerby/kerberos/kerb/client/KrbKdcOption.name:()Ljava/lang/String;
     152: invokestatic  #134                // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcOption.valueOf:(Ljava/lang/String;)Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOption;
     155: astore        5
     157: aload_0
     158: getfield      #7                  // Field kdcOptions:Lorg/apache/kerby/kerberos/kerb/type/kdc/KdcOptions;
     161: aload         5
     163: iload         4
     165: invokevirtual #135                // Method org/apache/kerby/kerberos/kerb/type/kdc/KdcOptions.setFlag:(Lorg/apache/kerby/asn1/EnumType;Z)V
     168: goto          43
     171: return
}
