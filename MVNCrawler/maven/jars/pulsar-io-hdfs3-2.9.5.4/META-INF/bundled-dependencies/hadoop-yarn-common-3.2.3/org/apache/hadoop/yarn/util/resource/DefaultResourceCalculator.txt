Compiled from "DefaultResourceCalculator.java"
public class org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator extends org.apache.hadoop.yarn.util.resource.ResourceCalculator {
  private static final org.apache.commons.logging.Log LOG;

  public org.apache.hadoop.yarn.util.resource.DefaultResourceCalculator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/yarn/util/resource/ResourceCalculator."<init>":()V
       4: return

  public int compare(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, boolean);
    Code:
       0: aload_2
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: aload_3
       5: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       8: invokestatic  #3                  // Method java/lang/Long.compare:(JJ)I
      11: ireturn

  public long computeAvailableContainers(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: aload_2
       5: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       8: ldiv
       9: lreturn

  public float divide(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_0
       1: aload_2
       2: aload_3
       3: invokevirtual #4                  // Method ratio:(Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/Resource;)F
       6: freturn

  public boolean isInvalidDivisor(org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: l2f
       5: fconst_0
       6: fcmpl
       7: ifne          12
      10: iconst_1
      11: ireturn
      12: iconst_0
      13: ireturn

  public float ratio(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: l2f
       5: aload_2
       6: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       9: l2f
      10: fdiv
      11: freturn

  public org.apache.hadoop.yarn.api.records.Resource divideAndCeil(org.apache.hadoop.yarn.api.records.Resource, int);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: iload_2
       5: i2l
       6: invokestatic  #5                  // Method divideAndCeil:(JJ)J
       9: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      12: areturn

  public org.apache.hadoop.yarn.api.records.Resource divideAndCeil(org.apache.hadoop.yarn.api.records.Resource, float);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: fload_2
       5: invokestatic  #7                  // Method divideAndCeil:(JF)J
       8: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      11: areturn

  public org.apache.hadoop.yarn.api.records.Resource normalize(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload         4
       2: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       5: lconst_0
       6: lcmp
       7: ifne          48
      10: getstatic     #8                  // Field LOG:Lorg/apache/commons/logging/Log;
      13: new           #9                  // class java/lang/StringBuilder
      16: dup
      17: invokespecial #10                 // Method java/lang/StringBuilder."<init>":()V
      20: ldc           #11                 // String Memory cannot be allocated in increments of zero. Assuming
      22: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      25: aload_2
      26: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      29: invokevirtual #13                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      32: ldc           #14                 // String MB increment size. Please ensure the scheduler configuration is correct.
      34: invokevirtual #12                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: invokevirtual #15                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      40: invokeinterface #16,  2           // InterfaceMethod org/apache/commons/logging/Log.error:(Ljava/lang/Object;)V
      45: aload_2
      46: astore        4
      48: aload_1
      49: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      52: aload_2
      53: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      56: invokestatic  #17                 // Method java/lang/Math.max:(JJ)J
      59: aload         4
      61: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      64: invokestatic  #18                 // Method roundUp:(JJ)J
      67: aload_3
      68: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      71: invokestatic  #19                 // Method java/lang/Math.min:(JJ)J
      74: lstore        5
      76: lload         5
      78: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      81: areturn

  public org.apache.hadoop.yarn.api.records.Resource roundUp(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: aload_2
       5: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       8: invokestatic  #18                 // Method roundUp:(JJ)J
      11: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      14: areturn

  public org.apache.hadoop.yarn.api.records.Resource roundDown(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: aload_2
       5: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       8: invokestatic  #20                 // Method roundDown:(JJ)J
      11: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      14: areturn

  public org.apache.hadoop.yarn.api.records.Resource multiplyAndNormalizeUp(org.apache.hadoop.yarn.api.records.Resource, double, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: l2d
       5: dload_2
       6: dmul
       7: ldc2_w        #21                 // double 0.5d
      10: dadd
      11: d2l
      12: aload         4
      14: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      17: invokestatic  #18                 // Method roundUp:(JJ)J
      20: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      23: areturn

  public org.apache.hadoop.yarn.api.records.Resource multiplyAndNormalizeUp(org.apache.hadoop.yarn.api.records.Resource, double[], org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: l2d
       5: aload_2
       6: iconst_0
       7: daload
       8: dmul
       9: ldc2_w        #21                 // double 0.5d
      12: dadd
      13: d2l
      14: aload_3
      15: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      18: invokestatic  #18                 // Method roundUp:(JJ)J
      21: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      24: areturn

  public org.apache.hadoop.yarn.api.records.Resource multiplyAndNormalizeDown(org.apache.hadoop.yarn.api.records.Resource, double, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: l2d
       5: dload_2
       6: dmul
       7: d2l
       8: aload         4
      10: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
      13: invokestatic  #20                 // Method roundDown:(JJ)J
      16: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      19: areturn

  public boolean fitsIn(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: aload_2
       5: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       8: lcmp
       9: ifgt          16
      12: iconst_1
      13: goto          17
      16: iconst_0
      17: ireturn

  public org.apache.hadoop.yarn.api.records.Resource normalizeDown(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: aload_2
       5: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       8: invokestatic  #20                 // Method roundDown:(JJ)J
      11: invokestatic  #6                  // Method org/apache/hadoop/yarn/util/resource/Resources.createResource:(J)Lorg/apache/hadoop/yarn/api/records/Resource;
      14: areturn

  public boolean isAnyMajorResourceZeroOrNegative(org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: lconst_0
       5: lcmp
       6: ifgt          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean isAnyMajorResourceAboveZero(org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: invokevirtual #2                  // Method org/apache/hadoop/yarn/api/records/Resource.getMemorySize:()J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  public boolean isAllInvalidDivisor(org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #23                 // Method isInvalidDivisor:(Lorg/apache/hadoop/yarn/api/records/Resource;)Z
       5: ireturn

  static {};
    Code:
       0: ldc           #24                 // class org/apache/hadoop/yarn/util/resource/DefaultResourceCalculator
       2: invokestatic  #25                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #8                  // Field LOG:Lorg/apache/commons/logging/Log;
       8: return
}
