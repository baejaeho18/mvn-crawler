Compiled from "ResourceCalculator.java"
public abstract class org.apache.hadoop.yarn.util.resource.ResourceCalculator {
  public org.apache.hadoop.yarn.util.resource.ResourceCalculator();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public abstract int compare(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, boolean);

  public int compare(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iconst_0
       5: invokevirtual #2                  // Method compare:(Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/Resource;Z)I
       8: ireturn

  public static int divideAndCeil(int, int);
    Code:
       0: iload_1
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: iload_0
       7: iload_1
       8: iconst_1
       9: isub
      10: iadd
      11: iload_1
      12: idiv
      13: ireturn

  public static int divideAndCeil(int, float);
    Code:
       0: fload_1
       1: fconst_0
       2: fcmpl
       3: ifne          8
       6: iconst_0
       7: ireturn
       8: iload_0
       9: i2f
      10: fload_1
      11: fdiv
      12: f2d
      13: invokestatic  #3                  // Method java/lang/Math.ceil:(D)D
      16: d2i
      17: ireturn

  public static long divideAndCeil(long, long);
    Code:
       0: lload_2
       1: lconst_0
       2: lcmp
       3: ifne          8
       6: lconst_0
       7: lreturn
       8: lload_0
       9: lload_2
      10: lconst_1
      11: lsub
      12: ladd
      13: lload_2
      14: ldiv
      15: lreturn

  public static long divideAndCeil(long, float);
    Code:
       0: fload_2
       1: fconst_0
       2: fcmpl
       3: ifne          8
       6: lconst_0
       7: lreturn
       8: lload_0
       9: l2f
      10: fload_2
      11: fdiv
      12: f2d
      13: invokestatic  #3                  // Method java/lang/Math.ceil:(D)D
      16: d2l
      17: lreturn

  public static int roundUp(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: invokestatic  #4                  // Method divideAndCeil:(II)I
       5: iload_1
       6: imul
       7: ireturn

  public static long roundUp(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: invokestatic  #5                  // Method divideAndCeil:(JJ)J
       5: lload_2
       6: lmul
       7: lreturn

  public static long roundDown(long, long);
    Code:
       0: lload_0
       1: lload_2
       2: ldiv
       3: lload_2
       4: lmul
       5: lreturn

  public static int roundDown(int, int);
    Code:
       0: iload_0
       1: iload_1
       2: idiv
       3: iload_1
       4: imul
       5: ireturn

  public abstract long computeAvailableContainers(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource multiplyAndNormalizeUp(org.apache.hadoop.yarn.api.records.Resource, double, org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource multiplyAndNormalizeUp(org.apache.hadoop.yarn.api.records.Resource, double[], org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource multiplyAndNormalizeDown(org.apache.hadoop.yarn.api.records.Resource, double, org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource normalize(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource roundUp(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource roundDown(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract float divide(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract boolean isInvalidDivisor(org.apache.hadoop.yarn.api.records.Resource);

  public abstract boolean isAllInvalidDivisor(org.apache.hadoop.yarn.api.records.Resource);

  public abstract float ratio(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource divideAndCeil(org.apache.hadoop.yarn.api.records.Resource, int);

  public abstract org.apache.hadoop.yarn.api.records.Resource divideAndCeil(org.apache.hadoop.yarn.api.records.Resource, float);

  public abstract boolean fitsIn(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract boolean isAnyMajorResourceZeroOrNegative(org.apache.hadoop.yarn.api.records.Resource);

  public abstract org.apache.hadoop.yarn.api.records.Resource normalizeDown(org.apache.hadoop.yarn.api.records.Resource, org.apache.hadoop.yarn.api.records.Resource);

  public abstract boolean isAnyMajorResourceAboveZero(org.apache.hadoop.yarn.api.records.Resource);
}
