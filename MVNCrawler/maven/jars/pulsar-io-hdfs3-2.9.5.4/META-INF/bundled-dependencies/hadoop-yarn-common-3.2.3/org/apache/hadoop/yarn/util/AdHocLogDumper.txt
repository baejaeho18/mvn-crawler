Compiled from "AdHocLogDumper.java"
public class org.apache.hadoop.yarn.util.AdHocLogDumper {
  private static final org.apache.commons.logging.Log LOG;

  private java.lang.String name;

  private java.lang.String targetFilename;

  private java.util.Map<java.lang.String, org.apache.log4j.Priority> appenderLevels;

  private org.apache.log4j.Level currentLogLevel;

  public static final java.lang.String AD_HOC_DUMPER_APPENDER;

  private static volatile boolean logFlag;

  private static final java.lang.Object lock;

  public org.apache.hadoop.yarn.util.AdHocLogDumper(java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #5                  // Field name:Ljava/lang/String;
       9: aload_0
      10: aload_2
      11: putfield      #7                  // Field targetFilename:Ljava/lang/String;
      14: aload_0
      15: new           #8                  // class java/util/HashMap
      18: dup
      19: invokespecial #9                  // Method java/util/HashMap."<init>":()V
      22: putfield      #3                  // Field appenderLevels:Ljava/util/Map;
      25: return

  public void dumpLogs(java.lang.String, int) throws org.apache.hadoop.yarn.exceptions.YarnRuntimeException, java.io.IOException;
    Code:
       0: getstatic     #10                 // Field lock:Ljava/lang/Object;
       3: dup
       4: astore_3
       5: monitorenter
       6: getstatic     #2                  // Field logFlag:Z
       9: ifeq          32
      12: getstatic     #1                  // Field LOG:Lorg/apache/commons/logging/Log;
      15: ldc           #11                 // String Attempt to dump logs when appender is already running
      17: invokeinterface #12,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
      22: new           #13                 // class org/apache/hadoop/yarn/exceptions/YarnRuntimeException
      25: dup
      26: ldc           #14                 // String Appender is already dumping logs
      28: invokespecial #15                 // Method org/apache/hadoop/yarn/exceptions/YarnRuntimeException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_1
      33: invokestatic  #16                 // Method org/apache/log4j/Level.toLevel:(Ljava/lang/String;)Lorg/apache/log4j/Level;
      36: astore        4
      38: aload_0
      39: getfield      #5                  // Field name:Ljava/lang/String;
      42: invokestatic  #17                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/String;)Lorg/apache/commons/logging/Log;
      45: astore        5
      47: aload_0
      48: getfield      #3                  // Field appenderLevels:Ljava/util/Map;
      51: invokeinterface #18,  1           // InterfaceMethod java/util/Map.clear:()V
      56: aload         5
      58: instanceof    #19                 // class org/apache/commons/logging/impl/Log4JLogger
      61: ifeq          366
      64: aload         5
      66: checkcast     #19                 // class org/apache/commons/logging/impl/Log4JLogger
      69: invokevirtual #20                 // Method org/apache/commons/logging/impl/Log4JLogger.getLogger:()Lorg/apache/log4j/Logger;
      72: astore        6
      74: aload_0
      75: aload         6
      77: invokevirtual #21                 // Method org/apache/log4j/Logger.getLevel:()Lorg/apache/log4j/Level;
      80: putfield      #4                  // Field currentLogLevel:Lorg/apache/log4j/Level;
      83: aload         6
      85: invokevirtual #22                 // Method org/apache/log4j/Logger.getEffectiveLevel:()Lorg/apache/log4j/Level;
      88: astore        7
      90: new           #23                 // class org/apache/log4j/PatternLayout
      93: dup
      94: ldc           #24                 // String %d{ISO8601} %p %c: %m%n
      96: invokespecial #25                 // Method org/apache/log4j/PatternLayout."<init>":(Ljava/lang/String;)V
      99: astore        8
     101: new           #26                 // class java/io/File
     104: dup
     105: ldc           #27                 // String yarn.log.dir
     107: invokestatic  #28                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
     110: aload_0
     111: getfield      #7                  // Field targetFilename:Ljava/lang/String;
     114: invokespecial #29                 // Method java/io/File."<init>":(Ljava/lang/String;Ljava/lang/String;)V
     117: astore        10
     119: new           #30                 // class org/apache/log4j/FileAppender
     122: dup
     123: aload         8
     125: aload         10
     127: invokevirtual #31                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
     130: iconst_0
     131: invokespecial #32                 // Method org/apache/log4j/FileAppender."<init>":(Lorg/apache/log4j/Layout;Ljava/lang/String;Z)V
     134: astore        9
     136: goto          177
     139: astore        11
     141: getstatic     #1                  // Field LOG:Lorg/apache/commons/logging/Log;
     144: new           #34                 // class java/lang/StringBuilder
     147: dup
     148: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     151: ldc           #36                 // String Error creating file, can\'t dump logs to
     153: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     156: aload         10
     158: invokevirtual #31                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
     161: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     164: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     167: aload         11
     169: invokeinterface #39,  3           // InterfaceMethod org/apache/commons/logging/Log.warn:(Ljava/lang/Object;Ljava/lang/Throwable;)V
     174: aload         11
     176: athrow
     177: aload         9
     179: ldc           #41                 // String ad-hoc-dumper-appender
     181: invokevirtual #42                 // Method org/apache/log4j/FileAppender.setName:(Ljava/lang/String;)V
     184: aload         9
     186: aload         4
     188: invokevirtual #43                 // Method org/apache/log4j/FileAppender.setThreshold:(Lorg/apache/log4j/Priority;)V
     191: invokestatic  #44                 // Method org/apache/log4j/Logger.getRootLogger:()Lorg/apache/log4j/Logger;
     194: invokevirtual #45                 // Method org/apache/log4j/Logger.getAllAppenders:()Ljava/util/Enumeration;
     197: astore        11
     199: aload         11
     201: invokeinterface #46,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
     206: ifeq          263
     209: aload         11
     211: invokeinterface #47,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
     216: astore        12
     218: aload         12
     220: instanceof    #48                 // class org/apache/log4j/AppenderSkeleton
     223: ifeq          260
     226: aload         12
     228: checkcast     #48                 // class org/apache/log4j/AppenderSkeleton
     231: astore        13
     233: aload_0
     234: getfield      #3                  // Field appenderLevels:Ljava/util/Map;
     237: aload         13
     239: invokevirtual #49                 // Method org/apache/log4j/AppenderSkeleton.getName:()Ljava/lang/String;
     242: aload         13
     244: invokevirtual #50                 // Method org/apache/log4j/AppenderSkeleton.getThreshold:()Lorg/apache/log4j/Priority;
     247: invokeinterface #51,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     252: pop
     253: aload         13
     255: aload         7
     257: invokevirtual #52                 // Method org/apache/log4j/AppenderSkeleton.setThreshold:(Lorg/apache/log4j/Priority;)V
     260: goto          199
     263: aload         6
     265: aload         9
     267: invokevirtual #53                 // Method org/apache/log4j/Logger.addAppender:(Lorg/apache/log4j/Appender;)V
     270: getstatic     #1                  // Field LOG:Lorg/apache/commons/logging/Log;
     273: new           #34                 // class java/lang/StringBuilder
     276: dup
     277: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     280: ldc           #54                 // String Dumping adhoc logs for
     282: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     285: aload_0
     286: getfield      #5                  // Field name:Ljava/lang/String;
     289: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     292: ldc           #55                 // String  to
     294: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     297: aload         10
     299: invokevirtual #31                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
     302: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     305: ldc           #56                 // String  for
     307: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     310: iload_2
     311: invokevirtual #57                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     314: ldc           #58                 // String  milliseconds
     316: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     319: invokevirtual #38                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     322: invokeinterface #12,  2           // InterfaceMethod org/apache/commons/logging/Log.info:(Ljava/lang/Object;)V
     327: aload         6
     329: aload         4
     331: invokevirtual #59                 // Method org/apache/log4j/Logger.setLevel:(Lorg/apache/log4j/Level;)V
     334: iconst_1
     335: putstatic     #2                  // Field logFlag:Z
     338: new           #60                 // class org/apache/hadoop/yarn/util/AdHocLogDumper$RestoreLogLevel
     341: dup
     342: aload_0
     343: invokespecial #61                 // Method org/apache/hadoop/yarn/util/AdHocLogDumper$RestoreLogLevel."<init>":(Lorg/apache/hadoop/yarn/util/AdHocLogDumper;)V
     346: astore        11
     348: new           #62                 // class java/util/Timer
     351: dup
     352: invokespecial #63                 // Method java/util/Timer."<init>":()V
     355: astore        12
     357: aload         12
     359: aload         11
     361: iload_2
     362: i2l
     363: invokevirtual #64                 // Method java/util/Timer.schedule:(Ljava/util/TimerTask;J)V
     366: aload_3
     367: monitorexit
     368: goto          378
     371: astore        14
     373: aload_3
     374: monitorexit
     375: aload         14
     377: athrow
     378: return
    Exception table:
       from    to  target type
         119   136   139   Class java/io/IOException
           6   368   371   any
         371   375   371   any

  public static boolean getState();
    Code:
       0: getstatic     #2                  // Field logFlag:Z
       3: ireturn

  static java.lang.String access$000(org.apache.hadoop.yarn.util.AdHocLogDumper);
    Code:
       0: aload_0
       1: getfield      #5                  // Field name:Ljava/lang/String;
       4: areturn

  static org.apache.log4j.Level access$100(org.apache.hadoop.yarn.util.AdHocLogDumper);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentLogLevel:Lorg/apache/log4j/Level;
       4: areturn

  static java.util.Map access$200(org.apache.hadoop.yarn.util.AdHocLogDumper);
    Code:
       0: aload_0
       1: getfield      #3                  // Field appenderLevels:Ljava/util/Map;
       4: areturn

  static boolean access$302(boolean);
    Code:
       0: iload_0
       1: dup
       2: putstatic     #2                  // Field logFlag:Z
       5: ireturn

  static org.apache.commons.logging.Log access$400();
    Code:
       0: getstatic     #1                  // Field LOG:Lorg/apache/commons/logging/Log;
       3: areturn

  static {};
    Code:
       0: ldc           #40                 // class org/apache/hadoop/yarn/util/AdHocLogDumper
       2: invokestatic  #65                 // Method org/apache/commons/logging/LogFactory.getLog:(Ljava/lang/Class;)Lorg/apache/commons/logging/Log;
       5: putstatic     #1                  // Field LOG:Lorg/apache/commons/logging/Log;
       8: iconst_0
       9: putstatic     #2                  // Field logFlag:Z
      12: new           #66                 // class java/lang/Object
      15: dup
      16: invokespecial #6                  // Method java/lang/Object."<init>":()V
      19: putstatic     #10                 // Field lock:Ljava/lang/Object;
      22: return
}
