Compiled from "AMRMClientUtils.java"
public final class org.apache.hadoop.yarn.client.AMRMClientUtils {
  private static final org.slf4j.Logger LOG;

  public static final int PRE_REGISTER_RESPONSE_ID;

  public static final java.lang.String APP_ALREADY_REGISTERED_MESSAGE;

  public static final java.lang.String EXPECTED_HB_RESPONSEID_MESSAGE;

  public static final java.lang.String RECEIVED_HB_RESPONSEID_MESSAGE;

  private org.apache.hadoop.yarn.client.AMRMClientUtils();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static <T> T createRMProxy(org.apache.hadoop.conf.Configuration, java.lang.Class<T>, org.apache.hadoop.security.UserGroupInformation, org.apache.hadoop.security.token.Token<? extends org.apache.hadoop.security.token.TokenIdentifier>) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #3                  // String yarn.resourcemanager.cluster-id
       3: ldc           #4                  // String yarn_cluster
       5: invokevirtual #5                  // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       8: astore        4
      10: getstatic     #6                  // Field LOG:Lorg/slf4j/Logger;
      13: ldc           #7                  // String Creating RMProxy to RM {} for protocol {} for user {}
      15: iconst_3
      16: anewarray     #8                  // class java/lang/Object
      19: dup
      20: iconst_0
      21: aload         4
      23: aastore
      24: dup
      25: iconst_1
      26: aload_1
      27: invokevirtual #9                  // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      30: aastore
      31: dup
      32: iconst_2
      33: aload_2
      34: aastore
      35: invokeinterface #10,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;[Ljava/lang/Object;)V
      40: aload_3
      41: ifnull        62
      44: aload_2
      45: aload_3
      46: invokevirtual #11                 // Method org/apache/hadoop/security/UserGroupInformation.addToken:(Lorg/apache/hadoop/security/token/Token;)Z
      49: pop
      50: aload_3
      51: aload_0
      52: invokestatic  #12                 // Method org/apache/hadoop/yarn/client/ClientRMProxy.getAMRMTokenService:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/io/Text;
      55: invokevirtual #13                 // Method org/apache/hadoop/security/token/Token.setService:(Lorg/apache/hadoop/io/Text;)V
      58: aload_0
      59: invokestatic  #14                 // Method setAuthModeInConf:(Lorg/apache/hadoop/conf/Configuration;)V
      62: aload_2
      63: new           #15                 // class org/apache/hadoop/yarn/client/AMRMClientUtils$1
      66: dup
      67: aload_0
      68: aload_1
      69: invokespecial #16                 // Method org/apache/hadoop/yarn/client/AMRMClientUtils$1."<init>":(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/Class;)V
      72: invokevirtual #17                 // Method org/apache/hadoop/security/UserGroupInformation.doAs:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
      75: astore        5
      77: aload         5
      79: areturn
      80: astore        4
      82: new           #19                 // class org/apache/hadoop/yarn/exceptions/YarnRuntimeException
      85: dup
      86: aload         4
      88: invokespecial #20                 // Method org/apache/hadoop/yarn/exceptions/YarnRuntimeException."<init>":(Ljava/lang/Throwable;)V
      91: athrow
    Exception table:
       from    to  target type
           0    79    80   Class java/lang/InterruptedException

  private static void setAuthModeInConf(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #22                 // String hadoop.security.authentication
       3: getstatic     #23                 // Field org/apache/hadoop/security/SaslRpcServer$AuthMethod.TOKEN:Lorg/apache/hadoop/security/SaslRpcServer$AuthMethod;
       6: invokevirtual #24                 // Method org/apache/hadoop/security/SaslRpcServer$AuthMethod.toString:()Ljava/lang/String;
       9: invokevirtual #25                 // Method org/apache/hadoop/conf/Configuration.set:(Ljava/lang/String;Ljava/lang/String;)V
      12: return

  public static java.lang.String assembleInvalidResponseIdExceptionMessage(org.apache.hadoop.yarn.api.records.ApplicationAttemptId, int, int);
    Code:
       0: new           #26                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #28                 // String Invalid responseId in AllocateRequest from application attempt:
       9: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #30                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      16: ldc           #32                 // String  expect responseId to be
      18: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: ldc           #34                 // String  but get
      27: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: iload_2
      31: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      34: invokevirtual #35                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: areturn

  public static int parseExpectedResponseIdFromException(java.lang.String);
    Code:
       0: aload_0
       1: ifnonnull     6
       4: iconst_m1
       5: ireturn
       6: aload_0
       7: ldc           #32                 // String  expect responseId to be
       9: invokevirtual #36                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      12: istore_1
      13: aload_0
      14: ldc           #34                 // String  but get
      16: invokevirtual #36                 // Method java/lang/String.indexOf:(Ljava/lang/String;)I
      19: istore_2
      20: iload_1
      21: iconst_m1
      22: if_icmpeq     30
      25: iload_2
      26: iconst_m1
      27: if_icmpne     32
      30: iconst_m1
      31: ireturn
      32: iload_1
      33: ldc           #32                 // String  expect responseId to be
      35: invokevirtual #37                 // Method java/lang/String.length:()I
      38: iadd
      39: istore_1
      40: aload_0
      41: iload_1
      42: iload_2
      43: invokevirtual #38                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      46: invokestatic  #39                 // Method java/lang/Integer.parseInt:(Ljava/lang/String;)I
      49: ireturn
      50: astore_3
      51: iconst_m1
      52: ireturn
    Exception table:
       from    to  target type
          40    49    50   Class java/lang/NumberFormatException

  public static int getNextResponseId(int);
    Code:
       0: iload_0
       1: iconst_1
       2: iadd
       3: ldc           #42                 // int 2147483647
       5: iand
       6: ireturn

  public static void addToOutstandingSchedulingRequests(java.util.Collection<org.apache.hadoop.yarn.api.records.SchedulingRequest>, java.util.Map<java.util.Set<java.lang.String>, java.util.List<org.apache.hadoop.yarn.api.records.SchedulingRequest>>);
    Code:
       0: aload_0
       1: invokeinterface #43,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          134
      16: aload_2
      17: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #46                 // class org/apache/hadoop/yarn/api/records/SchedulingRequest
      25: astore_3
      26: aload_1
      27: aload_3
      28: invokevirtual #47                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getAllocationTags:()Ljava/util/Set;
      31: invokedynamic #48,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      36: invokeinterface #49,  3           // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      41: checkcast     #50                 // class java/util/List
      44: astore        4
      46: aconst_null
      47: astore        5
      49: aload         4
      51: invokeinterface #51,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      56: astore        6
      58: aload         6
      60: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      65: ifeq          99
      68: aload         6
      70: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      75: checkcast     #46                 // class org/apache/hadoop/yarn/api/records/SchedulingRequest
      78: astore        7
      80: aload_3
      81: aload         7
      83: invokestatic  #52                 // Method isMatchingSchedulingRequests:(Lorg/apache/hadoop/yarn/api/records/SchedulingRequest;Lorg/apache/hadoop/yarn/api/records/SchedulingRequest;)Z
      86: ifeq          96
      89: aload         7
      91: astore        5
      93: goto          99
      96: goto          58
      99: aload         5
     101: ifnull        122
     104: aload         5
     106: invokevirtual #53                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getResourceSizing:()Lorg/apache/hadoop/yarn/api/records/ResourceSizing;
     109: aload_3
     110: invokevirtual #53                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getResourceSizing:()Lorg/apache/hadoop/yarn/api/records/ResourceSizing;
     113: invokevirtual #54                 // Method org/apache/hadoop/yarn/api/records/ResourceSizing.getNumAllocations:()I
     116: invokevirtual #55                 // Method org/apache/hadoop/yarn/api/records/ResourceSizing.setNumAllocations:(I)V
     119: goto          131
     122: aload         4
     124: aload_3
     125: invokeinterface #56,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     130: pop
     131: goto          7
     134: return

  public static boolean isMatchingSchedulingRequests(org.apache.hadoop.yarn.api.records.SchedulingRequest, org.apache.hadoop.yarn.api.records.SchedulingRequest);
    Code:
       0: aload_0
       1: invokevirtual #57                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getPriority:()Lorg/apache/hadoop/yarn/api/records/Priority;
       4: aload_1
       5: invokevirtual #57                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getPriority:()Lorg/apache/hadoop/yarn/api/records/Priority;
       8: invokevirtual #58                 // Method org/apache/hadoop/yarn/api/records/Priority.equals:(Ljava/lang/Object;)Z
      11: ifeq          50
      14: aload_0
      15: invokevirtual #59                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getExecutionType:()Lorg/apache/hadoop/yarn/api/records/ExecutionTypeRequest;
      18: invokevirtual #60                 // Method org/apache/hadoop/yarn/api/records/ExecutionTypeRequest.getExecutionType:()Lorg/apache/hadoop/yarn/api/records/ExecutionType;
      21: aload_0
      22: invokevirtual #59                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getExecutionType:()Lorg/apache/hadoop/yarn/api/records/ExecutionTypeRequest;
      25: invokevirtual #60                 // Method org/apache/hadoop/yarn/api/records/ExecutionTypeRequest.getExecutionType:()Lorg/apache/hadoop/yarn/api/records/ExecutionType;
      28: invokevirtual #61                 // Method org/apache/hadoop/yarn/api/records/ExecutionType.equals:(Ljava/lang/Object;)Z
      31: ifeq          50
      34: aload_0
      35: invokevirtual #62                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getAllocationRequestId:()J
      38: aload_1
      39: invokevirtual #62                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getAllocationRequestId:()J
      42: lcmp
      43: ifne          50
      46: iconst_1
      47: goto          51
      50: iconst_0
      51: ireturn

  public static void removeFromOutstandingSchedulingRequests(java.util.Collection<org.apache.hadoop.yarn.api.records.Container>, java.util.Map<java.util.Set<java.lang.String>, java.util.List<org.apache.hadoop.yarn.api.records.SchedulingRequest>>);
    Code:
       0: aload_0
       1: ifnull        13
       4: aload_0
       5: invokeinterface #63,  1           // InterfaceMethod java/util/Collection.isEmpty:()Z
      10: ifeq          14
      13: return
      14: aload_0
      15: invokeinterface #43,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      20: astore_2
      21: aload_2
      22: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      27: ifeq          180
      30: aload_2
      31: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      36: checkcast     #64                 // class org/apache/hadoop/yarn/api/records/Container
      39: astore_3
      40: aload_3
      41: invokevirtual #65                 // Method org/apache/hadoop/yarn/api/records/Container.getAllocationTags:()Ljava/util/Set;
      44: ifnull        177
      47: aload_1
      48: aload_3
      49: invokevirtual #65                 // Method org/apache/hadoop/yarn/api/records/Container.getAllocationTags:()Ljava/util/Set;
      52: invokeinterface #66,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      57: checkcast     #50                 // class java/util/List
      60: astore        4
      62: aload         4
      64: ifnull        177
      67: aload         4
      69: invokeinterface #67,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      74: ifne          177
      77: aload         4
      79: invokeinterface #51,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      84: astore        5
      86: aload         5
      88: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      93: ifeq          177
      96: aload         5
      98: invokeinterface #45,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     103: checkcast     #46                 // class org/apache/hadoop/yarn/api/records/SchedulingRequest
     106: astore        6
     108: aload         6
     110: invokevirtual #57                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getPriority:()Lorg/apache/hadoop/yarn/api/records/Priority;
     113: aload_3
     114: invokevirtual #68                 // Method org/apache/hadoop/yarn/api/records/Container.getPriority:()Lorg/apache/hadoop/yarn/api/records/Priority;
     117: invokevirtual #58                 // Method org/apache/hadoop/yarn/api/records/Priority.equals:(Ljava/lang/Object;)Z
     120: ifeq          174
     123: aload         6
     125: invokevirtual #62                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getAllocationRequestId:()J
     128: aload_3
     129: invokevirtual #69                 // Method org/apache/hadoop/yarn/api/records/Container.getAllocationRequestId:()J
     132: lcmp
     133: ifne          174
     136: aload         6
     138: invokevirtual #53                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getResourceSizing:()Lorg/apache/hadoop/yarn/api/records/ResourceSizing;
     141: invokevirtual #54                 // Method org/apache/hadoop/yarn/api/records/ResourceSizing.getNumAllocations:()I
     144: istore        7
     146: iinc          7, -1
     149: iload         7
     151: ifne          164
     154: aload         5
     156: invokeinterface #70,  1           // InterfaceMethod java/util/Iterator.remove:()V
     161: goto          174
     164: aload         6
     166: invokevirtual #53                 // Method org/apache/hadoop/yarn/api/records/SchedulingRequest.getResourceSizing:()Lorg/apache/hadoop/yarn/api/records/ResourceSizing;
     169: iload         7
     171: invokevirtual #55                 // Method org/apache/hadoop/yarn/api/records/ResourceSizing.setNumAllocations:(I)V
     174: goto          86
     177: goto          21
     180: return

  private static java.util.List lambda$addToOutstandingSchedulingRequests$0(java.util.Set);
    Code:
       0: new           #71                 // class java/util/LinkedList
       3: dup
       4: invokespecial #72                 // Method java/util/LinkedList."<init>":()V
       7: areturn

  static {};
    Code:
       0: ldc           #31                 // class org/apache/hadoop/yarn/client/AMRMClientUtils
       2: invokestatic  #73                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #6                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
