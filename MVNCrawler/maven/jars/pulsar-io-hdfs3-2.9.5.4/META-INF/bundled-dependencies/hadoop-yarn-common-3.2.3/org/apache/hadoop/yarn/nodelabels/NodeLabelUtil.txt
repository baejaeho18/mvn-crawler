Compiled from "NodeLabelUtil.java"
public final class org.apache.hadoop.yarn.nodelabels.NodeLabelUtil {
  private static final int MAX_LABEL_LENGTH;

  private static final java.util.regex.Pattern LABEL_OR_VALUE_PATTERN;

  private static final java.util.regex.Pattern PREFIX_PATTERN;

  private static final java.util.regex.Pattern ATTRIBUTE_VALUE_PATTERN;

  private static final java.util.regex.Pattern ATTRIBUTE_NAME_PATTERN;

  private org.apache.hadoop.yarn.nodelabels.NodeLabelUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void checkAndThrowLabelName(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnull        21
       4: aload_0
       5: invokevirtual #2                  // Method java/lang/String.isEmpty:()Z
       8: ifne          21
      11: aload_0
      12: invokevirtual #3                  // Method java/lang/String.length:()I
      15: sipush        255
      18: if_icmple     31
      21: new           #5                  // class java/io/IOException
      24: dup
      25: ldc           #6                  // String label added is empty or exceeds 255 character(s)
      27: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: invokevirtual #8                  // Method java/lang/String.trim:()Ljava/lang/String;
      35: astore_0
      36: getstatic     #9                  // Field LABEL_OR_VALUE_PATTERN:Ljava/util/regex/Pattern;
      39: aload_0
      40: invokevirtual #10                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      43: invokevirtual #11                 // Method java/util/regex/Matcher.matches:()Z
      46: istore_1
      47: iload_1
      48: ifne          78
      51: new           #5                  // class java/io/IOException
      54: dup
      55: new           #12                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      62: ldc           #14                 // String label name should only contains {0-9, a-z, A-Z, -, _} and should not started with {-,_}, now it is=
      64: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: aload_0
      68: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: return

  public static void checkAndThrowAttributeName(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnull        21
       4: aload_0
       5: invokevirtual #2                  // Method java/lang/String.isEmpty:()Z
       8: ifne          21
      11: aload_0
      12: invokevirtual #3                  // Method java/lang/String.length:()I
      15: sipush        255
      18: if_icmple     31
      21: new           #5                  // class java/io/IOException
      24: dup
      25: ldc           #17                 // String attribute name added is empty or exceeds 255 character(s)
      27: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: invokevirtual #8                  // Method java/lang/String.trim:()Ljava/lang/String;
      35: astore_0
      36: getstatic     #18                 // Field ATTRIBUTE_NAME_PATTERN:Ljava/util/regex/Pattern;
      39: aload_0
      40: invokevirtual #10                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      43: invokevirtual #11                 // Method java/util/regex/Matcher.matches:()Z
      46: istore_1
      47: iload_1
      48: ifne          78
      51: new           #5                  // class java/io/IOException
      54: dup
      55: new           #12                 // class java/lang/StringBuilder
      58: dup
      59: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      62: ldc           #19                 // String attribute name should only contains {0-9, a-z, A-Z, -, _} and should not started with {-,_}, now it is=
      64: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: aload_0
      68: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      71: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: return

  public static void checkAndThrowAttributeValue(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     5
       4: return
       5: aload_0
       6: invokevirtual #8                  // Method java/lang/String.trim:()Ljava/lang/String;
       9: invokevirtual #3                  // Method java/lang/String.length:()I
      12: sipush        255
      15: if_icmple     28
      18: new           #5                  // class java/io/IOException
      21: dup
      22: ldc           #20                 // String Attribute value added exceeds 255 character(s)
      24: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: aload_0
      29: invokevirtual #8                  // Method java/lang/String.trim:()Ljava/lang/String;
      32: astore_0
      33: aload_0
      34: invokevirtual #2                  // Method java/lang/String.isEmpty:()Z
      37: ifeq          41
      40: return
      41: getstatic     #21                 // Field ATTRIBUTE_VALUE_PATTERN:Ljava/util/regex/Pattern;
      44: aload_0
      45: invokevirtual #10                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      48: invokevirtual #11                 // Method java/util/regex/Matcher.matches:()Z
      51: istore_1
      52: iload_1
      53: ifne          83
      56: new           #5                  // class java/io/IOException
      59: dup
      60: new           #12                 // class java/lang/StringBuilder
      63: dup
      64: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      67: ldc           #22                 // String attribute value should only contains {0-9, a-z, A-Z, -, _} and should not started with {-,_}, now it is=
      69: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: aload_0
      73: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      79: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      82: athrow
      83: return

  public static void checkAndThrowAttributePrefix(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #5                  // class java/io/IOException
       7: dup
       8: ldc           #23                 // String Attribute prefix cannot be null.
      10: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: invokevirtual #8                  // Method java/lang/String.trim:()Ljava/lang/String;
      18: invokevirtual #3                  // Method java/lang/String.length:()I
      21: sipush        255
      24: if_icmple     37
      27: new           #5                  // class java/io/IOException
      30: dup
      31: ldc           #20                 // String Attribute value added exceeds 255 character(s)
      33: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: invokevirtual #8                  // Method java/lang/String.trim:()Ljava/lang/String;
      41: astore_0
      42: aload_0
      43: invokevirtual #2                  // Method java/lang/String.isEmpty:()Z
      46: ifeq          50
      49: return
      50: getstatic     #24                 // Field PREFIX_PATTERN:Ljava/util/regex/Pattern;
      53: aload_0
      54: invokevirtual #10                 // Method java/util/regex/Pattern.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
      57: invokevirtual #11                 // Method java/util/regex/Matcher.matches:()Z
      60: istore_1
      61: iload_1
      62: ifne          92
      65: new           #5                  // class java/io/IOException
      68: dup
      69: new           #12                 // class java/lang/StringBuilder
      72: dup
      73: invokespecial #13                 // Method java/lang/StringBuilder."<init>":()V
      76: ldc           #25                 // String attribute value should only contains {0-9, a-z, A-Z, -, _,.} and should not started with {-,_}, now it is=
      78: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      81: aload_0
      82: invokevirtual #15                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: return

  public static void validateNodeAttributes(java.util.Set<org.apache.hadoop.yarn.api.records.NodeAttribute>) throws java.io.IOException;
    Code:
       0: aload_0
       1: ifnull        104
       4: aload_0
       5: invokeinterface #26,  1           // InterfaceMethod java/util/Set.isEmpty:()Z
      10: ifne          104
      13: aload_0
      14: invokeinterface #27,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      19: astore_1
      20: aload_1
      21: invokeinterface #28,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      26: ifeq          104
      29: aload_1
      30: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      35: checkcast     #30                 // class org/apache/hadoop/yarn/api/records/NodeAttribute
      38: astore_2
      39: aload_2
      40: invokevirtual #31                 // Method org/apache/hadoop/yarn/api/records/NodeAttribute.getAttributeKey:()Lorg/apache/hadoop/yarn/api/records/NodeAttributeKey;
      43: astore_3
      44: aload_3
      45: ifnonnull     58
      48: new           #5                  // class java/io/IOException
      51: dup
      52: ldc           #32                 // String AttributeKey  must be set
      54: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_3
      59: invokevirtual #33                 // Method org/apache/hadoop/yarn/api/records/NodeAttributeKey.getAttributePrefix:()Ljava/lang/String;
      62: astore        4
      64: aload         4
      66: invokestatic  #34                 // Method com/google/common/base/Strings.isNullOrEmpty:(Ljava/lang/String;)Z
      69: ifeq          82
      72: new           #5                  // class java/io/IOException
      75: dup
      76: ldc           #35                 // String Attribute prefix must be set
      78: invokespecial #7                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      81: athrow
      82: aload         4
      84: invokestatic  #36                 // Method checkAndThrowAttributePrefix:(Ljava/lang/String;)V
      87: aload_3
      88: invokevirtual #37                 // Method org/apache/hadoop/yarn/api/records/NodeAttributeKey.getAttributeName:()Ljava/lang/String;
      91: invokestatic  #38                 // Method checkAndThrowAttributeName:(Ljava/lang/String;)V
      94: aload_2
      95: invokevirtual #39                 // Method org/apache/hadoop/yarn/api/records/NodeAttribute.getAttributeValue:()Ljava/lang/String;
      98: invokestatic  #40                 // Method checkAndThrowAttributeValue:(Ljava/lang/String;)V
     101: goto          20
     104: return

  public static java.util.Set<org.apache.hadoop.yarn.api.records.NodeAttribute> filterAttributesByPrefix(java.util.Set<org.apache.hadoop.yarn.api.records.NodeAttribute>, java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #34                 // Method com/google/common/base/Strings.isNullOrEmpty:(Ljava/lang/String;)Z
       4: ifeq          9
       7: aload_0
       8: areturn
       9: aload_0
      10: invokeinterface #41,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      15: aload_1
      16: invokedynamic #42,  0             // InvokeDynamic #0:test:(Ljava/lang/String;)Ljava/util/function/Predicate;
      21: invokeinterface #43,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      26: invokestatic  #44                 // Method java/util/stream/Collectors.toSet:()Ljava/util/stream/Collector;
      29: invokeinterface #45,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      34: checkcast     #46                 // class java/util/Set
      37: areturn

  public static boolean isNodeAttributesEquals(java.util.Set<org.apache.hadoop.yarn.api.records.NodeAttribute>, java.util.Set<org.apache.hadoop.yarn.api.records.NodeAttribute>);
    Code:
       0: aload_0
       1: ifnonnull     10
       4: aload_1
       5: ifnonnull     10
       8: iconst_1
       9: ireturn
      10: aload_0
      11: ifnull        33
      14: aload_1
      15: ifnull        33
      18: aload_0
      19: invokeinterface #47,  1           // InterfaceMethod java/util/Set.size:()I
      24: aload_1
      25: invokeinterface #47,  1           // InterfaceMethod java/util/Set.size:()I
      30: if_icmpeq     35
      33: iconst_0
      34: ireturn
      35: aload_0
      36: invokeinterface #41,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
      41: aload_1
      42: invokedynamic #48,  0             // InvokeDynamic #1:test:(Ljava/util/Set;)Ljava/util/function/Predicate;
      47: invokeinterface #49,  2           // InterfaceMethod java/util/stream/Stream.allMatch:(Ljava/util/function/Predicate;)Z
      52: ireturn

  private static boolean isNodeAttributeIncludes(java.util.Set<org.apache.hadoop.yarn.api.records.NodeAttribute>, org.apache.hadoop.yarn.api.records.NodeAttribute);
    Code:
       0: aload_0
       1: invokeinterface #41,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
       6: aload_1
       7: invokedynamic #50,  0             // InvokeDynamic #2:test:(Lorg/apache/hadoop/yarn/api/records/NodeAttribute;)Ljava/util/function/Predicate;
      12: invokeinterface #51,  2           // InterfaceMethod java/util/stream/Stream.anyMatch:(Ljava/util/function/Predicate;)Z
      17: ireturn

  private static boolean lambda$isNodeAttributeIncludes$2(org.apache.hadoop.yarn.api.records.NodeAttribute, org.apache.hadoop.yarn.api.records.NodeAttribute);
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #52                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
       5: ifeq          26
       8: aload_1
       9: invokevirtual #39                 // Method org/apache/hadoop/yarn/api/records/NodeAttribute.getAttributeValue:()Ljava/lang/String;
      12: aload_0
      13: invokevirtual #39                 // Method org/apache/hadoop/yarn/api/records/NodeAttribute.getAttributeValue:()Ljava/lang/String;
      16: invokestatic  #53                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  private static boolean lambda$isNodeAttributesEquals$1(java.util.Set, org.apache.hadoop.yarn.api.records.NodeAttribute);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #54                 // Method isNodeAttributeIncludes:(Ljava/util/Set;Lorg/apache/hadoop/yarn/api/records/NodeAttribute;)Z
       5: ireturn

  private static boolean lambda$filterAttributesByPrefix$0(java.lang.String, org.apache.hadoop.yarn.api.records.NodeAttribute);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #31                 // Method org/apache/hadoop/yarn/api/records/NodeAttribute.getAttributeKey:()Lorg/apache/hadoop/yarn/api/records/NodeAttributeKey;
       5: invokevirtual #33                 // Method org/apache/hadoop/yarn/api/records/NodeAttributeKey.getAttributePrefix:()Ljava/lang/String;
       8: invokevirtual #55                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      11: ireturn

  static {};
    Code:
       0: ldc           #56                 // String ^[0-9a-zA-Z][0-9a-zA-Z-_]*
       2: invokestatic  #57                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
       5: putstatic     #9                  // Field LABEL_OR_VALUE_PATTERN:Ljava/util/regex/Pattern;
       8: ldc           #58                 // String ^[0-9a-zA-Z][0-9a-zA-Z-_\\.]*
      10: invokestatic  #57                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      13: putstatic     #24                 // Field PREFIX_PATTERN:Ljava/util/regex/Pattern;
      16: ldc           #59                 // String ^[0-9a-zA-Z][0-9a-zA-Z-_.]*
      18: invokestatic  #57                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      21: putstatic     #21                 // Field ATTRIBUTE_VALUE_PATTERN:Ljava/util/regex/Pattern;
      24: ldc           #56                 // String ^[0-9a-zA-Z][0-9a-zA-Z-_]*
      26: invokestatic  #57                 // Method java/util/regex/Pattern.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;
      29: putstatic     #18                 // Field ATTRIBUTE_NAME_PATTERN:Ljava/util/regex/Pattern;
      32: return
}
