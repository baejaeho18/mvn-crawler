Compiled from "DoubleUtils.java"
final class com.google.common.math.DoubleUtils {
  static final long SIGNIFICAND_MASK;

  static final long EXPONENT_MASK;

  static final long SIGN_MASK;

  static final int SIGNIFICAND_BITS;

  static final int EXPONENT_BIAS;

  static final long IMPLICIT_BIT;

  static final long ONE_BITS;

  private com.google.common.math.DoubleUtils();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: return

  static double nextDown(double);
    Code:
       0: dload_0
       1: dneg
       2: invokestatic  #4                  // Method java/lang/Math.nextUp:(D)D
       5: dneg
       6: dreturn

  static long getSignificand(double);
    Code:
       0: dload_0
       1: invokestatic  #5                  // Method isFinite:(D)Z
       4: ldc           #6                  // String not a normal value
       6: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
       9: dload_0
      10: invokestatic  #8                  // Method java/lang/Math.getExponent:(D)I
      13: istore_2
      14: dload_0
      15: invokestatic  #9                  // Method java/lang/Double.doubleToRawLongBits:(D)J
      18: lstore_3
      19: lload_3
      20: ldc2_w        #10                 // long 4503599627370495l
      23: land
      24: lstore_3
      25: iload_2
      26: sipush        -1023
      29: if_icmpne     38
      32: lload_3
      33: iconst_1
      34: lshl
      35: goto          43
      38: lload_3
      39: ldc2_w        #12                 // long 4503599627370496l
      42: lor
      43: lreturn

  static boolean isFinite(double);
    Code:
       0: dload_0
       1: invokestatic  #8                  // Method java/lang/Math.getExponent:(D)I
       4: sipush        1023
       7: if_icmpgt     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static boolean isNormal(double);
    Code:
       0: dload_0
       1: invokestatic  #8                  // Method java/lang/Math.getExponent:(D)I
       4: sipush        -1022
       7: if_icmplt     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  static double scaleNormalize(double);
    Code:
       0: dload_0
       1: invokestatic  #9                  // Method java/lang/Double.doubleToRawLongBits:(D)J
       4: ldc2_w        #10                 // long 4503599627370495l
       7: land
       8: lstore_2
       9: lload_2
      10: ldc2_w        #14                 // long 4607182418800017408l
      13: lor
      14: invokestatic  #16                 // Method java/lang/Double.longBitsToDouble:(J)D
      17: dreturn

  static double bigToDouble(java.math.BigInteger);
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method java/math/BigInteger.abs:()Ljava/math/BigInteger;
       4: astore_1
       5: aload_1
       6: invokevirtual #18                 // Method java/math/BigInteger.bitLength:()I
       9: iconst_1
      10: isub
      11: istore_2
      12: iload_2
      13: bipush        63
      15: if_icmpge     24
      18: aload_0
      19: invokevirtual #20                 // Method java/math/BigInteger.longValue:()J
      22: l2d
      23: dreturn
      24: iload_2
      25: sipush        1023
      28: if_icmple     41
      31: aload_0
      32: invokevirtual #21                 // Method java/math/BigInteger.signum:()I
      35: i2d
      36: ldc2_w        #22                 // double Infinityd
      39: dmul
      40: dreturn
      41: iload_2
      42: bipush        52
      44: isub
      45: iconst_1
      46: isub
      47: istore_3
      48: aload_1
      49: iload_3
      50: invokevirtual #24                 // Method java/math/BigInteger.shiftRight:(I)Ljava/math/BigInteger;
      53: invokevirtual #20                 // Method java/math/BigInteger.longValue:()J
      56: lstore        4
      58: lload         4
      60: iconst_1
      61: lshr
      62: lstore        6
      64: lload         6
      66: ldc2_w        #10                 // long 4503599627370495l
      69: land
      70: lstore        6
      72: lload         4
      74: lconst_1
      75: land
      76: lconst_0
      77: lcmp
      78: ifeq          102
      81: lload         6
      83: lconst_1
      84: land
      85: lconst_0
      86: lcmp
      87: ifne          98
      90: aload_1
      91: invokevirtual #25                 // Method java/math/BigInteger.getLowestSetBit:()I
      94: iload_3
      95: if_icmpge     102
      98: iconst_1
      99: goto          103
     102: iconst_0
     103: istore        8
     105: iload         8
     107: ifeq          117
     110: lload         6
     112: lconst_1
     113: ladd
     114: goto          119
     117: lload         6
     119: lstore        9
     121: iload_2
     122: sipush        1023
     125: iadd
     126: i2l
     127: bipush        52
     129: lshl
     130: lstore        11
     132: lload         11
     134: lload         9
     136: ladd
     137: lstore        11
     139: lload         11
     141: aload_0
     142: invokevirtual #21                 // Method java/math/BigInteger.signum:()I
     145: i2l
     146: ldc2_w        #26                 // long -9223372036854775808l
     149: land
     150: lor
     151: lstore        11
     153: lload         11
     155: invokestatic  #16                 // Method java/lang/Double.longBitsToDouble:(J)D
     158: dreturn

  static double ensureNonNegative(double);
    Code:
       0: dload_0
       1: invokestatic  #28                 // Method java/lang/Double.isNaN:(D)Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: invokestatic  #29                 // Method com/google/common/base/Preconditions.checkArgument:(Z)V
      15: dload_0
      16: dconst_0
      17: invokestatic  #30                 // Method java/lang/Math.max:(DD)D
      20: dreturn
}
