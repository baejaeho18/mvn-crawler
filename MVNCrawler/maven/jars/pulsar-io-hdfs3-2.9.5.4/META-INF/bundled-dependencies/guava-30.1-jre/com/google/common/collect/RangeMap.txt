Compiled from "RangeMap.java"
public interface com.google.common.collect.RangeMap<K extends java.lang.Comparable, V> {
  public abstract V get(K);

  public abstract java.util.Map$Entry<com.google.common.collect.Range<K>, V> getEntry(K);

  public abstract com.google.common.collect.Range<K> span();

  public abstract void put(com.google.common.collect.Range<K>, V);

  public abstract void putCoalescing(com.google.common.collect.Range<K>, V);

  public abstract void putAll(com.google.common.collect.RangeMap<K, V>);

  public abstract void clear();

  public abstract void remove(com.google.common.collect.Range<K>);

  public abstract void merge(com.google.common.collect.Range<K>, V, java.util.function.BiFunction<? super V, ? super V, ? extends V>);

  public abstract java.util.Map<com.google.common.collect.Range<K>, V> asMapOfRanges();

  public abstract java.util.Map<com.google.common.collect.Range<K>, V> asDescendingMapOfRanges();

  public abstract com.google.common.collect.RangeMap<K, V> subRangeMap(com.google.common.collect.Range<K>);

  public abstract boolean equals(java.lang.Object);

  public abstract int hashCode();

  public abstract java.lang.String toString();
}
