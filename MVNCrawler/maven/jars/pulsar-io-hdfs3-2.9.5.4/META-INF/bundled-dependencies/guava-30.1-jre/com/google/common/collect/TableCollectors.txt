Compiled from "TableCollectors.java"
final class com.google.common.collect.TableCollectors {
  static <T, R, C, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableTable<R, C, V>> toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>);
    Code:
       0: aload_0
       1: ldc           #1                  // String rowFunction
       3: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #3                  // String columnFunction
      10: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_2
      15: ldc           #4                  // String valueFunction
      17: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: invokedynamic #5,  0              // InvokeDynamic #0:get:()Ljava/util/function/Supplier;
      26: aload_0
      27: aload_1
      28: aload_2
      29: invokedynamic #6,  0              // InvokeDynamic #1:accept:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;)Ljava/util/function/BiConsumer;
      34: invokedynamic #7,  0              // InvokeDynamic #2:apply:()Ljava/util/function/BinaryOperator;
      39: invokedynamic #8,  0              // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      44: iconst_0
      45: anewarray     #9                  // class java/util/stream/Collector$Characteristics
      48: invokestatic  #10                 // InterfaceMethod java/util/stream/Collector.of:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;Ljava/util/function/Function;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
      51: areturn

  static <T, R, C, V> java.util.stream.Collector<T, ?, com.google.common.collect.ImmutableTable<R, C, V>> toImmutableTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>);
    Code:
       0: aload_0
       1: ldc           #1                  // String rowFunction
       3: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_1
       8: ldc           #3                  // String columnFunction
      10: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_2
      15: ldc           #4                  // String valueFunction
      17: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      20: pop
      21: aload_3
      22: ldc           #11                 // String mergeFunction
      24: invokestatic  #2                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      27: pop
      28: invokedynamic #12,  0             // InvokeDynamic #4:get:()Ljava/util/function/Supplier;
      33: aload_0
      34: aload_1
      35: aload_2
      36: aload_3
      37: invokedynamic #13,  0             // InvokeDynamic #5:accept:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/function/BiConsumer;
      42: aload_3
      43: invokedynamic #14,  0             // InvokeDynamic #6:apply:(Ljava/util/function/BinaryOperator;)Ljava/util/function/BinaryOperator;
      48: invokedynamic #15,  0             // InvokeDynamic #7:apply:()Ljava/util/function/Function;
      53: iconst_0
      54: anewarray     #9                  // class java/util/stream/Collector$Characteristics
      57: invokestatic  #10                 // InterfaceMethod java/util/stream/Collector.of:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;Ljava/util/function/Function;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
      60: areturn

  static <T, R, C, V, I extends com.google.common.collect.Table<R, C, V>> java.util.stream.Collector<T, ?, I> toTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.Supplier<I>);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokedynamic #16,  0             // InvokeDynamic #8:apply:()Ljava/util/function/BinaryOperator;
       8: aload_3
       9: invokestatic  #17                 // Method toTable:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;Ljava/util/function/Supplier;)Ljava/util/stream/Collector;
      12: areturn

  static <T, R, C, V, I extends com.google.common.collect.Table<R, C, V>> java.util.stream.Collector<T, ?, I> toTable(java.util.function.Function<? super T, ? extends R>, java.util.function.Function<? super T, ? extends C>, java.util.function.Function<? super T, ? extends V>, java.util.function.BinaryOperator<V>, java.util.function.Supplier<I>);
    Code:
       0: aload_0
       1: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_1
       6: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       9: pop
      10: aload_2
      11: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      14: pop
      15: aload_3
      16: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      19: pop
      20: aload         4
      22: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
      25: pop
      26: aload         4
      28: aload_0
      29: aload_1
      30: aload_2
      31: aload_3
      32: invokedynamic #19,  0             // InvokeDynamic #9:accept:(Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/Function;Ljava/util/function/BinaryOperator;)Ljava/util/function/BiConsumer;
      37: aload_3
      38: invokedynamic #20,  0             // InvokeDynamic #10:apply:(Ljava/util/function/BinaryOperator;)Ljava/util/function/BinaryOperator;
      43: iconst_0
      44: anewarray     #9                  // class java/util/stream/Collector$Characteristics
      47: invokestatic  #21                 // InterfaceMethod java/util/stream/Collector.of:(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BinaryOperator;[Ljava/util/stream/Collector$Characteristics;)Ljava/util/stream/Collector;
      50: areturn

  private static <R, C, V> void mergeTables(com.google.common.collect.Table<R, C, V>, R, C, V, java.util.function.BinaryOperator<V>);
    Code:
       0: aload_3
       1: invokestatic  #18                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;
       4: pop
       5: aload_0
       6: aload_1
       7: aload_2
       8: invokeinterface #22,  3           // InterfaceMethod com/google/common/collect/Table.get:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: astore        5
      15: aload         5
      17: ifnonnull     33
      20: aload_0
      21: aload_1
      22: aload_2
      23: aload_3
      24: invokeinterface #23,  4           // InterfaceMethod com/google/common/collect/Table.put:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      29: pop
      30: goto          73
      33: aload         4
      35: aload         5
      37: aload_3
      38: invokeinterface #24,  3           // InterfaceMethod java/util/function/BinaryOperator.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      43: astore        6
      45: aload         6
      47: ifnonnull     62
      50: aload_0
      51: aload_1
      52: aload_2
      53: invokeinterface #25,  3           // InterfaceMethod com/google/common/collect/Table.remove:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      58: pop
      59: goto          73
      62: aload_0
      63: aload_1
      64: aload_2
      65: aload         6
      67: invokeinterface #23,  4           // InterfaceMethod com/google/common/collect/Table.put:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      72: pop
      73: return

  private com.google.common.collect.TableCollectors();
    Code:
       0: aload_0
       1: invokespecial #26                 // Method java/lang/Object."<init>":()V
       4: return

  private static com.google.common.collect.Table lambda$toTable$7(java.util.function.BinaryOperator, com.google.common.collect.Table, com.google.common.collect.Table);
    Code:
       0: aload_2
       1: invokeinterface #27,  1           // InterfaceMethod com/google/common/collect/Table.cellSet:()Ljava/util/Set;
       6: invokeinterface #28,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #29,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          61
      21: aload_3
      22: invokeinterface #30,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #31                 // class com/google/common/collect/Table$Cell
      30: astore        4
      32: aload_1
      33: aload         4
      35: invokeinterface #32,  1           // InterfaceMethod com/google/common/collect/Table$Cell.getRowKey:()Ljava/lang/Object;
      40: aload         4
      42: invokeinterface #33,  1           // InterfaceMethod com/google/common/collect/Table$Cell.getColumnKey:()Ljava/lang/Object;
      47: aload         4
      49: invokeinterface #34,  1           // InterfaceMethod com/google/common/collect/Table$Cell.getValue:()Ljava/lang/Object;
      54: aload_0
      55: invokestatic  #35                 // Method mergeTables:(Lcom/google/common/collect/Table;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V
      58: goto          12
      61: aload_1
      62: areturn

  private static void lambda$toTable$6(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, com.google.common.collect.Table, java.lang.Object);
    Code:
       0: aload         4
       2: aload_0
       3: aload         5
       5: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: aload_1
      11: aload         5
      13: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: aload_2
      19: aload         5
      21: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      26: aload_3
      27: invokestatic  #35                 // Method mergeTables:(Lcom/google/common/collect/Table;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V
      30: return

  private static java.lang.Object lambda$toTable$5(java.lang.Object, java.lang.Object);
    Code:
       0: new           #37                 // class java/lang/IllegalStateException
       3: dup
       4: aload_0
       5: invokestatic  #38                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
       8: astore_2
       9: aload_1
      10: invokestatic  #38                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      13: astore_3
      14: bipush        24
      16: aload_2
      17: invokestatic  #38                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      20: invokevirtual #39                 // Method java/lang/String.length:()I
      23: iadd
      24: aload_3
      25: invokestatic  #38                 // Method java/lang/String.valueOf:(Ljava/lang/Object;)Ljava/lang/String;
      28: invokevirtual #39                 // Method java/lang/String.length:()I
      31: iadd
      32: new           #40                 // class java/lang/StringBuilder
      35: dup_x1
      36: swap
      37: invokespecial #41                 // Method java/lang/StringBuilder."<init>":(I)V
      40: ldc           #42                 // String Conflicting values
      42: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_2
      46: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: ldc           #44                 // String  and
      51: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      54: aload_3
      55: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      61: invokespecial #46                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      64: athrow

  private static com.google.common.collect.ImmutableTable lambda$toImmutableTable$4(com.google.common.collect.TableCollectors$ImmutableTableCollectorState);
    Code:
       0: aload_0
       1: invokevirtual #47                 // Method com/google/common/collect/TableCollectors$ImmutableTableCollectorState.toTable:()Lcom/google/common/collect/ImmutableTable;
       4: areturn

  private static com.google.common.collect.TableCollectors$ImmutableTableCollectorState lambda$toImmutableTable$3(java.util.function.BinaryOperator, com.google.common.collect.TableCollectors$ImmutableTableCollectorState, com.google.common.collect.TableCollectors$ImmutableTableCollectorState);
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: invokevirtual #48                 // Method com/google/common/collect/TableCollectors$ImmutableTableCollectorState.combine:(Lcom/google/common/collect/TableCollectors$ImmutableTableCollectorState;Ljava/util/function/BinaryOperator;)Lcom/google/common/collect/TableCollectors$ImmutableTableCollectorState;
       6: areturn

  private static void lambda$toImmutableTable$2(java.util.function.Function, java.util.function.Function, java.util.function.Function, java.util.function.BinaryOperator, com.google.common.collect.TableCollectors$ImmutableTableCollectorState, java.lang.Object);
    Code:
       0: aload         4
       2: aload_0
       3: aload         5
       5: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      10: aload_1
      11: aload         5
      13: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      18: aload_2
      19: aload         5
      21: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      26: aload_3
      27: invokevirtual #49                 // Method com/google/common/collect/TableCollectors$ImmutableTableCollectorState.put:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BinaryOperator;)V
      30: return

  private static com.google.common.collect.TableCollectors$ImmutableTableCollectorState lambda$toImmutableTable$1();
    Code:
       0: new           #50                 // class com/google/common/collect/TableCollectors$ImmutableTableCollectorState
       3: dup
       4: aconst_null
       5: invokespecial #51                 // Method com/google/common/collect/TableCollectors$ImmutableTableCollectorState."<init>":(Lcom/google/common/collect/TableCollectors$1;)V
       8: areturn

  private static void lambda$toImmutableTable$0(java.util.function.Function, java.util.function.Function, java.util.function.Function, com.google.common.collect.ImmutableTable$Builder, java.lang.Object);
    Code:
       0: aload_3
       1: aload_0
       2: aload         4
       4: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
       9: aload_1
      10: aload         4
      12: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      17: aload_2
      18: aload         4
      20: invokeinterface #36,  2           // InterfaceMethod java/util/function/Function.apply:(Ljava/lang/Object;)Ljava/lang/Object;
      25: invokevirtual #52                 // Method com/google/common/collect/ImmutableTable$Builder.put:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lcom/google/common/collect/ImmutableTable$Builder;
      28: pop
      29: return
}
