Compiled from "DiscreteDomain.java"
final class com.google.common.collect.DiscreteDomain$BigIntegerDomain extends com.google.common.collect.DiscreteDomain<java.math.BigInteger> implements java.io.Serializable {
  private static final com.google.common.collect.DiscreteDomain$BigIntegerDomain INSTANCE;

  private static final java.math.BigInteger MIN_LONG;

  private static final java.math.BigInteger MAX_LONG;

  private static final long serialVersionUID;

  com.google.common.collect.DiscreteDomain$BigIntegerDomain();
    Code:
       0: aload_0
       1: iconst_1
       2: aconst_null
       3: invokespecial #2                  // Method com/google/common/collect/DiscreteDomain."<init>":(ZLcom/google/common/collect/DiscreteDomain$1;)V
       6: return

  public java.math.BigInteger next(java.math.BigInteger);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
       4: invokevirtual #4                  // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       7: areturn

  public java.math.BigInteger previous(java.math.BigInteger);
    Code:
       0: aload_1
       1: getstatic     #3                  // Field java/math/BigInteger.ONE:Ljava/math/BigInteger;
       4: invokevirtual #5                  // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       7: areturn

  java.math.BigInteger offset(java.math.BigInteger, long);
    Code:
       0: lload_2
       1: ldc           #6                  // String distance
       3: invokestatic  #7                  // Method com/google/common/collect/CollectPreconditions.checkNonnegative:(JLjava/lang/String;)J
       6: pop2
       7: aload_1
       8: lload_2
       9: invokestatic  #8                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      12: invokevirtual #4                  // Method java/math/BigInteger.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      15: areturn

  public long distance(java.math.BigInteger, java.math.BigInteger);
    Code:
       0: aload_2
       1: aload_1
       2: invokevirtual #5                  // Method java/math/BigInteger.subtract:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       5: getstatic     #9                  // Field MIN_LONG:Ljava/math/BigInteger;
       8: invokevirtual #10                 // Method java/math/BigInteger.max:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      11: getstatic     #11                 // Field MAX_LONG:Ljava/math/BigInteger;
      14: invokevirtual #12                 // Method java/math/BigInteger.min:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
      17: invokevirtual #13                 // Method java/math/BigInteger.longValue:()J
      20: lreturn

  private java.lang.Object readResolve();
    Code:
       0: getstatic     #1                  // Field INSTANCE:Lcom/google/common/collect/DiscreteDomain$BigIntegerDomain;
       3: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #14                 // String DiscreteDomain.bigIntegers()
       2: areturn

  public long distance(java.lang.Comparable, java.lang.Comparable);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class java/math/BigInteger
       5: aload_2
       6: checkcast     #15                 // class java/math/BigInteger
       9: invokevirtual #16                 // Method distance:(Ljava/math/BigInteger;Ljava/math/BigInteger;)J
      12: lreturn

  public java.lang.Comparable previous(java.lang.Comparable);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class java/math/BigInteger
       5: invokevirtual #17                 // Method previous:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       8: areturn

  public java.lang.Comparable next(java.lang.Comparable);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class java/math/BigInteger
       5: invokevirtual #18                 // Method next:(Ljava/math/BigInteger;)Ljava/math/BigInteger;
       8: areturn

  java.lang.Comparable offset(java.lang.Comparable, long);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #15                 // class java/math/BigInteger
       5: lload_2
       6: invokevirtual #19                 // Method offset:(Ljava/math/BigInteger;J)Ljava/math/BigInteger;
       9: areturn

  static com.google.common.collect.DiscreteDomain$BigIntegerDomain access$300();
    Code:
       0: getstatic     #1                  // Field INSTANCE:Lcom/google/common/collect/DiscreteDomain$BigIntegerDomain;
       3: areturn

  static {};
    Code:
       0: new           #20                 // class com/google/common/collect/DiscreteDomain$BigIntegerDomain
       3: dup
       4: invokespecial #21                 // Method "<init>":()V
       7: putstatic     #1                  // Field INSTANCE:Lcom/google/common/collect/DiscreteDomain$BigIntegerDomain;
      10: ldc2_w        #23                 // long -9223372036854775808l
      13: invokestatic  #8                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      16: putstatic     #9                  // Field MIN_LONG:Ljava/math/BigInteger;
      19: ldc2_w        #25                 // long 9223372036854775807l
      22: invokestatic  #8                  // Method java/math/BigInteger.valueOf:(J)Ljava/math/BigInteger;
      25: putstatic     #11                 // Field MAX_LONG:Ljava/math/BigInteger;
      28: return
}
