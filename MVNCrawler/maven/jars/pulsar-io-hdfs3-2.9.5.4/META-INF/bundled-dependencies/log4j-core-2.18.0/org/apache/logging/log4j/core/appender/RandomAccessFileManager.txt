Compiled from "RandomAccessFileManager.java"
public class org.apache.logging.log4j.core.appender.RandomAccessFileManager extends org.apache.logging.log4j.core.appender.OutputStreamManager {
  static final int DEFAULT_BUFFER_SIZE;

  private static final org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory FACTORY;

  private final java.lang.String advertiseURI;

  private final java.io.RandomAccessFile randomAccessFile;

  protected org.apache.logging.log4j.core.appender.RandomAccessFileManager(org.apache.logging.log4j.core.LoggerContext, java.io.RandomAccessFile, java.lang.String, java.io.OutputStream, int, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload         4
       4: aload_3
       5: iconst_0
       6: aload         7
       8: iload         8
      10: iload         5
      12: newarray       byte
      14: invokestatic  #1                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      17: invokespecial #2                  // Method org/apache/logging/log4j/core/appender/OutputStreamManager."<init>":(Lorg/apache/logging/log4j/core/LoggerContext;Ljava/io/OutputStream;Ljava/lang/String;ZLorg/apache/logging/log4j/core/Layout;ZLjava/nio/ByteBuffer;)V
      20: aload_0
      21: aload_2
      22: putfield      #3                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
      25: aload_0
      26: aload         6
      28: putfield      #4                  // Field advertiseURI:Ljava/lang/String;
      31: return

  public static org.apache.logging.log4j.core.appender.RandomAccessFileManager getFileManager(java.lang.String, boolean, boolean, int, java.lang.String, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, org.apache.logging.log4j.core.config.Configuration);
    Code:
       0: ldc           #5                  // class org/apache/logging/log4j/core/appender/RandomAccessFileManager
       2: aload_0
       3: new           #6                  // class org/apache/logging/log4j/core/appender/RandomAccessFileManager$FactoryData
       6: dup
       7: iload_1
       8: iload_2
       9: iload_3
      10: aload         4
      12: aload         5
      14: aload         6
      16: invokespecial #7                  // Method org/apache/logging/log4j/core/appender/RandomAccessFileManager$FactoryData."<init>":(ZZILjava/lang/String;Lorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/config/Configuration;)V
      19: getstatic     #8                  // Field FACTORY:Lorg/apache/logging/log4j/core/appender/RandomAccessFileManager$RandomAccessFileManagerFactory;
      22: invokestatic  #9                  // Method getManager:(Ljava/lang/String;Ljava/lang/Object;Lorg/apache/logging/log4j/core/appender/ManagerFactory;)Lorg/apache/logging/log4j/core/appender/OutputStreamManager;
      25: invokestatic  #10                 // Method narrow:(Ljava/lang/Class;Lorg/apache/logging/log4j/core/appender/AbstractManager;)Lorg/apache/logging/log4j/core/appender/AbstractManager;
      28: checkcast     #5                  // class org/apache/logging/log4j/core/appender/RandomAccessFileManager
      31: areturn

  public java.lang.Boolean isEndOfBatch();
    Code:
       0: getstatic     #11                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
       3: areturn

  public void setEndOfBatch(boolean);
    Code:
       0: return

  protected void writeToDestination(byte[], int, int);
    Code:
       0: aload_0
       1: getfield      #3                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #12                 // Method java/io/RandomAccessFile.write:([BII)V
      10: goto          51
      13: astore        4
      15: new           #14                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #16                 // String Error writing to RandomAccessFile
      24: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_0
      28: invokevirtual #18                 // Method getName:()Ljava/lang/String;
      31: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      37: astore        5
      39: new           #20                 // class org/apache/logging/log4j/core/appender/AppenderLoggingException
      42: dup
      43: aload         5
      45: aload         4
      47: invokespecial #21                 // Method org/apache/logging/log4j/core/appender/AppenderLoggingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      50: athrow
      51: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  public synchronized void flush();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #22                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #23                 // Method flushBuffer:(Ljava/nio/ByteBuffer;)V
       8: return

  public synchronized boolean closeOutputStream();
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method flush:()V
       4: aload_0
       5: getfield      #3                  // Field randomAccessFile:Ljava/io/RandomAccessFile;
       8: invokevirtual #25                 // Method java/io/RandomAccessFile.close:()V
      11: iconst_1
      12: ireturn
      13: astore_1
      14: aload_0
      15: ldc           #26                 // String Unable to close RandomAccessFile
      17: aload_1
      18: invokevirtual #27                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      21: iconst_0
      22: ireturn
    Exception table:
       from    to  target type
           4    12    13   Class java/io/IOException

  public java.lang.String getFileName();
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method getName:()Ljava/lang/String;
       4: areturn

  public int getBufferSize();
    Code:
       0: aload_0
       1: getfield      #22                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: invokevirtual #28                 // Method java/nio/ByteBuffer.capacity:()I
       7: ireturn

  public java.util.Map<java.lang.String, java.lang.String> getContentFormat();
    Code:
       0: new           #29                 // class java/util/HashMap
       3: dup
       4: aload_0
       5: invokespecial #30                 // Method org/apache/logging/log4j/core/appender/OutputStreamManager.getContentFormat:()Ljava/util/Map;
       8: invokespecial #31                 // Method java/util/HashMap."<init>":(Ljava/util/Map;)V
      11: astore_1
      12: aload_1
      13: ldc           #32                 // String fileURI
      15: aload_0
      16: getfield      #4                  // Field advertiseURI:Ljava/lang/String;
      19: invokeinterface #33,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      24: pop
      25: aload_1
      26: areturn

  static {};
    Code:
       0: new           #34                 // class org/apache/logging/log4j/core/appender/RandomAccessFileManager$RandomAccessFileManagerFactory
       3: dup
       4: aconst_null
       5: invokespecial #35                 // Method org/apache/logging/log4j/core/appender/RandomAccessFileManager$RandomAccessFileManagerFactory."<init>":(Lorg/apache/logging/log4j/core/appender/RandomAccessFileManager$1;)V
       8: putstatic     #8                  // Field FACTORY:Lorg/apache/logging/log4j/core/appender/RandomAccessFileManager$RandomAccessFileManagerFactory;
      11: return
}
