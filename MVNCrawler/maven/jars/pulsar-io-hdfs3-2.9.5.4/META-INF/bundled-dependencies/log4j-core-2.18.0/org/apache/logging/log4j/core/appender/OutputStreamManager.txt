Compiled from "OutputStreamManager.java"
public class org.apache.logging.log4j.core.appender.OutputStreamManager extends org.apache.logging.log4j.core.appender.AbstractManager implements org.apache.logging.log4j.core.layout.ByteBufferDestination {
  protected final org.apache.logging.log4j.core.Layout<?> layout;

  protected java.nio.ByteBuffer byteBuffer;

  private volatile java.io.OutputStream outputStream;

  private boolean skipFooter;

  protected org.apache.logging.log4j.core.appender.OutputStreamManager(java.io.OutputStream, java.lang.String, org.apache.logging.log4j.core.Layout<?>, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: getstatic     #1                  // Field org/apache/logging/log4j/core/util/Constants.ENCODER_BYTE_BUFFER_SIZE:I
       9: invokespecial #2                  // Method "<init>":(Ljava/io/OutputStream;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;ZI)V
      12: return

  protected org.apache.logging.log4j.core.appender.OutputStreamManager(java.io.OutputStream, java.lang.String, org.apache.logging.log4j.core.Layout<?>, boolean, int);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iload         5
       8: newarray       byte
      10: invokestatic  #3                  // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      13: invokespecial #4                  // Method "<init>":(Ljava/io/OutputStream;Ljava/lang/String;Lorg/apache/logging/log4j/core/Layout;ZLjava/nio/ByteBuffer;)V
      16: return

  protected org.apache.logging.log4j.core.appender.OutputStreamManager(java.io.OutputStream, java.lang.String, org.apache.logging.log4j.core.Layout<?>, boolean, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aconst_null
       2: aload_2
       3: invokespecial #5                  // Method org/apache/logging/log4j/core/appender/AbstractManager."<init>":(Lorg/apache/logging/log4j/core/LoggerContext;Ljava/lang/String;)V
       6: aload_0
       7: aload_1
       8: putfield      #6                  // Field outputStream:Ljava/io/OutputStream;
      11: aload_0
      12: aload_3
      13: putfield      #7                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
      16: iload         4
      18: ifeq          26
      21: aload_0
      22: aload_1
      23: invokevirtual #8                  // Method writeHeader:(Ljava/io/OutputStream;)V
      26: aload_0
      27: aload         5
      29: ldc           #9                  // String byteBuffer
      31: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      34: checkcast     #11                 // class java/nio/ByteBuffer
      37: putfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      40: return

  protected org.apache.logging.log4j.core.appender.OutputStreamManager(org.apache.logging.log4j.core.LoggerContext, java.io.OutputStream, java.lang.String, boolean, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, boolean, java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: aload_3
       3: invokespecial #5                  // Method org/apache/logging/log4j/core/appender/AbstractManager."<init>":(Lorg/apache/logging/log4j/core/LoggerContext;Ljava/lang/String;)V
       6: iload         4
       8: ifeq          26
      11: aload_2
      12: ifnull        26
      15: getstatic     #13                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      18: ldc           #14                 // String Invalid OutputStreamManager configuration for \'{}\': You cannot both set the OutputStream and request on-demand.
      20: aload_3
      21: invokeinterface #15,  3           // InterfaceMethod org/apache/logging/log4j/Logger.error:(Ljava/lang/String;Ljava/lang/Object;)V
      26: aload_0
      27: aload         5
      29: putfield      #7                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
      32: aload_0
      33: aload         7
      35: ldc           #9                  // String byteBuffer
      37: invokestatic  #10                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
      40: checkcast     #11                 // class java/nio/ByteBuffer
      43: putfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      46: aload_0
      47: aload_2
      48: putfield      #6                  // Field outputStream:Ljava/io/OutputStream;
      51: iload         6
      53: ifeq          61
      56: aload_0
      57: aload_2
      58: invokevirtual #8                  // Method writeHeader:(Ljava/io/OutputStream;)V
      61: return

  public static <T> org.apache.logging.log4j.core.appender.OutputStreamManager getManager(java.lang.String, T, org.apache.logging.log4j.core.appender.ManagerFactory<? extends org.apache.logging.log4j.core.appender.OutputStreamManager, T>);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokestatic  #16                 // Method org/apache/logging/log4j/core/appender/AbstractManager.getManager:(Ljava/lang/String;Lorg/apache/logging/log4j/core/appender/ManagerFactory;Ljava/lang/Object;)Lorg/apache/logging/log4j/core/appender/AbstractManager;
       6: checkcast     #17                 // class org/apache/logging/log4j/core/appender/OutputStreamManager
       9: areturn

  protected java.io.OutputStream createOutputStream() throws java.io.IOException;
    Code:
       0: new           #18                 // class java/lang/IllegalStateException
       3: dup
       4: new           #19                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      11: aload_0
      12: invokevirtual #21                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      15: invokevirtual #22                 // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      18: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: ldc           #24                 // String  must implement createOutputStream()
      23: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #26                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      32: athrow

  public void skipFooter(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field skipFooter:Z
       5: return

  public boolean releaseSub(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #28                 // Method writeFooter:()V
       4: aload_0
       5: invokevirtual #29                 // Method closeOutputStream:()Z
       8: ireturn

  protected void writeHeader(java.io.OutputStream);
    Code:
       0: aload_0
       1: getfield      #7                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
       4: ifnull        44
       7: aload_1
       8: ifnull        44
      11: aload_0
      12: getfield      #7                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
      15: invokeinterface #30,  1           // InterfaceMethod org/apache/logging/log4j/core/Layout.getHeader:()[B
      20: astore_2
      21: aload_2
      22: ifnull        44
      25: aload_1
      26: aload_2
      27: iconst_0
      28: aload_2
      29: arraylength
      30: invokevirtual #31                 // Method java/io/OutputStream.write:([BII)V
      33: goto          44
      36: astore_3
      37: aload_0
      38: ldc           #33                 // String Unable to write header
      40: aload_3
      41: invokevirtual #34                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      44: return
    Exception table:
       from    to  target type
          25    33    36   Class java/io/IOException

  protected void writeFooter();
    Code:
       0: aload_0
       1: getfield      #7                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
       4: ifnull        14
       7: aload_0
       8: getfield      #27                 // Field skipFooter:Z
      11: ifeq          15
      14: return
      15: aload_0
      16: getfield      #7                  // Field layout:Lorg/apache/logging/log4j/core/Layout;
      19: invokeinterface #35,  1           // InterfaceMethod org/apache/logging/log4j/core/Layout.getFooter:()[B
      24: astore_1
      25: aload_1
      26: ifnull        34
      29: aload_0
      30: aload_1
      31: invokevirtual #36                 // Method write:([B)V
      34: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getCount:()I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean hasOutputStream();
    Code:
       0: aload_0
       1: getfield      #6                  // Field outputStream:Ljava/io/OutputStream;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  protected java.io.OutputStream getOutputStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field outputStream:Ljava/io/OutputStream;
       4: ifnonnull     15
       7: aload_0
       8: aload_0
       9: invokevirtual #38                 // Method createOutputStream:()Ljava/io/OutputStream;
      12: putfield      #6                  // Field outputStream:Ljava/io/OutputStream;
      15: aload_0
      16: getfield      #6                  // Field outputStream:Ljava/io/OutputStream;
      19: areturn

  protected void setOutputStream(java.io.OutputStream);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field outputStream:Ljava/io/OutputStream;
       5: return

  protected void write(byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: iconst_0
       6: invokevirtual #39                 // Method write:([BIIZ)V
       9: return

  protected void write(byte[], boolean);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: iload_2
       6: invokevirtual #39                 // Method write:([BIIZ)V
       9: return

  public void writeBytes(byte[], int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: iconst_0
       5: invokevirtual #39                 // Method write:([BIIZ)V
       8: return

  protected void write(byte[], int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iload_3
       4: invokevirtual #40                 // Method writeBytes:([BII)V
       7: return

  protected synchronized void write(byte[], int, int, boolean);
    Code:
       0: iload         4
       2: ifeq          27
       5: aload_0
       6: getfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       9: invokevirtual #41                 // Method java/nio/ByteBuffer.position:()I
      12: ifne          27
      15: aload_0
      16: aload_1
      17: iload_2
      18: iload_3
      19: invokevirtual #42                 // Method writeToDestination:([BII)V
      22: aload_0
      23: invokevirtual #43                 // Method flushDestination:()V
      26: return
      27: iload_3
      28: aload_0
      29: getfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      32: invokevirtual #44                 // Method java/nio/ByteBuffer.capacity:()I
      35: if_icmplt     52
      38: aload_0
      39: invokevirtual #45                 // Method flush:()V
      42: aload_0
      43: aload_1
      44: iload_2
      45: iload_3
      46: invokevirtual #42                 // Method writeToDestination:([BII)V
      49: goto          78
      52: iload_3
      53: aload_0
      54: getfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      57: invokevirtual #46                 // Method java/nio/ByteBuffer.remaining:()I
      60: if_icmple     67
      63: aload_0
      64: invokevirtual #45                 // Method flush:()V
      67: aload_0
      68: getfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
      71: aload_1
      72: iload_2
      73: iload_3
      74: invokevirtual #47                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      77: pop
      78: iload         4
      80: ifeq          87
      83: aload_0
      84: invokevirtual #45                 // Method flush:()V
      87: return

  protected synchronized void writeToDestination(byte[], int, int);
    Code:
       0: aload_0
       1: invokevirtual #48                 // Method getOutputStream:()Ljava/io/OutputStream;
       4: aload_1
       5: iload_2
       6: iload_3
       7: invokevirtual #31                 // Method java/io/OutputStream.write:([BII)V
      10: goto          47
      13: astore        4
      15: new           #49                 // class org/apache/logging/log4j/core/appender/AppenderLoggingException
      18: dup
      19: new           #19                 // class java/lang/StringBuilder
      22: dup
      23: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      26: ldc           #50                 // String Error writing to stream
      28: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: aload_0
      32: invokevirtual #51                 // Method getName:()Ljava/lang/String;
      35: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: aload         4
      43: invokespecial #52                 // Method org/apache/logging/log4j/core/appender/AppenderLoggingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      46: athrow
      47: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  protected synchronized void flushDestination();
    Code:
       0: aload_0
       1: getfield      #6                  // Field outputStream:Ljava/io/OutputStream;
       4: astore_1
       5: aload_1
       6: ifnull        48
       9: aload_1
      10: invokevirtual #53                 // Method java/io/OutputStream.flush:()V
      13: goto          48
      16: astore_2
      17: new           #49                 // class org/apache/logging/log4j/core/appender/AppenderLoggingException
      20: dup
      21: new           #19                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #54                 // String Error flushing stream
      30: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_0
      34: invokevirtual #51                 // Method getName:()Ljava/lang/String;
      37: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: aload_2
      44: invokespecial #52                 // Method org/apache/logging/log4j/core/appender/AppenderLoggingException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      47: athrow
      48: return
    Exception table:
       from    to  target type
           9    13    16   Class java/io/IOException

  protected synchronized void flushBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokevirtual #55                 // Method java/nio/Buffer.flip:()Ljava/nio/Buffer;
       4: pop
       5: aload_1
       6: invokevirtual #46                 // Method java/nio/ByteBuffer.remaining:()I
       9: ifle          33
      12: aload_0
      13: aload_1
      14: invokevirtual #56                 // Method java/nio/ByteBuffer.array:()[B
      17: aload_1
      18: invokevirtual #57                 // Method java/nio/ByteBuffer.arrayOffset:()I
      21: aload_1
      22: invokevirtual #41                 // Method java/nio/ByteBuffer.position:()I
      25: iadd
      26: aload_1
      27: invokevirtual #46                 // Method java/nio/ByteBuffer.remaining:()I
      30: invokevirtual #42                 // Method writeToDestination:([BII)V
      33: aload_1
      34: invokevirtual #58                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      37: pop
      38: goto          49
      41: astore_2
      42: aload_1
      43: invokevirtual #58                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      46: pop
      47: aload_2
      48: athrow
      49: return
    Exception table:
       from    to  target type
           5    33    41   any

  public synchronized void flush();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       5: invokevirtual #59                 // Method flushBuffer:(Ljava/nio/ByteBuffer;)V
       8: aload_0
       9: invokevirtual #43                 // Method flushDestination:()V
      12: return

  protected synchronized boolean closeOutputStream();
    Code:
       0: aload_0
       1: invokevirtual #45                 // Method flush:()V
       4: aload_0
       5: getfield      #6                  // Field outputStream:Ljava/io/OutputStream;
       8: astore_1
       9: aload_1
      10: ifnull        27
      13: aload_1
      14: getstatic     #60                 // Field java/lang/System.out:Ljava/io/PrintStream;
      17: if_acmpeq     27
      20: aload_1
      21: getstatic     #61                 // Field java/lang/System.err:Ljava/io/PrintStream;
      24: if_acmpne     29
      27: iconst_1
      28: ireturn
      29: aload_1
      30: invokevirtual #62                 // Method java/io/OutputStream.close:()V
      33: getstatic     #13                 // Field LOGGER:Lorg/apache/logging/log4j/Logger;
      36: ldc           #63                 // String OutputStream closed
      38: invokeinterface #64,  2           // InterfaceMethod org/apache/logging/log4j/Logger.debug:(Ljava/lang/String;)V
      43: goto          56
      46: astore_2
      47: aload_0
      48: ldc           #65                 // String Unable to close stream
      50: aload_2
      51: invokevirtual #34                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      54: iconst_0
      55: ireturn
      56: iconst_1
      57: ireturn
    Exception table:
       from    to  target type
          29    43    46   Class java/io/IOException

  public java.nio.ByteBuffer getByteBuffer();
    Code:
       0: aload_0
       1: getfield      #12                 // Field byteBuffer:Ljava/nio/ByteBuffer;
       4: areturn

  public java.nio.ByteBuffer drain(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #59                 // Method flushBuffer:(Ljava/nio/ByteBuffer;)V
       5: aload_1
       6: areturn

  public void writeBytes(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokevirtual #46                 // Method java/nio/ByteBuffer.remaining:()I
       4: ifne          8
       7: return
       8: aload_0
       9: dup
      10: astore_2
      11: monitorenter
      12: aload_1
      13: aload_0
      14: invokestatic  #66                 // Method org/apache/logging/log4j/core/layout/ByteBufferDestinationHelper.writeToUnsynchronized:(Ljava/nio/ByteBuffer;Lorg/apache/logging/log4j/core/layout/ByteBufferDestination;)V
      17: aload_2
      18: monitorexit
      19: goto          27
      22: astore_3
      23: aload_2
      24: monitorexit
      25: aload_3
      26: athrow
      27: return
    Exception table:
       from    to  target type
          12    19    22   any
          22    25    22   any
}
