Compiled from "AbstractDatabaseManager.java"
public abstract class org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager extends org.apache.logging.log4j.core.appender.AbstractManager implements java.io.Flushable {
  private final java.util.ArrayList<org.apache.logging.log4j.core.LogEvent> buffer;

  private final int bufferSize;

  private final org.apache.logging.log4j.core.Layout<? extends java.io.Serializable> layout;

  private boolean running;

  protected static <M extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager, T extends org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager$AbstractFactoryData> M getManager(java.lang.String, T, org.apache.logging.log4j.core.appender.ManagerFactory<M, T>);
    Code:
       0: aload_0
       1: aload_2
       2: aload_1
       3: invokestatic  #1                  // Method org/apache/logging/log4j/core/appender/AbstractManager.getManager:(Ljava/lang/String;Lorg/apache/logging/log4j/core/appender/ManagerFactory;Ljava/lang/Object;)Lorg/apache/logging/log4j/core/appender/AbstractManager;
       6: checkcast     #2                  // class org/apache/logging/log4j/core/appender/db/AbstractDatabaseManager
       9: areturn

  protected org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager(java.lang.String, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aconst_null
       4: invokespecial #3                  // Method "<init>":(Ljava/lang/String;ILorg/apache/logging/log4j/core/Layout;)V
       7: return

  protected org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager(java.lang.String, int, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: aload_3
       4: aconst_null
       5: invokespecial #4                  // Method "<init>":(Ljava/lang/String;ILorg/apache/logging/log4j/core/Layout;Lorg/apache/logging/log4j/core/config/Configuration;)V
       8: return

  protected org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager(java.lang.String, int, org.apache.logging.log4j.core.Layout<? extends java.io.Serializable>, org.apache.logging.log4j.core.config.Configuration);
    Code:
       0: aload_0
       1: aload         4
       3: ifnull        16
       6: aload         4
       8: invokeinterface #5,  1            // InterfaceMethod org/apache/logging/log4j/core/config/Configuration.getLoggerContext:()Lorg/apache/logging/log4j/core/LoggerContext;
      13: goto          17
      16: aconst_null
      17: aload_1
      18: invokespecial #6                  // Method org/apache/logging/log4j/core/appender/AbstractManager."<init>":(Lorg/apache/logging/log4j/core/LoggerContext;Ljava/lang/String;)V
      21: aload_0
      22: iload_2
      23: putfield      #7                  // Field bufferSize:I
      26: aload_0
      27: new           #8                  // class java/util/ArrayList
      30: dup
      31: iload_2
      32: iconst_1
      33: iadd
      34: invokespecial #9                  // Method java/util/ArrayList."<init>":(I)V
      37: putfield      #10                 // Field buffer:Ljava/util/ArrayList;
      40: aload_0
      41: aload_3
      42: putfield      #11                 // Field layout:Lorg/apache/logging/log4j/core/Layout;
      45: return

  protected void buffer(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: getfield      #10                 // Field buffer:Ljava/util/ArrayList;
       4: aload_1
       5: invokeinterface #12,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.toImmutable:()Lorg/apache/logging/log4j/core/LogEvent;
      10: invokevirtual #13                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      13: pop
      14: aload_0
      15: getfield      #10                 // Field buffer:Ljava/util/ArrayList;
      18: invokevirtual #14                 // Method java/util/ArrayList.size:()I
      21: aload_0
      22: getfield      #7                  // Field bufferSize:I
      25: if_icmpge     37
      28: aload_1
      29: invokeinterface #15,  1           // InterfaceMethod org/apache/logging/log4j/core/LogEvent.isEndOfBatch:()Z
      34: ifeq          41
      37: aload_0
      38: invokevirtual #16                 // Method flush:()V
      41: return

  protected abstract boolean commitAndClose();

  protected abstract void connectAndStart();

  public final synchronized void flush();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method isRunning:()Z
       4: ifeq          104
       7: aload_0
       8: invokevirtual #18                 // Method isBuffered:()Z
      11: ifeq          104
      14: aload_0
      15: invokevirtual #19                 // Method connectAndStart:()V
      18: aload_0
      19: getfield      #10                 // Field buffer:Ljava/util/ArrayList;
      22: invokevirtual #20                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
      25: astore_1
      26: aload_1
      27: invokeinterface #21,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      32: ifeq          74
      35: aload_1
      36: invokeinterface #22,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      41: checkcast     #23                 // class org/apache/logging/log4j/core/LogEvent
      44: astore_2
      45: aload_0
      46: aload_2
      47: aload_0
      48: getfield      #11                 // Field layout:Lorg/apache/logging/log4j/core/Layout;
      51: ifnull        67
      54: aload_0
      55: getfield      #11                 // Field layout:Lorg/apache/logging/log4j/core/Layout;
      58: aload_2
      59: invokeinterface #24,  2           // InterfaceMethod org/apache/logging/log4j/core/Layout.toSerializable:(Lorg/apache/logging/log4j/core/LogEvent;)Ljava/io/Serializable;
      64: goto          68
      67: aconst_null
      68: invokevirtual #25                 // Method writeInternal:(Lorg/apache/logging/log4j/core/LogEvent;Ljava/io/Serializable;)V
      71: goto          26
      74: aload_0
      75: invokevirtual #26                 // Method commitAndClose:()Z
      78: pop
      79: aload_0
      80: getfield      #10                 // Field buffer:Ljava/util/ArrayList;
      83: invokevirtual #27                 // Method java/util/ArrayList.clear:()V
      86: goto          104
      89: astore_3
      90: aload_0
      91: invokevirtual #26                 // Method commitAndClose:()Z
      94: pop
      95: aload_0
      96: getfield      #10                 // Field buffer:Ljava/util/ArrayList;
      99: invokevirtual #27                 // Method java/util/ArrayList.clear:()V
     102: aload_3
     103: athrow
     104: return
    Exception table:
       from    to  target type
          18    74    89   any

  protected boolean isBuffered();
    Code:
       0: aload_0
       1: getfield      #7                  // Field bufferSize:I
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public final boolean isRunning();
    Code:
       0: aload_0
       1: getfield      #28                 // Field running:Z
       4: ireturn

  public final boolean releaseSub(long, java.util.concurrent.TimeUnit);
    Code:
       0: aload_0
       1: invokevirtual #29                 // Method shutdown:()Z
       4: ireturn

  public final synchronized boolean shutdown();
    Code:
       0: iconst_1
       1: istore_1
       2: aload_0
       3: invokevirtual #16                 // Method flush:()V
       6: aload_0
       7: invokevirtual #17                 // Method isRunning:()Z
      10: ifeq          54
      13: iload_1
      14: aload_0
      15: invokevirtual #30                 // Method shutdownInternal:()Z
      18: iand
      19: istore_1
      20: aload_0
      21: iconst_0
      22: putfield      #28                 // Field running:Z
      25: goto          54
      28: astore_2
      29: aload_0
      30: ldc           #32                 // String Caught exception while performing database shutdown operations
      32: aload_2
      33: invokevirtual #33                 // Method logWarn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      36: iconst_0
      37: istore_1
      38: aload_0
      39: iconst_0
      40: putfield      #28                 // Field running:Z
      43: goto          54
      46: astore_3
      47: aload_0
      48: iconst_0
      49: putfield      #28                 // Field running:Z
      52: aload_3
      53: athrow
      54: iload_1
      55: ireturn
    Exception table:
       from    to  target type
          13    20    28   Class java/lang/Exception
          13    20    46   any
          28    38    46   any

  protected abstract boolean shutdownInternal() throws java.lang.Exception;

  public final synchronized void startup();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method isRunning:()Z
       4: ifne          27
       7: aload_0
       8: invokevirtual #34                 // Method startupInternal:()V
      11: aload_0
      12: iconst_1
      13: putfield      #28                 // Field running:Z
      16: goto          27
      19: astore_1
      20: aload_0
      21: ldc           #35                 // String Could not perform database startup operations
      23: aload_1
      24: invokevirtual #36                 // Method logError:(Ljava/lang/String;Ljava/lang/Throwable;)V
      27: return
    Exception table:
       from    to  target type
           7    16    19   Class java/lang/Exception

  protected abstract void startupInternal() throws java.lang.Exception;

  public final java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #37                 // Method getName:()Ljava/lang/String;
       4: areturn

  public final synchronized void write(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #38                 // Method write:(Lorg/apache/logging/log4j/core/LogEvent;Ljava/io/Serializable;)V
       6: return

  public final synchronized void write(org.apache.logging.log4j.core.LogEvent, java.io.Serializable);
    Code:
       0: aload_0
       1: invokevirtual #18                 // Method isBuffered:()Z
       4: ifeq          15
       7: aload_0
       8: aload_1
       9: invokevirtual #39                 // Method buffer:(Lorg/apache/logging/log4j/core/LogEvent;)V
      12: goto          21
      15: aload_0
      16: aload_1
      17: aload_2
      18: invokevirtual #40                 // Method writeThrough:(Lorg/apache/logging/log4j/core/LogEvent;Ljava/io/Serializable;)V
      21: return

  protected void writeInternal(org.apache.logging.log4j.core.LogEvent);
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: invokevirtual #25                 // Method writeInternal:(Lorg/apache/logging/log4j/core/LogEvent;Ljava/io/Serializable;)V
       6: return

  protected abstract void writeInternal(org.apache.logging.log4j.core.LogEvent, java.io.Serializable);

  protected void writeThrough(org.apache.logging.log4j.core.LogEvent, java.io.Serializable);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method connectAndStart:()V
       4: aload_0
       5: aload_1
       6: aload_2
       7: invokevirtual #25                 // Method writeInternal:(Lorg/apache/logging/log4j/core/LogEvent;Ljava/io/Serializable;)V
      10: aload_0
      11: invokevirtual #26                 // Method commitAndClose:()Z
      14: pop
      15: goto          26
      18: astore_3
      19: aload_0
      20: invokevirtual #26                 // Method commitAndClose:()Z
      23: pop
      24: aload_3
      25: athrow
      26: return
    Exception table:
       from    to  target type
           4    10    18   any
}
