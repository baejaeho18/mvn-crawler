Compiled from "BaseNCodecInputStream.java"
public class org.apache.commons.codec.binary.BaseNCodecInputStream extends java.io.FilterInputStream {
  private final org.apache.commons.codec.binary.BaseNCodec baseNCodec;

  private final boolean doEncode;

  private final byte[] singleByte;

  private final org.apache.commons.codec.binary.BaseNCodec$Context context;

  protected org.apache.commons.codec.binary.BaseNCodecInputStream(java.io.InputStream, org.apache.commons.codec.binary.BaseNCodec, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method java/io/FilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: iconst_1
       7: newarray       byte
       9: putfield      #3                  // Field singleByte:[B
      12: aload_0
      13: new           #4                  // class org/apache/commons/codec/binary/BaseNCodec$Context
      16: dup
      17: invokespecial #5                  // Method org/apache/commons/codec/binary/BaseNCodec$Context."<init>":()V
      20: putfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      23: aload_0
      24: iload_3
      25: putfield      #7                  // Field doEncode:Z
      28: aload_0
      29: aload_2
      30: putfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      33: return

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
       4: getfield      #9                  // Field org/apache/commons/codec/binary/BaseNCodec$Context.eof:Z
       7: ifeq          14
      10: iconst_0
      11: goto          15
      14: iconst_1
      15: ireturn

  public boolean isStrictDecoding();
    Code:
       0: aload_0
       1: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
       4: invokevirtual #10                 // Method org/apache/commons/codec/binary/BaseNCodec.isStrictDecoding:()Z
       7: ireturn

  public synchronized void mark(int);
    Code:
       0: return

  public boolean markSupported();
    Code:
       0: iconst_0
       1: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #3                  // Field singleByte:[B
       5: iconst_0
       6: iconst_1
       7: invokevirtual #11                 // Method read:([BII)I
      10: istore_1
      11: iload_1
      12: ifne          29
      15: aload_0
      16: aload_0
      17: getfield      #3                  // Field singleByte:[B
      20: iconst_0
      21: iconst_1
      22: invokevirtual #11                 // Method read:([BII)I
      25: istore_1
      26: goto          11
      29: iload_1
      30: ifle          54
      33: aload_0
      34: getfield      #3                  // Field singleByte:[B
      37: iconst_0
      38: baload
      39: istore_2
      40: iload_2
      41: ifge          52
      44: sipush        256
      47: iload_2
      48: iadd
      49: goto          53
      52: iload_2
      53: ireturn
      54: iconst_m1
      55: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: ldc           #12                 // String array
       3: invokestatic  #13                 // Method java/util/Objects.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: iload_2
       8: iflt          15
      11: iload_3
      12: ifge          23
      15: new           #14                 // class java/lang/IndexOutOfBoundsException
      18: dup
      19: invokespecial #15                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      22: athrow
      23: iload_2
      24: aload_1
      25: arraylength
      26: if_icmpgt     37
      29: iload_2
      30: iload_3
      31: iadd
      32: aload_1
      33: arraylength
      34: if_icmple     45
      37: new           #14                 // class java/lang/IndexOutOfBoundsException
      40: dup
      41: invokespecial #15                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      44: athrow
      45: iload_3
      46: ifne          51
      49: iconst_0
      50: ireturn
      51: iconst_0
      52: istore        4
      54: iload         4
      56: ifne          165
      59: aload_0
      60: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
      63: aload_0
      64: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
      67: invokevirtual #16                 // Method org/apache/commons/codec/binary/BaseNCodec.hasData:(Lorg/apache/commons/codec/binary/BaseNCodec$Context;)Z
      70: ifne          146
      73: aload_0
      74: getfield      #7                  // Field doEncode:Z
      77: ifeq          86
      80: sipush        4096
      83: goto          89
      86: sipush        8192
      89: newarray       byte
      91: astore        5
      93: aload_0
      94: getfield      #17                 // Field in:Ljava/io/InputStream;
      97: aload         5
      99: invokevirtual #18                 // Method java/io/InputStream.read:([B)I
     102: istore        6
     104: aload_0
     105: getfield      #7                  // Field doEncode:Z
     108: ifeq          130
     111: aload_0
     112: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
     115: aload         5
     117: iconst_0
     118: iload         6
     120: aload_0
     121: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
     124: invokevirtual #19                 // Method org/apache/commons/codec/binary/BaseNCodec.encode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V
     127: goto          146
     130: aload_0
     131: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
     134: aload         5
     136: iconst_0
     137: iload         6
     139: aload_0
     140: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
     143: invokevirtual #20                 // Method org/apache/commons/codec/binary/BaseNCodec.decode:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)V
     146: aload_0
     147: getfield      #8                  // Field baseNCodec:Lorg/apache/commons/codec/binary/BaseNCodec;
     150: aload_1
     151: iload_2
     152: iload_3
     153: aload_0
     154: getfield      #6                  // Field context:Lorg/apache/commons/codec/binary/BaseNCodec$Context;
     157: invokevirtual #21                 // Method org/apache/commons/codec/binary/BaseNCodec.readResults:([BIILorg/apache/commons/codec/binary/BaseNCodec$Context;)I
     160: istore        4
     162: goto          54
     165: iload         4
     167: ireturn

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: new           #22                 // class java/io/IOException
       3: dup
       4: ldc           #23                 // String mark/reset not supported
       6: invokespecial #24                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
       9: athrow

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          33
       6: new           #25                 // class java/lang/IllegalArgumentException
       9: dup
      10: new           #26                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #27                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #28                 // String Negative skip length:
      19: invokevirtual #29                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: lload_1
      23: invokevirtual #30                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      26: invokevirtual #31                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      29: invokespecial #32                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: sipush        512
      36: newarray       byte
      38: astore_3
      39: lload_1
      40: lstore        4
      42: lload         4
      44: lconst_0
      45: lcmp
      46: ifle          90
      49: aload_3
      50: arraylength
      51: i2l
      52: lload         4
      54: invokestatic  #33                 // Method java/lang/Math.min:(JJ)J
      57: l2i
      58: istore        6
      60: aload_0
      61: aload_3
      62: iconst_0
      63: iload         6
      65: invokevirtual #11                 // Method read:([BII)I
      68: istore        6
      70: iload         6
      72: iconst_m1
      73: if_icmpne     79
      76: goto          90
      79: lload         4
      81: iload         6
      83: i2l
      84: lsub
      85: lstore        4
      87: goto          42
      90: lload_1
      91: lload         4
      93: lsub
      94: lreturn
}
