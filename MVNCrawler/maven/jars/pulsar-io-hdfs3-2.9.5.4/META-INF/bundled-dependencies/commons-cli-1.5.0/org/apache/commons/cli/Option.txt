Compiled from "Option.java"
public class org.apache.commons.cli.Option implements java.lang.Cloneable,java.io.Serializable {
  public static final int UNINITIALIZED;

  public static final int UNLIMITED_VALUES;

  private static final long serialVersionUID;

  private final java.lang.String option;

  private java.lang.String longOption;

  private java.lang.String argName;

  private java.lang.String description;

  private boolean required;

  private boolean optionalArg;

  private int argCount;

  private java.lang.Class<?> type;

  private java.util.List<java.lang.String> values;

  private char valuesep;

  public static org.apache.commons.cli.Option$Builder builder();
    Code:
       0: aconst_null
       1: invokestatic  #2                  // Method builder:(Ljava/lang/String;)Lorg/apache/commons/cli/Option$Builder;
       4: areturn

  public static org.apache.commons.cli.Option$Builder builder(java.lang.String);
    Code:
       0: new           #3                  // class org/apache/commons/cli/Option$Builder
       3: dup
       4: aload_0
       5: aconst_null
       6: invokespecial #4                  // Method org/apache/commons/cli/Option$Builder."<init>":(Ljava/lang/String;Lorg/apache/commons/cli/Option$1;)V
       9: areturn

  private org.apache.commons.cli.Option(org.apache.commons.cli.Option$Builder);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #7                  // Field argCount:I
       9: aload_0
      10: ldc           #8                  // class java/lang/String
      12: putfield      #9                  // Field type:Ljava/lang/Class;
      15: aload_0
      16: new           #10                 // class java/util/ArrayList
      19: dup
      20: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
      23: putfield      #12                 // Field values:Ljava/util/List;
      26: aload_0
      27: aload_1
      28: invokestatic  #13                 // Method org/apache/commons/cli/Option$Builder.access$200:(Lorg/apache/commons/cli/Option$Builder;)Ljava/lang/String;
      31: putfield      #14                 // Field argName:Ljava/lang/String;
      34: aload_0
      35: aload_1
      36: invokestatic  #15                 // Method org/apache/commons/cli/Option$Builder.access$300:(Lorg/apache/commons/cli/Option$Builder;)Ljava/lang/String;
      39: putfield      #16                 // Field description:Ljava/lang/String;
      42: aload_0
      43: aload_1
      44: invokestatic  #17                 // Method org/apache/commons/cli/Option$Builder.access$400:(Lorg/apache/commons/cli/Option$Builder;)Ljava/lang/String;
      47: putfield      #18                 // Field longOption:Ljava/lang/String;
      50: aload_0
      51: aload_1
      52: invokestatic  #19                 // Method org/apache/commons/cli/Option$Builder.access$500:(Lorg/apache/commons/cli/Option$Builder;)I
      55: putfield      #7                  // Field argCount:I
      58: aload_0
      59: aload_1
      60: invokestatic  #20                 // Method org/apache/commons/cli/Option$Builder.access$600:(Lorg/apache/commons/cli/Option$Builder;)Ljava/lang/String;
      63: putfield      #21                 // Field option:Ljava/lang/String;
      66: aload_0
      67: aload_1
      68: invokestatic  #22                 // Method org/apache/commons/cli/Option$Builder.access$700:(Lorg/apache/commons/cli/Option$Builder;)Z
      71: putfield      #23                 // Field optionalArg:Z
      74: aload_0
      75: aload_1
      76: invokestatic  #24                 // Method org/apache/commons/cli/Option$Builder.access$800:(Lorg/apache/commons/cli/Option$Builder;)Z
      79: putfield      #25                 // Field required:Z
      82: aload_0
      83: aload_1
      84: invokestatic  #26                 // Method org/apache/commons/cli/Option$Builder.access$900:(Lorg/apache/commons/cli/Option$Builder;)Ljava/lang/Class;
      87: putfield      #9                  // Field type:Ljava/lang/Class;
      90: aload_0
      91: aload_1
      92: invokestatic  #27                 // Method org/apache/commons/cli/Option$Builder.access$1000:(Lorg/apache/commons/cli/Option$Builder;)C
      95: putfield      #28                 // Field valuesep:C
      98: return

  public org.apache.commons.cli.Option(java.lang.String, boolean, java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iload_2
       4: aload_3
       5: invokespecial #29                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V
       8: return

  public org.apache.commons.cli.Option(java.lang.String, java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: aload_1
       2: aconst_null
       3: iconst_0
       4: aload_2
       5: invokespecial #29                 // Method "<init>":(Ljava/lang/String;Ljava/lang/String;ZLjava/lang/String;)V
       8: return

  public org.apache.commons.cli.Option(java.lang.String, java.lang.String, boolean, java.lang.String) throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_m1
       6: putfield      #7                  // Field argCount:I
       9: aload_0
      10: ldc           #8                  // class java/lang/String
      12: putfield      #9                  // Field type:Ljava/lang/Class;
      15: aload_0
      16: new           #10                 // class java/util/ArrayList
      19: dup
      20: invokespecial #11                 // Method java/util/ArrayList."<init>":()V
      23: putfield      #12                 // Field values:Ljava/util/List;
      26: aload_0
      27: aload_1
      28: invokestatic  #30                 // Method org/apache/commons/cli/OptionValidator.validate:(Ljava/lang/String;)Ljava/lang/String;
      31: putfield      #21                 // Field option:Ljava/lang/String;
      34: aload_0
      35: aload_2
      36: putfield      #18                 // Field longOption:Ljava/lang/String;
      39: iload_3
      40: ifeq          48
      43: aload_0
      44: iconst_1
      45: putfield      #7                  // Field argCount:I
      48: aload_0
      49: aload         4
      51: putfield      #16                 // Field description:Ljava/lang/String;
      54: return

  boolean acceptsArg();
    Code:
       0: aload_0
       1: invokevirtual #31                 // Method hasArg:()Z
       4: ifne          21
       7: aload_0
       8: invokevirtual #32                 // Method hasArgs:()Z
      11: ifne          21
      14: aload_0
      15: invokevirtual #33                 // Method hasOptionalArg:()Z
      18: ifeq          48
      21: aload_0
      22: getfield      #7                  // Field argCount:I
      25: ifle          44
      28: aload_0
      29: getfield      #12                 // Field values:Ljava/util/List;
      32: invokeinterface #34,  1           // InterfaceMethod java/util/List.size:()I
      37: aload_0
      38: getfield      #7                  // Field argCount:I
      41: if_icmpge     48
      44: iconst_1
      45: goto          49
      48: iconst_0
      49: ireturn

  private void add(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #35                 // Method acceptsArg:()Z
       4: ifne          17
       7: new           #36                 // class java/lang/RuntimeException
      10: dup
      11: ldc           #37                 // String Cannot add value, list full.
      13: invokespecial #38                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #12                 // Field values:Ljava/util/List;
      21: aload_1
      22: invokeinterface #39,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      27: pop
      28: return

  public boolean addValue(java.lang.String);
    Code:
       0: new           #40                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #41                 // String The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.
       6: invokespecial #42                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  void addValueForProcessing(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #7                  // Field argCount:I
       4: iconst_m1
       5: if_icmpne     18
       8: new           #36                 // class java/lang/RuntimeException
      11: dup
      12: ldc           #43                 // String NO_ARGS_ALLOWED
      14: invokespecial #38                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      17: athrow
      18: aload_0
      19: aload_1
      20: invokespecial #44                 // Method processValue:(Ljava/lang/String;)V
      23: return

  void clearValues();
    Code:
       0: aload_0
       1: getfield      #12                 // Field values:Ljava/util/List;
       4: invokeinterface #45,  1           // InterfaceMethod java/util/List.clear:()V
       9: return

  public java.lang.Object clone();
    Code:
       0: aload_0
       1: invokespecial #46                 // Method java/lang/Object.clone:()Ljava/lang/Object;
       4: checkcast     #6                  // class org/apache/commons/cli/Option
       7: astore_1
       8: aload_1
       9: new           #10                 // class java/util/ArrayList
      12: dup
      13: aload_0
      14: getfield      #12                 // Field values:Ljava/util/List;
      17: invokespecial #47                 // Method java/util/ArrayList."<init>":(Ljava/util/Collection;)V
      20: putfield      #12                 // Field values:Ljava/util/List;
      23: aload_1
      24: areturn
      25: astore_1
      26: new           #36                 // class java/lang/RuntimeException
      29: dup
      30: new           #49                 // class java/lang/StringBuilder
      33: dup
      34: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
      37: ldc           #51                 // String A CloneNotSupportedException was thrown:
      39: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_1
      43: invokevirtual #53                 // Method java/lang/CloneNotSupportedException.getMessage:()Ljava/lang/String;
      46: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #38                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
      55: athrow
    Exception table:
       from    to  target type
           0    24    25   Class java/lang/CloneNotSupportedException

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #6                  // class org/apache/commons/cli/Option
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #6                  // class org/apache/commons/cli/Option
      20: astore_2
      21: aload_0
      22: getfield      #18                 // Field longOption:Ljava/lang/String;
      25: aload_2
      26: getfield      #18                 // Field longOption:Ljava/lang/String;
      29: invokestatic  #55                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      32: ifeq          53
      35: aload_0
      36: getfield      #21                 // Field option:Ljava/lang/String;
      39: aload_2
      40: getfield      #21                 // Field option:Ljava/lang/String;
      43: invokestatic  #55                 // Method java/util/Objects.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public java.lang.String getArgName();
    Code:
       0: aload_0
       1: getfield      #14                 // Field argName:Ljava/lang/String;
       4: areturn

  public int getArgs();
    Code:
       0: aload_0
       1: getfield      #7                  // Field argCount:I
       4: ireturn

  public java.lang.String getDescription();
    Code:
       0: aload_0
       1: getfield      #16                 // Field description:Ljava/lang/String;
       4: areturn

  public int getId();
    Code:
       0: aload_0
       1: invokevirtual #56                 // Method getKey:()Ljava/lang/String;
       4: iconst_0
       5: invokevirtual #57                 // Method java/lang/String.charAt:(I)C
       8: ireturn

  java.lang.String getKey();
    Code:
       0: aload_0
       1: getfield      #21                 // Field option:Ljava/lang/String;
       4: ifnonnull     14
       7: aload_0
       8: getfield      #18                 // Field longOption:Ljava/lang/String;
      11: goto          18
      14: aload_0
      15: getfield      #21                 // Field option:Ljava/lang/String;
      18: areturn

  public java.lang.String getLongOpt();
    Code:
       0: aload_0
       1: getfield      #18                 // Field longOption:Ljava/lang/String;
       4: areturn

  public java.lang.String getOpt();
    Code:
       0: aload_0
       1: getfield      #21                 // Field option:Ljava/lang/String;
       4: areturn

  public java.lang.Object getType();
    Code:
       0: aload_0
       1: getfield      #9                  // Field type:Ljava/lang/Class;
       4: areturn

  public java.lang.String getValue();
    Code:
       0: aload_0
       1: invokespecial #58                 // Method hasNoValues:()Z
       4: ifeq          11
       7: aconst_null
       8: goto          24
      11: aload_0
      12: getfield      #12                 // Field values:Ljava/util/List;
      15: iconst_0
      16: invokeinterface #59,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      21: checkcast     #8                  // class java/lang/String
      24: areturn

  public java.lang.String getValue(int) throws java.lang.IndexOutOfBoundsException;
    Code:
       0: aload_0
       1: invokespecial #58                 // Method hasNoValues:()Z
       4: ifeq          11
       7: aconst_null
       8: goto          24
      11: aload_0
      12: getfield      #12                 // Field values:Ljava/util/List;
      15: iload_1
      16: invokeinterface #59,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      21: checkcast     #8                  // class java/lang/String
      24: areturn

  public java.lang.String getValue(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #60                 // Method getValue:()Ljava/lang/String;
       4: astore_2
       5: aload_2
       6: ifnull        13
       9: aload_2
      10: goto          14
      13: aload_1
      14: areturn

  public java.lang.String[] getValues();
    Code:
       0: aload_0
       1: invokespecial #58                 // Method hasNoValues:()Z
       4: ifeq          11
       7: aconst_null
       8: goto          35
      11: aload_0
      12: getfield      #12                 // Field values:Ljava/util/List;
      15: aload_0
      16: getfield      #12                 // Field values:Ljava/util/List;
      19: invokeinterface #34,  1           // InterfaceMethod java/util/List.size:()I
      24: anewarray     #8                  // class java/lang/String
      27: invokeinterface #61,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      32: checkcast     #62                 // class "[Ljava/lang/String;"
      35: areturn

  public char getValueSeparator();
    Code:
       0: aload_0
       1: getfield      #28                 // Field valuesep:C
       4: ireturn

  public java.util.List<java.lang.String> getValuesList();
    Code:
       0: aload_0
       1: getfield      #12                 // Field values:Ljava/util/List;
       4: areturn

  public boolean hasArg();
    Code:
       0: aload_0
       1: getfield      #7                  // Field argCount:I
       4: ifgt          16
       7: aload_0
       8: getfield      #7                  // Field argCount:I
      11: bipush        -2
      13: if_icmpne     20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public boolean hasArgName();
    Code:
       0: aload_0
       1: getfield      #14                 // Field argName:Ljava/lang/String;
       4: ifnull        21
       7: aload_0
       8: getfield      #14                 // Field argName:Ljava/lang/String;
      11: invokevirtual #63                 // Method java/lang/String.isEmpty:()Z
      14: ifne          21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public boolean hasArgs();
    Code:
       0: aload_0
       1: getfield      #7                  // Field argCount:I
       4: iconst_1
       5: if_icmpgt     17
       8: aload_0
       9: getfield      #7                  // Field argCount:I
      12: bipush        -2
      14: if_icmpne     21
      17: iconst_1
      18: goto          22
      21: iconst_0
      22: ireturn

  public int hashCode();
    Code:
       0: iconst_2
       1: anewarray     #64                 // class java/lang/Object
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #18                 // Field longOption:Ljava/lang/String;
      10: aastore
      11: dup
      12: iconst_1
      13: aload_0
      14: getfield      #21                 // Field option:Ljava/lang/String;
      17: aastore
      18: invokestatic  #65                 // Method java/util/Objects.hash:([Ljava/lang/Object;)I
      21: ireturn

  public boolean hasLongOpt();
    Code:
       0: aload_0
       1: getfield      #18                 // Field longOption:Ljava/lang/String;
       4: ifnull        11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private boolean hasNoValues();
    Code:
       0: aload_0
       1: getfield      #12                 // Field values:Ljava/util/List;
       4: invokeinterface #66,  1           // InterfaceMethod java/util/List.isEmpty:()Z
       9: ireturn

  public boolean hasOptionalArg();
    Code:
       0: aload_0
       1: getfield      #23                 // Field optionalArg:Z
       4: ireturn

  public boolean hasValueSeparator();
    Code:
       0: aload_0
       1: getfield      #28                 // Field valuesep:C
       4: ifle          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  public boolean isRequired();
    Code:
       0: aload_0
       1: getfield      #25                 // Field required:Z
       4: ireturn

  private void processValue(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #67                 // Method hasValueSeparator:()Z
       4: ifeq          71
       7: aload_0
       8: invokevirtual #68                 // Method getValueSeparator:()C
      11: istore_2
      12: aload_1
      13: iload_2
      14: invokevirtual #69                 // Method java/lang/String.indexOf:(I)I
      17: istore_3
      18: iload_3
      19: iconst_m1
      20: if_icmpeq     71
      23: aload_0
      24: getfield      #12                 // Field values:Ljava/util/List;
      27: invokeinterface #34,  1           // InterfaceMethod java/util/List.size:()I
      32: aload_0
      33: getfield      #7                  // Field argCount:I
      36: iconst_1
      37: isub
      38: if_icmpne     44
      41: goto          71
      44: aload_0
      45: aload_1
      46: iconst_0
      47: iload_3
      48: invokevirtual #70                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      51: invokespecial #71                 // Method add:(Ljava/lang/String;)V
      54: aload_1
      55: iload_3
      56: iconst_1
      57: iadd
      58: invokevirtual #72                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      61: astore_1
      62: aload_1
      63: iload_2
      64: invokevirtual #69                 // Method java/lang/String.indexOf:(I)I
      67: istore_3
      68: goto          18
      71: aload_0
      72: aload_1
      73: invokespecial #71                 // Method add:(Ljava/lang/String;)V
      76: return

  boolean requiresArg();
    Code:
       0: aload_0
       1: getfield      #23                 // Field optionalArg:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: getfield      #7                  // Field argCount:I
      13: bipush        -2
      15: if_icmpne     28
      18: aload_0
      19: getfield      #12                 // Field values:Ljava/util/List;
      22: invokeinterface #66,  1           // InterfaceMethod java/util/List.isEmpty:()Z
      27: ireturn
      28: aload_0
      29: invokevirtual #35                 // Method acceptsArg:()Z
      32: ireturn

  public void setArgName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field argName:Ljava/lang/String;
       5: return

  public void setArgs(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field argCount:I
       5: return

  public void setDescription(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field description:Ljava/lang/String;
       5: return

  public void setLongOpt(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #18                 // Field longOption:Ljava/lang/String;
       5: return

  public void setOptionalArg(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #23                 // Field optionalArg:Z
       5: return

  public void setRequired(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #25                 // Field required:Z
       5: return

  public void setType(java.lang.Class<?>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field type:Ljava/lang/Class;
       5: return

  public void setType(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #73                 // class java/lang/Class
       5: invokevirtual #74                 // Method setType:(Ljava/lang/Class;)V
       8: return

  public void setValueSeparator(char);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #28                 // Field valuesep:C
       5: return

  public java.lang.String toString();
    Code:
       0: new           #49                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #50                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #75                 // String [ option:
       9: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: astore_1
      13: aload_1
      14: aload_0
      15: getfield      #21                 // Field option:Ljava/lang/String;
      18: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: pop
      22: aload_0
      23: getfield      #18                 // Field longOption:Ljava/lang/String;
      26: ifnull        43
      29: aload_1
      30: ldc           #76                 // String
      32: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: aload_0
      36: getfield      #18                 // Field longOption:Ljava/lang/String;
      39: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: pop
      43: aload_1
      44: ldc           #76                 // String
      46: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: pop
      50: aload_0
      51: invokevirtual #32                 // Method hasArgs:()Z
      54: ifeq          67
      57: aload_1
      58: ldc           #77                 // String [ARG...]
      60: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      63: pop
      64: goto          81
      67: aload_0
      68: invokevirtual #31                 // Method hasArg:()Z
      71: ifeq          81
      74: aload_1
      75: ldc           #78                 // String  [ARG]
      77: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: pop
      81: aload_1
      82: ldc           #79                 // String  ::
      84: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      87: aload_0
      88: getfield      #16                 // Field description:Ljava/lang/String;
      91: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      94: pop
      95: aload_0
      96: getfield      #9                  // Field type:Ljava/lang/Class;
      99: ifnull        116
     102: aload_1
     103: ldc           #79                 // String  ::
     105: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: aload_0
     109: getfield      #9                  // Field type:Ljava/lang/Class;
     112: invokevirtual #80                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     115: pop
     116: aload_1
     117: ldc           #81                 // String  ]
     119: invokevirtual #52                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     122: pop
     123: aload_1
     124: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     127: areturn

  org.apache.commons.cli.Option(org.apache.commons.cli.Option$Builder, org.apache.commons.cli.Option$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Lorg/apache/commons/cli/Option$Builder;)V
       5: return
}
