Compiled from "BoundedInputStream.java"
public class com.nimbusds.jose.util.BoundedInputStream extends java.io.InputStream {
  private final java.io.InputStream in;

  private final long max;

  private long pos;

  private long mark;

  private boolean propagateClose;

  public com.nimbusds.jose.util.BoundedInputStream(java.io.InputStream, long);
    Code:
       0: aload_0
       1: invokespecial #18                 // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #20                 // Field pos:J
       9: aload_0
      10: ldc2_w        #21                 // long -1l
      13: putfield      #24                 // Field mark:J
      16: aload_0
      17: iconst_1
      18: putfield      #26                 // Field propagateClose:Z
      21: aload_0
      22: lload_2
      23: putfield      #28                 // Field max:J
      26: aload_0
      27: aload_1
      28: putfield      #30                 // Field in:Ljava/io/InputStream;
      31: return

  public com.nimbusds.jose.util.BoundedInputStream(java.io.InputStream);
    Code:
       0: aload_0
       1: aload_1
       2: ldc2_w        #21                 // long -1l
       5: invokespecial #36                 // Method "<init>":(Ljava/io/InputStream;J)V
       8: return

  public long getLimitBytes();
    Code:
       0: aload_0
       1: getfield      #28                 // Field max:J
       4: lreturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          56
       9: aload_0
      10: getfield      #20                 // Field pos:J
      13: aload_0
      14: getfield      #28                 // Field max:J
      17: lcmp
      18: iflt          56
      21: new           #42                 // class java/io/IOException
      24: dup
      25: new           #44                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      32: ldc           #47                 // String Exceeded configured input limit of
      34: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: getfield      #28                 // Field max:J
      41: invokevirtual #54                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      44: ldc           #56                 // String  bytes
      46: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #63                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: aload_0
      57: getfield      #30                 // Field in:Ljava/io/InputStream;
      60: invokevirtual #65                 // Method java/io/InputStream.read:()I
      63: istore_1
      64: aload_0
      65: dup
      66: getfield      #20                 // Field pos:J
      69: lconst_1
      70: ladd
      71: putfield      #20                 // Field pos:J
      74: iload_1
      75: ireturn

  public int read(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #71                 // Method read:([BII)I
       8: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          56
       9: aload_0
      10: getfield      #20                 // Field pos:J
      13: aload_0
      14: getfield      #28                 // Field max:J
      17: lcmp
      18: iflt          56
      21: new           #42                 // class java/io/IOException
      24: dup
      25: new           #44                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      32: ldc           #47                 // String Exceeded configured input limit of
      34: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: aload_0
      38: getfield      #28                 // Field max:J
      41: invokevirtual #54                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      44: ldc           #56                 // String  bytes
      46: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #63                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: aload_0
      57: getfield      #30                 // Field in:Ljava/io/InputStream;
      60: aload_1
      61: iload_2
      62: iload_3
      63: invokevirtual #74                 // Method java/io/InputStream.read:([BII)I
      66: istore        4
      68: iload         4
      70: iconst_m1
      71: if_icmpne     76
      74: iconst_m1
      75: ireturn
      76: aload_0
      77: dup
      78: getfield      #20                 // Field pos:J
      81: iload         4
      83: i2l
      84: ladd
      85: putfield      #20                 // Field pos:J
      88: aload_0
      89: getfield      #28                 // Field max:J
      92: lconst_0
      93: lcmp
      94: iflt          144
      97: aload_0
      98: getfield      #20                 // Field pos:J
     101: aload_0
     102: getfield      #28                 // Field max:J
     105: lcmp
     106: iflt          144
     109: new           #42                 // class java/io/IOException
     112: dup
     113: new           #44                 // class java/lang/StringBuilder
     116: dup
     117: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     120: ldc           #47                 // String Exceeded configured input limit of
     122: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     125: aload_0
     126: getfield      #28                 // Field max:J
     129: invokevirtual #54                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     132: ldc           #56                 // String  bytes
     134: invokevirtual #51                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     137: invokevirtual #60                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     140: invokespecial #63                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     143: athrow
     144: iload         4
     146: ireturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          25
       9: lload_1
      10: aload_0
      11: getfield      #28                 // Field max:J
      14: aload_0
      15: getfield      #20                 // Field pos:J
      18: lsub
      19: invokestatic  #85                 // Method java/lang/Math.min:(JJ)J
      22: goto          26
      25: lload_1
      26: lstore_3
      27: aload_0
      28: getfield      #30                 // Field in:Ljava/io/InputStream;
      31: lload_3
      32: invokevirtual #87                 // Method java/io/InputStream.skip:(J)J
      35: lstore        5
      37: aload_0
      38: dup
      39: getfield      #20                 // Field pos:J
      42: lload         5
      44: ladd
      45: putfield      #20                 // Field pos:J
      48: lload         5
      50: lreturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #28                 // Field max:J
       4: lconst_0
       5: lcmp
       6: iflt          25
       9: aload_0
      10: getfield      #20                 // Field pos:J
      13: aload_0
      14: getfield      #28                 // Field max:J
      17: lcmp
      18: iflt          25
      21: iconst_0
      22: goto          32
      25: aload_0
      26: getfield      #30                 // Field in:Ljava/io/InputStream;
      29: invokevirtual #93                 // Method java/io/InputStream.available:()I
      32: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #30                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #96                 // Method java/lang/Object.toString:()Ljava/lang/String;
       7: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #26                 // Field propagateClose:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #30                 // Field in:Ljava/io/InputStream;
      11: invokevirtual #99                 // Method java/io/InputStream.close:()V
      14: return

  public synchronized void reset() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #30                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #102                // Method java/io/InputStream.reset:()V
       7: aload_0
       8: aload_0
       9: getfield      #24                 // Field mark:J
      12: putfield      #20                 // Field pos:J
      15: return

  public synchronized void mark(int);
    Code:
       0: aload_0
       1: getfield      #30                 // Field in:Ljava/io/InputStream;
       4: iload_1
       5: invokevirtual #105                // Method java/io/InputStream.mark:(I)V
       8: aload_0
       9: aload_0
      10: getfield      #20                 // Field pos:J
      13: putfield      #24                 // Field mark:J
      16: return

  public boolean markSupported();
    Code:
       0: aload_0
       1: getfield      #30                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #110                // Method java/io/InputStream.markSupported:()Z
       7: ireturn

  public boolean isPropagateClose();
    Code:
       0: aload_0
       1: getfield      #26                 // Field propagateClose:Z
       4: ireturn

  public void setPropagateClose(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field propagateClose:Z
       5: return
}
