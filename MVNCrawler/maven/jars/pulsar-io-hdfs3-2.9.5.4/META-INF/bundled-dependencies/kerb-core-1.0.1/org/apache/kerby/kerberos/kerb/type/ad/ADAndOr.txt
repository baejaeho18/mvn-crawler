Compiled from "ADAndOr.java"
public class org.apache.kerby.kerberos.kerb.type.ad.ADAndOr extends org.apache.kerby.kerberos.kerb.type.ad.AuthorizationDataEntry {
  private org.apache.kerby.kerberos.kerb.type.KrbSequenceOfType<org.apache.kerby.kerberos.kerb.type.ad.AndOr> myAndOr;

  public org.apache.kerby.kerberos.kerb.type.ad.ADAndOr();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field org/apache/kerby/kerberos/kerb/type/ad/AuthorizationType.AD_AND_OR:Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationType;
       4: invokespecial #2                  // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry."<init>":(Lorg/apache/kerby/kerberos/kerb/type/ad/AuthorizationType;)V
       7: aload_0
       8: new           #3                  // class org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType
      11: dup
      12: invokespecial #4                  // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType."<init>":()V
      15: putfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
      18: aload_0
      19: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
      22: aload_0
      23: putfield      #6                  // Field org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.outerEncodeable:Lorg/apache/kerby/asn1/type/Asn1Encodeable;
      26: return

  public org.apache.kerby.kerberos.kerb.type.ad.ADAndOr(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #7                  // Method "<init>":()V
       4: aload_0
       5: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
       8: aload_1
       9: invokevirtual #8                  // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.decode:([B)V
      12: return

  public org.apache.kerby.kerberos.kerb.type.ad.ADAndOr(java.util.List<org.apache.kerby.kerberos.kerb.type.ad.AndOr>);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method "<init>":()V
       4: aload_1
       5: invokeinterface #9,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      10: astore_2
      11: aload_2
      12: invokeinterface #10,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      17: ifeq          41
      20: aload_2
      21: invokeinterface #11,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      26: checkcast     #12                 // class org/apache/kerby/kerberos/kerb/type/ad/AndOr
      29: astore_3
      30: aload_0
      31: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
      34: aload_3
      35: invokevirtual #13                 // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.add:(Lorg/apache/kerby/asn1/type/Asn1Type;)V
      38: goto          11
      41: return

  public java.util.List<org.apache.kerby.kerberos.kerb.type.ad.AndOr> getAndOrs() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
       4: invokevirtual #14                 // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.getElements:()Ljava/util/List;
       7: areturn

  public void add(org.apache.kerby.kerberos.kerb.type.ad.AndOr);
    Code:
       0: aload_0
       1: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
       4: aload_1
       5: invokevirtual #13                 // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.add:(Lorg/apache/kerby/asn1/type/Asn1Type;)V
       8: return

  protected int encodingBodyLength() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field bodyLength:I
       4: iconst_m1
       5: if_icmpne     27
       8: aload_0
       9: aload_0
      10: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
      13: invokevirtual #16                 // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.encode:()[B
      16: invokevirtual #17                 // Method setAuthzData:([B)V
      19: aload_0
      20: aload_0
      21: invokespecial #18                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry.encodingBodyLength:()I
      24: putfield      #15                 // Field bodyLength:I
      27: aload_0
      28: getfield      #15                 // Field bodyLength:I
      31: ireturn

  public void dumpWith(org.apache.kerby.asn1.Asn1Dumper, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #19                 // Method org/apache/kerby/kerberos/kerb/type/ad/AuthorizationDataEntry.dumpWith:(Lorg/apache/kerby/asn1/Asn1Dumper;I)V
       6: aload_1
       7: invokevirtual #20                 // Method org/apache/kerby/asn1/Asn1Dumper.newLine:()Lorg/apache/kerby/asn1/Asn1Dumper;
      10: pop
      11: aload_0
      12: getfield      #5                  // Field myAndOr:Lorg/apache/kerby/kerberos/kerb/type/KrbSequenceOfType;
      15: aload_1
      16: iload_2
      17: bipush        8
      19: iadd
      20: invokevirtual #21                 // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceOfType.dumpWith:(Lorg/apache/kerby/asn1/Asn1Dumper;I)V
      23: return
}
