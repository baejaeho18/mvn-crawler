Compiled from "PrincipalName.java"
public class org.apache.kerby.kerberos.kerb.type.base.PrincipalName extends org.apache.kerby.kerberos.kerb.type.KrbSequenceType {
  private static org.apache.kerby.asn1.Asn1FieldInfo[] fieldInfos;

  private java.lang.String realm;

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName();
    Code:
       0: aload_0
       1: getstatic     #1                  // Field fieldInfos:[Lorg/apache/kerby/asn1/Asn1FieldInfo;
       4: invokespecial #2                  // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceType."<init>":([Lorg/apache/kerby/asn1/Asn1FieldInfo;)V
       7: return

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName(java.lang.String);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field fieldInfos:[Lorg/apache/kerby/asn1/Asn1FieldInfo;
       4: invokespecial #2                  // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceType."<init>":([Lorg/apache/kerby/asn1/Asn1FieldInfo;)V
       7: aload_0
       8: getstatic     #3                  // Field org/apache/kerby/kerberos/kerb/type/base/NameType.NT_PRINCIPAL:Lorg/apache/kerby/kerberos/kerb/type/base/NameType;
      11: invokevirtual #4                  // Method setNameType:(Lorg/apache/kerby/kerberos/kerb/type/base/NameType;)V
      14: aload_0
      15: aload_1
      16: invokespecial #5                  // Method fromNameString:(Ljava/lang/String;)V
      19: return

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName(java.lang.String, org.apache.kerby.kerberos.kerb.type.base.NameType);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field fieldInfos:[Lorg/apache/kerby/asn1/Asn1FieldInfo;
       4: invokespecial #2                  // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceType."<init>":([Lorg/apache/kerby/asn1/Asn1FieldInfo;)V
       7: aload_0
       8: aload_1
       9: invokespecial #5                  // Method fromNameString:(Ljava/lang/String;)V
      12: aload_0
      13: aload_2
      14: invokevirtual #4                  // Method setNameType:(Lorg/apache/kerby/kerberos/kerb/type/base/NameType;)V
      17: return

  public org.apache.kerby.kerberos.kerb.type.base.PrincipalName(java.util.List<java.lang.String>, org.apache.kerby.kerberos.kerb.type.base.NameType);
    Code:
       0: aload_0
       1: getstatic     #1                  // Field fieldInfos:[Lorg/apache/kerby/asn1/Asn1FieldInfo;
       4: invokespecial #2                  // Method org/apache/kerby/kerberos/kerb/type/KrbSequenceType."<init>":([Lorg/apache/kerby/asn1/Asn1FieldInfo;)V
       7: aload_0
       8: aload_1
       9: invokevirtual #6                  // Method setNameStrings:(Ljava/util/List;)V
      12: aload_0
      13: aload_2
      14: invokevirtual #4                  // Method setNameType:(Lorg/apache/kerby/kerberos/kerb/type/base/NameType;)V
      17: return

  public static java.lang.String extractRealm(java.lang.String);
    Code:
       0: aload_0
       1: bipush        64
       3: invokevirtual #7                  // Method java/lang/String.indexOf:(I)I
       6: istore_1
       7: iload_1
       8: ifle          19
      11: aload_0
      12: iload_1
      13: iconst_1
      14: iadd
      15: invokevirtual #8                  // Method java/lang/String.substring:(I)Ljava/lang/String;
      18: areturn
      19: new           #9                  // class java/lang/IllegalArgumentException
      22: dup
      23: ldc           #10                 // String Not a valid principal, missing realm name
      25: invokespecial #11                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      28: athrow

  public static java.lang.String extractName(java.lang.String);
    Code:
       0: aload_0
       1: bipush        64
       3: invokevirtual #7                  // Method java/lang/String.indexOf:(I)I
       6: istore_1
       7: iload_1
       8: ifge          13
      11: aload_0
      12: areturn
      13: aload_0
      14: iconst_0
      15: iload_1
      16: invokevirtual #12                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      19: areturn

  public static java.lang.String makeSalt(org.apache.kerby.kerberos.kerb.type.base.PrincipalName);
    Code:
       0: new           #13                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
       7: astore_1
       8: aload_0
       9: invokevirtual #15                 // Method getRealm:()Ljava/lang/String;
      12: ifnull        24
      15: aload_1
      16: aload_0
      17: invokevirtual #15                 // Method getRealm:()Ljava/lang/String;
      20: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: pop
      24: aload_0
      25: invokevirtual #17                 // Method getNameStrings:()Ljava/util/List;
      28: astore_2
      29: aload_2
      30: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      35: astore_3
      36: aload_3
      37: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      42: ifeq          66
      45: aload_3
      46: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      51: checkcast     #21                 // class java/lang/String
      54: astore        4
      56: aload_1
      57: aload         4
      59: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      62: pop
      63: goto          36
      66: aload_1
      67: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: areturn

  public org.apache.kerby.kerberos.kerb.type.base.NameType getNameType();
    Code:
       0: aload_0
       1: getstatic     #23                 // Field org/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField.NAME_TYPE:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField;
       4: invokevirtual #24                 // Method getFieldAsInteger:(Lorg/apache/kerby/asn1/EnumType;)Ljava/lang/Integer;
       7: astore_1
       8: aload_1
       9: invokestatic  #25                 // Method org/apache/kerby/kerberos/kerb/type/base/NameType.fromValue:(Ljava/lang/Integer;)Lorg/apache/kerby/kerberos/kerb/type/base/NameType;
      12: areturn

  public void setNameType(org.apache.kerby.kerberos.kerb.type.base.NameType);
    Code:
       0: aload_0
       1: getstatic     #23                 // Field org/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField.NAME_TYPE:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField;
       4: aload_1
       5: invokevirtual #26                 // Method org/apache/kerby/kerberos/kerb/type/base/NameType.getValue:()I
       8: invokevirtual #27                 // Method setFieldAsInt:(Lorg/apache/kerby/asn1/EnumType;I)V
      11: return

  public java.util.List<java.lang.String> getNameStrings();
    Code:
       0: aload_0
       1: getstatic     #28                 // Field org/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField.NAME_STRING:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField;
       4: ldc_w         #29                 // class org/apache/kerby/kerberos/kerb/type/KerberosStrings
       7: invokevirtual #30                 // Method getFieldAs:(Lorg/apache/kerby/asn1/EnumType;Ljava/lang/Class;)Lorg/apache/kerby/asn1/type/Asn1Type;
      10: checkcast     #29                 // class org/apache/kerby/kerberos/kerb/type/KerberosStrings
      13: astore_1
      14: aload_1
      15: ifnull        23
      18: aload_1
      19: invokevirtual #31                 // Method org/apache/kerby/kerberos/kerb/type/KerberosStrings.getAsStrings:()Ljava/util/List;
      22: areturn
      23: invokestatic  #32                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      26: areturn

  public void setNameStrings(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getstatic     #28                 // Field org/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField.NAME_STRING:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField;
       4: new           #29                 // class org/apache/kerby/kerberos/kerb/type/KerberosStrings
       7: dup
       8: aload_1
       9: invokespecial #33                 // Method org/apache/kerby/kerberos/kerb/type/KerberosStrings."<init>":(Ljava/util/List;)V
      12: invokevirtual #34                 // Method setFieldAs:(Lorg/apache/kerby/asn1/EnumType;Lorg/apache/kerby/asn1/type/Asn1Type;)V
      15: return

  public java.lang.String getRealm();
    Code:
       0: aload_0
       1: getfield      #35                 // Field realm:Ljava/lang/String;
       4: areturn

  public void setRealm(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #35                 // Field realm:Ljava/lang/String;
       5: return

  public java.lang.String getName();
    Code:
       0: aload_0
       1: invokespecial #36                 // Method makeSingleName:()Ljava/lang/String;
       4: areturn

  private java.lang.String makeSingleName();
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method getNameStrings:()Ljava/util/List;
       4: astore_1
       5: new           #13                 // class java/lang/StringBuilder
       8: dup
       9: invokespecial #14                 // Method java/lang/StringBuilder."<init>":()V
      12: astore_2
      13: iconst_1
      14: istore_3
      15: aload_1
      16: invokeinterface #18,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore        4
      23: aload         4
      25: invokeinterface #19,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          71
      33: aload         4
      35: invokeinterface #20,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #21                 // class java/lang/String
      43: astore        5
      45: iload_3
      46: ifeq          54
      49: iconst_0
      50: istore_3
      51: goto          61
      54: aload_2
      55: bipush        47
      57: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      60: pop
      61: aload_2
      62: aload         5
      64: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: pop
      68: goto          23
      71: aload_0
      72: getfield      #35                 // Field realm:Ljava/lang/String;
      75: ifnull        104
      78: aload_0
      79: getfield      #35                 // Field realm:Ljava/lang/String;
      82: invokevirtual #38                 // Method java/lang/String.isEmpty:()Z
      85: ifne          104
      88: aload_2
      89: bipush        64
      91: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      94: pop
      95: aload_2
      96: aload_0
      97: getfield      #35                 // Field realm:Ljava/lang/String;
     100: invokevirtual #16                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     103: pop
     104: aload_2
     105: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     108: areturn

  private void fromNameString(java.lang.String);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_1
       6: bipush        64
       8: invokevirtual #7                  // Method java/lang/String.indexOf:(I)I
      11: istore_3
      12: iload_3
      13: iconst_m1
      14: if_icmpeq     39
      17: aload_1
      18: iconst_0
      19: iload_3
      20: invokevirtual #12                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      23: astore        4
      25: aload_0
      26: aload_1
      27: iload_3
      28: iconst_1
      29: iadd
      30: invokevirtual #8                  // Method java/lang/String.substring:(I)Ljava/lang/String;
      33: putfield      #35                 // Field realm:Ljava/lang/String;
      36: goto          42
      39: aload_1
      40: astore        4
      42: aload         4
      44: ldc           #39                 // String \\/
      46: invokevirtual #40                 // Method java/lang/String.split:(Ljava/lang/String;)[Ljava/lang/String;
      49: astore        5
      51: aload         5
      53: invokestatic  #41                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      56: astore_2
      57: aload_0
      58: aload_2
      59: invokevirtual #6                  // Method setNameStrings:(Ljava/util/List;)V
      62: return

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getName:()Ljava/lang/String;
       4: invokevirtual #43                 // Method java/lang/String.hashCode:()I
       7: ireturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #44                 // class org/apache/kerby/kerberos/kerb/type/base/PrincipalName
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #44                 // class org/apache/kerby/kerberos/kerb/type/base/PrincipalName
      20: astore_2
      21: aload_0
      22: invokevirtual #45                 // Method getNameType:()Lorg/apache/kerby/kerberos/kerb/type/base/NameType;
      25: aload_1
      26: checkcast     #44                 // class org/apache/kerby/kerberos/kerb/type/base/PrincipalName
      29: invokevirtual #45                 // Method getNameType:()Lorg/apache/kerby/kerberos/kerb/type/base/NameType;
      32: if_acmpne     53
      35: aload_0
      36: invokevirtual #42                 // Method getName:()Ljava/lang/String;
      39: aload_2
      40: invokevirtual #42                 // Method getName:()Ljava/lang/String;
      43: invokevirtual #46                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      46: ifeq          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #42                 // Method getName:()Ljava/lang/String;
       4: areturn

  static {};
    Code:
       0: iconst_2
       1: anewarray     #47                 // class org/apache/kerby/asn1/Asn1FieldInfo
       4: dup
       5: iconst_0
       6: new           #48                 // class org/apache/kerby/asn1/ExplicitField
       9: dup
      10: getstatic     #23                 // Field org/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField.NAME_TYPE:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField;
      13: ldc_w         #49                 // class org/apache/kerby/asn1/type/Asn1Integer
      16: invokespecial #50                 // Method org/apache/kerby/asn1/ExplicitField."<init>":(Lorg/apache/kerby/asn1/EnumType;Ljava/lang/Class;)V
      19: aastore
      20: dup
      21: iconst_1
      22: new           #48                 // class org/apache/kerby/asn1/ExplicitField
      25: dup
      26: getstatic     #28                 // Field org/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField.NAME_STRING:Lorg/apache/kerby/kerberos/kerb/type/base/PrincipalName$PrincipalNameField;
      29: ldc_w         #29                 // class org/apache/kerby/kerberos/kerb/type/KerberosStrings
      32: invokespecial #50                 // Method org/apache/kerby/asn1/ExplicitField."<init>":(Lorg/apache/kerby/asn1/EnumType;Ljava/lang/Class;)V
      35: aastore
      36: putstatic     #1                  // Field fieldInfos:[Lorg/apache/kerby/asn1/Asn1FieldInfo;
      39: return
}
