Compiled from "LoaderOptions.java"
public class org.yaml.snakeyaml.LoaderOptions {
  private boolean allowDuplicateKeys;

  private boolean wrappedToRootException;

  private int maxAliasesForCollections;

  private boolean allowRecursiveKeys;

  private boolean processComments;

  private boolean enumCaseSensitive;

  private int nestingDepthLimit;

  private int codePointLimit;

  private org.yaml.snakeyaml.inspector.TagInspector tagInspector;

  public org.yaml.snakeyaml.LoaderOptions();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field allowDuplicateKeys:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field wrappedToRootException:Z
      14: aload_0
      15: bipush        50
      17: putfield      #4                  // Field maxAliasesForCollections:I
      20: aload_0
      21: iconst_0
      22: putfield      #5                  // Field allowRecursiveKeys:Z
      25: aload_0
      26: iconst_0
      27: putfield      #6                  // Field processComments:Z
      30: aload_0
      31: iconst_1
      32: putfield      #7                  // Field enumCaseSensitive:Z
      35: aload_0
      36: bipush        50
      38: putfield      #8                  // Field nestingDepthLimit:I
      41: aload_0
      42: ldc           #9                  // int 3145728
      44: putfield      #10                 // Field codePointLimit:I
      47: aload_0
      48: new           #11                 // class org/yaml/snakeyaml/inspector/UnTrustedTagInspector
      51: dup
      52: invokespecial #12                 // Method org/yaml/snakeyaml/inspector/UnTrustedTagInspector."<init>":()V
      55: putfield      #13                 // Field tagInspector:Lorg/yaml/snakeyaml/inspector/TagInspector;
      58: return

  public final boolean isAllowDuplicateKeys();
    Code:
       0: aload_0
       1: getfield      #2                  // Field allowDuplicateKeys:Z
       4: ireturn

  public void setAllowDuplicateKeys(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field allowDuplicateKeys:Z
       5: return

  public final boolean isWrappedToRootException();
    Code:
       0: aload_0
       1: getfield      #3                  // Field wrappedToRootException:Z
       4: ireturn

  public void setWrappedToRootException(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #3                  // Field wrappedToRootException:Z
       5: return

  public final int getMaxAliasesForCollections();
    Code:
       0: aload_0
       1: getfield      #4                  // Field maxAliasesForCollections:I
       4: ireturn

  public void setMaxAliasesForCollections(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field maxAliasesForCollections:I
       5: return

  public final boolean getAllowRecursiveKeys();
    Code:
       0: aload_0
       1: getfield      #5                  // Field allowRecursiveKeys:Z
       4: ireturn

  public void setAllowRecursiveKeys(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #5                  // Field allowRecursiveKeys:Z
       5: return

  public final boolean isProcessComments();
    Code:
       0: aload_0
       1: getfield      #6                  // Field processComments:Z
       4: ireturn

  public org.yaml.snakeyaml.LoaderOptions setProcessComments(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field processComments:Z
       5: aload_0
       6: areturn

  public final boolean isEnumCaseSensitive();
    Code:
       0: aload_0
       1: getfield      #7                  // Field enumCaseSensitive:Z
       4: ireturn

  public void setEnumCaseSensitive(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field enumCaseSensitive:Z
       5: return

  public final int getNestingDepthLimit();
    Code:
       0: aload_0
       1: getfield      #8                  // Field nestingDepthLimit:I
       4: ireturn

  public void setNestingDepthLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #8                  // Field nestingDepthLimit:I
       5: return

  public final int getCodePointLimit();
    Code:
       0: aload_0
       1: getfield      #10                 // Field codePointLimit:I
       4: ireturn

  public void setCodePointLimit(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field codePointLimit:I
       5: return

  public org.yaml.snakeyaml.inspector.TagInspector getTagInspector();
    Code:
       0: aload_0
       1: getfield      #13                 // Field tagInspector:Lorg/yaml/snakeyaml/inspector/TagInspector;
       4: areturn

  public void setTagInspector(org.yaml.snakeyaml.inspector.TagInspector);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field tagInspector:Lorg/yaml/snakeyaml/inspector/TagInspector;
       5: return
}
