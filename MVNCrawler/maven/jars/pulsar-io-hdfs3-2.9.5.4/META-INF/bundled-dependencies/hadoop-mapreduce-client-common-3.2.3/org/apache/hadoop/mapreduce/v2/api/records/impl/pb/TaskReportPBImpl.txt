Compiled from "TaskReportPBImpl.java"
public class org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskReportPBImpl extends org.apache.hadoop.yarn.api.records.impl.pb.ProtoBase<org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskReportProto> implements org.apache.hadoop.mapreduce.v2.api.records.TaskReport {
  org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskReportProto proto;

  org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskReportProto$Builder builder;

  boolean viaProto;

  private org.apache.hadoop.mapreduce.v2.api.records.TaskId taskId;

  private org.apache.hadoop.mapreduce.v2.api.records.Counters counters;

  private org.apache.hadoop.mapreduce.Counters rawCounters;

  private java.util.List<org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId> runningAttempts;

  private org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId successfulAttemptId;

  private java.util.List<java.lang.String> diagnostics;

  private java.lang.String status;

  public org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskReportPBImpl();
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/apache/hadoop/yarn/api/records/impl/pb/ProtoBase."<init>":()V
       4: aload_0
       5: invokestatic  #4                  // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto.getDefaultInstance:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
       8: putfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: aload_0
      12: aconst_null
      13: putfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      16: aload_0
      17: iconst_0
      18: putfield      #7                  // Field viaProto:Z
      21: aload_0
      22: aconst_null
      23: putfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      26: aload_0
      27: aconst_null
      28: putfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      31: aload_0
      32: aconst_null
      33: putfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      36: aload_0
      37: aconst_null
      38: putfield      #2                  // Field runningAttempts:Ljava/util/List;
      41: aload_0
      42: aconst_null
      43: putfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      46: aload_0
      47: aconst_null
      48: putfield      #12                 // Field diagnostics:Ljava/util/List;
      51: aload_0
      52: invokestatic  #13                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto.newBuilder:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      55: putfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      58: return

  public org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskReportPBImpl(org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskReportProto);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method org/apache/hadoop/yarn/api/records/impl/pb/ProtoBase."<init>":()V
       4: aload_0
       5: invokestatic  #4                  // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto.getDefaultInstance:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
       8: putfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: aload_0
      12: aconst_null
      13: putfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      16: aload_0
      17: iconst_0
      18: putfield      #7                  // Field viaProto:Z
      21: aload_0
      22: aconst_null
      23: putfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      26: aload_0
      27: aconst_null
      28: putfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      31: aload_0
      32: aconst_null
      33: putfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      36: aload_0
      37: aconst_null
      38: putfield      #2                  // Field runningAttempts:Ljava/util/List;
      41: aload_0
      42: aconst_null
      43: putfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      46: aload_0
      47: aconst_null
      48: putfield      #12                 // Field diagnostics:Ljava/util/List;
      51: aload_0
      52: aload_1
      53: putfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      56: aload_0
      57: iconst_1
      58: putfield      #7                  // Field viaProto:Z
      61: return

  public org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskReportProto getProto();
    Code:
       0: aload_0
       1: invokespecial #14                 // Method mergeLocalToProto:()V
       4: aload_0
       5: aload_0
       6: getfield      #7                  // Field viaProto:Z
       9: ifeq          19
      12: aload_0
      13: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      16: goto          26
      19: aload_0
      20: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      23: invokevirtual #15                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.build:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      26: putfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      29: aload_0
      30: iconst_1
      31: putfield      #7                  // Field viaProto:Z
      34: aload_0
      35: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      38: areturn

  private void mergeLocalToBuilder();
    Code:
       0: aload_0
       1: getfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
       4: ifnull        23
       7: aload_0
       8: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      11: aload_0
      12: aload_0
      13: getfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      16: invokespecial #16                 // Method convertToProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskIdProto;
      19: invokevirtual #17                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setTaskId:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskIdProto;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      22: pop
      23: aload_0
      24: invokespecial #18                 // Method convertRawCountersToCounters:()V
      27: aload_0
      28: getfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      31: ifnull        50
      34: aload_0
      35: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      38: aload_0
      39: aload_0
      40: getfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      43: invokespecial #19                 // Method convertToProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$CountersProto;
      46: invokevirtual #20                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setCounters:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$CountersProto;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      49: pop
      50: aload_0
      51: getfield      #2                  // Field runningAttempts:Ljava/util/List;
      54: ifnull        61
      57: aload_0
      58: invokespecial #21                 // Method addRunningAttemptsToProto:()V
      61: aload_0
      62: getfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      65: ifnull        84
      68: aload_0
      69: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      72: aload_0
      73: aload_0
      74: getfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      77: invokespecial #1                  // Method convertToProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;
      80: invokevirtual #22                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setSuccessfulAttempt:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      83: pop
      84: aload_0
      85: getfield      #12                 // Field diagnostics:Ljava/util/List;
      88: ifnull        95
      91: aload_0
      92: invokespecial #23                 // Method addDiagnosticsToProto:()V
      95: return

  private void mergeLocalToProto();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          11
       7: aload_0
       8: invokespecial #24                 // Method maybeInitBuilder:()V
      11: aload_0
      12: invokespecial #25                 // Method mergeLocalToBuilder:()V
      15: aload_0
      16: aload_0
      17: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      20: invokevirtual #15                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.build:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      23: putfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      26: aload_0
      27: iconst_1
      28: putfield      #7                  // Field viaProto:Z
      31: return

  private void maybeInitBuilder();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifne          14
       7: aload_0
       8: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      11: ifnonnull     25
      14: aload_0
      15: aload_0
      16: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      19: invokestatic  #26                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto.newBuilder:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      22: putfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      25: aload_0
      26: iconst_0
      27: putfield      #7                  // Field viaProto:Z
      30: return

  public org.apache.hadoop.mapreduce.v2.api.records.Counters getCounters();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_0
      20: invokespecial #18                 // Method convertRawCountersToCounters:()V
      23: aload_0
      24: getfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      27: ifnull        35
      30: aload_0
      31: getfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      34: areturn
      35: aload_1
      36: invokeinterface #27,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.hasCounters:()Z
      41: ifne          46
      44: aconst_null
      45: areturn
      46: aload_0
      47: aload_0
      48: aload_1
      49: invokeinterface #28,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getCounters:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$CountersProto;
      54: invokespecial #29                 // Method convertFromProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$CountersProto;)Lorg/apache/hadoop/mapreduce/v2/api/records/impl/pb/CountersPBImpl;
      57: putfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      60: aload_0
      61: getfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      64: areturn

  public void setCounters(org.apache.hadoop.mapreduce.v2.api.records.Counters);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_1
       5: ifnonnull     16
       8: aload_0
       9: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: invokevirtual #30                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.clearCounters:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      15: pop
      16: aload_0
      17: aload_1
      18: putfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      21: aload_0
      22: aconst_null
      23: putfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      26: return

  public org.apache.hadoop.mapreduce.Counters getRawCounters();
    Code:
       0: aload_0
       1: getfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
       4: areturn

  public void setRawCounters(org.apache.hadoop.mapreduce.Counters);
    Code:
       0: aload_0
       1: aconst_null
       2: invokevirtual #31                 // Method setCounters:(Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;)V
       5: aload_0
       6: aload_1
       7: putfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      10: return

  private void convertRawCountersToCounters();
    Code:
       0: aload_0
       1: getfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
       4: ifnonnull     30
       7: aload_0
       8: getfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      11: ifnull        30
      14: aload_0
      15: aload_0
      16: getfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      19: invokestatic  #32                 // Method org/apache/hadoop/mapreduce/TypeConverter.toYarn:(Lorg/apache/hadoop/mapreduce/Counters;)Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      22: putfield      #9                  // Field counters:Lorg/apache/hadoop/mapreduce/v2/api/records/Counters;
      25: aload_0
      26: aconst_null
      27: putfield      #10                 // Field rawCounters:Lorg/apache/hadoop/mapreduce/Counters;
      30: return

  public long getStartTime();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_1
      20: invokeinterface #33,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getStartTime:()J
      25: lreturn

  public void setStartTime(long);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_0
       5: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
       8: lload_1
       9: invokevirtual #34                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setStartTime:(J)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: pop
      13: return

  public long getFinishTime();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_1
      20: invokeinterface #35,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getFinishTime:()J
      25: lreturn

  public void setFinishTime(long);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_0
       5: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
       8: lload_1
       9: invokevirtual #36                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setFinishTime:(J)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: pop
      13: return

  public org.apache.hadoop.mapreduce.v2.api.records.TaskId getTaskId();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_0
      20: getfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      23: ifnull        31
      26: aload_0
      27: getfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      30: areturn
      31: aload_1
      32: invokeinterface #37,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.hasTaskId:()Z
      37: ifne          42
      40: aconst_null
      41: areturn
      42: aload_0
      43: aload_0
      44: aload_1
      45: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getTaskId:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskIdProto;
      50: invokespecial #39                 // Method convertFromProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskIdProto;)Lorg/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskIdPBImpl;
      53: putfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      56: aload_0
      57: getfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      60: areturn

  public void setTaskId(org.apache.hadoop.mapreduce.v2.api.records.TaskId);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_1
       5: ifnonnull     16
       8: aload_0
       9: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: invokevirtual #40                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.clearTaskId:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      15: pop
      16: aload_0
      17: aload_1
      18: putfield      #8                  // Field taskId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskId;
      21: return

  public float getProgress();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_1
      20: invokeinterface #41,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getProgress:()F
      25: freturn

  public java.lang.String getStatus();
    Code:
       0: aload_0
       1: getfield      #42                 // Field status:Ljava/lang/String;
       4: areturn

  public void setProgress(float);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_0
       5: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
       8: fload_1
       9: invokevirtual #43                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setProgress:(F)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: pop
      13: return

  public void setStatus(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field status:Ljava/lang/String;
       5: return

  public org.apache.hadoop.mapreduce.v2.api.records.TaskState getTaskState();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_1
      20: invokeinterface #44,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.hasTaskState:()Z
      25: ifne          30
      28: aconst_null
      29: areturn
      30: aload_0
      31: aload_1
      32: invokeinterface #45,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getTaskState:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskStateProto;
      37: invokespecial #46                 // Method convertFromProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskStateProto;)Lorg/apache/hadoop/mapreduce/v2/api/records/TaskState;
      40: areturn

  public void setTaskState(org.apache.hadoop.mapreduce.v2.api.records.TaskState);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_1
       5: ifnonnull     17
       8: aload_0
       9: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: invokevirtual #47                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.clearTaskState:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      15: pop
      16: return
      17: aload_0
      18: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      21: aload_0
      22: aload_1
      23: invokespecial #48                 // Method convertToProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/api/records/TaskState;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskStateProto;
      26: invokevirtual #49                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.setTaskState:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskStateProto;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      29: pop
      30: return

  public java.util.List<org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId> getRunningAttemptsList();
    Code:
       0: aload_0
       1: invokespecial #50                 // Method initRunningAttempts:()V
       4: aload_0
       5: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       8: areturn

  public org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId getRunningAttempt(int);
    Code:
       0: aload_0
       1: invokespecial #50                 // Method initRunningAttempts:()V
       4: aload_0
       5: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       8: iload_1
       9: invokeinterface #51,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      14: checkcast     #52                 // class org/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId
      17: areturn

  public int getRunningAttemptsCount();
    Code:
       0: aload_0
       1: invokespecial #50                 // Method initRunningAttempts:()V
       4: aload_0
       5: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       8: invokeinterface #53,  1           // InterfaceMethod java/util/List.size:()I
      13: ireturn

  private void initRunningAttempts();
    Code:
       0: aload_0
       1: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       4: ifnull        8
       7: return
       8: aload_0
       9: getfield      #7                  // Field viaProto:Z
      12: ifeq          22
      15: aload_0
      16: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      19: goto          26
      22: aload_0
      23: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      26: astore_1
      27: aload_1
      28: invokeinterface #54,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getRunningAttemptsList:()Ljava/util/List;
      33: astore_2
      34: aload_0
      35: new           #55                 // class java/util/ArrayList
      38: dup
      39: invokespecial #56                 // Method java/util/ArrayList."<init>":()V
      42: putfield      #2                  // Field runningAttempts:Ljava/util/List;
      45: aload_2
      46: invokeinterface #57,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      51: astore_3
      52: aload_3
      53: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      58: ifeq          91
      61: aload_3
      62: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      67: checkcast     #60                 // class org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto
      70: astore        4
      72: aload_0
      73: getfield      #2                  // Field runningAttempts:Ljava/util/List;
      76: aload_0
      77: aload         4
      79: invokespecial #61                 // Method convertFromProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;)Lorg/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskAttemptIdPBImpl;
      82: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      87: pop
      88: goto          52
      91: return

  public void addAllRunningAttempts(java.util.List<org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: invokespecial #50                 // Method initRunningAttempts:()V
       9: aload_0
      10: getfield      #2                  // Field runningAttempts:Ljava/util/List;
      13: aload_1
      14: invokeinterface #63,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      19: pop
      20: return

  private void addRunningAttemptsToProto();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_0
       5: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
       8: invokevirtual #64                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.clearRunningAttempts:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      11: pop
      12: aload_0
      13: getfield      #2                  // Field runningAttempts:Ljava/util/List;
      16: ifnonnull     20
      19: return
      20: new           #65                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskReportPBImpl$1
      23: dup
      24: aload_0
      25: invokespecial #66                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskReportPBImpl$1."<init>":(Lorg/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskReportPBImpl;)V
      28: astore_1
      29: aload_0
      30: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      33: aload_1
      34: invokevirtual #67                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.addAllRunningAttempts:(Ljava/lang/Iterable;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      37: pop
      38: return

  public void addRunningAttempt(org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId);
    Code:
       0: aload_0
       1: invokespecial #50                 // Method initRunningAttempts:()V
       4: aload_0
       5: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       8: aload_1
       9: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public void removeRunningAttempt(int);
    Code:
       0: aload_0
       1: invokespecial #50                 // Method initRunningAttempts:()V
       4: aload_0
       5: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       8: iload_1
       9: invokeinterface #68,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      14: pop
      15: return

  public void clearRunningAttempts();
    Code:
       0: aload_0
       1: invokespecial #50                 // Method initRunningAttempts:()V
       4: aload_0
       5: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       8: invokeinterface #69,  1           // InterfaceMethod java/util/List.clear:()V
      13: return

  public org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId getSuccessfulAttempt();
    Code:
       0: aload_0
       1: getfield      #7                  // Field viaProto:Z
       4: ifeq          14
       7: aload_0
       8: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      11: goto          18
      14: aload_0
      15: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      18: astore_1
      19: aload_0
      20: getfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      23: ifnull        31
      26: aload_0
      27: getfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      30: areturn
      31: aload_1
      32: invokeinterface #70,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.hasSuccessfulAttempt:()Z
      37: ifne          42
      40: aconst_null
      41: areturn
      42: aload_0
      43: aload_0
      44: aload_1
      45: invokeinterface #71,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getSuccessfulAttempt:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;
      50: invokespecial #61                 // Method convertFromProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;)Lorg/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskAttemptIdPBImpl;
      53: putfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      56: aload_0
      57: getfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      60: areturn

  public void setSuccessfulAttempt(org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId);
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_1
       5: ifnonnull     16
       8: aload_0
       9: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      12: invokevirtual #72                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.clearSuccessfulAttempt:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      15: pop
      16: aload_0
      17: aload_1
      18: putfield      #11                 // Field successfulAttemptId:Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;
      21: return

  public java.util.List<java.lang.String> getDiagnosticsList();
    Code:
       0: aload_0
       1: invokespecial #73                 // Method initDiagnostics:()V
       4: aload_0
       5: getfield      #12                 // Field diagnostics:Ljava/util/List;
       8: areturn

  public java.lang.String getDiagnostics(int);
    Code:
       0: aload_0
       1: invokespecial #73                 // Method initDiagnostics:()V
       4: aload_0
       5: getfield      #12                 // Field diagnostics:Ljava/util/List;
       8: iload_1
       9: invokeinterface #51,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      14: checkcast     #74                 // class java/lang/String
      17: areturn

  public int getDiagnosticsCount();
    Code:
       0: aload_0
       1: invokespecial #73                 // Method initDiagnostics:()V
       4: aload_0
       5: getfield      #12                 // Field diagnostics:Ljava/util/List;
       8: invokeinterface #53,  1           // InterfaceMethod java/util/List.size:()I
      13: ireturn

  private void initDiagnostics();
    Code:
       0: aload_0
       1: getfield      #12                 // Field diagnostics:Ljava/util/List;
       4: ifnull        8
       7: return
       8: aload_0
       9: getfield      #7                  // Field viaProto:Z
      12: ifeq          22
      15: aload_0
      16: getfield      #5                  // Field proto:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
      19: goto          26
      22: aload_0
      23: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      26: astore_1
      27: aload_1
      28: invokeinterface #75,  1           // InterfaceMethod org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProtoOrBuilder.getDiagnosticsList:()Ljava/util/List;
      33: astore_2
      34: aload_0
      35: new           #55                 // class java/util/ArrayList
      38: dup
      39: invokespecial #56                 // Method java/util/ArrayList."<init>":()V
      42: putfield      #12                 // Field diagnostics:Ljava/util/List;
      45: aload_2
      46: invokeinterface #57,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      51: astore_3
      52: aload_3
      53: invokeinterface #58,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      58: ifeq          87
      61: aload_3
      62: invokeinterface #59,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      67: checkcast     #74                 // class java/lang/String
      70: astore        4
      72: aload_0
      73: getfield      #12                 // Field diagnostics:Ljava/util/List;
      76: aload         4
      78: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      83: pop
      84: goto          52
      87: return

  public void addAllDiagnostics(java.util.List<java.lang.String>);
    Code:
       0: aload_1
       1: ifnonnull     5
       4: return
       5: aload_0
       6: invokespecial #73                 // Method initDiagnostics:()V
       9: aload_0
      10: getfield      #12                 // Field diagnostics:Ljava/util/List;
      13: aload_1
      14: invokeinterface #63,  2           // InterfaceMethod java/util/List.addAll:(Ljava/util/Collection;)Z
      19: pop
      20: return

  private void addDiagnosticsToProto();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method maybeInitBuilder:()V
       4: aload_0
       5: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
       8: invokevirtual #76                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.clearDiagnostics:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      11: pop
      12: aload_0
      13: getfield      #12                 // Field diagnostics:Ljava/util/List;
      16: ifnonnull     20
      19: return
      20: aload_0
      21: getfield      #6                  // Field builder:Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      24: aload_0
      25: getfield      #12                 // Field diagnostics:Ljava/util/List;
      28: invokevirtual #77                 // Method org/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder.addAllDiagnostics:(Ljava/lang/Iterable;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto$Builder;
      31: pop
      32: return

  public void addDiagnostics(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #73                 // Method initDiagnostics:()V
       4: aload_0
       5: getfield      #12                 // Field diagnostics:Ljava/util/List;
       8: aload_1
       9: invokeinterface #62,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public void removeDiagnostics(int);
    Code:
       0: aload_0
       1: invokespecial #73                 // Method initDiagnostics:()V
       4: aload_0
       5: getfield      #12                 // Field diagnostics:Ljava/util/List;
       8: iload_1
       9: invokeinterface #68,  2           // InterfaceMethod java/util/List.remove:(I)Ljava/lang/Object;
      14: pop
      15: return

  public void clearDiagnostics();
    Code:
       0: aload_0
       1: invokespecial #73                 // Method initDiagnostics:()V
       4: aload_0
       5: getfield      #12                 // Field diagnostics:Ljava/util/List;
       8: invokeinterface #69,  1           // InterfaceMethod java/util/List.clear:()V
      13: return

  private org.apache.hadoop.mapreduce.v2.api.records.impl.pb.CountersPBImpl convertFromProtoFormat(org.apache.hadoop.mapreduce.v2.proto.MRProtos$CountersProto);
    Code:
       0: new           #78                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/CountersPBImpl
       3: dup
       4: aload_1
       5: invokespecial #79                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/CountersPBImpl."<init>":(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$CountersProto;)V
       8: areturn

  private org.apache.hadoop.mapreduce.v2.proto.MRProtos$CountersProto convertToProtoFormat(org.apache.hadoop.mapreduce.v2.api.records.Counters);
    Code:
       0: aload_1
       1: checkcast     #78                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/CountersPBImpl
       4: invokevirtual #80                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/CountersPBImpl.getProto:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$CountersProto;
       7: areturn

  private org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskIdPBImpl convertFromProtoFormat(org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskIdProto);
    Code:
       0: new           #81                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskIdPBImpl
       3: dup
       4: aload_1
       5: invokespecial #82                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskIdPBImpl."<init>":(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskIdProto;)V
       8: areturn

  private org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskIdProto convertToProtoFormat(org.apache.hadoop.mapreduce.v2.api.records.TaskId);
    Code:
       0: aload_1
       1: checkcast     #81                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskIdPBImpl
       4: invokevirtual #83                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskIdPBImpl.getProto:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskIdProto;
       7: areturn

  private org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskStateProto convertToProtoFormat(org.apache.hadoop.mapreduce.v2.api.records.TaskState);
    Code:
       0: aload_1
       1: invokestatic  #84                 // Method org/apache/hadoop/mapreduce/v2/util/MRProtoUtils.convertToProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/api/records/TaskState;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskStateProto;
       4: areturn

  private org.apache.hadoop.mapreduce.v2.api.records.TaskState convertFromProtoFormat(org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskStateProto);
    Code:
       0: aload_1
       1: invokestatic  #85                 // Method org/apache/hadoop/mapreduce/v2/util/MRProtoUtils.convertFromProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskStateProto;)Lorg/apache/hadoop/mapreduce/v2/api/records/TaskState;
       4: areturn

  private org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskAttemptIdPBImpl convertFromProtoFormat(org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskAttemptIdProto);
    Code:
       0: new           #86                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskAttemptIdPBImpl
       3: dup
       4: aload_1
       5: invokespecial #87                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskAttemptIdPBImpl."<init>":(Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;)V
       8: areturn

  private org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskAttemptIdProto convertToProtoFormat(org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId);
    Code:
       0: aload_1
       1: checkcast     #86                 // class org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskAttemptIdPBImpl
       4: invokevirtual #88                 // Method org/apache/hadoop/mapreduce/v2/api/records/impl/pb/TaskAttemptIdPBImpl.getProto:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;
       7: areturn

  public com.google.protobuf.Message getProto();
    Code:
       0: aload_0
       1: invokevirtual #89                 // Method getProto:()Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskReportProto;
       4: areturn

  static java.util.List access$000(org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskReportPBImpl);
    Code:
       0: aload_0
       1: getfield      #2                  // Field runningAttempts:Ljava/util/List;
       4: areturn

  static org.apache.hadoop.mapreduce.v2.proto.MRProtos$TaskAttemptIdProto access$100(org.apache.hadoop.mapreduce.v2.api.records.impl.pb.TaskReportPBImpl, org.apache.hadoop.mapreduce.v2.api.records.TaskAttemptId);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method convertToProtoFormat:(Lorg/apache/hadoop/mapreduce/v2/api/records/TaskAttemptId;)Lorg/apache/hadoop/mapreduce/v2/proto/MRProtos$TaskAttemptIdProto;
       5: areturn
}
