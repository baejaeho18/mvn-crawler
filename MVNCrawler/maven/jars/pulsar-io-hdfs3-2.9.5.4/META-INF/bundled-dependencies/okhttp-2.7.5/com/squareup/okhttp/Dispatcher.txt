Compiled from "Dispatcher.java"
public final class com.squareup.okhttp.Dispatcher {
  private int maxRequests;

  private int maxRequestsPerHost;

  private java.util.concurrent.ExecutorService executorService;

  private final java.util.Deque<com.squareup.okhttp.Call$AsyncCall> readyCalls;

  private final java.util.Deque<com.squareup.okhttp.Call$AsyncCall> runningCalls;

  private final java.util.Deque<com.squareup.okhttp.Call> executedCalls;

  public com.squareup.okhttp.Dispatcher(java.util.concurrent.ExecutorService);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #2                  // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #3                  // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #4                  // class java/util/ArrayDeque
      19: dup
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #6                  // Field readyCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #4                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #7                  // Field runningCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #4                  // class java/util/ArrayDeque
      41: dup
      42: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #8                  // Field executedCalls:Ljava/util/Deque;
      48: aload_0
      49: aload_1
      50: putfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      53: return

  public com.squareup.okhttp.Dispatcher();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: bipush        64
       7: putfield      #2                  // Field maxRequests:I
      10: aload_0
      11: iconst_5
      12: putfield      #3                  // Field maxRequestsPerHost:I
      15: aload_0
      16: new           #4                  // class java/util/ArrayDeque
      19: dup
      20: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      23: putfield      #6                  // Field readyCalls:Ljava/util/Deque;
      26: aload_0
      27: new           #4                  // class java/util/ArrayDeque
      30: dup
      31: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      34: putfield      #7                  // Field runningCalls:Ljava/util/Deque;
      37: aload_0
      38: new           #4                  // class java/util/ArrayDeque
      41: dup
      42: invokespecial #5                  // Method java/util/ArrayDeque."<init>":()V
      45: putfield      #8                  // Field executedCalls:Ljava/util/Deque;
      48: return

  public synchronized java.util.concurrent.ExecutorService getExecutorService();
    Code:
       0: aload_0
       1: getfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
       4: ifnonnull     40
       7: aload_0
       8: new           #10                 // class java/util/concurrent/ThreadPoolExecutor
      11: dup
      12: iconst_0
      13: ldc           #12                 // int 2147483647
      15: ldc2_w        #13                 // long 60l
      18: getstatic     #15                 // Field java/util/concurrent/TimeUnit.SECONDS:Ljava/util/concurrent/TimeUnit;
      21: new           #16                 // class java/util/concurrent/SynchronousQueue
      24: dup
      25: invokespecial #17                 // Method java/util/concurrent/SynchronousQueue."<init>":()V
      28: ldc           #18                 // String OkHttp Dispatcher
      30: iconst_0
      31: invokestatic  #19                 // Method com/squareup/okhttp/internal/Util.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;
      34: invokespecial #20                 // Method java/util/concurrent/ThreadPoolExecutor."<init>":(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V
      37: putfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      40: aload_0
      41: getfield      #9                  // Field executorService:Ljava/util/concurrent/ExecutorService;
      44: areturn

  public synchronized void setMaxRequests(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #21                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #22                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #24                 // String max < 1:
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: iload_1
      34: putfield      #2                  // Field maxRequests:I
      37: aload_0
      38: invokespecial #29                 // Method promoteCalls:()V
      41: return

  public synchronized int getMaxRequests();
    Code:
       0: aload_0
       1: getfield      #2                  // Field maxRequests:I
       4: ireturn

  public synchronized void setMaxRequestsPerHost(int);
    Code:
       0: iload_1
       1: iconst_1
       2: if_icmpge     32
       5: new           #21                 // class java/lang/IllegalArgumentException
       8: dup
       9: new           #22                 // class java/lang/StringBuilder
      12: dup
      13: invokespecial #23                 // Method java/lang/StringBuilder."<init>":()V
      16: ldc           #24                 // String max < 1:
      18: invokevirtual #25                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      21: iload_1
      22: invokevirtual #26                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      25: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      28: invokespecial #28                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      31: athrow
      32: aload_0
      33: iload_1
      34: putfield      #3                  // Field maxRequestsPerHost:I
      37: aload_0
      38: invokespecial #29                 // Method promoteCalls:()V
      41: return

  public synchronized int getMaxRequestsPerHost();
    Code:
       0: aload_0
       1: getfield      #3                  // Field maxRequestsPerHost:I
       4: ireturn

  synchronized void enqueue(com.squareup.okhttp.Call$AsyncCall);
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
       4: invokeinterface #30,  1           // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #2                  // Field maxRequests:I
      13: if_icmpge     52
      16: aload_0
      17: aload_1
      18: invokespecial #31                 // Method runningCallsForHost:(Lcom/squareup/okhttp/Call$AsyncCall;)I
      21: aload_0
      22: getfield      #3                  // Field maxRequestsPerHost:I
      25: if_icmpge     52
      28: aload_0
      29: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
      32: aload_1
      33: invokeinterface #32,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      38: pop
      39: aload_0
      40: invokevirtual #33                 // Method getExecutorService:()Ljava/util/concurrent/ExecutorService;
      43: aload_1
      44: invokeinterface #34,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      49: goto          63
      52: aload_0
      53: getfield      #6                  // Field readyCalls:Ljava/util/Deque;
      56: aload_1
      57: invokeinterface #32,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      62: pop
      63: return

  public synchronized void cancel(java.lang.Object);
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyCalls:Ljava/util/Deque;
       4: invokeinterface #35,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          47
      19: aload_2
      20: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #38                 // class com/squareup/okhttp/Call$AsyncCall
      28: astore_3
      29: aload_1
      30: aload_3
      31: invokevirtual #39                 // Method com/squareup/okhttp/Call$AsyncCall.tag:()Ljava/lang/Object;
      34: invokestatic  #40                 // Method com/squareup/okhttp/internal/Util.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      37: ifeq          44
      40: aload_3
      41: invokevirtual #41                 // Method com/squareup/okhttp/Call$AsyncCall.cancel:()V
      44: goto          10
      47: aload_0
      48: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
      51: invokeinterface #35,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      56: astore_2
      57: aload_2
      58: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      63: ifeq          117
      66: aload_2
      67: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      72: checkcast     #38                 // class com/squareup/okhttp/Call$AsyncCall
      75: astore_3
      76: aload_1
      77: aload_3
      78: invokevirtual #39                 // Method com/squareup/okhttp/Call$AsyncCall.tag:()Ljava/lang/Object;
      81: invokestatic  #40                 // Method com/squareup/okhttp/internal/Util.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
      84: ifeq          114
      87: aload_3
      88: invokevirtual #42                 // Method com/squareup/okhttp/Call$AsyncCall.get:()Lcom/squareup/okhttp/Call;
      91: iconst_1
      92: putfield      #43                 // Field com/squareup/okhttp/Call.canceled:Z
      95: aload_3
      96: invokevirtual #42                 // Method com/squareup/okhttp/Call$AsyncCall.get:()Lcom/squareup/okhttp/Call;
      99: getfield      #44                 // Field com/squareup/okhttp/Call.engine:Lcom/squareup/okhttp/internal/http/HttpEngine;
     102: astore        4
     104: aload         4
     106: ifnull        114
     109: aload         4
     111: invokevirtual #45                 // Method com/squareup/okhttp/internal/http/HttpEngine.cancel:()V
     114: goto          57
     117: aload_0
     118: getfield      #8                  // Field executedCalls:Ljava/util/Deque;
     121: invokeinterface #35,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
     126: astore_2
     127: aload_2
     128: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
     133: ifeq          164
     136: aload_2
     137: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
     142: checkcast     #46                 // class com/squareup/okhttp/Call
     145: astore_3
     146: aload_1
     147: aload_3
     148: invokevirtual #47                 // Method com/squareup/okhttp/Call.tag:()Ljava/lang/Object;
     151: invokestatic  #40                 // Method com/squareup/okhttp/internal/Util.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z
     154: ifeq          161
     157: aload_3
     158: invokevirtual #48                 // Method com/squareup/okhttp/Call.cancel:()V
     161: goto          127
     164: return

  synchronized void finished(com.squareup.okhttp.Call$AsyncCall);
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #49,  2           // InterfaceMethod java/util/Deque.remove:(Ljava/lang/Object;)Z
      10: ifne          23
      13: new           #50                 // class java/lang/AssertionError
      16: dup
      17: ldc           #51                 // String AsyncCall wasn\'t running!
      19: invokespecial #52                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      22: athrow
      23: aload_0
      24: invokespecial #29                 // Method promoteCalls:()V
      27: return

  private void promoteCalls();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
       4: invokeinterface #30,  1           // InterfaceMethod java/util/Deque.size:()I
       9: aload_0
      10: getfield      #2                  // Field maxRequests:I
      13: if_icmplt     17
      16: return
      17: aload_0
      18: getfield      #6                  // Field readyCalls:Ljava/util/Deque;
      21: invokeinterface #53,  1           // InterfaceMethod java/util/Deque.isEmpty:()Z
      26: ifeq          30
      29: return
      30: aload_0
      31: getfield      #6                  // Field readyCalls:Ljava/util/Deque;
      34: invokeinterface #35,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      39: astore_1
      40: aload_1
      41: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      46: ifeq          118
      49: aload_1
      50: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      55: checkcast     #38                 // class com/squareup/okhttp/Call$AsyncCall
      58: astore_2
      59: aload_0
      60: aload_2
      61: invokespecial #31                 // Method runningCallsForHost:(Lcom/squareup/okhttp/Call$AsyncCall;)I
      64: aload_0
      65: getfield      #3                  // Field maxRequestsPerHost:I
      68: if_icmpge     98
      71: aload_1
      72: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.remove:()V
      77: aload_0
      78: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
      81: aload_2
      82: invokeinterface #32,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      87: pop
      88: aload_0
      89: invokevirtual #33                 // Method getExecutorService:()Ljava/util/concurrent/ExecutorService;
      92: aload_2
      93: invokeinterface #34,  2           // InterfaceMethod java/util/concurrent/ExecutorService.execute:(Ljava/lang/Runnable;)V
      98: aload_0
      99: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
     102: invokeinterface #30,  1           // InterfaceMethod java/util/Deque.size:()I
     107: aload_0
     108: getfield      #2                  // Field maxRequests:I
     111: if_icmplt     115
     114: return
     115: goto          40
     118: return

  private int runningCallsForHost(com.squareup.okhttp.Call$AsyncCall);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
       6: invokeinterface #35,  1           // InterfaceMethod java/util/Deque.iterator:()Ljava/util/Iterator;
      11: astore_3
      12: aload_3
      13: invokeinterface #36,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      18: ifeq          53
      21: aload_3
      22: invokeinterface #37,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      27: checkcast     #38                 // class com/squareup/okhttp/Call$AsyncCall
      30: astore        4
      32: aload         4
      34: invokevirtual #55                 // Method com/squareup/okhttp/Call$AsyncCall.host:()Ljava/lang/String;
      37: aload_1
      38: invokevirtual #55                 // Method com/squareup/okhttp/Call$AsyncCall.host:()Ljava/lang/String;
      41: invokevirtual #56                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      44: ifeq          50
      47: iinc          2, 1
      50: goto          12
      53: iload_2
      54: ireturn

  synchronized void executed(com.squareup.okhttp.Call);
    Code:
       0: aload_0
       1: getfield      #8                  // Field executedCalls:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #32,  2           // InterfaceMethod java/util/Deque.add:(Ljava/lang/Object;)Z
      10: pop
      11: return

  synchronized void finished(com.squareup.okhttp.Call);
    Code:
       0: aload_0
       1: getfield      #8                  // Field executedCalls:Ljava/util/Deque;
       4: aload_1
       5: invokeinterface #49,  2           // InterfaceMethod java/util/Deque.remove:(Ljava/lang/Object;)Z
      10: ifne          23
      13: new           #50                 // class java/lang/AssertionError
      16: dup
      17: ldc           #57                 // String Call wasn\'t in-flight!
      19: invokespecial #52                 // Method java/lang/AssertionError."<init>":(Ljava/lang/Object;)V
      22: athrow
      23: return

  public synchronized int getRunningCallCount();
    Code:
       0: aload_0
       1: getfield      #7                  // Field runningCalls:Ljava/util/Deque;
       4: invokeinterface #30,  1           // InterfaceMethod java/util/Deque.size:()I
       9: ireturn

  public synchronized int getQueuedCallCount();
    Code:
       0: aload_0
       1: getfield      #6                  // Field readyCalls:Ljava/util/Deque;
       4: invokeinterface #30,  1           // InterfaceMethod java/util/Deque.size:()I
       9: ireturn
}
