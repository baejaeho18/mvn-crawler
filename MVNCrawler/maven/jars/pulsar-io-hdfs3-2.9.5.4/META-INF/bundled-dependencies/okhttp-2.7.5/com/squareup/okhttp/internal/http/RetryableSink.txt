Compiled from "RetryableSink.java"
public final class com.squareup.okhttp.internal.http.RetryableSink implements okio.Sink {
  private boolean closed;

  private final int limit;

  private final okio.Buffer content;

  public com.squareup.okhttp.internal.http.RetryableSink(int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class okio/Buffer
       8: dup
       9: invokespecial #3                  // Method okio/Buffer."<init>":()V
      12: putfield      #4                  // Field content:Lokio/Buffer;
      15: aload_0
      16: iload_1
      17: putfield      #5                  // Field limit:I
      20: return

  public com.squareup.okhttp.internal.http.RetryableSink();
    Code:
       0: aload_0
       1: iconst_m1
       2: invokespecial #6                  // Method "<init>":(I)V
       5: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: iconst_1
      10: putfield      #7                  // Field closed:Z
      13: aload_0
      14: getfield      #4                  // Field content:Lokio/Buffer;
      17: invokevirtual #8                  // Method okio/Buffer.size:()J
      20: aload_0
      21: getfield      #5                  // Field limit:I
      24: i2l
      25: lcmp
      26: ifge          74
      29: new           #9                  // class java/net/ProtocolException
      32: dup
      33: new           #10                 // class java/lang/StringBuilder
      36: dup
      37: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      40: ldc           #12                 // String content-length promised
      42: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      45: aload_0
      46: getfield      #5                  // Field limit:I
      49: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      52: ldc           #15                 // String  bytes, but received
      54: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: getfield      #4                  // Field content:Lokio/Buffer;
      61: invokevirtual #8                  // Method okio/Buffer.size:()J
      64: invokevirtual #16                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      67: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: invokespecial #18                 // Method java/net/ProtocolException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: return

  public void write(okio.Buffer, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field closed:Z
       4: ifeq          17
       7: new           #19                 // class java/lang/IllegalStateException
      10: dup
      11: ldc           #20                 // String closed
      13: invokespecial #21                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_1
      18: invokevirtual #8                  // Method okio/Buffer.size:()J
      21: lconst_0
      22: lload_2
      23: invokestatic  #22                 // Method com/squareup/okhttp/internal/Util.checkOffsetAndCount:(JJJ)V
      26: aload_0
      27: getfield      #5                  // Field limit:I
      30: iconst_m1
      31: if_icmpeq     87
      34: aload_0
      35: getfield      #4                  // Field content:Lokio/Buffer;
      38: invokevirtual #8                  // Method okio/Buffer.size:()J
      41: aload_0
      42: getfield      #5                  // Field limit:I
      45: i2l
      46: lload_2
      47: lsub
      48: lcmp
      49: ifle          87
      52: new           #9                  // class java/net/ProtocolException
      55: dup
      56: new           #10                 // class java/lang/StringBuilder
      59: dup
      60: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      63: ldc           #23                 // String exceeded content-length limit of
      65: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      68: aload_0
      69: getfield      #5                  // Field limit:I
      72: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      75: ldc           #24                 // String  bytes
      77: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokespecial #18                 // Method java/net/ProtocolException."<init>":(Ljava/lang/String;)V
      86: athrow
      87: aload_0
      88: getfield      #4                  // Field content:Lokio/Buffer;
      91: aload_1
      92: lload_2
      93: invokevirtual #25                 // Method okio/Buffer.write:(Lokio/Buffer;J)V
      96: return

  public void flush() throws java.io.IOException;
    Code:
       0: return

  public okio.Timeout timeout();
    Code:
       0: getstatic     #26                 // Field okio/Timeout.NONE:Lokio/Timeout;
       3: areturn

  public long contentLength() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field content:Lokio/Buffer;
       4: invokevirtual #8                  // Method okio/Buffer.size:()J
       7: lreturn

  public void writeToSocket(okio.Sink) throws java.io.IOException;
    Code:
       0: new           #2                  // class okio/Buffer
       3: dup
       4: invokespecial #3                  // Method okio/Buffer."<init>":()V
       7: astore_2
       8: aload_0
       9: getfield      #4                  // Field content:Lokio/Buffer;
      12: aload_2
      13: lconst_0
      14: aload_0
      15: getfield      #4                  // Field content:Lokio/Buffer;
      18: invokevirtual #8                  // Method okio/Buffer.size:()J
      21: invokevirtual #27                 // Method okio/Buffer.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;
      24: pop
      25: aload_1
      26: aload_2
      27: aload_2
      28: invokevirtual #8                  // Method okio/Buffer.size:()J
      31: invokeinterface #28,  4           // InterfaceMethod okio/Sink.write:(Lokio/Buffer;J)V
      36: return
}
