Compiled from "BufferedBinaryEncoder.java"
public class org.apache.avro.io.BufferedBinaryEncoder extends org.apache.avro.io.BinaryEncoder {
  private byte[] buf;

  private int pos;

  private org.apache.avro.io.BufferedBinaryEncoder$ByteSink sink;

  private int bulkLimit;

  org.apache.avro.io.BufferedBinaryEncoder(java.io.OutputStream, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/avro/io/BinaryEncoder."<init>":()V
       4: aload_0
       5: aload_1
       6: iload_2
       7: invokevirtual #2                  // Method configure:(Ljava/io/OutputStream;I)Lorg/apache/avro/io/BufferedBinaryEncoder;
      10: pop
      11: return

  org.apache.avro.io.BufferedBinaryEncoder configure(java.io.OutputStream, int);
    Code:
       0: aconst_null
       1: aload_1
       2: if_acmpne     15
       5: new           #3                  // class java/lang/NullPointerException
       8: dup
       9: ldc           #4                  // String OutputStream cannot be null!
      11: invokespecial #5                  // Method java/lang/NullPointerException."<init>":(Ljava/lang/String;)V
      14: athrow
      15: aconst_null
      16: aload_0
      17: getfield      #6                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      20: if_acmpeq     49
      23: aload_0
      24: getfield      #7                  // Field pos:I
      27: ifle          49
      30: aload_0
      31: invokespecial #8                  // Method flushBuffer:()V
      34: goto          49
      37: astore_3
      38: new           #10                 // class org/apache/avro/AvroRuntimeException
      41: dup
      42: ldc           #11                 // String Failure flushing old output
      44: aload_3
      45: invokespecial #12                 // Method org/apache/avro/AvroRuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      48: athrow
      49: aload_0
      50: new           #13                 // class org/apache/avro/io/BufferedBinaryEncoder$OutputStreamSink
      53: dup
      54: aload_1
      55: aconst_null
      56: invokespecial #14                 // Method org/apache/avro/io/BufferedBinaryEncoder$OutputStreamSink."<init>":(Ljava/io/OutputStream;Lorg/apache/avro/io/BufferedBinaryEncoder$1;)V
      59: putfield      #6                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      62: aload_0
      63: iconst_0
      64: putfield      #7                  // Field pos:I
      67: aconst_null
      68: aload_0
      69: getfield      #15                 // Field buf:[B
      72: if_acmpeq     84
      75: aload_0
      76: getfield      #15                 // Field buf:[B
      79: arraylength
      80: iload_2
      81: if_icmpeq     91
      84: aload_0
      85: iload_2
      86: newarray       byte
      88: putfield      #15                 // Field buf:[B
      91: aload_0
      92: aload_0
      93: getfield      #15                 // Field buf:[B
      96: arraylength
      97: iconst_1
      98: iushr
      99: putfield      #16                 // Field bulkLimit:I
     102: aload_0
     103: getfield      #16                 // Field bulkLimit:I
     106: sipush        512
     109: if_icmple     119
     112: aload_0
     113: sipush        512
     116: putfield      #16                 // Field bulkLimit:I
     119: aload_0
     120: areturn
    Exception table:
       from    to  target type
          30    34    37   Class java/io/IOException

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method flushBuffer:()V
       4: aload_0
       5: getfield      #6                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
       8: invokevirtual #17                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerFlush:()V
      11: return

  private void flushBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field pos:I
       4: ifle          28
       7: aload_0
       8: getfield      #6                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      11: aload_0
      12: getfield      #15                 // Field buf:[B
      15: iconst_0
      16: aload_0
      17: getfield      #7                  // Field pos:I
      20: invokevirtual #18                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerWrite:([BII)V
      23: aload_0
      24: iconst_0
      25: putfield      #7                  // Field pos:I
      28: return

  private void ensureBounds(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field buf:[B
       4: arraylength
       5: aload_0
       6: getfield      #7                  // Field pos:I
       9: isub
      10: istore_2
      11: iload_2
      12: iload_1
      13: if_icmpge     20
      16: aload_0
      17: invokespecial #8                  // Method flushBuffer:()V
      20: return

  public void writeBoolean(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #15                 // Field buf:[B
       4: arraylength
       5: aload_0
       6: getfield      #7                  // Field pos:I
       9: if_icmpne     16
      12: aload_0
      13: invokespecial #8                  // Method flushBuffer:()V
      16: aload_0
      17: dup
      18: getfield      #7                  // Field pos:I
      21: iload_1
      22: aload_0
      23: getfield      #15                 // Field buf:[B
      26: aload_0
      27: getfield      #7                  // Field pos:I
      30: invokestatic  #19                 // Method org/apache/avro/io/BinaryData.encodeBoolean:(Z[BI)I
      33: iadd
      34: putfield      #7                  // Field pos:I
      37: return

  public void writeInt(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_5
       2: invokespecial #20                 // Method ensureBounds:(I)V
       5: aload_0
       6: dup
       7: getfield      #7                  // Field pos:I
      10: iload_1
      11: aload_0
      12: getfield      #15                 // Field buf:[B
      15: aload_0
      16: getfield      #7                  // Field pos:I
      19: invokestatic  #21                 // Method org/apache/avro/io/BinaryData.encodeInt:(I[BI)I
      22: iadd
      23: putfield      #7                  // Field pos:I
      26: return

  public void writeLong(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: bipush        10
       3: invokespecial #20                 // Method ensureBounds:(I)V
       6: aload_0
       7: dup
       8: getfield      #7                  // Field pos:I
      11: lload_1
      12: aload_0
      13: getfield      #15                 // Field buf:[B
      16: aload_0
      17: getfield      #7                  // Field pos:I
      20: invokestatic  #22                 // Method org/apache/avro/io/BinaryData.encodeLong:(J[BI)I
      23: iadd
      24: putfield      #7                  // Field pos:I
      27: return

  public void writeFloat(float) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_4
       2: invokespecial #20                 // Method ensureBounds:(I)V
       5: aload_0
       6: dup
       7: getfield      #7                  // Field pos:I
      10: fload_1
      11: aload_0
      12: getfield      #15                 // Field buf:[B
      15: aload_0
      16: getfield      #7                  // Field pos:I
      19: invokestatic  #23                 // Method org/apache/avro/io/BinaryData.encodeFloat:(F[BI)I
      22: iadd
      23: putfield      #7                  // Field pos:I
      26: return

  public void writeDouble(double) throws java.io.IOException;
    Code:
       0: aload_0
       1: bipush        8
       3: invokespecial #20                 // Method ensureBounds:(I)V
       6: aload_0
       7: dup
       8: getfield      #7                  // Field pos:I
      11: dload_1
      12: aload_0
      13: getfield      #15                 // Field buf:[B
      16: aload_0
      17: getfield      #7                  // Field pos:I
      20: invokestatic  #24                 // Method org/apache/avro/io/BinaryData.encodeDouble:(D[BI)I
      23: iadd
      24: putfield      #7                  // Field pos:I
      27: return

  public void writeFixed(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: aload_0
       2: getfield      #16                 // Field bulkLimit:I
       5: if_icmple     23
       8: aload_0
       9: invokespecial #8                  // Method flushBuffer:()V
      12: aload_0
      13: getfield      #6                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      16: aload_1
      17: iload_2
      18: iload_3
      19: invokevirtual #18                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerWrite:([BII)V
      22: return
      23: aload_0
      24: iload_3
      25: invokespecial #20                 // Method ensureBounds:(I)V
      28: aload_1
      29: iload_2
      30: aload_0
      31: getfield      #15                 // Field buf:[B
      34: aload_0
      35: getfield      #7                  // Field pos:I
      38: iload_3
      39: invokestatic  #25                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      42: aload_0
      43: dup
      44: getfield      #7                  // Field pos:I
      47: iload_3
      48: iadd
      49: putfield      #7                  // Field pos:I
      52: return

  public void writeFixed(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #26                 // Method java/nio/ByteBuffer.hasArray:()Z
       4: ifne          33
       7: aload_1
       8: invokevirtual #27                 // Method java/nio/ByteBuffer.remaining:()I
      11: aload_0
      12: getfield      #16                 // Field bulkLimit:I
      15: if_icmple     33
      18: aload_0
      19: invokespecial #8                  // Method flushBuffer:()V
      22: aload_0
      23: getfield      #6                  // Field sink:Lorg/apache/avro/io/BufferedBinaryEncoder$ByteSink;
      26: aload_1
      27: invokevirtual #28                 // Method org/apache/avro/io/BufferedBinaryEncoder$ByteSink.innerWrite:(Ljava/nio/ByteBuffer;)V
      30: goto          38
      33: aload_0
      34: aload_1
      35: invokespecial #29                 // Method org/apache/avro/io/BinaryEncoder.writeFixed:(Ljava/nio/ByteBuffer;)V
      38: return

  protected void writeZero() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: invokespecial #30                 // Method writeByte:(I)V
       5: return

  private void writeByte(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #7                  // Field pos:I
       4: aload_0
       5: getfield      #15                 // Field buf:[B
       8: arraylength
       9: if_icmpne     16
      12: aload_0
      13: invokespecial #8                  // Method flushBuffer:()V
      16: aload_0
      17: getfield      #15                 // Field buf:[B
      20: aload_0
      21: dup
      22: getfield      #7                  // Field pos:I
      25: dup_x1
      26: iconst_1
      27: iadd
      28: putfield      #7                  // Field pos:I
      31: iload_1
      32: sipush        255
      35: iand
      36: i2b
      37: bastore
      38: return

  public int bytesBuffered();
    Code:
       0: aload_0
       1: getfield      #7                  // Field pos:I
       4: ireturn
}
