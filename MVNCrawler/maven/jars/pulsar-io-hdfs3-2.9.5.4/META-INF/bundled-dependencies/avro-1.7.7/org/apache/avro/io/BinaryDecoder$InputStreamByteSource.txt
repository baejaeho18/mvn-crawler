Compiled from "BinaryDecoder.java"
class org.apache.avro.io.BinaryDecoder$InputStreamByteSource extends org.apache.avro.io.BinaryDecoder$ByteSource {
  private java.io.InputStream in;

  protected boolean isEof;

  private org.apache.avro.io.BinaryDecoder$InputStreamByteSource(java.io.InputStream);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/apache/avro/io/BinaryDecoder$ByteSource."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #3                  // Field isEof:Z
       9: aload_0
      10: aload_1
      11: putfield      #4                  // Field in:Ljava/io/InputStream;
      14: return

  protected void skipSourceBytes(long) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_3
       2: lload_1
       3: lconst_0
       4: lcmp
       5: ifle          75
       8: aload_0
       9: getfield      #4                  // Field in:Ljava/io/InputStream;
      12: lload_1
      13: invokevirtual #5                  // Method java/io/InputStream.skip:(J)J
      16: lstore        4
      18: lload         4
      20: lconst_0
      21: lcmp
      22: ifle          33
      25: lload_1
      26: lload         4
      28: lsub
      29: lstore_1
      30: goto          2
      33: lload         4
      35: lconst_0
      36: lcmp
      37: ifne          62
      40: iload_3
      41: ifeq          57
      44: aload_0
      45: iconst_1
      46: putfield      #3                  // Field isEof:Z
      49: new           #6                  // class java/io/EOFException
      52: dup
      53: invokespecial #7                  // Method java/io/EOFException."<init>":()V
      56: athrow
      57: iconst_1
      58: istore_3
      59: goto          2
      62: aload_0
      63: iconst_1
      64: putfield      #3                  // Field isEof:Z
      67: new           #6                  // class java/io/EOFException
      70: dup
      71: invokespecial #7                  // Method java/io/EOFException."<init>":()V
      74: athrow
      75: return

  protected long trySkipBytes(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lstore_3
       2: iconst_0
       3: istore        5
       5: lload_3
       6: lconst_0
       7: lcmp
       8: ifle          70
      11: aload_0
      12: getfield      #4                  // Field in:Ljava/io/InputStream;
      15: lload_1
      16: invokevirtual #5                  // Method java/io/InputStream.skip:(J)J
      19: lstore        6
      21: lload         6
      23: lconst_0
      24: lcmp
      25: ifle          36
      28: lload_3
      29: lload         6
      31: lsub
      32: lstore_3
      33: goto          5
      36: lload         6
      38: lconst_0
      39: lcmp
      40: ifne          62
      43: iload         5
      45: ifeq          56
      48: aload_0
      49: iconst_1
      50: putfield      #3                  // Field isEof:Z
      53: goto          70
      56: iconst_1
      57: istore        5
      59: goto          5
      62: aload_0
      63: iconst_1
      64: putfield      #3                  // Field isEof:Z
      67: goto          70
      70: goto          80
      73: astore        5
      75: aload_0
      76: iconst_1
      77: putfield      #3                  // Field isEof:Z
      80: lload_1
      81: lload_3
      82: lsub
      83: lreturn
    Exception table:
       from    to  target type
           2    70    73   Class java/io/EOFException

  protected void readRaw(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifle          47
       4: aload_0
       5: getfield      #4                  // Field in:Ljava/io/InputStream;
       8: aload_1
       9: iload_2
      10: iload_3
      11: invokevirtual #8                  // Method java/io/InputStream.read:([BII)I
      14: istore        4
      16: iload         4
      18: ifge          34
      21: aload_0
      22: iconst_1
      23: putfield      #3                  // Field isEof:Z
      26: new           #6                  // class java/io/EOFException
      29: dup
      30: invokespecial #7                  // Method java/io/EOFException."<init>":()V
      33: athrow
      34: iload_3
      35: iload         4
      37: isub
      38: istore_3
      39: iload_2
      40: iload         4
      42: iadd
      43: istore_2
      44: goto          0
      47: return

  protected int tryReadRaw(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: istore        4
       3: iload         4
       5: ifle          49
       8: aload_0
       9: getfield      #4                  // Field in:Ljava/io/InputStream;
      12: aload_1
      13: iload_2
      14: iload         4
      16: invokevirtual #8                  // Method java/io/InputStream.read:([BII)I
      19: istore        5
      21: iload         5
      23: ifge          34
      26: aload_0
      27: iconst_1
      28: putfield      #3                  // Field isEof:Z
      31: goto          49
      34: iload         4
      36: iload         5
      38: isub
      39: istore        4
      41: iload_2
      42: iload         5
      44: iadd
      45: istore_2
      46: goto          3
      49: goto          59
      52: astore        5
      54: aload_0
      55: iconst_1
      56: putfield      #3                  // Field isEof:Z
      59: iload_3
      60: iload         4
      62: isub
      63: ireturn
    Exception table:
       from    to  target type
           3    49    52   Class java/io/EOFException

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field ba:Lorg/apache/avro/io/BinaryDecoder$BufferAccessor;
       4: invokevirtual #10                 // Method org/apache/avro/io/BinaryDecoder$BufferAccessor.getLim:()I
       7: aload_0
       8: getfield      #9                  // Field ba:Lorg/apache/avro/io/BinaryDecoder$BufferAccessor;
      11: invokevirtual #11                 // Method org/apache/avro/io/BinaryDecoder$BufferAccessor.getPos:()I
      14: isub
      15: ifne          26
      18: aload_0
      19: getfield      #4                  // Field in:Ljava/io/InputStream;
      22: invokevirtual #12                 // Method java/io/InputStream.read:()I
      25: ireturn
      26: aload_0
      27: getfield      #9                  // Field ba:Lorg/apache/avro/io/BinaryDecoder$BufferAccessor;
      30: invokevirtual #11                 // Method org/apache/avro/io/BinaryDecoder$BufferAccessor.getPos:()I
      33: istore_1
      34: aload_0
      35: getfield      #9                  // Field ba:Lorg/apache/avro/io/BinaryDecoder$BufferAccessor;
      38: invokevirtual #13                 // Method org/apache/avro/io/BinaryDecoder$BufferAccessor.getBuf:()[B
      41: iload_1
      42: baload
      43: sipush        255
      46: iand
      47: istore_2
      48: aload_0
      49: getfield      #9                  // Field ba:Lorg/apache/avro/io/BinaryDecoder$BufferAccessor;
      52: iload_1
      53: iconst_1
      54: iadd
      55: invokevirtual #14                 // Method org/apache/avro/io/BinaryDecoder$BufferAccessor.setPos:(I)V
      58: iload_2
      59: ireturn

  public boolean isEof();
    Code:
       0: aload_0
       1: getfield      #3                  // Field isEof:Z
       4: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field in:Ljava/io/InputStream;
       4: invokevirtual #15                 // Method java/io/InputStream.close:()V
       7: return

  org.apache.avro.io.BinaryDecoder$InputStreamByteSource(java.io.InputStream, org.apache.avro.io.BinaryDecoder$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/io/InputStream;)V
       5: return
}
