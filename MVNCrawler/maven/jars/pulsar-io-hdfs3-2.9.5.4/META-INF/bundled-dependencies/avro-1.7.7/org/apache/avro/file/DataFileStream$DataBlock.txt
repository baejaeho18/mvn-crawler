Compiled from "DataFileStream.java"
class org.apache.avro.file.DataFileStream$DataBlock {
  private byte[] data;

  private long numEntries;

  private int blockSize;

  private int offset;

  private boolean flushOnWrite;

  private org.apache.avro.file.DataFileStream$DataBlock(long, int);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field offset:I
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field flushOnWrite:Z
      14: aload_0
      15: iload_3
      16: newarray       byte
      18: putfield      #4                  // Field data:[B
      21: aload_0
      22: lload_1
      23: putfield      #2                  // Field numEntries:J
      26: aload_0
      27: iload_3
      28: putfield      #1                  // Field blockSize:I
      31: return

  org.apache.avro.file.DataFileStream$DataBlock(java.nio.ByteBuffer, long);
    Code:
       0: aload_0
       1: invokespecial #5                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #6                  // Field offset:I
       9: aload_0
      10: iconst_1
      11: putfield      #7                  // Field flushOnWrite:Z
      14: aload_0
      15: aload_1
      16: invokevirtual #8                  // Method java/nio/ByteBuffer.array:()[B
      19: putfield      #4                  // Field data:[B
      22: aload_0
      23: aload_1
      24: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      27: putfield      #1                  // Field blockSize:I
      30: aload_0
      31: aload_1
      32: invokevirtual #10                 // Method java/nio/ByteBuffer.arrayOffset:()I
      35: aload_1
      36: invokevirtual #11                 // Method java/nio/ByteBuffer.position:()I
      39: iadd
      40: putfield      #6                  // Field offset:I
      43: aload_0
      44: lload_2
      45: putfield      #2                  // Field numEntries:J
      48: return

  byte[] getData();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[B
       4: areturn

  long getNumEntries();
    Code:
       0: aload_0
       1: getfield      #2                  // Field numEntries:J
       4: lreturn

  int getBlockSize();
    Code:
       0: aload_0
       1: getfield      #1                  // Field blockSize:I
       4: ireturn

  boolean isFlushOnWrite();
    Code:
       0: aload_0
       1: getfield      #7                  // Field flushOnWrite:Z
       4: ireturn

  void setFlushOnWrite(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #7                  // Field flushOnWrite:Z
       5: return

  java.nio.ByteBuffer getAsByteBuffer();
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[B
       4: aload_0
       5: getfield      #6                  // Field offset:I
       8: aload_0
       9: getfield      #1                  // Field blockSize:I
      12: invokestatic  #12                 // Method java/nio/ByteBuffer.wrap:([BII)Ljava/nio/ByteBuffer;
      15: areturn

  void decompressUsing(org.apache.avro.file.Codec) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #13                 // Method getAsByteBuffer:()Ljava/nio/ByteBuffer;
       5: invokevirtual #14                 // Method org/apache/avro/file/Codec.decompress:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
       8: astore_2
       9: aload_0
      10: aload_2
      11: invokevirtual #8                  // Method java/nio/ByteBuffer.array:()[B
      14: putfield      #4                  // Field data:[B
      17: aload_0
      18: aload_2
      19: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      22: putfield      #1                  // Field blockSize:I
      25: return

  void compressUsing(org.apache.avro.file.Codec) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: invokevirtual #13                 // Method getAsByteBuffer:()Ljava/nio/ByteBuffer;
       5: invokevirtual #15                 // Method org/apache/avro/file/Codec.compress:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
       8: astore_2
       9: aload_0
      10: aload_2
      11: invokevirtual #8                  // Method java/nio/ByteBuffer.array:()[B
      14: putfield      #4                  // Field data:[B
      17: aload_0
      18: aload_2
      19: invokevirtual #9                  // Method java/nio/ByteBuffer.remaining:()I
      22: putfield      #1                  // Field blockSize:I
      25: return

  void writeBlockTo(org.apache.avro.io.BinaryEncoder, byte[]) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #2                  // Field numEntries:J
       5: invokevirtual #16                 // Method org/apache/avro/io/BinaryEncoder.writeLong:(J)V
       8: aload_1
       9: aload_0
      10: getfield      #1                  // Field blockSize:I
      13: i2l
      14: invokevirtual #16                 // Method org/apache/avro/io/BinaryEncoder.writeLong:(J)V
      17: aload_1
      18: aload_0
      19: getfield      #4                  // Field data:[B
      22: aload_0
      23: getfield      #6                  // Field offset:I
      26: aload_0
      27: getfield      #1                  // Field blockSize:I
      30: invokevirtual #17                 // Method org/apache/avro/io/BinaryEncoder.writeFixed:([BII)V
      33: aload_1
      34: aload_2
      35: invokevirtual #18                 // Method org/apache/avro/io/BinaryEncoder.writeFixed:([B)V
      38: aload_0
      39: getfield      #7                  // Field flushOnWrite:Z
      42: ifeq          49
      45: aload_1
      46: invokevirtual #19                 // Method org/apache/avro/io/BinaryEncoder.flush:()V
      49: return

  static byte[] access$200(org.apache.avro.file.DataFileStream$DataBlock);
    Code:
       0: aload_0
       1: getfield      #4                  // Field data:[B
       4: areturn

  org.apache.avro.file.DataFileStream$DataBlock(long, int, org.apache.avro.file.DataFileStream$1);
    Code:
       0: aload_0
       1: lload_1
       2: iload_3
       3: invokespecial #3                  // Method "<init>":(JI)V
       6: return

  static long access$402(org.apache.avro.file.DataFileStream$DataBlock, long);
    Code:
       0: aload_0
       1: lload_1
       2: dup2_x1
       3: putfield      #2                  // Field numEntries:J
       6: lreturn

  static int access$502(org.apache.avro.file.DataFileStream$DataBlock, int);
    Code:
       0: aload_0
       1: iload_1
       2: dup_x1
       3: putfield      #1                  // Field blockSize:I
       6: ireturn

  static int access$500(org.apache.avro.file.DataFileStream$DataBlock);
    Code:
       0: aload_0
       1: getfield      #1                  // Field blockSize:I
       4: ireturn
}
