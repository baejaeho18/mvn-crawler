Compiled from "HdfsAdmin.java"
public class org.apache.hadoop.hdfs.client.HdfsAdmin {
  private org.apache.hadoop.hdfs.DistributedFileSystem dfs;

  private static final org.apache.hadoop.fs.permission.FsPermission TRASH_PERMISSION;

  public org.apache.hadoop.hdfs.client.HdfsAdmin(java.net.URI, org.apache.hadoop.conf.Configuration) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_1
       5: aload_2
       6: invokestatic  #2                  // Method org/apache/hadoop/fs/FileSystem.get:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
       9: astore_3
      10: aload_3
      11: instanceof    #3                  // class org/apache/hadoop/hdfs/DistributedFileSystem
      14: ifne          49
      17: new           #4                  // class java/lang/IllegalArgumentException
      20: dup
      21: new           #5                  // class java/lang/StringBuilder
      24: dup
      25: invokespecial #6                  // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #7                  // String \'
      30: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_1
      34: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      37: ldc           #10                 // String \' is not an HDFS URI.
      39: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      45: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      48: athrow
      49: aload_0
      50: aload_3
      51: checkcast     #3                  // class org/apache/hadoop/hdfs/DistributedFileSystem
      54: putfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
      57: return

  public void setQuota(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: lload_2
       6: ldc2_w        #15                 // long 9223372036854775807l
       9: invokevirtual #17                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setQuota:(Lorg/apache/hadoop/fs/Path;JJ)V
      12: return

  public void clearQuota(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: ldc2_w        #18                 // long -1l
       8: ldc2_w        #15                 // long 9223372036854775807l
      11: invokevirtual #17                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setQuota:(Lorg/apache/hadoop/fs/Path;JJ)V
      14: return

  public void setSpaceQuota(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: ldc2_w        #15                 // long 9223372036854775807l
       8: lload_2
       9: invokevirtual #17                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setQuota:(Lorg/apache/hadoop/fs/Path;JJ)V
      12: return

  public void clearSpaceQuota(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: ldc2_w        #15                 // long 9223372036854775807l
       8: ldc2_w        #18                 // long -1l
      11: invokevirtual #17                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setQuota:(Lorg/apache/hadoop/fs/Path;JJ)V
      14: return

  public void setQuotaByStorageType(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.StorageType, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: lload_3
       7: invokevirtual #20                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setQuotaByStorageType:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/StorageType;J)V
      10: return

  public void clearQuotaByStorageType(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.StorageType) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: ldc2_w        #18                 // long -1l
       9: invokevirtual #20                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setQuotaByStorageType:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/StorageType;J)V
      12: return

  public void allowSnapshot(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #21                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.allowSnapshot:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void disallowSnapshot(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #22                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.disallowSnapshot:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public long addCacheDirective(org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo, java.util.EnumSet<org.apache.hadoop.fs.CacheFlag>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #23                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.addCacheDirective:(Lorg/apache/hadoop/hdfs/protocol/CacheDirectiveInfo;Ljava/util/EnumSet;)J
       9: lreturn

  public void modifyCacheDirective(org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo, java.util.EnumSet<org.apache.hadoop.fs.CacheFlag>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #24                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.modifyCacheDirective:(Lorg/apache/hadoop/hdfs/protocol/CacheDirectiveInfo;Ljava/util/EnumSet;)V
       9: return

  public void removeCacheDirective(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: lload_1
       5: invokevirtual #25                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.removeCacheDirective:(J)V
       8: return

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.CacheDirectiveEntry> listCacheDirectives(org.apache.hadoop.hdfs.protocol.CacheDirectiveInfo) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #26                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listCacheDirectives:(Lorg/apache/hadoop/hdfs/protocol/CacheDirectiveInfo;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: areturn

  public void addCachePool(org.apache.hadoop.hdfs.protocol.CachePoolInfo) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #27                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.addCachePool:(Lorg/apache/hadoop/hdfs/protocol/CachePoolInfo;)V
       8: return

  public void modifyCachePool(org.apache.hadoop.hdfs.protocol.CachePoolInfo) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #28                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.modifyCachePool:(Lorg/apache/hadoop/hdfs/protocol/CachePoolInfo;)V
       8: return

  public void removeCachePool(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #29                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.removeCachePool:(Ljava/lang/String;)V
       8: return

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.CachePoolEntry> listCachePools() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #30                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listCachePools:()Lorg/apache/hadoop/fs/RemoteIterator;
       7: areturn

  public org.apache.hadoop.crypto.key.KeyProvider getKeyProvider() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #31                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getClient:()Lorg/apache/hadoop/hdfs/DFSClient;
       7: invokevirtual #32                 // Method org/apache/hadoop/hdfs/DFSClient.getKeyProvider:()Lorg/apache/hadoop/crypto/key/KeyProvider;
      10: areturn

  public void createEncryptionZone(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException, org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #33                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.createEncryptionZone:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void createEncryptionZone(org.apache.hadoop.fs.Path, java.lang.String, java.util.EnumSet<org.apache.hadoop.hdfs.client.CreateEncryptionZoneFlag>) throws java.io.IOException, org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.HadoopIllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #33                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.createEncryptionZone:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: aload_3
      10: getstatic     #34                 // Field org/apache/hadoop/hdfs/client/CreateEncryptionZoneFlag.PROVISION_TRASH:Lorg/apache/hadoop/hdfs/client/CreateEncryptionZoneFlag;
      13: invokevirtual #35                 // Method java/util/EnumSet.contains:(Ljava/lang/Object;)Z
      16: ifeq          50
      19: aload_3
      20: getstatic     #36                 // Field org/apache/hadoop/hdfs/client/CreateEncryptionZoneFlag.NO_TRASH:Lorg/apache/hadoop/hdfs/client/CreateEncryptionZoneFlag;
      23: invokevirtual #35                 // Method java/util/EnumSet.contains:(Ljava/lang/Object;)Z
      26: ifeq          39
      29: new           #37                 // class org/apache/hadoop/HadoopIllegalArgumentException
      32: dup
      33: ldc           #38                 // String can not have both PROVISION_TRASH and NO_TRASH flags
      35: invokespecial #39                 // Method org/apache/hadoop/HadoopIllegalArgumentException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
      43: aload_1
      44: getstatic     #40                 // Field TRASH_PERMISSION:Lorg/apache/hadoop/fs/permission/FsPermission;
      47: invokevirtual #41                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.provisionEZTrash:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
      50: return

  public void provisionEncryptionZoneTrash(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: getstatic     #40                 // Field TRASH_PERMISSION:Lorg/apache/hadoop/fs/permission/FsPermission;
       8: invokevirtual #41                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.provisionEZTrash:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
      11: return

  public org.apache.hadoop.hdfs.protocol.EncryptionZone getEncryptionZoneForPath(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.security.AccessControlException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #42                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getEZForPath:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/hdfs/protocol/EncryptionZone;
       8: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.EncryptionZone> listEncryptionZones() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #43                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listEncryptionZones:()Lorg/apache/hadoop/fs/RemoteIterator;
       7: areturn

  public void reencryptEncryptionZone(org.apache.hadoop.fs.Path, org.apache.hadoop.hdfs.protocol.HdfsConstants$ReencryptAction) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #44                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.reencryptEncryptionZone:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/hdfs/protocol/HdfsConstants$ReencryptAction;)V
       9: return

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.ZoneReencryptionStatus> listReencryptionStatus() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #45                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listReencryptionStatus:()Lorg/apache/hadoop/fs/RemoteIterator;
       7: areturn

  public org.apache.hadoop.fs.FileEncryptionInfo getFileEncryptionInfo(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #46                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getFileEncryptionInfo:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileEncryptionInfo;
       8: areturn

  public org.apache.hadoop.hdfs.DFSInotifyEventInputStream getInotifyEventStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #47                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getInotifyEventStream:()Lorg/apache/hadoop/hdfs/DFSInotifyEventInputStream;
       7: areturn

  public org.apache.hadoop.hdfs.DFSInotifyEventInputStream getInotifyEventStream(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: lload_1
       5: invokevirtual #48                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getInotifyEventStream:(J)Lorg/apache/hadoop/hdfs/DFSInotifyEventInputStream;
       8: areturn

  public void setStoragePolicy(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #49                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setStoragePolicy:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void unsetStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #50                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.unsetStoragePolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.fs.BlockStoragePolicySpi getStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #51                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getStoragePolicy:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/BlockStoragePolicySpi;
       8: areturn

  public java.util.Collection<? extends org.apache.hadoop.fs.BlockStoragePolicySpi> getAllStoragePolicies() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #52                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getAllStoragePolicies:()Ljava/util/Collection;
       7: areturn

  public void setErasureCodingPolicy(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #53                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.setErasureCodingPolicy:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy getErasureCodingPolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #54                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getErasureCodingPolicy:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/hdfs/protocol/ErasureCodingPolicy;
       8: areturn

  public void satisfyStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #55                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.satisfyStoragePolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.hdfs.protocol.ErasureCodingPolicyInfo[] getErasureCodingPolicies() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #31                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.getClient:()Lorg/apache/hadoop/hdfs/DFSClient;
       7: invokevirtual #56                 // Method org/apache/hadoop/hdfs/DFSClient.getErasureCodingPolicies:()[Lorg/apache/hadoop/hdfs/protocol/ErasureCodingPolicyInfo;
      10: areturn

  public void unsetErasureCodingPolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #57                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.unsetErasureCodingPolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.hdfs.protocol.AddErasureCodingPolicyResponse[] addErasureCodingPolicies(org.apache.hadoop.hdfs.protocol.ErasureCodingPolicy[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #58                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.addErasureCodingPolicies:([Lorg/apache/hadoop/hdfs/protocol/ErasureCodingPolicy;)[Lorg/apache/hadoop/hdfs/protocol/AddErasureCodingPolicyResponse;
       8: areturn

  public void removeErasureCodingPolicy(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #59                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.removeErasureCodingPolicy:(Ljava/lang/String;)V
       8: return

  public void enableErasureCodingPolicy(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #60                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.enableErasureCodingPolicy:(Ljava/lang/String;)V
       8: return

  public void disableErasureCodingPolicy(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #61                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.disableErasureCodingPolicy:(Ljava/lang/String;)V
       8: return

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.OpenFileEntry> listOpenFiles() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: invokevirtual #62                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listOpenFiles:()Lorg/apache/hadoop/fs/RemoteIterator;
       7: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.OpenFileEntry> listOpenFiles(java.util.EnumSet<org.apache.hadoop.hdfs.protocol.OpenFilesIterator$OpenFilesType>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: invokevirtual #63                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listOpenFiles:(Ljava/util/EnumSet;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.hdfs.protocol.OpenFileEntry> listOpenFiles(java.util.EnumSet<org.apache.hadoop.hdfs.protocol.OpenFilesIterator$OpenFilesType>, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field dfs:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #64                 // Method org/apache/hadoop/hdfs/DistributedFileSystem.listOpenFiles:(Ljava/util/EnumSet;Ljava/lang/String;)Lorg/apache/hadoop/fs/RemoteIterator;
       9: areturn

  static {};
    Code:
       0: new           #65                 // class org/apache/hadoop/fs/permission/FsPermission
       3: dup
       4: getstatic     #66                 // Field org/apache/hadoop/fs/permission/FsAction.ALL:Lorg/apache/hadoop/fs/permission/FsAction;
       7: getstatic     #66                 // Field org/apache/hadoop/fs/permission/FsAction.ALL:Lorg/apache/hadoop/fs/permission/FsAction;
      10: getstatic     #66                 // Field org/apache/hadoop/fs/permission/FsAction.ALL:Lorg/apache/hadoop/fs/permission/FsAction;
      13: iconst_1
      14: invokespecial #67                 // Method org/apache/hadoop/fs/permission/FsPermission."<init>":(Lorg/apache/hadoop/fs/permission/FsAction;Lorg/apache/hadoop/fs/permission/FsAction;Lorg/apache/hadoop/fs/permission/FsAction;Z)V
      17: putstatic     #40                 // Field TRASH_PERMISSION:Lorg/apache/hadoop/fs/permission/FsPermission;
      20: return
}
