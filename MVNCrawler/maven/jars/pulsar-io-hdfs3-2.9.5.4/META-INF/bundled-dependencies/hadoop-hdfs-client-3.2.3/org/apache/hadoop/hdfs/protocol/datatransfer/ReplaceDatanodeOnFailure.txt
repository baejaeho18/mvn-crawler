Compiled from "ReplaceDatanodeOnFailure.java"
public class org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure {
  private static final org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Condition CONDITION_DEFAULT;

  private static final org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Condition CONDITION_FALSE;

  private static final org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Condition CONDITION_TRUE;

  private final org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Policy policy;

  private final boolean bestEffort;

  public org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure(org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Policy, boolean);
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #5                  // Field policy:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
       9: aload_0
      10: iload_2
      11: putfield      #6                  // Field bestEffort:Z
      14: return

  public void checkEnabled();
    Code:
       0: aload_0
       1: getfield      #5                  // Field policy:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
       4: getstatic     #7                  // Field org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.DISABLE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
       7: if_acmpne     20
      10: new           #8                  // class java/lang/UnsupportedOperationException
      13: dup
      14: ldc           #10                 // String This feature is disabled.  Please refer to dfs.client.block.write.replace-datanode-on-failure.enable configuration property.
      16: invokespecial #11                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      19: athrow
      20: return

  public boolean isBestEffort();
    Code:
       0: aload_0
       1: getfield      #6                  // Field bestEffort:Z
       4: ireturn

  public boolean satisfy(short, org.apache.hadoop.hdfs.protocol.DatanodeInfo[], boolean, boolean);
    Code:
       0: aload_2
       1: ifnonnull     8
       4: iconst_0
       5: goto          10
       8: aload_2
       9: arraylength
      10: istore        5
      12: iload         5
      14: ifeq          49
      17: iload         5
      19: iload_1
      20: if_icmpge     49
      23: aload_0
      24: getfield      #5                  // Field policy:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
      27: invokevirtual #12                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.getCondition:()Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
      30: iload_1
      31: aload_2
      32: iload         5
      34: iload_3
      35: iload         4
      37: invokeinterface #13,  6           // InterfaceMethod org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition.satisfy:(S[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;IZZ)Z
      42: ifeq          49
      45: iconst_1
      46: goto          50
      49: iconst_0
      50: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: getfield      #5                  // Field policy:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
       4: invokevirtual #14                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.toString:()Ljava/lang/String;
       7: areturn

  public static org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure get(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: invokestatic  #15                 // Method getPolicy:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
       4: astore_1
       5: aload_0
       6: ldc           #16                 // String dfs.client.block.write.replace-datanode-on-failure.best-effort
       8: iconst_0
       9: invokevirtual #17                 // Method org/apache/hadoop/conf/Configuration.getBoolean:(Ljava/lang/String;Z)Z
      12: istore_2
      13: new           #18                 // class org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure
      16: dup
      17: aload_1
      18: iload_2
      19: invokespecial #19                 // Method "<init>":(Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;Z)V
      22: areturn

  private static org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Policy getPolicy(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #20                 // String dfs.client.block.write.replace-datanode-on-failure.enable
       3: iconst_1
       4: invokevirtual #17                 // Method org/apache/hadoop/conf/Configuration.getBoolean:(Ljava/lang/String;Z)Z
       7: istore_1
       8: iload_1
       9: ifne          16
      12: getstatic     #7                  // Field org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.DISABLE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
      15: areturn
      16: aload_0
      17: ldc           #21                 // String dfs.client.block.write.replace-datanode-on-failure.policy
      19: ldc           #22                 // String DEFAULT
      21: invokevirtual #23                 // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      24: astore_2
      25: iconst_1
      26: istore_3
      27: iload_3
      28: invokestatic  #24                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.values:()[Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
      31: arraylength
      32: if_icmpge     63
      35: invokestatic  #24                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.values:()[Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
      38: iload_3
      39: aaload
      40: astore        4
      42: aload         4
      44: invokevirtual #25                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.name:()Ljava/lang/String;
      47: aload_2
      48: invokevirtual #26                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      51: ifeq          57
      54: aload         4
      56: areturn
      57: iinc          3, 1
      60: goto          27
      63: new           #27                 // class org/apache/hadoop/HadoopIllegalArgumentException
      66: dup
      67: new           #28                 // class java/lang/StringBuilder
      70: dup
      71: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      74: ldc           #30                 // String Illegal configuration value for dfs.client.block.write.replace-datanode-on-failure.policy:
      76: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      79: aload_2
      80: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: invokevirtual #32                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      86: invokespecial #33                 // Method org/apache/hadoop/HadoopIllegalArgumentException."<init>":(Ljava/lang/String;)V
      89: athrow

  public static void write(org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Policy, boolean, org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_2
       1: ldc           #20                 // String dfs.client.block.write.replace-datanode-on-failure.enable
       3: aload_0
       4: getstatic     #7                  // Field org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.DISABLE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: invokevirtual #34                 // Method org/apache/hadoop/conf/Configuration.setBoolean:(Ljava/lang/String;Z)V
      18: aload_2
      19: ldc           #21                 // String dfs.client.block.write.replace-datanode-on-failure.policy
      21: aload_0
      22: invokevirtual #25                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Policy.name:()Ljava/lang/String;
      25: invokevirtual #35                 // Method org/apache/hadoop/conf/Configuration.set:(Ljava/lang/String;Ljava/lang/String;)V
      28: aload_2
      29: ldc           #16                 // String dfs.client.block.write.replace-datanode-on-failure.best-effort
      31: iload_1
      32: invokevirtual #34                 // Method org/apache/hadoop/conf/Configuration.setBoolean:(Ljava/lang/String;Z)V
      35: return

  static org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Condition access$000();
    Code:
       0: getstatic     #3                  // Field CONDITION_FALSE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
       3: areturn

  static org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Condition access$100();
    Code:
       0: getstatic     #2                  // Field CONDITION_DEFAULT:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
       3: areturn

  static org.apache.hadoop.hdfs.protocol.datatransfer.ReplaceDatanodeOnFailure$Condition access$200();
    Code:
       0: getstatic     #1                  // Field CONDITION_TRUE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
       3: areturn

  static {};
    Code:
       0: new           #36                 // class org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$1
       3: dup
       4: invokespecial #37                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$1."<init>":()V
       7: putstatic     #2                  // Field CONDITION_DEFAULT:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
      10: new           #38                 // class org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$2
      13: dup
      14: invokespecial #39                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$2."<init>":()V
      17: putstatic     #3                  // Field CONDITION_FALSE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
      20: new           #40                 // class org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$3
      23: dup
      24: invokespecial #41                 // Method org/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$3."<init>":()V
      27: putstatic     #1                  // Field CONDITION_TRUE:Lorg/apache/hadoop/hdfs/protocol/datatransfer/ReplaceDatanodeOnFailure$Condition;
      30: return
}
