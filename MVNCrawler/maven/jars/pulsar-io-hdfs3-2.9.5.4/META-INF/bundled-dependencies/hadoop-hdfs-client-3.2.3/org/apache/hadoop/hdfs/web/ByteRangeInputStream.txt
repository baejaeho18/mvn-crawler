Compiled from "ByteRangeInputStream.java"
public abstract class org.apache.hadoop.hdfs.web.ByteRangeInputStream extends org.apache.hadoop.fs.FSInputStream {
  protected java.io.InputStream in;

  protected final org.apache.hadoop.hdfs.web.ByteRangeInputStream$URLOpener originalURL;

  protected final org.apache.hadoop.hdfs.web.ByteRangeInputStream$URLOpener resolvedURL;

  protected long startPos;

  protected long currentPos;

  protected java.lang.Long fileLength;

  org.apache.hadoop.hdfs.web.ByteRangeInputStream$StreamStatus status;

  public org.apache.hadoop.hdfs.web.ByteRangeInputStream(org.apache.hadoop.hdfs.web.ByteRangeInputStream$URLOpener, org.apache.hadoop.hdfs.web.ByteRangeInputStream$URLOpener) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/fs/FSInputStream."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #2                  // Field startPos:J
       9: aload_0
      10: lconst_0
      11: putfield      #3                  // Field currentPos:J
      14: aload_0
      15: aconst_null
      16: putfield      #4                  // Field fileLength:Ljava/lang/Long;
      19: aload_0
      20: getstatic     #5                  // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus.SEEK:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      23: putfield      #6                  // Field status:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      26: aload_0
      27: aload_1
      28: putfield      #7                  // Field originalURL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener;
      31: aload_0
      32: aload_2
      33: putfield      #8                  // Field resolvedURL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener;
      36: aload_0
      37: invokevirtual #9                  // Method getInputStream:()Ljava/io/InputStream;
      40: pop
      41: return

  protected abstract java.net.URL getResolvedUrl(java.net.HttpURLConnection) throws java.io.IOException;

  protected java.io.InputStream getInputStream() throws java.io.IOException;
    Code:
       0: getstatic     #10                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$1.$SwitchMap$org$apache$hadoop$hdfs$web$ByteRangeInputStream$StreamStatus:[I
       3: aload_0
       4: getfield      #6                  // Field status:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
       7: invokevirtual #11                 // Method org/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus.ordinal:()I
      10: iaload
      11: tableswitch   { // 1 to 3
                     1: 36
                     2: 39
                     3: 88
               default: 98
          }
      36: goto          98
      39: aload_0
      40: getfield      #12                 // Field in:Ljava/io/InputStream;
      43: ifnull        53
      46: aload_0
      47: getfield      #12                 // Field in:Ljava/io/InputStream;
      50: invokevirtual #13                 // Method java/io/InputStream.close:()V
      53: aload_0
      54: aload_0
      55: getfield      #2                  // Field startPos:J
      58: invokevirtual #14                 // Method openInputStream:(J)Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength;
      61: astore_1
      62: aload_0
      63: aload_1
      64: getfield      #15                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.in:Ljava/io/InputStream;
      67: putfield      #12                 // Field in:Ljava/io/InputStream;
      70: aload_0
      71: aload_1
      72: getfield      #16                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.length:Ljava/lang/Long;
      75: putfield      #4                  // Field fileLength:Ljava/lang/Long;
      78: aload_0
      79: getstatic     #17                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus.NORMAL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      82: putfield      #6                  // Field status:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      85: goto          98
      88: new           #18                 // class java/io/IOException
      91: dup
      92: ldc           #19                 // String Stream closed
      94: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      97: athrow
      98: aload_0
      99: getfield      #12                 // Field in:Ljava/io/InputStream;
     102: areturn

  protected org.apache.hadoop.hdfs.web.ByteRangeInputStream$InputStreamAndFileLength openInputStream(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #21                 // class java/io/EOFException
       9: dup
      10: ldc           #22                 // String Negative Position
      12: invokespecial #23                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: getfield      #8                  // Field resolvedURL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener;
      20: invokevirtual #24                 // Method org/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener.getURL:()Ljava/net/URL;
      23: ifnull        30
      26: iconst_1
      27: goto          31
      30: iconst_0
      31: istore_3
      32: iload_3
      33: ifeq          43
      36: aload_0
      37: getfield      #8                  // Field resolvedURL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener;
      40: goto          47
      43: aload_0
      44: getfield      #7                  // Field originalURL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener;
      47: astore        4
      49: aload         4
      51: lload_1
      52: iload_3
      53: invokevirtual #25                 // Method org/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener.connect:(JZ)Ljava/net/HttpURLConnection;
      56: astore        5
      58: aload_0
      59: getfield      #8                  // Field resolvedURL:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener;
      62: aload_0
      63: aload         5
      65: invokevirtual #26                 // Method getResolvedUrl:(Ljava/net/HttpURLConnection;)Ljava/net/URL;
      68: invokevirtual #27                 // Method org/apache/hadoop/hdfs/web/ByteRangeInputStream$URLOpener.setURL:(Ljava/net/URL;)V
      71: aload         5
      73: invokevirtual #28                 // Method java/net/HttpURLConnection.getInputStream:()Ljava/io/InputStream;
      76: astore        6
      78: aload         5
      80: invokevirtual #29                 // Method java/net/HttpURLConnection.getHeaderFields:()Ljava/util/Map;
      83: astore        8
      85: aload         8
      87: invokestatic  #30                 // Method isChunkedTransferEncoding:(Ljava/util/Map;)Z
      90: ifeq          99
      93: aconst_null
      94: astore        7
      96: goto          170
      99: aload         5
     101: ldc           #32                 // String Content-Length
     103: invokevirtual #33                 // Method java/net/HttpURLConnection.getHeaderField:(Ljava/lang/String;)Ljava/lang/String;
     106: astore        9
     108: aload         9
     110: ifnonnull     141
     113: new           #18                 // class java/io/IOException
     116: dup
     117: new           #34                 // class java/lang/StringBuilder
     120: dup
     121: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
     124: ldc           #36                 // String Content-Length is missing:
     126: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     129: aload         8
     131: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     134: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     137: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     140: athrow
     141: aload         9
     143: invokestatic  #40                 // Method java/lang/Long.parseLong:(Ljava/lang/String;)J
     146: lstore        10
     148: lload_1
     149: lload         10
     151: ladd
     152: invokestatic  #41                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
     155: astore        7
     157: new           #42                 // class org/apache/commons/io/input/BoundedInputStream
     160: dup
     161: aload         6
     163: lload         10
     165: invokespecial #43                 // Method org/apache/commons/io/input/BoundedInputStream."<init>":(Ljava/io/InputStream;J)V
     168: astore        6
     170: new           #44                 // class org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength
     173: dup
     174: aload         7
     176: aload         6
     178: invokespecial #45                 // Method org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength."<init>":(Ljava/lang/Long;Ljava/io/InputStream;)V
     181: areturn

  private static boolean isChunkedTransferEncoding(java.util.Map<java.lang.String, java.util.List<java.lang.String>>);
    Code:
       0: aload_0
       1: ldc           #46                 // String Transfer-Encoding
       3: ldc           #47                 // String chunked
       5: invokestatic  #48                 // Method contains:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Z
       8: ifne          22
      11: aload_0
      12: ldc           #49                 // String TE
      14: ldc           #47                 // String chunked
      16: invokestatic  #48                 // Method contains:(Ljava/util/Map;Ljava/lang/String;Ljava/lang/String;)Z
      19: ifeq          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: ireturn

  private static boolean contains(java.util.Map<java.lang.String, java.util.List<java.lang.String>>, java.lang.String, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #50,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #51                 // class java/util/List
      10: astore_3
      11: aload_3
      12: ifnull        83
      15: aload_3
      16: invokeinterface #52,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      21: astore        4
      23: aload         4
      25: invokeinterface #53,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      30: ifeq          83
      33: aload         4
      35: invokeinterface #54,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      40: checkcast     #55                 // class java/lang/String
      43: astore        5
      45: new           #56                 // class java/util/StringTokenizer
      48: dup
      49: aload         5
      51: ldc           #57                 // String ,
      53: invokespecial #58                 // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      56: astore        6
      58: aload         6
      60: invokevirtual #59                 // Method java/util/StringTokenizer.hasMoreTokens:()Z
      63: ifeq          80
      66: aload_2
      67: aload         6
      69: invokevirtual #60                 // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      72: invokevirtual #61                 // Method java/lang/String.equalsIgnoreCase:(Ljava/lang/String;)Z
      75: ifeq          58
      78: iconst_1
      79: ireturn
      80: goto          23
      83: iconst_0
      84: ireturn

  private int update(int) throws java.io.IOException;
    Code:
       0: iload_1
       1: iconst_m1
       2: if_icmpeq     19
       5: aload_0
       6: dup
       7: getfield      #3                  // Field currentPos:J
      10: iload_1
      11: i2l
      12: ladd
      13: putfield      #3                  // Field currentPos:J
      16: goto          83
      19: aload_0
      20: getfield      #4                  // Field fileLength:Ljava/lang/Long;
      23: ifnull        83
      26: aload_0
      27: getfield      #3                  // Field currentPos:J
      30: aload_0
      31: getfield      #4                  // Field fileLength:Ljava/lang/Long;
      34: invokevirtual #62                 // Method java/lang/Long.longValue:()J
      37: lcmp
      38: ifge          83
      41: new           #18                 // class java/io/IOException
      44: dup
      45: new           #34                 // class java/lang/StringBuilder
      48: dup
      49: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      52: ldc           #63                 // String Got EOF but currentPos =
      54: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      57: aload_0
      58: getfield      #3                  // Field currentPos:J
      61: invokevirtual #64                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      64: ldc           #65                 // String  < filelength =
      66: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: aload_0
      70: getfield      #4                  // Field fileLength:Ljava/lang/Long;
      73: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      76: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      79: invokespecial #20                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      82: athrow
      83: iload_1
      84: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getInputStream:()Ljava/io/InputStream;
       4: invokevirtual #66                 // Method java/io/InputStream.read:()I
       7: istore_1
       8: aload_0
       9: iload_1
      10: iconst_m1
      11: if_icmpne     18
      14: iconst_m1
      15: goto          19
      18: iconst_1
      19: invokespecial #67                 // Method update:(I)I
      22: pop
      23: iload_1
      24: ireturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: invokevirtual #9                  // Method getInputStream:()Ljava/io/InputStream;
       5: aload_1
       6: iload_2
       7: iload_3
       8: invokevirtual #68                 // Method java/io/InputStream.read:([BII)I
      11: invokespecial #67                 // Method update:(I)I
      14: ireturn

  public void seek(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #3                  // Field currentPos:J
       5: lcmp
       6: ifeq          36
       9: aload_0
      10: lload_1
      11: putfield      #2                  // Field startPos:J
      14: aload_0
      15: lload_1
      16: putfield      #3                  // Field currentPos:J
      19: aload_0
      20: getfield      #6                  // Field status:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      23: getstatic     #69                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus.CLOSED:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      26: if_acmpeq     36
      29: aload_0
      30: getstatic     #5                  // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus.SEEK:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      33: putfield      #6                  // Field status:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      36: return

  public int read(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: iload         4
       5: iload         5
       7: invokevirtual #70                 // Method validatePositionedReadArgs:(J[BII)V
      10: iload         5
      12: ifne          17
      15: iconst_0
      16: ireturn
      17: aload_0
      18: lload_1
      19: invokevirtual #14                 // Method openInputStream:(J)Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength;
      22: getfield      #15                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.in:Ljava/io/InputStream;
      25: astore        6
      27: aconst_null
      28: astore        7
      30: aload         6
      32: aload_3
      33: iload         4
      35: iload         5
      37: invokevirtual #68                 // Method java/io/InputStream.read:([BII)I
      40: istore        8
      42: aload         6
      44: ifnull        77
      47: aload         7
      49: ifnull        72
      52: aload         6
      54: invokevirtual #13                 // Method java/io/InputStream.close:()V
      57: goto          77
      60: astore        9
      62: aload         7
      64: aload         9
      66: invokevirtual #72                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      69: goto          77
      72: aload         6
      74: invokevirtual #13                 // Method java/io/InputStream.close:()V
      77: iload         8
      79: ireturn
      80: astore        8
      82: aload         8
      84: astore        7
      86: aload         8
      88: athrow
      89: astore        10
      91: aload         6
      93: ifnull        126
      96: aload         7
      98: ifnull        121
     101: aload         6
     103: invokevirtual #13                 // Method java/io/InputStream.close:()V
     106: goto          126
     109: astore        11
     111: aload         7
     113: aload         11
     115: invokevirtual #72                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     118: goto          126
     121: aload         6
     123: invokevirtual #13                 // Method java/io/InputStream.close:()V
     126: aload         10
     128: athrow
    Exception table:
       from    to  target type
          52    57    60   Class java/lang/Throwable
          30    42    80   Class java/lang/Throwable
          30    42    89   any
         101   106   109   Class java/lang/Throwable
          80    91    89   any

  public void readFully(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: iload         4
       5: iload         5
       7: invokevirtual #70                 // Method validatePositionedReadArgs:(J[BII)V
      10: iload         5
      12: ifne          16
      15: return
      16: aload_0
      17: lload_1
      18: invokevirtual #14                 // Method openInputStream:(J)Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength;
      21: astore        6
      23: aload         6
      25: getfield      #16                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.length:Ljava/lang/Long;
      28: ifnull        89
      31: iload         5
      33: i2l
      34: lload_1
      35: ladd
      36: aload         6
      38: getfield      #16                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.length:Ljava/lang/Long;
      41: invokevirtual #62                 // Method java/lang/Long.longValue:()J
      44: lcmp
      45: ifle          89
      48: new           #21                 // class java/io/EOFException
      51: dup
      52: new           #34                 // class java/lang/StringBuilder
      55: dup
      56: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #73                 // String The length to read
      61: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: iload         5
      66: invokevirtual #74                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      69: ldc           #75                 // String  exceeds the file length
      71: invokevirtual #37                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      74: aload         6
      76: getfield      #16                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.length:Ljava/lang/Long;
      79: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      82: invokevirtual #39                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      85: invokespecial #23                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      88: athrow
      89: iconst_0
      90: istore        7
      92: iload         7
      94: iload         5
      96: if_icmpge     145
      99: aload         6
     101: getfield      #15                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.in:Ljava/io/InputStream;
     104: aload_3
     105: iload         4
     107: iload         7
     109: iadd
     110: iload         5
     112: iload         7
     114: isub
     115: invokevirtual #68                 // Method java/io/InputStream.read:([BII)I
     118: istore        8
     120: iload         8
     122: ifge          135
     125: new           #21                 // class java/io/EOFException
     128: dup
     129: ldc           #77                 // String End of file reached before reading fully.
     131: invokespecial #23                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
     134: athrow
     135: iload         7
     137: iload         8
     139: iadd
     140: istore        7
     142: goto          92
     145: aload         6
     147: getfield      #15                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.in:Ljava/io/InputStream;
     150: invokevirtual #13                 // Method java/io/InputStream.close:()V
     153: goto          169
     156: astore        9
     158: aload         6
     160: getfield      #15                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$InputStreamAndFileLength.in:Ljava/io/InputStream;
     163: invokevirtual #13                 // Method java/io/InputStream.close:()V
     166: aload         9
     168: athrow
     169: return
    Exception table:
       from    to  target type
          23   145   156   any
         156   158   156   any

  public long getPos() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field currentPos:J
       4: lreturn

  public boolean seekToNewSource(long) throws java.io.IOException;
    Code:
       0: iconst_0
       1: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field in:Ljava/io/InputStream;
       4: ifnull        19
       7: aload_0
       8: getfield      #12                 // Field in:Ljava/io/InputStream;
      11: invokevirtual #13                 // Method java/io/InputStream.close:()V
      14: aload_0
      15: aconst_null
      16: putfield      #12                 // Field in:Ljava/io/InputStream;
      19: aload_0
      20: getstatic     #69                 // Field org/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus.CLOSED:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      23: putfield      #6                  // Field status:Lorg/apache/hadoop/hdfs/web/ByteRangeInputStream$StreamStatus;
      26: return

  public synchronized int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getInputStream:()Ljava/io/InputStream;
       4: pop
       5: aload_0
       6: getfield      #4                  // Field fileLength:Ljava/lang/Long;
       9: ifnull        41
      12: aload_0
      13: getfield      #4                  // Field fileLength:Ljava/lang/Long;
      16: invokevirtual #62                 // Method java/lang/Long.longValue:()J
      19: aload_0
      20: getfield      #3                  // Field currentPos:J
      23: lsub
      24: lstore_1
      25: lload_1
      26: ldc2_w        #79                 // long 2147483647l
      29: lcmp
      30: ifgt          38
      33: lload_1
      34: l2i
      35: goto          40
      38: ldc           #81                 // int 2147483647
      40: ireturn
      41: ldc           #81                 // int 2147483647
      43: ireturn
}
