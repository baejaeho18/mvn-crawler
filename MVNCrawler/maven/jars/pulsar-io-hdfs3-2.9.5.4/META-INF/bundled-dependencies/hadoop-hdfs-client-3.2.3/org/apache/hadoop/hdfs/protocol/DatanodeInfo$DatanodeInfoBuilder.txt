Compiled from "DatanodeInfo.java"
public class org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder {
  private java.lang.String location;

  private long capacity;

  private long dfsUsed;

  private long remaining;

  private long blockPoolUsed;

  private long cacheCapacity;

  private long cacheUsed;

  private long lastUpdate;

  private long lastUpdateMonotonic;

  private int xceiverCount;

  private org.apache.hadoop.hdfs.protocol.DatanodeInfo$AdminStates adminState;

  private java.lang.String upgradeDomain;

  private java.lang.String ipAddr;

  private java.lang.String hostName;

  private java.lang.String datanodeUuid;

  private int xferPort;

  private int infoPort;

  private int infoSecurePort;

  private int ipcPort;

  private long nonDfsUsed;

  private long lastBlockReportTime;

  private long lastBlockReportMonotonic;

  private int numBlocks;

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc           #3                  // String /default-rack
       7: putfield      #4                  // Field location:Ljava/lang/String;
      10: aload_0
      11: lconst_0
      12: putfield      #5                  // Field nonDfsUsed:J
      15: aload_0
      16: lconst_0
      17: putfield      #6                  // Field lastBlockReportTime:J
      20: aload_0
      21: lconst_0
      22: putfield      #7                  // Field lastBlockReportMonotonic:J
      25: return

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setFrom(org.apache.hadoop.hdfs.protocol.DatanodeInfo);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getCapacity:()J
       5: putfield      #9                  // Field capacity:J
       8: aload_0
       9: aload_1
      10: invokevirtual #10                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getDfsUsed:()J
      13: putfield      #11                 // Field dfsUsed:J
      16: aload_0
      17: aload_1
      18: invokevirtual #12                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getNonDfsUsed:()J
      21: putfield      #5                  // Field nonDfsUsed:J
      24: aload_0
      25: aload_1
      26: invokevirtual #13                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getRemaining:()J
      29: putfield      #14                 // Field remaining:J
      32: aload_0
      33: aload_1
      34: invokevirtual #15                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getBlockPoolUsed:()J
      37: putfield      #16                 // Field blockPoolUsed:J
      40: aload_0
      41: aload_1
      42: invokevirtual #17                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getCacheCapacity:()J
      45: putfield      #18                 // Field cacheCapacity:J
      48: aload_0
      49: aload_1
      50: invokevirtual #19                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getCacheUsed:()J
      53: putfield      #20                 // Field cacheUsed:J
      56: aload_0
      57: aload_1
      58: invokevirtual #21                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getLastUpdate:()J
      61: putfield      #22                 // Field lastUpdate:J
      64: aload_0
      65: aload_1
      66: invokevirtual #23                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getLastUpdateMonotonic:()J
      69: putfield      #24                 // Field lastUpdateMonotonic:J
      72: aload_0
      73: aload_1
      74: invokevirtual #25                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getXceiverCount:()I
      77: putfield      #26                 // Field xceiverCount:I
      80: aload_0
      81: aload_1
      82: invokevirtual #27                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getNetworkLocation:()Ljava/lang/String;
      85: putfield      #4                  // Field location:Ljava/lang/String;
      88: aload_0
      89: aload_1
      90: invokevirtual #28                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getAdminState:()Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo$AdminStates;
      93: putfield      #29                 // Field adminState:Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo$AdminStates;
      96: aload_0
      97: aload_1
      98: invokevirtual #30                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getUpgradeDomain:()Ljava/lang/String;
     101: putfield      #31                 // Field upgradeDomain:Ljava/lang/String;
     104: aload_0
     105: aload_1
     106: invokevirtual #32                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getLastBlockReportTime:()J
     109: putfield      #6                  // Field lastBlockReportTime:J
     112: aload_0
     113: aload_1
     114: invokevirtual #33                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getLastBlockReportMonotonic:()J
     117: putfield      #7                  // Field lastBlockReportMonotonic:J
     120: aload_0
     121: aload_1
     122: invokevirtual #34                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.getNumBlocks:()I
     125: putfield      #35                 // Field numBlocks:I
     128: aload_0
     129: aload_1
     130: invokevirtual #36                 // Method setNodeID:(Lorg/apache/hadoop/hdfs/protocol/DatanodeID;)Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo$DatanodeInfoBuilder;
     133: pop
     134: aload_0
     135: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setNodeID(org.apache.hadoop.hdfs.protocol.DatanodeID);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #37                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getIpAddr:()Ljava/lang/String;
       5: putfield      #38                 // Field ipAddr:Ljava/lang/String;
       8: aload_0
       9: aload_1
      10: invokevirtual #39                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getHostName:()Ljava/lang/String;
      13: putfield      #40                 // Field hostName:Ljava/lang/String;
      16: aload_0
      17: aload_1
      18: invokevirtual #41                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getDatanodeUuid:()Ljava/lang/String;
      21: putfield      #42                 // Field datanodeUuid:Ljava/lang/String;
      24: aload_0
      25: aload_1
      26: invokevirtual #43                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getXferPort:()I
      29: putfield      #44                 // Field xferPort:I
      32: aload_0
      33: aload_1
      34: invokevirtual #45                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getInfoPort:()I
      37: putfield      #46                 // Field infoPort:I
      40: aload_0
      41: aload_1
      42: invokevirtual #47                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getInfoSecurePort:()I
      45: putfield      #48                 // Field infoSecurePort:I
      48: aload_0
      49: aload_1
      50: invokevirtual #49                 // Method org/apache/hadoop/hdfs/protocol/DatanodeID.getIpcPort:()I
      53: putfield      #50                 // Field ipcPort:I
      56: aload_0
      57: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setCapacity(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #9                  // Field capacity:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setDfsUsed(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #11                 // Field dfsUsed:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setRemaining(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #14                 // Field remaining:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setBlockPoolUsed(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #16                 // Field blockPoolUsed:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setCacheCapacity(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #18                 // Field cacheCapacity:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setCacheUsed(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #20                 // Field cacheUsed:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setLastUpdate(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #22                 // Field lastUpdate:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setLastUpdateMonotonic(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #24                 // Field lastUpdateMonotonic:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setXceiverCount(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #26                 // Field xceiverCount:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setAdminState(org.apache.hadoop.hdfs.protocol.DatanodeInfo$AdminStates);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field adminState:Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo$AdminStates;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setUpgradeDomain(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #31                 // Field upgradeDomain:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setIpAddr(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #38                 // Field ipAddr:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setHostName(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #40                 // Field hostName:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setDatanodeUuid(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #42                 // Field datanodeUuid:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setXferPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #44                 // Field xferPort:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setInfoPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #46                 // Field infoPort:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setInfoSecurePort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #48                 // Field infoSecurePort:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setIpcPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #50                 // Field ipcPort:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setNetworkLocation(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #4                  // Field location:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setNonDfsUsed(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #5                  // Field nonDfsUsed:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setLastBlockReportTime(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #6                  // Field lastBlockReportTime:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setLastBlockReportMonotonic(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #7                  // Field lastBlockReportMonotonic:J
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo$DatanodeInfoBuilder setNumBlocks(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #35                 // Field numBlocks:I
       5: aload_0
       6: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo build();
    Code:
       0: new           #51                 // class org/apache/hadoop/hdfs/protocol/DatanodeInfo
       3: dup
       4: aload_0
       5: getfield      #38                 // Field ipAddr:Ljava/lang/String;
       8: aload_0
       9: getfield      #40                 // Field hostName:Ljava/lang/String;
      12: aload_0
      13: getfield      #42                 // Field datanodeUuid:Ljava/lang/String;
      16: aload_0
      17: getfield      #44                 // Field xferPort:I
      20: aload_0
      21: getfield      #46                 // Field infoPort:I
      24: aload_0
      25: getfield      #48                 // Field infoSecurePort:I
      28: aload_0
      29: getfield      #50                 // Field ipcPort:I
      32: aload_0
      33: getfield      #9                  // Field capacity:J
      36: aload_0
      37: getfield      #11                 // Field dfsUsed:J
      40: aload_0
      41: getfield      #5                  // Field nonDfsUsed:J
      44: aload_0
      45: getfield      #14                 // Field remaining:J
      48: aload_0
      49: getfield      #16                 // Field blockPoolUsed:J
      52: aload_0
      53: getfield      #18                 // Field cacheCapacity:J
      56: aload_0
      57: getfield      #20                 // Field cacheUsed:J
      60: aload_0
      61: getfield      #22                 // Field lastUpdate:J
      64: aload_0
      65: getfield      #24                 // Field lastUpdateMonotonic:J
      68: aload_0
      69: getfield      #26                 // Field xceiverCount:I
      72: aload_0
      73: getfield      #4                  // Field location:Ljava/lang/String;
      76: aload_0
      77: getfield      #29                 // Field adminState:Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo$AdminStates;
      80: aload_0
      81: getfield      #31                 // Field upgradeDomain:Ljava/lang/String;
      84: aload_0
      85: getfield      #6                  // Field lastBlockReportTime:J
      88: aload_0
      89: getfield      #7                  // Field lastBlockReportMonotonic:J
      92: aload_0
      93: getfield      #35                 // Field numBlocks:I
      96: aconst_null
      97: invokespecial #52                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;IIIIJJJJJJJJJILjava/lang/String;Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo$AdminStates;Ljava/lang/String;JJILorg/apache/hadoop/hdfs/protocol/DatanodeInfo$1;)V
     100: areturn
}
