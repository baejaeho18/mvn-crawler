Compiled from "DataTransferProtocol.java"
public interface org.apache.hadoop.hdfs.protocol.datatransfer.DataTransferProtocol {
  public static final org.slf4j.Logger LOG;

  public static final int DATA_TRANSFER_VERSION;

  public abstract void readBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, java.lang.String, long, long, boolean, org.apache.hadoop.hdfs.server.datanode.CachingStrategy) throws java.io.IOException;

  public abstract void writeBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.fs.StorageType, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, java.lang.String, org.apache.hadoop.hdfs.protocol.DatanodeInfo[], org.apache.hadoop.fs.StorageType[], org.apache.hadoop.hdfs.protocol.DatanodeInfo, org.apache.hadoop.hdfs.protocol.datatransfer.BlockConstructionStage, int, long, long, long, org.apache.hadoop.util.DataChecksum, org.apache.hadoop.hdfs.server.datanode.CachingStrategy, boolean, boolean, boolean[], java.lang.String, java.lang.String[]) throws java.io.IOException;

  public abstract void transferBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, java.lang.String, org.apache.hadoop.hdfs.protocol.DatanodeInfo[], org.apache.hadoop.fs.StorageType[], java.lang.String[]) throws java.io.IOException;

  public abstract void requestShortCircuitFds(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, org.apache.hadoop.hdfs.shortcircuit.ShortCircuitShm$SlotId, int, boolean) throws java.io.IOException;

  public abstract void releaseShortCircuitFds(org.apache.hadoop.hdfs.shortcircuit.ShortCircuitShm$SlotId) throws java.io.IOException;

  public abstract void requestShortCircuitShm(java.lang.String) throws java.io.IOException;

  public abstract void replaceBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.fs.StorageType, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, java.lang.String, org.apache.hadoop.hdfs.protocol.DatanodeInfo, java.lang.String) throws java.io.IOException;

  public abstract void copyBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>) throws java.io.IOException;

  public abstract void blockChecksum(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, org.apache.hadoop.hdfs.protocol.BlockChecksumOptions) throws java.io.IOException;

  public abstract void blockGroupChecksum(org.apache.hadoop.hdfs.protocol.StripedBlockInfo, org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>, long, org.apache.hadoop.hdfs.protocol.BlockChecksumOptions) throws java.io.IOException;

  static {};
    Code:
       0: ldc           #1                  // class org/apache/hadoop/hdfs/protocol/datatransfer/DataTransferProtocol
       2: invokestatic  #2                  // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #3                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
