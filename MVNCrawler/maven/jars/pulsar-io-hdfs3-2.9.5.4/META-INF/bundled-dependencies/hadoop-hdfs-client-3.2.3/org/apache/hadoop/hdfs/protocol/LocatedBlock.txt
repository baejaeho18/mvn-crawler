Compiled from "LocatedBlock.java"
public class org.apache.hadoop.hdfs.protocol.LocatedBlock {
  private final org.apache.hadoop.hdfs.protocol.ExtendedBlock b;

  private long offset;

  private final org.apache.hadoop.hdfs.protocol.DatanodeInfoWithStorage[] locs;

  private final java.lang.String[] storageIDs;

  private final org.apache.hadoop.fs.StorageType[] storageTypes;

  private boolean corrupt;

  private org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier> blockToken;

  private static org.apache.hadoop.hdfs.protocol.LocatedBlock$ProvidedLastComparator providedLastComparator;

  private org.apache.hadoop.hdfs.protocol.DatanodeInfo[] cachedLocs;

  static final org.apache.hadoop.hdfs.protocol.DatanodeInfoWithStorage[] EMPTY_LOCS;

  public org.apache.hadoop.hdfs.protocol.LocatedBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.hdfs.protocol.DatanodeInfo[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aconst_null
       4: aconst_null
       5: invokestatic  #1                  // Method convert:([Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;[Ljava/lang/String;[Lorg/apache/hadoop/fs/StorageType;)[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
       8: aconst_null
       9: aconst_null
      10: ldc2_w        #2                  // long -1l
      13: iconst_0
      14: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      17: invokespecial #5                  // Method "<init>":(Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;[Ljava/lang/String;[Lorg/apache/hadoop/fs/StorageType;JZ[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;)V
      20: return

  public org.apache.hadoop.hdfs.protocol.LocatedBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.hdfs.protocol.DatanodeInfo[], java.lang.String[], org.apache.hadoop.fs.StorageType[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1                  // Method convert:([Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;[Ljava/lang/String;[Lorg/apache/hadoop/fs/StorageType;)[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
       9: aload_3
      10: aload         4
      12: ldc2_w        #2                  // long -1l
      15: iconst_0
      16: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      19: invokespecial #5                  // Method "<init>":(Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;[Ljava/lang/String;[Lorg/apache/hadoop/fs/StorageType;JZ[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;)V
      22: return

  public org.apache.hadoop.hdfs.protocol.LocatedBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.hdfs.protocol.DatanodeInfo[], java.lang.String[], org.apache.hadoop.fs.StorageType[], long, boolean, org.apache.hadoop.hdfs.protocol.DatanodeInfo[]);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: aload         4
       6: invokestatic  #1                  // Method convert:([Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;[Ljava/lang/String;[Lorg/apache/hadoop/fs/StorageType;)[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
       9: aload_3
      10: aload         4
      12: lload         5
      14: iload         7
      16: aconst_null
      17: aload         8
      19: if_acmpeq     29
      22: iconst_0
      23: aload         8
      25: arraylength
      26: if_icmpne     35
      29: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      32: goto          37
      35: aload         8
      37: invokespecial #5                  // Method "<init>":(Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;[Ljava/lang/String;[Lorg/apache/hadoop/fs/StorageType;JZ[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;)V
      40: return

  public org.apache.hadoop.hdfs.protocol.LocatedBlock(org.apache.hadoop.hdfs.protocol.ExtendedBlock, org.apache.hadoop.hdfs.protocol.DatanodeInfoWithStorage[], java.lang.String[], org.apache.hadoop.fs.StorageType[], long, boolean, org.apache.hadoop.hdfs.protocol.DatanodeInfo[]);
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #7                  // class org/apache/hadoop/security/token/Token
       8: dup
       9: invokespecial #8                  // Method org/apache/hadoop/security/token/Token."<init>":()V
      12: putfield      #9                  // Field blockToken:Lorg/apache/hadoop/security/token/Token;
      15: aload_0
      16: aload_1
      17: putfield      #10                 // Field b:Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;
      20: aload_0
      21: lload         5
      23: putfield      #11                 // Field offset:J
      26: aload_0
      27: iload         7
      29: putfield      #12                 // Field corrupt:Z
      32: aload_0
      33: aconst_null
      34: aload_2
      35: if_acmpne     44
      38: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      41: goto          45
      44: aload_2
      45: putfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      48: aload_0
      49: aload_3
      50: putfield      #14                 // Field storageIDs:[Ljava/lang/String;
      53: aload_0
      54: aload         4
      56: putfield      #15                 // Field storageTypes:[Lorg/apache/hadoop/fs/StorageType;
      59: aload_0
      60: aconst_null
      61: aload         8
      63: if_acmpeq     73
      66: iconst_0
      67: aload         8
      69: arraylength
      70: if_icmpne     79
      73: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      76: goto          81
      79: aload         8
      81: putfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
      84: return

  private static org.apache.hadoop.hdfs.protocol.DatanodeInfoWithStorage[] convert(org.apache.hadoop.hdfs.protocol.DatanodeInfo[], java.lang.String[], org.apache.hadoop.fs.StorageType[]);
    Code:
       0: aconst_null
       1: aload_0
       2: if_acmpne     9
       5: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
       8: areturn
       9: aload_0
      10: arraylength
      11: anewarray     #17                 // class org/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage
      14: astore_3
      15: iconst_0
      16: istore        4
      18: iload         4
      20: aload_0
      21: arraylength
      22: if_icmpge     70
      25: aload_3
      26: iload         4
      28: new           #17                 // class org/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage
      31: dup
      32: aload_0
      33: iload         4
      35: aaload
      36: aload_1
      37: ifnull        47
      40: aload_1
      41: iload         4
      43: aaload
      44: goto          48
      47: aconst_null
      48: aload_2
      49: ifnull        59
      52: aload_2
      53: iload         4
      55: aaload
      56: goto          60
      59: aconst_null
      60: invokespecial #18                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage."<init>":(Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;Ljava/lang/String;Lorg/apache/hadoop/fs/StorageType;)V
      63: aastore
      64: iinc          4, 1
      67: goto          18
      70: aload_3
      71: areturn

  public org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier> getBlockToken();
    Code:
       0: aload_0
       1: getfield      #9                  // Field blockToken:Lorg/apache/hadoop/security/token/Token;
       4: areturn

  public void setBlockToken(org.apache.hadoop.security.token.Token<org.apache.hadoop.hdfs.security.token.block.BlockTokenIdentifier>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field blockToken:Lorg/apache/hadoop/security/token/Token;
       5: return

  public org.apache.hadoop.hdfs.protocol.ExtendedBlock getBlock();
    Code:
       0: aload_0
       1: getfield      #10                 // Field b:Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;
       4: areturn

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo[] getLocations();
    Code:
       0: aload_0
       1: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
       4: areturn

  public org.apache.hadoop.fs.StorageType[] getStorageTypes();
    Code:
       0: aload_0
       1: getfield      #15                 // Field storageTypes:[Lorg/apache/hadoop/fs/StorageType;
       4: areturn

  public java.lang.String[] getStorageIDs();
    Code:
       0: aload_0
       1: getfield      #14                 // Field storageIDs:[Ljava/lang/String;
       4: areturn

  public void updateCachedStorageInfo();
    Code:
       0: aload_0
       1: getfield      #14                 // Field storageIDs:[Ljava/lang/String;
       4: ifnull        39
       7: iconst_0
       8: istore_1
       9: iload_1
      10: aload_0
      11: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      14: arraylength
      15: if_icmpge     39
      18: aload_0
      19: getfield      #14                 // Field storageIDs:[Ljava/lang/String;
      22: iload_1
      23: aload_0
      24: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      27: iload_1
      28: aaload
      29: invokevirtual #19                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage.getStorageID:()Ljava/lang/String;
      32: aastore
      33: iinc          1, 1
      36: goto          9
      39: aload_0
      40: getfield      #15                 // Field storageTypes:[Lorg/apache/hadoop/fs/StorageType;
      43: ifnull        78
      46: iconst_0
      47: istore_1
      48: iload_1
      49: aload_0
      50: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      53: arraylength
      54: if_icmpge     78
      57: aload_0
      58: getfield      #15                 // Field storageTypes:[Lorg/apache/hadoop/fs/StorageType;
      61: iload_1
      62: aload_0
      63: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      66: iload_1
      67: aaload
      68: invokevirtual #20                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage.getStorageType:()Lorg/apache/hadoop/fs/StorageType;
      71: aastore
      72: iinc          1, 1
      75: goto          48
      78: return

  public void moveProvidedToEnd(int);
    Code:
       0: iload_1
       1: ifgt          5
       4: return
       5: aload_0
       6: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
       9: iconst_0
      10: iload_1
      11: aload_0
      12: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      15: arraylength
      16: if_icmpge     23
      19: iload_1
      20: goto          28
      23: aload_0
      24: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      27: arraylength
      28: getstatic     #21                 // Field providedLastComparator:Lorg/apache/hadoop/hdfs/protocol/LocatedBlock$ProvidedLastComparator;
      31: invokestatic  #22                 // Method java/util/Arrays.sort:([Ljava/lang/Object;IILjava/util/Comparator;)V
      34: return

  public long getStartOffset();
    Code:
       0: aload_0
       1: getfield      #11                 // Field offset:J
       4: lreturn

  public long getBlockSize();
    Code:
       0: aload_0
       1: getfield      #10                 // Field b:Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;
       4: invokevirtual #23                 // Method org/apache/hadoop/hdfs/protocol/ExtendedBlock.getNumBytes:()J
       7: lreturn

  public void setStartOffset(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #11                 // Field offset:J
       5: return

  public void setCorrupt(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #12                 // Field corrupt:Z
       5: return

  public boolean isCorrupt();
    Code:
       0: aload_0
       1: getfield      #12                 // Field corrupt:Z
       4: ireturn

  public void addCachedLoc(org.apache.hadoop.hdfs.protocol.DatanodeInfo);
    Code:
       0: aload_0
       1: getfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
       4: invokestatic  #24                 // Method com/google/common/collect/Lists.newArrayList:([Ljava/lang/Object;)Ljava/util/ArrayList;
       7: astore_2
       8: aload_2
       9: aload_1
      10: invokeinterface #25,  2           // InterfaceMethod java/util/List.contains:(Ljava/lang/Object;)Z
      15: ifeq          19
      18: return
      19: aload_0
      20: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      23: astore_3
      24: aload_3
      25: arraylength
      26: istore        4
      28: iconst_0
      29: istore        5
      31: iload         5
      33: iload         4
      35: if_icmpge     86
      38: aload_3
      39: iload         5
      41: aaload
      42: astore        6
      44: aload_1
      45: aload         6
      47: invokevirtual #26                 // Method org/apache/hadoop/hdfs/protocol/DatanodeInfo.equals:(Ljava/lang/Object;)Z
      50: ifeq          80
      53: aload_2
      54: aload         6
      56: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      61: pop
      62: aload_0
      63: aload_2
      64: aload_0
      65: getfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
      68: invokeinterface #28,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      73: checkcast     #29                 // class "[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;"
      76: putfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
      79: return
      80: iinc          5, 1
      83: goto          31
      86: aload_2
      87: aload_1
      88: invokeinterface #27,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      93: pop
      94: aload_0
      95: getfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
      98: getstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
     101: if_acmpeq     108
     104: iconst_1
     105: goto          109
     108: iconst_0
     109: ldc           #30                 // String Cached locations should only be added when having a backing disk replica!
     111: aload_1
     112: aload_0
     113: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
     116: arraylength
     117: invokestatic  #31                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     120: aload_0
     121: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
     124: invokestatic  #32                 // Method java/util/Arrays.toString:([Ljava/lang/Object;)Ljava/lang/String;
     127: invokestatic  #33                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
     130: aload_0
     131: aload_2
     132: aload_0
     133: getfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
     136: invokeinterface #28,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     141: checkcast     #29                 // class "[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;"
     144: putfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
     147: return

  public org.apache.hadoop.hdfs.protocol.DatanodeInfo[] getCachedLocations();
    Code:
       0: aload_0
       1: getfield      #16                 // Field cachedLocs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfo;
       4: areturn

  public java.lang.String toString();
    Code:
       0: new           #34                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #35                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #36                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #37                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      14: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #39                 // String {
      19: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #10                 // Field b:Lorg/apache/hadoop/hdfs/protocol/ExtendedBlock;
      26: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      29: ldc           #41                 // String ; getBlockSize()=
      31: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      34: aload_0
      35: invokevirtual #42                 // Method getBlockSize:()J
      38: invokevirtual #43                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      41: ldc           #44                 // String ; corrupt=
      43: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      46: aload_0
      47: getfield      #12                 // Field corrupt:Z
      50: invokevirtual #45                 // Method java/lang/StringBuilder.append:(Z)Ljava/lang/StringBuilder;
      53: ldc           #46                 // String ; offset=
      55: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload_0
      59: getfield      #11                 // Field offset:J
      62: invokevirtual #43                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      65: ldc           #47                 // String ; locs=
      67: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      70: aload_0
      71: getfield      #13                 // Field locs:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      74: invokestatic  #48                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      77: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      80: ldc           #49                 // String }
      82: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: invokevirtual #50                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: areturn

  public boolean isStriped();
    Code:
       0: iconst_0
       1: ireturn

  public org.apache.hadoop.hdfs.protocol.BlockType getBlockType();
    Code:
       0: getstatic     #51                 // Field org/apache/hadoop/hdfs/protocol/BlockType.CONTIGUOUS:Lorg/apache/hadoop/hdfs/protocol/BlockType;
       3: areturn

  static {};
    Code:
       0: new           #52                 // class org/apache/hadoop/hdfs/protocol/LocatedBlock$ProvidedLastComparator
       3: dup
       4: aconst_null
       5: invokespecial #53                 // Method org/apache/hadoop/hdfs/protocol/LocatedBlock$ProvidedLastComparator."<init>":(Lorg/apache/hadoop/hdfs/protocol/LocatedBlock$1;)V
       8: putstatic     #21                 // Field providedLastComparator:Lorg/apache/hadoop/hdfs/protocol/LocatedBlock$ProvidedLastComparator;
      11: iconst_0
      12: anewarray     #17                 // class org/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage
      15: putstatic     #4                  // Field EMPTY_LOCS:[Lorg/apache/hadoop/hdfs/protocol/DatanodeInfoWithStorage;
      18: return
}
