Compiled from "DistributedFileSystem.java"
class org.apache.hadoop.hdfs.DistributedFileSystem$4 extends org.apache.hadoop.fs.FileSystemLinkResolver<org.apache.hadoop.fs.FSDataInputStream> {
  final int val$bufferSize;

  final org.apache.hadoop.hdfs.DistributedFileSystem this$0;

  org.apache.hadoop.hdfs.DistributedFileSystem$4(org.apache.hadoop.hdfs.DistributedFileSystem, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field val$bufferSize:I
      10: aload_0
      11: invokespecial #3                  // Method org/apache/hadoop/fs/FileSystemLinkResolver."<init>":()V
      14: return

  public org.apache.hadoop.fs.FSDataInputStream doCall(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
       4: getfield      #4                  // Field org/apache/hadoop/hdfs/DistributedFileSystem.dfs:Lorg/apache/hadoop/hdfs/DFSClient;
       7: aload_0
       8: getfield      #1                  // Field this$0:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
      11: aload_1
      12: invokevirtual #5                  // Method org/apache/hadoop/hdfs/DistributedFileSystem.getPathName:(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
      15: aload_0
      16: getfield      #2                  // Field val$bufferSize:I
      19: aload_0
      20: getfield      #1                  // Field this$0:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
      23: invokestatic  #6                  // Method org/apache/hadoop/hdfs/DistributedFileSystem.access$000:(Lorg/apache/hadoop/hdfs/DistributedFileSystem;)Z
      26: invokevirtual #7                  // Method org/apache/hadoop/hdfs/DFSClient.open:(Ljava/lang/String;IZ)Lorg/apache/hadoop/hdfs/DFSInputStream;
      29: astore_2
      30: aload_0
      31: getfield      #1                  // Field this$0:Lorg/apache/hadoop/hdfs/DistributedFileSystem;
      34: getfield      #4                  // Field org/apache/hadoop/hdfs/DistributedFileSystem.dfs:Lorg/apache/hadoop/hdfs/DFSClient;
      37: aload_2
      38: invokevirtual #8                  // Method org/apache/hadoop/hdfs/DFSClient.createWrappedInputStream:(Lorg/apache/hadoop/hdfs/DFSInputStream;)Lorg/apache/hadoop/hdfs/client/HdfsDataInputStream;
      41: areturn

  public org.apache.hadoop.fs.FSDataInputStream next(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_2
       2: aload_0
       3: getfield      #2                  // Field val$bufferSize:I
       6: invokevirtual #9                  // Method org/apache/hadoop/fs/FileSystem.open:(Lorg/apache/hadoop/fs/Path;I)Lorg/apache/hadoop/fs/FSDataInputStream;
       9: areturn

  public java.lang.Object next(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #10                 // Method next:(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataInputStream;
       6: areturn

  public java.lang.Object doCall(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method doCall:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataInputStream;
       5: areturn
}
