Compiled from "ZoneTransferIn.java"
public class org.xbill.DNS.ZoneTransferIn {
  private static final int INITIALSOA;

  private static final int FIRSTDATA;

  private static final int IXFR_DELSOA;

  private static final int IXFR_DEL;

  private static final int IXFR_ADDSOA;

  private static final int IXFR_ADD;

  private static final int AXFR;

  private static final int END;

  private org.xbill.DNS.Name zname;

  private int qtype;

  private int dclass;

  private long ixfr_serial;

  private boolean want_fallback;

  private org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler handler;

  private java.net.SocketAddress localAddress;

  private java.net.SocketAddress address;

  private org.xbill.DNS.TCPClient client;

  private org.xbill.DNS.TSIG tsig;

  private org.xbill.DNS.TSIG$StreamVerifier verifier;

  private long timeout;

  private int state;

  private long end_serial;

  private long current_serial;

  private org.xbill.DNS.Record initialsoa;

  private int rtype;

  private org.xbill.DNS.ZoneTransferIn();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 900000l
       8: putfield      #5                  // Field timeout:J
      11: return

  private org.xbill.DNS.ZoneTransferIn(org.xbill.DNS.Name, int, long, boolean, java.net.SocketAddress, org.xbill.DNS.TSIG);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: ldc2_w        #3                  // long 900000l
       8: putfield      #5                  // Field timeout:J
      11: aload_0
      12: aload         6
      14: putfield      #6                  // Field address:Ljava/net/SocketAddress;
      17: aload_0
      18: aload         7
      20: putfield      #7                  // Field tsig:Lorg/xbill/DNS/TSIG;
      23: aload_1
      24: invokevirtual #8                  // Method org/xbill/DNS/Name.isAbsolute:()Z
      27: ifeq          38
      30: aload_0
      31: aload_1
      32: putfield      #9                  // Field zname:Lorg/xbill/DNS/Name;
      35: goto          64
      38: aload_0
      39: aload_1
      40: getstatic     #10                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
      43: invokestatic  #11                 // Method org/xbill/DNS/Name.concatenate:(Lorg/xbill/DNS/Name;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
      46: putfield      #9                  // Field zname:Lorg/xbill/DNS/Name;
      49: goto          64
      52: astore        8
      54: new           #13                 // class java/lang/IllegalArgumentException
      57: dup
      58: ldc           #14                 // String ZoneTransferIn: name too long
      60: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      63: athrow
      64: aload_0
      65: iload_2
      66: putfield      #16                 // Field qtype:I
      69: aload_0
      70: iconst_1
      71: putfield      #17                 // Field dclass:I
      74: aload_0
      75: lload_3
      76: putfield      #18                 // Field ixfr_serial:J
      79: aload_0
      80: iload         5
      82: putfield      #19                 // Field want_fallback:Z
      85: aload_0
      86: iconst_0
      87: putfield      #20                 // Field state:I
      90: return
    Exception table:
       from    to  target type
          38    49    52   Class org/xbill/DNS/NameTooLongException

  public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name, java.net.SocketAddress, org.xbill.DNS.TSIG);
    Code:
       0: new           #21                 // class org/xbill/DNS/ZoneTransferIn
       3: dup
       4: aload_0
       5: sipush        252
       8: lconst_0
       9: iconst_0
      10: aload_1
      11: aload_2
      12: invokespecial #22                 // Method "<init>":(Lorg/xbill/DNS/Name;IJZLjava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)V
      15: areturn

  public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name, java.lang.String, int, org.xbill.DNS.TSIG) throws java.net.UnknownHostException;
    Code:
       0: iload_2
       1: ifne          7
       4: bipush        53
       6: istore_2
       7: aload_0
       8: new           #23                 // class java/net/InetSocketAddress
      11: dup
      12: aload_1
      13: iload_2
      14: invokespecial #24                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
      17: aload_3
      18: invokestatic  #25                 // Method newAXFR:(Lorg/xbill/DNS/Name;Ljava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
      21: areturn

  public static org.xbill.DNS.ZoneTransferIn newAXFR(org.xbill.DNS.Name, java.lang.String, org.xbill.DNS.TSIG) throws java.net.UnknownHostException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_2
       4: invokestatic  #26                 // Method newAXFR:(Lorg/xbill/DNS/Name;Ljava/lang/String;ILorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
       7: areturn

  public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name, long, boolean, java.net.SocketAddress, org.xbill.DNS.TSIG);
    Code:
       0: new           #21                 // class org/xbill/DNS/ZoneTransferIn
       3: dup
       4: aload_0
       5: sipush        251
       8: lload_1
       9: iload_3
      10: aload         4
      12: aload         5
      14: invokespecial #22                 // Method "<init>":(Lorg/xbill/DNS/Name;IJZLjava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)V
      17: areturn

  public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name, long, boolean, java.lang.String, int, org.xbill.DNS.TSIG) throws java.net.UnknownHostException;
    Code:
       0: iload         5
       2: ifne          9
       5: bipush        53
       7: istore        5
       9: aload_0
      10: lload_1
      11: iload_3
      12: new           #23                 // class java/net/InetSocketAddress
      15: dup
      16: aload         4
      18: iload         5
      20: invokespecial #24                 // Method java/net/InetSocketAddress."<init>":(Ljava/lang/String;I)V
      23: aload         6
      25: invokestatic  #27                 // Method newIXFR:(Lorg/xbill/DNS/Name;JZLjava/net/SocketAddress;Lorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
      28: areturn

  public static org.xbill.DNS.ZoneTransferIn newIXFR(org.xbill.DNS.Name, long, boolean, java.lang.String, org.xbill.DNS.TSIG) throws java.net.UnknownHostException;
    Code:
       0: aload_0
       1: lload_1
       2: iload_3
       3: aload         4
       5: iconst_0
       6: aload         5
       8: invokestatic  #28                 // Method newIXFR:(Lorg/xbill/DNS/Name;JZLjava/lang/String;ILorg/xbill/DNS/TSIG;)Lorg/xbill/DNS/ZoneTransferIn;
      11: areturn

  public org.xbill.DNS.Name getName();
    Code:
       0: aload_0
       1: getfield      #9                  // Field zname:Lorg/xbill/DNS/Name;
       4: areturn

  public int getType();
    Code:
       0: aload_0
       1: getfield      #16                 // Field qtype:I
       4: ireturn

  public void setTimeout(int);
    Code:
       0: iload_1
       1: ifge          14
       4: new           #13                 // class java/lang/IllegalArgumentException
       7: dup
       8: ldc           #29                 // String timeout cannot be negative
      10: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: ldc2_w        #30                 // long 1000l
      18: iload_1
      19: i2l
      20: lmul
      21: putfield      #5                  // Field timeout:J
      24: return

  public void setDClass(int);
    Code:
       0: iload_1
       1: invokestatic  #32                 // Method org/xbill/DNS/DClass.check:(I)V
       4: aload_0
       5: iload_1
       6: putfield      #17                 // Field dclass:I
       9: return

  public void setLocalAddress(java.net.SocketAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #33                 // Field localAddress:Ljava/net/SocketAddress;
       5: return

  private void openConnection() throws java.io.IOException;
    Code:
       0: invokestatic  #34                 // Method java/lang/System.currentTimeMillis:()J
       3: aload_0
       4: getfield      #5                  // Field timeout:J
       7: ladd
       8: lstore_1
       9: aload_0
      10: new           #35                 // class org/xbill/DNS/TCPClient
      13: dup
      14: lload_1
      15: invokespecial #36                 // Method org/xbill/DNS/TCPClient."<init>":(J)V
      18: putfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
      21: aload_0
      22: getfield      #33                 // Field localAddress:Ljava/net/SocketAddress;
      25: ifnull        39
      28: aload_0
      29: getfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
      32: aload_0
      33: getfield      #33                 // Field localAddress:Ljava/net/SocketAddress;
      36: invokevirtual #38                 // Method org/xbill/DNS/TCPClient.bind:(Ljava/net/SocketAddress;)V
      39: aload_0
      40: getfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
      43: aload_0
      44: getfield      #6                  // Field address:Ljava/net/SocketAddress;
      47: invokevirtual #39                 // Method org/xbill/DNS/TCPClient.connect:(Ljava/net/SocketAddress;)V
      50: return

  private void sendQuery() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field zname:Lorg/xbill/DNS/Name;
       4: aload_0
       5: getfield      #16                 // Field qtype:I
       8: aload_0
       9: getfield      #17                 // Field dclass:I
      12: invokestatic  #40                 // Method org/xbill/DNS/Record.newRecord:(Lorg/xbill/DNS/Name;II)Lorg/xbill/DNS/Record;
      15: astore_1
      16: new           #41                 // class org/xbill/DNS/Message
      19: dup
      20: invokespecial #42                 // Method org/xbill/DNS/Message."<init>":()V
      23: astore_2
      24: aload_2
      25: invokevirtual #43                 // Method org/xbill/DNS/Message.getHeader:()Lorg/xbill/DNS/Header;
      28: iconst_0
      29: invokevirtual #44                 // Method org/xbill/DNS/Header.setOpcode:(I)V
      32: aload_2
      33: aload_1
      34: iconst_0
      35: invokevirtual #45                 // Method org/xbill/DNS/Message.addRecord:(Lorg/xbill/DNS/Record;I)V
      38: aload_0
      39: getfield      #16                 // Field qtype:I
      42: sipush        251
      45: if_icmpne     85
      48: new           #46                 // class org/xbill/DNS/SOARecord
      51: dup
      52: aload_0
      53: getfield      #9                  // Field zname:Lorg/xbill/DNS/Name;
      56: aload_0
      57: getfield      #17                 // Field dclass:I
      60: lconst_0
      61: getstatic     #10                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
      64: getstatic     #10                 // Field org/xbill/DNS/Name.root:Lorg/xbill/DNS/Name;
      67: aload_0
      68: getfield      #18                 // Field ixfr_serial:J
      71: lconst_0
      72: lconst_0
      73: lconst_0
      74: lconst_0
      75: invokespecial #47                 // Method org/xbill/DNS/SOARecord."<init>":(Lorg/xbill/DNS/Name;IJLorg/xbill/DNS/Name;Lorg/xbill/DNS/Name;JJJJJ)V
      78: astore_3
      79: aload_2
      80: aload_3
      81: iconst_2
      82: invokevirtual #45                 // Method org/xbill/DNS/Message.addRecord:(Lorg/xbill/DNS/Record;I)V
      85: aload_0
      86: getfield      #7                  // Field tsig:Lorg/xbill/DNS/TSIG;
      89: ifnull        120
      92: aload_0
      93: getfield      #7                  // Field tsig:Lorg/xbill/DNS/TSIG;
      96: aload_2
      97: aconst_null
      98: invokevirtual #48                 // Method org/xbill/DNS/TSIG.apply:(Lorg/xbill/DNS/Message;Lorg/xbill/DNS/TSIGRecord;)V
     101: aload_0
     102: new           #49                 // class org/xbill/DNS/TSIG$StreamVerifier
     105: dup
     106: aload_0
     107: getfield      #7                  // Field tsig:Lorg/xbill/DNS/TSIG;
     110: aload_2
     111: invokevirtual #50                 // Method org/xbill/DNS/Message.getTSIG:()Lorg/xbill/DNS/TSIGRecord;
     114: invokespecial #51                 // Method org/xbill/DNS/TSIG$StreamVerifier."<init>":(Lorg/xbill/DNS/TSIG;Lorg/xbill/DNS/TSIGRecord;)V
     117: putfield      #52                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
     120: aload_2
     121: ldc           #53                 // int 65535
     123: invokevirtual #54                 // Method org/xbill/DNS/Message.toWire:(I)[B
     126: astore_3
     127: aload_0
     128: getfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
     131: aload_3
     132: invokevirtual #55                 // Method org/xbill/DNS/TCPClient.send:([B)V
     135: return

  private static long getSOASerial(org.xbill.DNS.Record);
    Code:
       0: aload_0
       1: checkcast     #46                 // class org/xbill/DNS/SOARecord
       4: astore_1
       5: aload_1
       6: invokevirtual #56                 // Method org/xbill/DNS/SOARecord.getSerial:()J
       9: lreturn

  private void logxfr(java.lang.String);
    Code:
       0: ldc           #57                 // String verbose
       2: invokestatic  #58                 // Method org/xbill/DNS/Options.check:(Ljava/lang/String;)Z
       5: ifeq          40
       8: getstatic     #59                 // Field java/lang/System.out:Ljava/io/PrintStream;
      11: new           #60                 // class java/lang/StringBuffer
      14: dup
      15: invokespecial #61                 // Method java/lang/StringBuffer."<init>":()V
      18: aload_0
      19: getfield      #9                  // Field zname:Lorg/xbill/DNS/Name;
      22: invokevirtual #62                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
      25: ldc           #63                 // String :
      27: invokevirtual #64                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      30: aload_1
      31: invokevirtual #64                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      34: invokevirtual #65                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      37: invokevirtual #66                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      40: return

  private void fail(java.lang.String) throws org.xbill.DNS.ZoneTransferException;
    Code:
       0: new           #67                 // class org/xbill/DNS/ZoneTransferException
       3: dup
       4: aload_1
       5: invokespecial #68                 // Method org/xbill/DNS/ZoneTransferException."<init>":(Ljava/lang/String;)V
       8: athrow

  private void fallback() throws org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_0
       1: getfield      #19                 // Field want_fallback:Z
       4: ifne          13
       7: aload_0
       8: ldc           #69                 // String server doesn\'t support IXFR
      10: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
      13: aload_0
      14: ldc           #71                 // String falling back to AXFR
      16: invokespecial #72                 // Method logxfr:(Ljava/lang/String;)V
      19: aload_0
      20: sipush        252
      23: putfield      #16                 // Field qtype:I
      26: aload_0
      27: iconst_0
      28: putfield      #20                 // Field state:I
      31: return

  private void parseRR(org.xbill.DNS.Record) throws org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_1
       1: invokevirtual #73                 // Method org/xbill/DNS/Record.getType:()I
       4: istore_2
       5: aload_0
       6: getfield      #20                 // Field state:I
       9: tableswitch   { // 0 to 7
                     0: 56
                     1: 128
                     2: 233
                     3: 251
                     4: 289
                     5: 307
                     6: 411
                     7: 455
               default: 464
          }
      56: iload_2
      57: bipush        6
      59: if_icmpeq     68
      62: aload_0
      63: ldc           #74                 // String missing initial SOA
      65: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
      68: aload_0
      69: aload_1
      70: putfield      #75                 // Field initialsoa:Lorg/xbill/DNS/Record;
      73: aload_0
      74: aload_1
      75: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
      78: putfield      #76                 // Field end_serial:J
      81: aload_0
      82: getfield      #16                 // Field qtype:I
      85: sipush        251
      88: if_icmpne     120
      91: aload_0
      92: getfield      #76                 // Field end_serial:J
      95: aload_0
      96: getfield      #18                 // Field ixfr_serial:J
      99: invokestatic  #77                 // Method org/xbill/DNS/Serial.compare:(JJ)I
     102: ifgt          120
     105: aload_0
     106: ldc           #78                 // String up to date
     108: invokespecial #72                 // Method logxfr:(Ljava/lang/String;)V
     111: aload_0
     112: bipush        7
     114: putfield      #20                 // Field state:I
     117: goto          470
     120: aload_0
     121: iconst_1
     122: putfield      #20                 // Field state:I
     125: goto          470
     128: aload_0
     129: getfield      #16                 // Field qtype:I
     132: sipush        251
     135: if_icmpne     186
     138: iload_2
     139: bipush        6
     141: if_icmpne     186
     144: aload_1
     145: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
     148: aload_0
     149: getfield      #18                 // Field ixfr_serial:J
     152: lcmp
     153: ifne          186
     156: aload_0
     157: sipush        251
     160: putfield      #79                 // Field rtype:I
     163: aload_0
     164: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     167: invokeinterface #81,  1           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startIXFR:()V
     172: aload_0
     173: ldc           #82                 // String got incremental response
     175: invokespecial #72                 // Method logxfr:(Ljava/lang/String;)V
     178: aload_0
     179: iconst_2
     180: putfield      #20                 // Field state:I
     183: goto          227
     186: aload_0
     187: sipush        252
     190: putfield      #79                 // Field rtype:I
     193: aload_0
     194: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     197: invokeinterface #83,  1           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startAXFR:()V
     202: aload_0
     203: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     206: aload_0
     207: getfield      #75                 // Field initialsoa:Lorg/xbill/DNS/Record;
     210: invokeinterface #84,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     215: aload_0
     216: ldc           #85                 // String got nonincremental response
     218: invokespecial #72                 // Method logxfr:(Ljava/lang/String;)V
     221: aload_0
     222: bipush        6
     224: putfield      #20                 // Field state:I
     227: aload_0
     228: aload_1
     229: invokespecial #86                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     232: return
     233: aload_0
     234: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     237: aload_1
     238: invokeinterface #87,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startIXFRDeletes:(Lorg/xbill/DNS/Record;)V
     243: aload_0
     244: iconst_3
     245: putfield      #20                 // Field state:I
     248: goto          470
     251: iload_2
     252: bipush        6
     254: if_icmpne     276
     257: aload_0
     258: aload_1
     259: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
     262: putfield      #88                 // Field current_serial:J
     265: aload_0
     266: iconst_4
     267: putfield      #20                 // Field state:I
     270: aload_0
     271: aload_1
     272: invokespecial #86                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     275: return
     276: aload_0
     277: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     280: aload_1
     281: invokeinterface #84,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     286: goto          470
     289: aload_0
     290: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     293: aload_1
     294: invokeinterface #89,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.startIXFRAdds:(Lorg/xbill/DNS/Record;)V
     299: aload_0
     300: iconst_5
     301: putfield      #20                 // Field state:I
     304: goto          470
     307: iload_2
     308: bipush        6
     310: if_icmpne     398
     313: aload_1
     314: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
     317: lstore        4
     319: lload         4
     321: aload_0
     322: getfield      #76                 // Field end_serial:J
     325: lcmp
     326: ifne          338
     329: aload_0
     330: bipush        7
     332: putfield      #20                 // Field state:I
     335: goto          470
     338: lload         4
     340: aload_0
     341: getfield      #88                 // Field current_serial:J
     344: lcmp
     345: ifeq          387
     348: aload_0
     349: new           #60                 // class java/lang/StringBuffer
     352: dup
     353: invokespecial #61                 // Method java/lang/StringBuffer."<init>":()V
     356: ldc           #90                 // String IXFR out of sync: expected serial
     358: invokevirtual #64                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     361: aload_0
     362: getfield      #88                 // Field current_serial:J
     365: invokevirtual #91                 // Method java/lang/StringBuffer.append:(J)Ljava/lang/StringBuffer;
     368: ldc           #92                 // String  , got
     370: invokevirtual #64                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
     373: lload         4
     375: invokevirtual #91                 // Method java/lang/StringBuffer.append:(J)Ljava/lang/StringBuffer;
     378: invokevirtual #65                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
     381: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
     384: goto          398
     387: aload_0
     388: iconst_2
     389: putfield      #20                 // Field state:I
     392: aload_0
     393: aload_1
     394: invokespecial #86                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     397: return
     398: aload_0
     399: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     402: aload_1
     403: invokeinterface #84,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     408: goto          470
     411: iload_2
     412: iconst_1
     413: if_icmpne     430
     416: aload_1
     417: invokevirtual #93                 // Method org/xbill/DNS/Record.getDClass:()I
     420: aload_0
     421: getfield      #17                 // Field dclass:I
     424: if_icmpeq     430
     427: goto          470
     430: aload_0
     431: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
     434: aload_1
     435: invokeinterface #84,  2           // InterfaceMethod org/xbill/DNS/ZoneTransferIn$ZoneTransferHandler.handleRecord:(Lorg/xbill/DNS/Record;)V
     440: iload_2
     441: bipush        6
     443: if_icmpne     470
     446: aload_0
     447: bipush        7
     449: putfield      #20                 // Field state:I
     452: goto          470
     455: aload_0
     456: ldc           #94                 // String extra data
     458: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
     461: goto          470
     464: aload_0
     465: ldc           #95                 // String invalid state
     467: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
     470: return

  private void closeConnection();
    Code:
       0: aload_0
       1: getfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
       4: ifnull        14
       7: aload_0
       8: getfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
      11: invokevirtual #96                 // Method org/xbill/DNS/TCPClient.cleanup:()V
      14: goto          18
      17: astore_1
      18: return
    Exception table:
       from    to  target type
           0    14    17   Class java/io/IOException

  private org.xbill.DNS.Message parseMessage(byte[]) throws org.xbill.DNS.WireParseException;
    Code:
       0: new           #41                 // class org/xbill/DNS/Message
       3: dup
       4: aload_1
       5: invokespecial #98                 // Method org/xbill/DNS/Message."<init>":([B)V
       8: areturn
       9: astore_2
      10: aload_2
      11: instanceof    #99                 // class org/xbill/DNS/WireParseException
      14: ifeq          22
      17: aload_2
      18: checkcast     #99                 // class org/xbill/DNS/WireParseException
      21: athrow
      22: new           #99                 // class org/xbill/DNS/WireParseException
      25: dup
      26: ldc           #100                // String Error parsing message
      28: invokespecial #101                // Method org/xbill/DNS/WireParseException."<init>":(Ljava/lang/String;)V
      31: athrow
    Exception table:
       from    to  target type
           0     8     9   Class java/io/IOException

  private void doxfr() throws java.io.IOException, org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_0
       1: invokespecial #102                // Method sendQuery:()V
       4: aload_0
       5: getfield      #20                 // Field state:I
       8: bipush        7
      10: if_icmpeq     238
      13: aload_0
      14: getfield      #37                 // Field client:Lorg/xbill/DNS/TCPClient;
      17: invokevirtual #103                // Method org/xbill/DNS/TCPClient.recv:()[B
      20: astore_1
      21: aload_0
      22: aload_1
      23: invokespecial #104                // Method parseMessage:([B)Lorg/xbill/DNS/Message;
      26: astore_2
      27: aload_2
      28: invokevirtual #43                 // Method org/xbill/DNS/Message.getHeader:()Lorg/xbill/DNS/Header;
      31: invokevirtual #105                // Method org/xbill/DNS/Header.getRcode:()I
      34: ifne          71
      37: aload_0
      38: getfield      #52                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
      41: ifnull        71
      44: aload_2
      45: invokevirtual #50                 // Method org/xbill/DNS/Message.getTSIG:()Lorg/xbill/DNS/TSIGRecord;
      48: astore_3
      49: aload_0
      50: getfield      #52                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
      53: aload_2
      54: aload_1
      55: invokevirtual #106                // Method org/xbill/DNS/TSIG$StreamVerifier.verify:(Lorg/xbill/DNS/Message;[B)I
      58: istore        4
      60: iload         4
      62: ifeq          71
      65: aload_0
      66: ldc           #107                // String TSIG failure
      68: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
      71: aload_2
      72: iconst_1
      73: invokevirtual #108                // Method org/xbill/DNS/Message.getSectionArray:(I)[Lorg/xbill/DNS/Record;
      76: astore_3
      77: aload_0
      78: getfield      #20                 // Field state:I
      81: ifne          182
      84: aload_2
      85: invokevirtual #109                // Method org/xbill/DNS/Message.getRcode:()I
      88: istore        4
      90: iload         4
      92: ifeq          129
      95: aload_0
      96: getfield      #16                 // Field qtype:I
      99: sipush        251
     102: if_icmpne     120
     105: iload         4
     107: iconst_4
     108: if_icmpne     120
     111: aload_0
     112: invokespecial #110                // Method fallback:()V
     115: aload_0
     116: invokespecial #111                // Method doxfr:()V
     119: return
     120: aload_0
     121: iload         4
     123: invokestatic  #112                // Method org/xbill/DNS/Rcode.string:(I)Ljava/lang/String;
     126: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
     129: aload_2
     130: invokevirtual #113                // Method org/xbill/DNS/Message.getQuestion:()Lorg/xbill/DNS/Record;
     133: astore        5
     135: aload         5
     137: ifnull        158
     140: aload         5
     142: invokevirtual #73                 // Method org/xbill/DNS/Record.getType:()I
     145: aload_0
     146: getfield      #16                 // Field qtype:I
     149: if_icmpeq     158
     152: aload_0
     153: ldc           #114                // String invalid question section
     155: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
     158: aload_3
     159: arraylength
     160: ifne          182
     163: aload_0
     164: getfield      #16                 // Field qtype:I
     167: sipush        251
     170: if_icmpne     182
     173: aload_0
     174: invokespecial #110                // Method fallback:()V
     177: aload_0
     178: invokespecial #111                // Method doxfr:()V
     181: return
     182: iconst_0
     183: istore        4
     185: iload         4
     187: aload_3
     188: arraylength
     189: if_icmpge     206
     192: aload_0
     193: aload_3
     194: iload         4
     196: aaload
     197: invokespecial #86                 // Method parseRR:(Lorg/xbill/DNS/Record;)V
     200: iinc          4, 1
     203: goto          185
     206: aload_0
     207: getfield      #20                 // Field state:I
     210: bipush        7
     212: if_icmpne     235
     215: aload_0
     216: getfield      #52                 // Field verifier:Lorg/xbill/DNS/TSIG$StreamVerifier;
     219: ifnull        235
     222: aload_2
     223: invokevirtual #115                // Method org/xbill/DNS/Message.isVerified:()Z
     226: ifne          235
     229: aload_0
     230: ldc           #116                // String last message must be signed
     232: invokespecial #70                 // Method fail:(Ljava/lang/String;)V
     235: goto          4
     238: return

  public void run(org.xbill.DNS.ZoneTransferIn$ZoneTransferHandler) throws java.io.IOException, org.xbill.DNS.ZoneTransferException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
       5: aload_0
       6: invokespecial #117                // Method openConnection:()V
       9: aload_0
      10: invokespecial #111                // Method doxfr:()V
      13: aload_0
      14: invokespecial #118                // Method closeConnection:()V
      17: goto          27
      20: astore_2
      21: aload_0
      22: invokespecial #118                // Method closeConnection:()V
      25: aload_2
      26: athrow
      27: return
    Exception table:
       from    to  target type
           5    13    20   any
          20    21    20   any

  public java.util.List run() throws java.io.IOException, org.xbill.DNS.ZoneTransferException;
    Code:
       0: new           #119                // class org/xbill/DNS/ZoneTransferIn$BasicHandler
       3: dup
       4: aconst_null
       5: invokespecial #120                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler."<init>":(Lorg/xbill/DNS/ZoneTransferIn$1;)V
       8: astore_1
       9: aload_0
      10: aload_1
      11: invokevirtual #121                // Method run:(Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;)V
      14: aload_1
      15: invokestatic  #122                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$300:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
      18: ifnull        26
      21: aload_1
      22: invokestatic  #122                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$300:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
      25: areturn
      26: aload_1
      27: invokestatic  #123                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$400:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
      30: areturn

  private org.xbill.DNS.ZoneTransferIn$BasicHandler getBasicHandler() throws java.lang.IllegalArgumentException;
    Code:
       0: aload_0
       1: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
       4: instanceof    #119                // class org/xbill/DNS/ZoneTransferIn$BasicHandler
       7: ifeq          18
      10: aload_0
      11: getfield      #80                 // Field handler:Lorg/xbill/DNS/ZoneTransferIn$ZoneTransferHandler;
      14: checkcast     #119                // class org/xbill/DNS/ZoneTransferIn$BasicHandler
      17: areturn
      18: new           #13                 // class java/lang/IllegalArgumentException
      21: dup
      22: ldc           #124                // String ZoneTransferIn used callback interface
      24: invokespecial #15                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      27: athrow

  public boolean isAXFR();
    Code:
       0: aload_0
       1: getfield      #79                 // Field rtype:I
       4: sipush        252
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public java.util.List getAXFR();
    Code:
       0: aload_0
       1: invokespecial #125                // Method getBasicHandler:()Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;
       4: astore_1
       5: aload_1
       6: invokestatic  #122                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$300:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
       9: areturn

  public boolean isIXFR();
    Code:
       0: aload_0
       1: getfield      #79                 // Field rtype:I
       4: sipush        251
       7: if_icmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  public java.util.List getIXFR();
    Code:
       0: aload_0
       1: invokespecial #125                // Method getBasicHandler:()Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;
       4: astore_1
       5: aload_1
       6: invokestatic  #123                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$400:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
       9: areturn

  public boolean isCurrent();
    Code:
       0: aload_0
       1: invokespecial #125                // Method getBasicHandler:()Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;
       4: astore_1
       5: aload_1
       6: invokestatic  #122                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$300:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
       9: ifnonnull     23
      12: aload_1
      13: invokestatic  #123                // Method org/xbill/DNS/ZoneTransferIn$BasicHandler.access$400:(Lorg/xbill/DNS/ZoneTransferIn$BasicHandler;)Ljava/util/List;
      16: ifnonnull     23
      19: iconst_1
      20: goto          24
      23: iconst_0
      24: ireturn

  static long access$100(org.xbill.DNS.Record);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method getSOASerial:(Lorg/xbill/DNS/Record;)J
       4: lreturn
}
