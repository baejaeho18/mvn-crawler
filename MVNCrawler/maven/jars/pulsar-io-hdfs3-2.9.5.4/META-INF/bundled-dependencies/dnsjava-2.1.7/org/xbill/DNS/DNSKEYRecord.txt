Compiled from "DNSKEYRecord.java"
public class org.xbill.DNS.DNSKEYRecord extends org.xbill.DNS.KEYBase {
  private static final long serialVersionUID;

  org.xbill.DNS.DNSKEYRecord();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/xbill/DNS/KEYBase."<init>":()V
       4: return

  org.xbill.DNS.Record getObject();
    Code:
       0: new           #2                  // class org/xbill/DNS/DNSKEYRecord
       3: dup
       4: invokespecial #3                  // Method "<init>":()V
       7: areturn

  public org.xbill.DNS.DNSKEYRecord(org.xbill.DNS.Name, int, long, int, int, int, byte[]);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        48
       4: iload_2
       5: lload_3
       6: iload         5
       8: iload         6
      10: iload         7
      12: aload         8
      14: invokespecial #4                  // Method org/xbill/DNS/KEYBase."<init>":(Lorg/xbill/DNS/Name;IIJIII[B)V
      17: return

  public org.xbill.DNS.DNSKEYRecord(org.xbill.DNS.Name, int, long, int, int, int, java.security.PublicKey) throws org.xbill.DNS.DNSSEC$DNSSECException;
    Code:
       0: aload_0
       1: aload_1
       2: bipush        48
       4: iload_2
       5: lload_3
       6: iload         5
       8: iload         6
      10: iload         7
      12: aload         8
      14: iload         7
      16: invokestatic  #5                  // Method org/xbill/DNS/DNSSEC.fromPublicKey:(Ljava/security/PublicKey;I)[B
      19: invokespecial #4                  // Method org/xbill/DNS/KEYBase."<init>":(Lorg/xbill/DNS/Name;IIJIII[B)V
      22: aload_0
      23: aload         8
      25: putfield      #6                  // Field publicKey:Ljava/security/PublicKey;
      28: return

  void rdataFromString(org.xbill.DNS.Tokenizer, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #7                  // Method org/xbill/DNS/Tokenizer.getUInt16:()I
       5: putfield      #8                  // Field flags:I
       8: aload_0
       9: aload_1
      10: invokevirtual #9                  // Method org/xbill/DNS/Tokenizer.getUInt8:()I
      13: putfield      #10                 // Field proto:I
      16: aload_1
      17: invokevirtual #11                 // Method org/xbill/DNS/Tokenizer.getString:()Ljava/lang/String;
      20: astore_3
      21: aload_0
      22: aload_3
      23: invokestatic  #12                 // Method org/xbill/DNS/DNSSEC$Algorithm.value:(Ljava/lang/String;)I
      26: putfield      #13                 // Field alg:I
      29: aload_0
      30: getfield      #13                 // Field alg:I
      33: ifge          60
      36: aload_1
      37: new           #14                 // class java/lang/StringBuffer
      40: dup
      41: invokespecial #15                 // Method java/lang/StringBuffer."<init>":()V
      44: ldc           #16                 // String Invalid algorithm:
      46: invokevirtual #17                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      49: aload_3
      50: invokevirtual #17                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      53: invokevirtual #18                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      56: invokevirtual #19                 // Method org/xbill/DNS/Tokenizer.exception:(Ljava/lang/String;)Lorg/xbill/DNS/TextParseException;
      59: athrow
      60: aload_0
      61: aload_1
      62: invokevirtual #20                 // Method org/xbill/DNS/Tokenizer.getBase64:()[B
      65: putfield      #21                 // Field key:[B
      68: return
}
