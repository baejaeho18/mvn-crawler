Compiled from "NSECRecord.java"
public class org.xbill.DNS.NSECRecord extends org.xbill.DNS.Record {
  private static final long serialVersionUID;

  private org.xbill.DNS.Name next;

  private org.xbill.DNS.TypeBitmap types;

  org.xbill.DNS.NSECRecord();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/xbill/DNS/Record."<init>":()V
       4: return

  org.xbill.DNS.Record getObject();
    Code:
       0: new           #2                  // class org/xbill/DNS/NSECRecord
       3: dup
       4: invokespecial #3                  // Method "<init>":()V
       7: areturn

  public org.xbill.DNS.NSECRecord(org.xbill.DNS.Name, int, long, org.xbill.DNS.Name, int[]);
    Code:
       0: aload_0
       1: aload_1
       2: bipush        47
       4: iload_2
       5: lload_3
       6: invokespecial #4                  // Method org/xbill/DNS/Record."<init>":(Lorg/xbill/DNS/Name;IIJ)V
       9: aload_0
      10: ldc           #5                  // String next
      12: aload         5
      14: invokestatic  #6                  // Method checkName:(Ljava/lang/String;Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
      17: putfield      #7                  // Field next:Lorg/xbill/DNS/Name;
      20: iconst_0
      21: istore        7
      23: iload         7
      25: aload         6
      27: arraylength
      28: if_icmpge     45
      31: aload         6
      33: iload         7
      35: iaload
      36: invokestatic  #8                  // Method org/xbill/DNS/Type.check:(I)V
      39: iinc          7, 1
      42: goto          23
      45: aload_0
      46: new           #9                  // class org/xbill/DNS/TypeBitmap
      49: dup
      50: aload         6
      52: invokespecial #10                 // Method org/xbill/DNS/TypeBitmap."<init>":([I)V
      55: putfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      58: return

  void rrFromWire(org.xbill.DNS.DNSInput) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #12                 // class org/xbill/DNS/Name
       4: dup
       5: aload_1
       6: invokespecial #13                 // Method org/xbill/DNS/Name."<init>":(Lorg/xbill/DNS/DNSInput;)V
       9: putfield      #7                  // Field next:Lorg/xbill/DNS/Name;
      12: aload_0
      13: new           #9                  // class org/xbill/DNS/TypeBitmap
      16: dup
      17: aload_1
      18: invokespecial #14                 // Method org/xbill/DNS/TypeBitmap."<init>":(Lorg/xbill/DNS/DNSInput;)V
      21: putfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      24: return

  void rrToWire(org.xbill.DNS.DNSOutput, org.xbill.DNS.Compression, boolean);
    Code:
       0: aload_0
       1: getfield      #7                  // Field next:Lorg/xbill/DNS/Name;
       4: aload_1
       5: aconst_null
       6: iconst_0
       7: invokevirtual #15                 // Method org/xbill/DNS/Name.toWire:(Lorg/xbill/DNS/DNSOutput;Lorg/xbill/DNS/Compression;Z)V
      10: aload_0
      11: getfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      14: aload_1
      15: invokevirtual #16                 // Method org/xbill/DNS/TypeBitmap.toWire:(Lorg/xbill/DNS/DNSOutput;)V
      18: return

  void rdataFromString(org.xbill.DNS.Tokenizer, org.xbill.DNS.Name) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #17                 // Method org/xbill/DNS/Tokenizer.getName:(Lorg/xbill/DNS/Name;)Lorg/xbill/DNS/Name;
       6: putfield      #7                  // Field next:Lorg/xbill/DNS/Name;
       9: aload_0
      10: new           #9                  // class org/xbill/DNS/TypeBitmap
      13: dup
      14: aload_1
      15: invokespecial #18                 // Method org/xbill/DNS/TypeBitmap."<init>":(Lorg/xbill/DNS/Tokenizer;)V
      18: putfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      21: return

  java.lang.String rrToString();
    Code:
       0: new           #19                 // class java/lang/StringBuffer
       3: dup
       4: invokespecial #20                 // Method java/lang/StringBuffer."<init>":()V
       7: astore_1
       8: aload_1
       9: aload_0
      10: getfield      #7                  // Field next:Lorg/xbill/DNS/Name;
      13: invokevirtual #21                 // Method java/lang/StringBuffer.append:(Ljava/lang/Object;)Ljava/lang/StringBuffer;
      16: pop
      17: aload_0
      18: getfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      21: invokevirtual #22                 // Method org/xbill/DNS/TypeBitmap.empty:()Z
      24: ifne          46
      27: aload_1
      28: bipush        32
      30: invokevirtual #23                 // Method java/lang/StringBuffer.append:(C)Ljava/lang/StringBuffer;
      33: pop
      34: aload_1
      35: aload_0
      36: getfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
      39: invokevirtual #24                 // Method org/xbill/DNS/TypeBitmap.toString:()Ljava/lang/String;
      42: invokevirtual #25                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      45: pop
      46: aload_1
      47: invokevirtual #26                 // Method java/lang/StringBuffer.toString:()Ljava/lang/String;
      50: areturn

  public org.xbill.DNS.Name getNext();
    Code:
       0: aload_0
       1: getfield      #7                  // Field next:Lorg/xbill/DNS/Name;
       4: areturn

  public int[] getTypes();
    Code:
       0: aload_0
       1: getfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
       4: invokevirtual #27                 // Method org/xbill/DNS/TypeBitmap.toArray:()[I
       7: areturn

  public boolean hasType(int);
    Code:
       0: aload_0
       1: getfield      #11                 // Field types:Lorg/xbill/DNS/TypeBitmap;
       4: iload_1
       5: invokevirtual #28                 // Method org/xbill/DNS/TypeBitmap.contains:(I)Z
       8: ireturn
}
