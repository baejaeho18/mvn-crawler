Compiled from "AuthContext.java"
public class org.apache.kerby.kerberos.kerb.auth.AuthContext {
  private org.apache.kerby.asn1.type.Asn1Flags flags;

  private org.apache.kerby.kerberos.kerb.type.base.HostAddress remoteAddress;

  private int remotePort;

  private org.apache.kerby.kerberos.kerb.type.base.HostAddress localAddress;

  private int localPort;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionKey key;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionKey sendSubkey;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionKey recvSubkey;

  private int remoteSeqNum;

  private int localSeqNum;

  private java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType> permittedEncTypes;

  private org.apache.kerby.kerberos.kerb.type.base.EncryptionType negotiatedEncType;

  private org.apache.kerby.kerberos.kerb.type.ap.Authenticator authenticator;

  public org.apache.kerby.kerberos.kerb.auth.AuthContext();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public org.apache.kerby.asn1.type.Asn1Flags getFlags();
    Code:
       0: aload_0
       1: getfield      #2                  // Field flags:Lorg/apache/kerby/asn1/type/Asn1Flags;
       4: areturn

  public void setFlags(org.apache.kerby.asn1.type.Asn1Flags);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field flags:Lorg/apache/kerby/asn1/type/Asn1Flags;
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.HostAddress getRemoteAddress();
    Code:
       0: aload_0
       1: getfield      #3                  // Field remoteAddress:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddress;
       4: areturn

  public void setRemoteAddress(org.apache.kerby.kerberos.kerb.type.base.HostAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field remoteAddress:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddress;
       5: return

  public int getRemotePort();
    Code:
       0: aload_0
       1: getfield      #4                  // Field remotePort:I
       4: ireturn

  public void setRemotePort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #4                  // Field remotePort:I
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.HostAddress getLocalAddress();
    Code:
       0: aload_0
       1: getfield      #5                  // Field localAddress:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddress;
       4: areturn

  public void setLocalAddress(org.apache.kerby.kerberos.kerb.type.base.HostAddress);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field localAddress:Lorg/apache/kerby/kerberos/kerb/type/base/HostAddress;
       5: return

  public int getLocalPort();
    Code:
       0: aload_0
       1: getfield      #6                  // Field localPort:I
       4: ireturn

  public void setLocalPort(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field localPort:I
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getKey();
    Code:
       0: aload_0
       1: getfield      #7                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: areturn

  public void setKey(org.apache.kerby.kerberos.kerb.type.base.EncryptionKey);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #7                  // Field key:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getSendSubkey();
    Code:
       0: aload_0
       1: getfield      #8                  // Field sendSubkey:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: areturn

  public void setSendSubkey(org.apache.kerby.kerberos.kerb.type.base.EncryptionKey);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #8                  // Field sendSubkey:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionKey getRecvSubkey();
    Code:
       0: aload_0
       1: getfield      #9                  // Field recvSubkey:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       4: areturn

  public void setRecvSubkey(org.apache.kerby.kerberos.kerb.type.base.EncryptionKey);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #9                  // Field recvSubkey:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionKey;
       5: return

  public int getRemoteSeqNum();
    Code:
       0: aload_0
       1: getfield      #10                 // Field remoteSeqNum:I
       4: ireturn

  public void setRemoteSeqNum(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #10                 // Field remoteSeqNum:I
       5: return

  public int getLocalSeqNum();
    Code:
       0: aload_0
       1: getfield      #11                 // Field localSeqNum:I
       4: ireturn

  public void setLocalSeqNum(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #11                 // Field localSeqNum:I
       5: return

  public java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType> getPermittedEncTypes();
    Code:
       0: aload_0
       1: getfield      #12                 // Field permittedEncTypes:Ljava/util/List;
       4: areturn

  public void setPermittedEncTypes(java.util.List<org.apache.kerby.kerberos.kerb.type.base.EncryptionType>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #12                 // Field permittedEncTypes:Ljava/util/List;
       5: return

  public org.apache.kerby.kerberos.kerb.type.base.EncryptionType getNegotiatedEncType();
    Code:
       0: aload_0
       1: getfield      #13                 // Field negotiatedEncType:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       4: areturn

  public void setNegotiatedEncType(org.apache.kerby.kerberos.kerb.type.base.EncryptionType);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field negotiatedEncType:Lorg/apache/kerby/kerberos/kerb/type/base/EncryptionType;
       5: return

  public org.apache.kerby.kerberos.kerb.type.ap.Authenticator getAuthenticator();
    Code:
       0: aload_0
       1: getfield      #14                 // Field authenticator:Lorg/apache/kerby/kerberos/kerb/type/ap/Authenticator;
       4: areturn

  public void setAuthenticator(org.apache.kerby.kerberos.kerb.type.ap.Authenticator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #14                 // Field authenticator:Lorg/apache/kerby/kerberos/kerb/type/ap/Authenticator;
       5: return
}
