Compiled from "FilterFs.java"
public abstract class org.apache.hadoop.fs.FilterFs extends org.apache.hadoop.fs.AbstractFileSystem {
  private final org.apache.hadoop.fs.AbstractFileSystem myFs;

  protected org.apache.hadoop.fs.AbstractFileSystem getMyFs();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: areturn

  protected org.apache.hadoop.fs.FilterFs(org.apache.hadoop.fs.AbstractFileSystem) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #2                  // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
       5: aload_1
       6: invokevirtual #2                  // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
       9: invokevirtual #3                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      12: iconst_0
      13: aload_1
      14: invokevirtual #4                  // Method org/apache/hadoop/fs/AbstractFileSystem.getUriDefaultPort:()I
      17: invokespecial #5                  // Method org/apache/hadoop/fs/AbstractFileSystem."<init>":(Ljava/net/URI;Ljava/lang/String;ZI)V
      20: aload_0
      21: aload_1
      22: putfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
      25: return

  public org.apache.hadoop.fs.FileSystem$Statistics getStatistics();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #6                  // Method org/apache/hadoop/fs/AbstractFileSystem.getStatistics:()Lorg/apache/hadoop/fs/FileSystem$Statistics;
       7: areturn

  public org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #7                  // Method org/apache/hadoop/fs/AbstractFileSystem.makeQualified:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public org.apache.hadoop.fs.Path getInitialWorkingDirectory();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #8                  // Method org/apache/hadoop/fs/AbstractFileSystem.getInitialWorkingDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  public org.apache.hadoop.fs.Path getHomeDirectory();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #9                  // Method org/apache/hadoop/fs/AbstractFileSystem.getHomeDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  public org.apache.hadoop.fs.FSDataOutputStream createInternal(org.apache.hadoop.fs.Path, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, org.apache.hadoop.fs.permission.FsPermission, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.fs.Options$ChecksumOpt, boolean) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: aload_2
      11: aload_3
      12: iload         4
      14: iload         5
      16: lload         6
      18: aload         8
      20: aload         9
      22: iload         10
      24: invokevirtual #11                 // Method org/apache/hadoop/fs/AbstractFileSystem.createInternal:(Lorg/apache/hadoop/fs/Path;Ljava/util/EnumSet;Lorg/apache/hadoop/fs/permission/FsPermission;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;Z)Lorg/apache/hadoop/fs/FSDataOutputStream;
      27: areturn

  public boolean delete(org.apache.hadoop.fs.Path, boolean) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: iload_2
      11: invokevirtual #12                 // Method org/apache/hadoop/fs/AbstractFileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      14: ireturn

  public org.apache.hadoop.fs.BlockLocation[] getFileBlockLocations(org.apache.hadoop.fs.Path, long, long) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: lload_2
      11: lload         4
      13: invokevirtual #13                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileBlockLocations:(Lorg/apache/hadoop/fs/Path;JJ)[Lorg/apache/hadoop/fs/BlockLocation;
      16: areturn

  public org.apache.hadoop.fs.FileChecksum getFileChecksum(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: invokevirtual #14                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileChecksum:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileChecksum;
      13: areturn

  public org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: invokevirtual #15                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
      13: areturn

  public void msync() throws java.io.IOException, java.lang.UnsupportedOperationException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #16                 // Method org/apache/hadoop/fs/AbstractFileSystem.msync:()V
       7: return

  public void access(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsAction) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: aload_2
      11: invokevirtual #17                 // Method org/apache/hadoop/fs/AbstractFileSystem.access:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsAction;)V
      14: return

  public org.apache.hadoop.fs.FileStatus getFileLinkStatus(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: invokevirtual #18                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileLinkStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
      13: areturn

  public org.apache.hadoop.fs.FsStatus getFsStatus(org.apache.hadoop.fs.Path) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #19                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFsStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsStatus;
       8: areturn

  public org.apache.hadoop.fs.FsStatus getFsStatus() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #20                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFsStatus:()Lorg/apache/hadoop/fs/FsStatus;
       7: areturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #21                 // Method org/apache/hadoop/fs/AbstractFileSystem.getServerDefaults:()Lorg/apache/hadoop/fs/FsServerDefaults;
       7: areturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #22                 // Method org/apache/hadoop/fs/AbstractFileSystem.getServerDefaults:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsServerDefaults;
       8: areturn

  public org.apache.hadoop.fs.Path resolvePath(org.apache.hadoop.fs.Path) throws java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #23                 // Method org/apache/hadoop/fs/AbstractFileSystem.resolvePath:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public int getUriDefaultPort();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #4                  // Method org/apache/hadoop/fs/AbstractFileSystem.getUriDefaultPort:()I
       7: ireturn

  public java.net.URI getUri();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #2                  // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
       7: areturn

  public void checkPath(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #24                 // Method org/apache/hadoop/fs/AbstractFileSystem.checkPath:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public java.lang.String getUriPath(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #25                 // Method org/apache/hadoop/fs/AbstractFileSystem.getUriPath:(Lorg/apache/hadoop/fs/Path;)Ljava/lang/String;
       8: areturn

  public org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: invokevirtual #26                 // Method org/apache/hadoop/fs/AbstractFileSystem.listStatus:(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
      13: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.LocatedFileStatus> listLocatedStatus(org.apache.hadoop.fs.Path) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: invokevirtual #27                 // Method org/apache/hadoop/fs/AbstractFileSystem.listLocatedStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
      13: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.Path> listCorruptFileBlocks(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #28                 // Method org/apache/hadoop/fs/AbstractFileSystem.listCorruptFileBlocks:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: areturn

  public void mkdir(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, boolean) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: aload_2
      11: iload_3
      12: invokevirtual #29                 // Method org/apache/hadoop/fs/AbstractFileSystem.mkdir:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Z)V
      15: return

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: invokevirtual #30                 // Method org/apache/hadoop/fs/AbstractFileSystem.open:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataInputStream;
      13: areturn

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path, int) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: iload_2
      11: invokevirtual #31                 // Method org/apache/hadoop/fs/AbstractFileSystem.open:(Lorg/apache/hadoop/fs/Path;I)Lorg/apache/hadoop/fs/FSDataInputStream;
      14: areturn

  public boolean truncate(org.apache.hadoop.fs.Path, long) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: lload_2
      11: invokevirtual #32                 // Method org/apache/hadoop/fs/AbstractFileSystem.truncate:(Lorg/apache/hadoop/fs/Path;J)Z
      14: ireturn

  public void renameInternal(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
      10: aload_0
      11: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
      14: aload_1
      15: aload_2
      16: iconst_1
      17: anewarray     #33                 // class org/apache/hadoop/fs/Options$Rename
      20: dup
      21: iconst_0
      22: getstatic     #34                 // Field org/apache/hadoop/fs/Options$Rename.NONE:Lorg/apache/hadoop/fs/Options$Rename;
      25: aastore
      26: invokevirtual #35                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      29: return

  public void renameInternal(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean) throws org.apache.hadoop.security.AccessControlException, org.apache.hadoop.fs.FileAlreadyExistsException, java.io.FileNotFoundException, org.apache.hadoop.fs.ParentNotDirectoryException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokevirtual #36                 // Method org/apache/hadoop/fs/AbstractFileSystem.renameInternal:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;Z)V
      10: return

  public void setOwner(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: aload_2
      11: aload_3
      12: invokevirtual #37                 // Method org/apache/hadoop/fs/AbstractFileSystem.setOwner:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;Ljava/lang/String;)V
      15: return

  public void setPermission(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: aload_2
      11: invokevirtual #38                 // Method org/apache/hadoop/fs/AbstractFileSystem.setPermission:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
      14: return

  public boolean setReplication(org.apache.hadoop.fs.Path, short) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: iload_2
      11: invokevirtual #39                 // Method org/apache/hadoop/fs/AbstractFileSystem.setReplication:(Lorg/apache/hadoop/fs/Path;S)Z
      14: ireturn

  public void setTimes(org.apache.hadoop.fs.Path, long, long) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       9: aload_1
      10: lload_2
      11: lload         4
      13: invokevirtual #40                 // Method org/apache/hadoop/fs/AbstractFileSystem.setTimes:(Lorg/apache/hadoop/fs/Path;JJ)V
      16: return

  public void setVerifyChecksum(boolean) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: iload_1
       5: invokevirtual #41                 // Method org/apache/hadoop/fs/AbstractFileSystem.setVerifyChecksum:(Z)V
       8: return

  public boolean supportsSymlinks();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #42                 // Method org/apache/hadoop/fs/AbstractFileSystem.supportsSymlinks:()Z
       7: ireturn

  public void createSymlink(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokevirtual #43                 // Method org/apache/hadoop/fs/AbstractFileSystem.createSymlink:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;Z)V
      10: return

  public org.apache.hadoop.fs.Path getLinkTarget(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #44                 // Method org/apache/hadoop/fs/AbstractFileSystem.getLinkTarget:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public java.lang.String getCanonicalServiceName();
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #45                 // Method org/apache/hadoop/fs/AbstractFileSystem.getCanonicalServiceName:()Ljava/lang/String;
       7: areturn

  public java.util.List<org.apache.hadoop.security.token.Token<?>> getDelegationTokens(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #46                 // Method org/apache/hadoop/fs/AbstractFileSystem.getDelegationTokens:(Ljava/lang/String;)Ljava/util/List;
       8: areturn

  public boolean isValidName(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #47                 // Method org/apache/hadoop/fs/AbstractFileSystem.isValidName:(Ljava/lang/String;)Z
       8: ireturn

  public void modifyAclEntries(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #48                 // Method org/apache/hadoop/fs/AbstractFileSystem.modifyAclEntries:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)V
       9: return

  public void removeAclEntries(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.removeAclEntries:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)V
       9: return

  public void removeDefaultAcl(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #50                 // Method org/apache/hadoop/fs/AbstractFileSystem.removeDefaultAcl:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void removeAcl(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #51                 // Method org/apache/hadoop/fs/AbstractFileSystem.removeAcl:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void setAcl(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #52                 // Method org/apache/hadoop/fs/AbstractFileSystem.setAcl:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)V
       9: return

  public org.apache.hadoop.fs.permission.AclStatus getAclStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #53                 // Method org/apache/hadoop/fs/AbstractFileSystem.getAclStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/permission/AclStatus;
       8: areturn

  public void setXAttr(org.apache.hadoop.fs.Path, java.lang.String, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #54                 // Method org/apache/hadoop/fs/AbstractFileSystem.setXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;[B)V
      10: return

  public void setXAttr(org.apache.hadoop.fs.Path, java.lang.String, byte[], java.util.EnumSet<org.apache.hadoop.fs.XAttrSetFlag>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokevirtual #55                 // Method org/apache/hadoop/fs/AbstractFileSystem.setXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;[BLjava/util/EnumSet;)V
      12: return

  public byte[] getXAttr(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #56                 // Method org/apache/hadoop/fs/AbstractFileSystem.getXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)[B
       9: areturn

  public java.util.Map<java.lang.String, byte[]> getXAttrs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #57                 // Method org/apache/hadoop/fs/AbstractFileSystem.getXAttrs:(Lorg/apache/hadoop/fs/Path;)Ljava/util/Map;
       8: areturn

  public java.util.Map<java.lang.String, byte[]> getXAttrs(org.apache.hadoop.fs.Path, java.util.List<java.lang.String>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #58                 // Method org/apache/hadoop/fs/AbstractFileSystem.getXAttrs:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)Ljava/util/Map;
       9: areturn

  public java.util.List<java.lang.String> listXAttrs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #59                 // Method org/apache/hadoop/fs/AbstractFileSystem.listXAttrs:(Lorg/apache/hadoop/fs/Path;)Ljava/util/List;
       8: areturn

  public void removeXAttr(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #60                 // Method org/apache/hadoop/fs/AbstractFileSystem.removeXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public org.apache.hadoop.fs.Path createSnapshot(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #61                 // Method org/apache/hadoop/fs/AbstractFileSystem.createSnapshot:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
       9: areturn

  public void renameSnapshot(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #62                 // Method org/apache/hadoop/fs/AbstractFileSystem.renameSnapshot:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;Ljava/lang/String;)V
      10: return

  public void deleteSnapshot(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #63                 // Method org/apache/hadoop/fs/AbstractFileSystem.deleteSnapshot:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void satisfyStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #64                 // Method org/apache/hadoop/fs/AbstractFileSystem.satisfyStoragePolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void setStoragePolicy(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #65                 // Method org/apache/hadoop/fs/AbstractFileSystem.setStoragePolicy:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void unsetStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #66                 // Method org/apache/hadoop/fs/AbstractFileSystem.unsetStoragePolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.fs.BlockStoragePolicySpi getStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #67                 // Method org/apache/hadoop/fs/AbstractFileSystem.getStoragePolicy:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/BlockStoragePolicySpi;
       8: areturn

  public java.util.Collection<? extends org.apache.hadoop.fs.BlockStoragePolicySpi> getAllStoragePolicies() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: invokevirtual #68                 // Method org/apache/hadoop/fs/AbstractFileSystem.getAllStoragePolicies:()Ljava/util/Collection;
       7: areturn

  public boolean hasPathCapability(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field myFs:Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #69                 // Method org/apache/hadoop/fs/AbstractFileSystem.hasPathCapability:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)Z
       9: ireturn
}
