Compiled from "ByteBufferUtil.java"
public final class org.apache.hadoop.fs.ByteBufferUtil {
  public org.apache.hadoop.fs.ByteBufferUtil();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  private static boolean streamHasByteBufferRead(java.io.InputStream);
    Code:
       0: aload_0
       1: instanceof    #2                  // class org/apache/hadoop/fs/ByteBufferReadable
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: instanceof    #3                  // class org/apache/hadoop/fs/FSDataInputStream
      13: ifne          18
      16: iconst_1
      17: ireturn
      18: aload_0
      19: checkcast     #3                  // class org/apache/hadoop/fs/FSDataInputStream
      22: invokevirtual #4                  // Method org/apache/hadoop/fs/FSDataInputStream.getWrappedStream:()Ljava/io/InputStream;
      25: instanceof    #2                  // class org/apache/hadoop/fs/ByteBufferReadable
      28: ireturn

  public static java.nio.ByteBuffer fallbackRead(java.io.InputStream, org.apache.hadoop.io.ByteBufferPool, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnonnull     14
       4: new           #5                  // class java/lang/UnsupportedOperationException
       7: dup
       8: ldc           #6                  // String zero-copy reads were not available, and you did not provide a fallback ByteBufferPool.
      10: invokespecial #7                  // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: aload_0
      15: invokestatic  #8                  // Method streamHasByteBufferRead:(Ljava/io/InputStream;)Z
      18: istore_3
      19: aload_1
      20: iload_3
      21: iload_2
      22: invokeinterface #9,  3            // InterfaceMethod org/apache/hadoop/io/ByteBufferPool.getBuffer:(ZI)Ljava/nio/ByteBuffer;
      27: astore        4
      29: aload         4
      31: ifnonnull     76
      34: new           #5                  // class java/lang/UnsupportedOperationException
      37: dup
      38: new           #10                 // class java/lang/StringBuilder
      41: dup
      42: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      45: ldc           #12                 // String zero-copy reads were not available, and the ByteBufferPool did not provide us with
      47: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      50: iload_3
      51: ifeq          59
      54: ldc           #14                 // String a direct
      56: goto          61
      59: ldc           #15                 // String an indirect
      61: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: ldc           #16                 // String buffer.
      66: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      69: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: invokespecial #7                  // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      75: athrow
      76: aload         4
      78: invokevirtual #18                 // Method java/nio/ByteBuffer.capacity:()I
      81: ifle          88
      84: iconst_1
      85: goto          89
      88: iconst_0
      89: invokestatic  #19                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      92: aload         4
      94: invokevirtual #20                 // Method java/nio/ByteBuffer.isDirect:()Z
      97: iload_3
      98: if_icmpne     105
     101: iconst_1
     102: goto          106
     105: iconst_0
     106: invokestatic  #19                 // Method com/google/common/base/Preconditions.checkState:(Z)V
     109: iload_2
     110: aload         4
     112: invokevirtual #18                 // Method java/nio/ByteBuffer.capacity:()I
     115: invokestatic  #21                 // Method java/lang/Math.min:(II)I
     118: istore_2
     119: iconst_0
     120: istore        5
     122: iload_3
     123: ifeq          206
     126: aload         4
     128: invokevirtual #22                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     131: pop
     132: aload         4
     134: iload_2
     135: invokevirtual #23                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     138: pop
     139: aload_0
     140: checkcast     #2                  // class org/apache/hadoop/fs/ByteBufferReadable
     143: astore        6
     145: iconst_0
     146: istore        7
     148: iload         7
     150: iload_2
     151: if_icmplt     160
     154: iconst_1
     155: istore        5
     157: goto          197
     160: aload         6
     162: aload         4
     164: invokeinterface #24,  2           // InterfaceMethod org/apache/hadoop/fs/ByteBufferReadable.read:(Ljava/nio/ByteBuffer;)I
     169: istore        8
     171: iload         8
     173: ifge          187
     176: iload         7
     178: ifle          197
     181: iconst_1
     182: istore        5
     184: goto          197
     187: iload         7
     189: iload         8
     191: iadd
     192: istore        7
     194: goto          148
     197: aload         4
     199: invokevirtual #25                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
     202: pop
     203: goto          245
     206: aload         4
     208: invokevirtual #22                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
     211: pop
     212: aload_0
     213: aload         4
     215: invokevirtual #26                 // Method java/nio/ByteBuffer.array:()[B
     218: aload         4
     220: invokevirtual #27                 // Method java/nio/ByteBuffer.arrayOffset:()I
     223: iload_2
     224: invokevirtual #28                 // Method java/io/InputStream.read:([BII)I
     227: istore        6
     229: iload         6
     231: iflt          245
     234: aload         4
     236: iload         6
     238: invokevirtual #23                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
     241: pop
     242: iconst_1
     243: istore        5
     245: iload         5
     247: ifne          285
     250: aload_1
     251: aload         4
     253: invokeinterface #29,  2           // InterfaceMethod org/apache/hadoop/io/ByteBufferPool.putBuffer:(Ljava/nio/ByteBuffer;)V
     258: aconst_null
     259: astore        4
     261: goto          285
     264: astore        9
     266: iload         5
     268: ifne          282
     271: aload_1
     272: aload         4
     274: invokeinterface #29,  2           // InterfaceMethod org/apache/hadoop/io/ByteBufferPool.putBuffer:(Ljava/nio/ByteBuffer;)V
     279: aconst_null
     280: astore        4
     282: aload         9
     284: athrow
     285: aload         4
     287: areturn
    Exception table:
       from    to  target type
         122   245   264   any
         264   266   264   any
}
