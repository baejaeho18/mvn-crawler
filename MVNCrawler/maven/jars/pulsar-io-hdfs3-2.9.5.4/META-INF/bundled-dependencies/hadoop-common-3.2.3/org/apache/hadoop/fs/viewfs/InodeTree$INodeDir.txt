Compiled from "InodeTree.java"
class org.apache.hadoop.fs.viewfs.InodeTree$INodeDir<T> extends org.apache.hadoop.fs.viewfs.InodeTree$INode<T> {
  private final java.util.Map<java.lang.String, org.apache.hadoop.fs.viewfs.InodeTree$INode<T>> children;

  private T internalDirFs;

  private boolean isRoot;

  private org.apache.hadoop.fs.viewfs.InodeTree$INodeLink<T> fallbackLink;

  org.apache.hadoop.fs.viewfs.InodeTree$INodeDir(java.lang.String, org.apache.hadoop.security.UserGroupInformation);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/hadoop/fs/viewfs/InodeTree$INode."<init>":(Ljava/lang/String;Lorg/apache/hadoop/security/UserGroupInformation;)V
       6: aload_0
       7: new           #2                  // class java/util/HashMap
      10: dup
      11: invokespecial #3                  // Method java/util/HashMap."<init>":()V
      14: putfield      #4                  // Field children:Ljava/util/Map;
      17: aload_0
      18: aconst_null
      19: putfield      #5                  // Field internalDirFs:Ljava/lang/Object;
      22: aload_0
      23: iconst_0
      24: putfield      #6                  // Field isRoot:Z
      27: aload_0
      28: aconst_null
      29: putfield      #7                  // Field fallbackLink:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
      32: return

  boolean isInternalDir();
    Code:
       0: iconst_1
       1: ireturn

  T getInternalDirFs();
    Code:
       0: aload_0
       1: getfield      #5                  // Field internalDirFs:Ljava/lang/Object;
       4: areturn

  void setInternalDirFs(T);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field internalDirFs:Ljava/lang/Object;
       5: return

  void setRoot(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #6                  // Field isRoot:Z
       5: return

  boolean isRoot();
    Code:
       0: aload_0
       1: getfield      #6                  // Field isRoot:Z
       4: ireturn

  org.apache.hadoop.fs.viewfs.InodeTree$INodeLink<T> getFallbackLink();
    Code:
       0: aload_0
       1: getfield      #7                  // Field fallbackLink:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
       4: areturn

  void addFallbackLink(org.apache.hadoop.fs.viewfs.InodeTree$INodeLink<T>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #6                  // Field isRoot:Z
       4: ifne          17
       7: new           #8                  // class java/io/IOException
      10: dup
      11: ldc           #9                  // String Fallback link can only be added for root
      13: invokespecial #10                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: aload_1
      19: putfield      #7                  // Field fallbackLink:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
      22: return

  java.util.Map<java.lang.String, org.apache.hadoop.fs.viewfs.InodeTree$INode<T>> getChildren();
    Code:
       0: aload_0
       1: getfield      #4                  // Field children:Ljava/util/Map;
       4: invokestatic  #11                 // Method java/util/Collections.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;
       7: areturn

  org.apache.hadoop.fs.viewfs.InodeTree$INode<T> resolveInternal(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #4                  // Field children:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #12,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #13                 // class org/apache/hadoop/fs/viewfs/InodeTree$INode
      13: areturn

  org.apache.hadoop.fs.viewfs.InodeTree$INodeDir<T> addDir(java.lang.String, org.apache.hadoop.security.UserGroupInformation) throws org.apache.hadoop.fs.FileAlreadyExistsException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field children:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #15                 // class org/apache/hadoop/fs/FileAlreadyExistsException
      16: dup
      17: invokespecial #16                 // Method org/apache/hadoop/fs/FileAlreadyExistsException."<init>":()V
      20: athrow
      21: new           #17                 // class org/apache/hadoop/fs/viewfs/InodeTree$INodeDir
      24: dup
      25: new           #18                 // class java/lang/StringBuilder
      28: dup
      29: invokespecial #19                 // Method java/lang/StringBuilder."<init>":()V
      32: aload_0
      33: getfield      #20                 // Field fullPath:Ljava/lang/String;
      36: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      39: aload_0
      40: invokevirtual #22                 // Method isRoot:()Z
      43: ifeq          51
      46: ldc           #23                 // String
      48: goto          53
      51: ldc           #24                 // String /
      53: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      56: aload_1
      57: invokevirtual #21                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: invokevirtual #25                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      63: aload_2
      64: invokespecial #26                 // Method "<init>":(Ljava/lang/String;Lorg/apache/hadoop/security/UserGroupInformation;)V
      67: astore_3
      68: aload_0
      69: getfield      #4                  // Field children:Ljava/util/Map;
      72: aload_1
      73: aload_3
      74: invokeinterface #27,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: aload_3
      81: areturn

  void addLink(java.lang.String, org.apache.hadoop.fs.viewfs.InodeTree$INodeLink<T>) throws org.apache.hadoop.fs.FileAlreadyExistsException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field children:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #14,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      10: ifeq          21
      13: new           #15                 // class org/apache/hadoop/fs/FileAlreadyExistsException
      16: dup
      17: invokespecial #16                 // Method org/apache/hadoop/fs/FileAlreadyExistsException."<init>":()V
      20: athrow
      21: aload_0
      22: getfield      #4                  // Field children:Ljava/util/Map;
      25: aload_1
      26: aload_2
      27: invokeinterface #27,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: pop
      33: return
}
