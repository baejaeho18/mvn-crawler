Compiled from "Groups.java"
public class org.apache.hadoop.security.Groups {
  static final org.slf4j.Logger LOG;

  private final org.apache.hadoop.security.GroupMappingServiceProvider impl;

  private final com.google.common.cache.LoadingCache<java.lang.String, java.util.List<java.lang.String>> cache;

  private final java.util.concurrent.atomic.AtomicReference<java.util.Map<java.lang.String, java.util.List<java.lang.String>>> staticMapRef;

  private final long cacheTimeout;

  private final long negativeCacheTimeout;

  private final long warningDeltaMs;

  private final org.apache.hadoop.util.Timer timer;

  private java.util.Set<java.lang.String> negativeCache;

  private final boolean reloadGroupsInBackground;

  private final int reloadGroupsThreadCount;

  private final java.util.concurrent.atomic.AtomicLong backgroundRefreshSuccess;

  private final java.util.concurrent.atomic.AtomicLong backgroundRefreshException;

  private final java.util.concurrent.atomic.AtomicLong backgroundRefreshQueued;

  private final java.util.concurrent.atomic.AtomicLong backgroundRefreshRunning;

  private static org.apache.hadoop.security.Groups GROUPS;

  public org.apache.hadoop.security.Groups(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: aload_1
       2: new           #13                 // class org/apache/hadoop/util/Timer
       5: dup
       6: invokespecial #14                 // Method org/apache/hadoop/util/Timer."<init>":()V
       9: invokespecial #15                 // Method "<init>":(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/util/Timer;)V
      12: return

  public org.apache.hadoop.security.Groups(org.apache.hadoop.conf.Configuration, org.apache.hadoop.util.Timer);
    Code:
       0: aload_0
       1: invokespecial #16                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #17                 // class java/util/concurrent/atomic/AtomicReference
       8: dup
       9: invokespecial #18                 // Method java/util/concurrent/atomic/AtomicReference."<init>":()V
      12: putfield      #19                 // Field staticMapRef:Ljava/util/concurrent/atomic/AtomicReference;
      15: aload_0
      16: new           #20                 // class java/util/concurrent/atomic/AtomicLong
      19: dup
      20: lconst_0
      21: invokespecial #21                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      24: putfield      #5                  // Field backgroundRefreshSuccess:Ljava/util/concurrent/atomic/AtomicLong;
      27: aload_0
      28: new           #20                 // class java/util/concurrent/atomic/AtomicLong
      31: dup
      32: lconst_0
      33: invokespecial #21                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      36: putfield      #4                  // Field backgroundRefreshException:Ljava/util/concurrent/atomic/AtomicLong;
      39: aload_0
      40: new           #20                 // class java/util/concurrent/atomic/AtomicLong
      43: dup
      44: lconst_0
      45: invokespecial #21                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      48: putfield      #7                  // Field backgroundRefreshQueued:Ljava/util/concurrent/atomic/AtomicLong;
      51: aload_0
      52: new           #20                 // class java/util/concurrent/atomic/AtomicLong
      55: dup
      56: lconst_0
      57: invokespecial #21                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      60: putfield      #6                  // Field backgroundRefreshRunning:Ljava/util/concurrent/atomic/AtomicLong;
      63: aload_0
      64: aload_1
      65: ldc           #23                 // String hadoop.security.group.mapping
      67: ldc           #24                 // class org/apache/hadoop/security/JniBasedUnixGroupsMappingWithFallback
      69: ldc           #25                 // class org/apache/hadoop/security/GroupMappingServiceProvider
      71: invokevirtual #26                 // Method org/apache/hadoop/conf/Configuration.getClass:(Ljava/lang/String;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/Class;
      74: aload_1
      75: invokestatic  #27                 // Method org/apache/hadoop/util/ReflectionUtils.newInstance:(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;
      78: checkcast     #25                 // class org/apache/hadoop/security/GroupMappingServiceProvider
      81: putfield      #2                  // Field impl:Lorg/apache/hadoop/security/GroupMappingServiceProvider;
      84: aload_0
      85: aload_1
      86: ldc           #28                 // String hadoop.security.groups.cache.secs
      88: ldc2_w        #29                 // long 300l
      91: invokevirtual #31                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
      94: ldc2_w        #32                 // long 1000l
      97: lmul
      98: putfield      #34                 // Field cacheTimeout:J
     101: aload_0
     102: aload_1
     103: ldc           #35                 // String hadoop.security.groups.negative-cache.secs
     105: ldc2_w        #36                 // long 30l
     108: invokevirtual #31                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
     111: ldc2_w        #32                 // long 1000l
     114: lmul
     115: putfield      #38                 // Field negativeCacheTimeout:J
     118: aload_0
     119: aload_1
     120: ldc           #39                 // String hadoop.security.groups.cache.warn.after.ms
     122: ldc2_w        #40                 // long 5000l
     125: invokevirtual #31                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
     128: putfield      #1                  // Field warningDeltaMs:J
     131: aload_0
     132: aload_1
     133: ldc           #42                 // String hadoop.security.groups.cache.background.reload
     135: iconst_0
     136: invokevirtual #43                 // Method org/apache/hadoop/conf/Configuration.getBoolean:(Ljava/lang/String;Z)Z
     139: putfield      #12                 // Field reloadGroupsInBackground:Z
     142: aload_0
     143: aload_1
     144: ldc           #44                 // String hadoop.security.groups.cache.background.reload.threads
     146: iconst_3
     147: invokevirtual #45                 // Method org/apache/hadoop/conf/Configuration.getInt:(Ljava/lang/String;I)I
     150: putfield      #11                 // Field reloadGroupsThreadCount:I
     153: aload_0
     154: aload_1
     155: invokespecial #46                 // Method parseStaticMapping:(Lorg/apache/hadoop/conf/Configuration;)V
     158: aload_0
     159: aload_2
     160: putfield      #3                  // Field timer:Lorg/apache/hadoop/util/Timer;
     163: aload_0
     164: invokestatic  #47                 // Method com/google/common/cache/CacheBuilder.newBuilder:()Lcom/google/common/cache/CacheBuilder;
     167: aload_0
     168: getfield      #34                 // Field cacheTimeout:J
     171: getstatic     #48                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     174: invokevirtual #49                 // Method com/google/common/cache/CacheBuilder.refreshAfterWrite:(JLjava/util/concurrent/TimeUnit;)Lcom/google/common/cache/CacheBuilder;
     177: new           #50                 // class org/apache/hadoop/security/Groups$TimerToTickerAdapter
     180: dup
     181: aload_2
     182: invokespecial #51                 // Method org/apache/hadoop/security/Groups$TimerToTickerAdapter."<init>":(Lorg/apache/hadoop/util/Timer;)V
     185: invokevirtual #52                 // Method com/google/common/cache/CacheBuilder.ticker:(Lcom/google/common/base/Ticker;)Lcom/google/common/cache/CacheBuilder;
     188: ldc2_w        #53                 // long 10l
     191: aload_0
     192: getfield      #34                 // Field cacheTimeout:J
     195: lmul
     196: getstatic     #48                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     199: invokevirtual #55                 // Method com/google/common/cache/CacheBuilder.expireAfterWrite:(JLjava/util/concurrent/TimeUnit;)Lcom/google/common/cache/CacheBuilder;
     202: new           #56                 // class org/apache/hadoop/security/Groups$GroupCacheLoader
     205: dup
     206: aload_0
     207: invokespecial #57                 // Method org/apache/hadoop/security/Groups$GroupCacheLoader."<init>":(Lorg/apache/hadoop/security/Groups;)V
     210: invokevirtual #58                 // Method com/google/common/cache/CacheBuilder.build:(Lcom/google/common/cache/CacheLoader;)Lcom/google/common/cache/LoadingCache;
     213: putfield      #59                 // Field cache:Lcom/google/common/cache/LoadingCache;
     216: aload_0
     217: getfield      #38                 // Field negativeCacheTimeout:J
     220: lconst_0
     221: lcmp
     222: ifle          266
     225: invokestatic  #47                 // Method com/google/common/cache/CacheBuilder.newBuilder:()Lcom/google/common/cache/CacheBuilder;
     228: aload_0
     229: getfield      #38                 // Field negativeCacheTimeout:J
     232: getstatic     #48                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
     235: invokevirtual #55                 // Method com/google/common/cache/CacheBuilder.expireAfterWrite:(JLjava/util/concurrent/TimeUnit;)Lcom/google/common/cache/CacheBuilder;
     238: new           #50                 // class org/apache/hadoop/security/Groups$TimerToTickerAdapter
     241: dup
     242: aload_2
     243: invokespecial #51                 // Method org/apache/hadoop/security/Groups$TimerToTickerAdapter."<init>":(Lorg/apache/hadoop/util/Timer;)V
     246: invokevirtual #52                 // Method com/google/common/cache/CacheBuilder.ticker:(Lcom/google/common/base/Ticker;)Lcom/google/common/cache/CacheBuilder;
     249: invokevirtual #60                 // Method com/google/common/cache/CacheBuilder.build:()Lcom/google/common/cache/Cache;
     252: astore_3
     253: aload_0
     254: aload_3
     255: invokeinterface #61,  1           // InterfaceMethod com/google/common/cache/Cache.asMap:()Ljava/util/concurrent/ConcurrentMap;
     260: invokestatic  #62                 // Method java/util/Collections.newSetFromMap:(Ljava/util/Map;)Ljava/util/Set;
     263: putfield      #9                  // Field negativeCache:Ljava/util/Set;
     266: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
     269: invokeinterface #64,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
     274: ifeq          337
     277: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
     280: new           #65                 // class java/lang/StringBuilder
     283: dup
     284: invokespecial #66                 // Method java/lang/StringBuilder."<init>":()V
     287: ldc           #67                 // String Group mapping impl=
     289: invokevirtual #68                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     292: aload_0
     293: getfield      #2                  // Field impl:Lorg/apache/hadoop/security/GroupMappingServiceProvider;
     296: invokevirtual #69                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
     299: invokevirtual #70                 // Method java/lang/Class.getName:()Ljava/lang/String;
     302: invokevirtual #68                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     305: ldc           #71                 // String ; cacheTimeout=
     307: invokevirtual #68                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     310: aload_0
     311: getfield      #34                 // Field cacheTimeout:J
     314: invokevirtual #72                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     317: ldc           #73                 // String ; warningDeltaMs=
     319: invokevirtual #68                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     322: aload_0
     323: getfield      #1                  // Field warningDeltaMs:J
     326: invokevirtual #72                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     329: invokevirtual #74                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     332: invokeinterface #75,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
     337: return

  java.util.Set<java.lang.String> getNegativeCache();
    Code:
       0: aload_0
       1: getfield      #9                  // Field negativeCache:Ljava/util/Set;
       4: areturn

  private void parseStaticMapping(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_1
       1: ldc           #76                 // String hadoop.user.group.static.mapping.overrides
       3: ldc           #77                 // String dr.who=;
       5: invokevirtual #78                 // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
       8: astore_2
       9: aload_2
      10: ldc           #79                 // String ;
      12: invokestatic  #80                 // Method org/apache/hadoop/util/StringUtils.getStringCollection:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Collection;
      15: astore_3
      16: new           #81                 // class java/util/HashMap
      19: dup
      20: invokespecial #82                 // Method java/util/HashMap."<init>":()V
      23: astore        4
      25: aload_3
      26: invokeinterface #83,  1           // InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
      31: astore        5
      33: aload         5
      35: invokeinterface #84,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      40: ifeq          163
      43: aload         5
      45: invokeinterface #85,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      50: checkcast     #86                 // class java/lang/String
      53: astore        6
      55: aload         6
      57: ldc           #87                 // String =
      59: invokestatic  #80                 // Method org/apache/hadoop/util/StringUtils.getStringCollection:(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Collection;
      62: astore        7
      64: aload         7
      66: invokeinterface #88,  1           // InterfaceMethod java/util/Collection.size:()I
      71: iconst_1
      72: if_icmplt     86
      75: aload         7
      77: invokeinterface #88,  1           // InterfaceMethod java/util/Collection.size:()I
      82: iconst_2
      83: if_icmple     96
      86: new           #89                 // class org/apache/hadoop/HadoopIllegalArgumentException
      89: dup
      90: ldc           #90                 // String Configuration hadoop.user.group.static.mapping.overrides is invalid
      92: invokespecial #91                 // Method org/apache/hadoop/HadoopIllegalArgumentException."<init>":(Ljava/lang/String;)V
      95: athrow
      96: aload         7
      98: aload         7
     100: invokeinterface #88,  1           // InterfaceMethod java/util/Collection.size:()I
     105: anewarray     #86                 // class java/lang/String
     108: invokeinterface #92,  2           // InterfaceMethod java/util/Collection.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     113: checkcast     #93                 // class "[Ljava/lang/String;"
     116: astore        8
     118: aload         8
     120: iconst_0
     121: aaload
     122: astore        9
     124: invokestatic  #94                 // Method java/util/Collections.emptyList:()Ljava/util/List;
     127: astore        10
     129: aload         8
     131: arraylength
     132: iconst_2
     133: if_icmpne     148
     136: aload         8
     138: iconst_1
     139: aaload
     140: invokestatic  #95                 // Method org/apache/hadoop/util/StringUtils.getStringCollection:(Ljava/lang/String;)Ljava/util/Collection;
     143: checkcast     #96                 // class java/util/List
     146: astore        10
     148: aload         4
     150: aload         9
     152: aload         10
     154: invokeinterface #97,  3           // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     159: pop
     160: goto          33
     163: aload_0
     164: getfield      #19                 // Field staticMapRef:Ljava/util/concurrent/atomic/AtomicReference;
     167: aload         4
     169: invokeinterface #98,  1           // InterfaceMethod java/util/Map.isEmpty:()Z
     174: ifeq          181
     177: aconst_null
     178: goto          183
     181: aload         4
     183: invokevirtual #99                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
     186: return

  private boolean isNegativeCacheEnabled();
    Code:
       0: aload_0
       1: getfield      #38                 // Field negativeCacheTimeout:J
       4: lconst_0
       5: lcmp
       6: ifle          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: ireturn

  private java.io.IOException noGroupsForUser(java.lang.String);
    Code:
       0: new           #100                // class java/io/IOException
       3: dup
       4: new           #65                 // class java/lang/StringBuilder
       7: dup
       8: invokespecial #66                 // Method java/lang/StringBuilder."<init>":()V
      11: ldc           #101                // String No groups found for user
      13: invokevirtual #68                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: aload_1
      17: invokevirtual #68                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: invokevirtual #74                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: invokespecial #102                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      26: areturn

  public java.util.List<java.lang.String> getGroups(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #19                 // Field staticMapRef:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #103                // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #104                // class java/util/Map
      10: astore_2
      11: aload_2
      12: ifnull        32
      15: aload_2
      16: aload_1
      17: invokeinterface #105,  2          // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      22: checkcast     #96                 // class java/util/List
      25: astore_3
      26: aload_3
      27: ifnull        32
      30: aload_3
      31: areturn
      32: aload_0
      33: invokespecial #10                 // Method isNegativeCacheEnabled:()Z
      36: ifeq          58
      39: aload_0
      40: getfield      #9                  // Field negativeCache:Ljava/util/Set;
      43: aload_1
      44: invokeinterface #106,  2          // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
      49: ifeq          58
      52: aload_0
      53: aload_1
      54: invokespecial #8                  // Method noGroupsForUser:(Ljava/lang/String;)Ljava/io/IOException;
      57: athrow
      58: aload_0
      59: getfield      #59                 // Field cache:Lcom/google/common/cache/LoadingCache;
      62: aload_1
      63: invokeinterface #107,  2          // InterfaceMethod com/google/common/cache/LoadingCache.get:(Ljava/lang/Object;)Ljava/lang/Object;
      68: checkcast     #96                 // class java/util/List
      71: areturn
      72: astore_3
      73: aload_3
      74: invokevirtual #109                // Method java/util/concurrent/ExecutionException.getCause:()Ljava/lang/Throwable;
      77: checkcast     #100                // class java/io/IOException
      80: athrow
    Exception table:
       from    to  target type
          58    71    72   Class java/util/concurrent/ExecutionException

  public long getBackgroundRefreshSuccess();
    Code:
       0: aload_0
       1: getfield      #5                  // Field backgroundRefreshSuccess:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #110                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getBackgroundRefreshException();
    Code:
       0: aload_0
       1: getfield      #4                  // Field backgroundRefreshException:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #110                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getBackgroundRefreshQueued();
    Code:
       0: aload_0
       1: getfield      #7                  // Field backgroundRefreshQueued:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #110                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public long getBackgroundRefreshRunning();
    Code:
       0: aload_0
       1: getfield      #6                  // Field backgroundRefreshRunning:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #110                // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public void refresh();
    Code:
       0: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
       3: ldc           #111                // String clearing userToGroupsMap cache
       5: invokeinterface #112,  2          // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      10: aload_0
      11: getfield      #2                  // Field impl:Lorg/apache/hadoop/security/GroupMappingServiceProvider;
      14: invokeinterface #113,  1          // InterfaceMethod org/apache/hadoop/security/GroupMappingServiceProvider.cacheGroupsRefresh:()V
      19: goto          34
      22: astore_1
      23: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
      26: ldc           #114                // String Error refreshing groups cache
      28: aload_1
      29: invokeinterface #115,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      34: aload_0
      35: getfield      #59                 // Field cache:Lcom/google/common/cache/LoadingCache;
      38: invokeinterface #116,  1          // InterfaceMethod com/google/common/cache/LoadingCache.invalidateAll:()V
      43: aload_0
      44: invokespecial #10                 // Method isNegativeCacheEnabled:()Z
      47: ifeq          59
      50: aload_0
      51: getfield      #9                  // Field negativeCache:Ljava/util/Set;
      54: invokeinterface #117,  1          // InterfaceMethod java/util/Set.clear:()V
      59: return
    Exception table:
       from    to  target type
          10    19    22   Class java/io/IOException

  public void cacheGroupsAdd(java.util.List<java.lang.String>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lorg/apache/hadoop/security/GroupMappingServiceProvider;
       4: aload_1
       5: invokeinterface #118,  2          // InterfaceMethod org/apache/hadoop/security/GroupMappingServiceProvider.cacheGroupsAdd:(Ljava/util/List;)V
      10: goto          25
      13: astore_2
      14: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
      17: ldc           #119                // String Error caching groups
      19: aload_2
      20: invokeinterface #115,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      25: return
    Exception table:
       from    to  target type
           0    10    13   Class java/io/IOException

  public static org.apache.hadoop.security.Groups getUserToGroupsMappingService();
    Code:
       0: new           #120                // class org/apache/hadoop/conf/Configuration
       3: dup
       4: invokespecial #121                // Method org/apache/hadoop/conf/Configuration."<init>":()V
       7: invokestatic  #122                // Method getUserToGroupsMappingService:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/security/Groups;
      10: areturn

  public static synchronized org.apache.hadoop.security.Groups getUserToGroupsMappingService(org.apache.hadoop.conf.Configuration);
    Code:
       0: getstatic     #123                // Field GROUPS:Lorg/apache/hadoop/security/Groups;
       3: ifnonnull     38
       6: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
       9: invokeinterface #64,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      14: ifeq          27
      17: getstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
      20: ldc           #124                // String  Creating new Groups object
      22: invokeinterface #75,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      27: new           #125                // class org/apache/hadoop/security/Groups
      30: dup
      31: aload_0
      32: invokespecial #126                // Method "<init>":(Lorg/apache/hadoop/conf/Configuration;)V
      35: putstatic     #123                // Field GROUPS:Lorg/apache/hadoop/security/Groups;
      38: getstatic     #123                // Field GROUPS:Lorg/apache/hadoop/security/Groups;
      41: areturn

  public static synchronized org.apache.hadoop.security.Groups getUserToGroupsMappingServiceWithLoadedConfiguration(org.apache.hadoop.conf.Configuration);
    Code:
       0: new           #125                // class org/apache/hadoop/security/Groups
       3: dup
       4: aload_0
       5: invokespecial #126                // Method "<init>":(Lorg/apache/hadoop/conf/Configuration;)V
       8: putstatic     #123                // Field GROUPS:Lorg/apache/hadoop/security/Groups;
      11: getstatic     #123                // Field GROUPS:Lorg/apache/hadoop/security/Groups;
      14: areturn

  static boolean access$000(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #12                 // Field reloadGroupsInBackground:Z
       4: ireturn

  static int access$100(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #11                 // Field reloadGroupsThreadCount:I
       4: ireturn

  static boolean access$200(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: invokespecial #10                 // Method isNegativeCacheEnabled:()Z
       4: ireturn

  static java.util.Set access$300(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #9                  // Field negativeCache:Ljava/util/Set;
       4: areturn

  static java.io.IOException access$400(org.apache.hadoop.security.Groups, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #8                  // Method noGroupsForUser:(Ljava/lang/String;)Ljava/io/IOException;
       5: areturn

  static java.util.concurrent.atomic.AtomicLong access$500(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #7                  // Field backgroundRefreshQueued:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static java.util.concurrent.atomic.AtomicLong access$600(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #6                  // Field backgroundRefreshRunning:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static java.util.concurrent.atomic.AtomicLong access$700(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #5                  // Field backgroundRefreshSuccess:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static java.util.concurrent.atomic.AtomicLong access$800(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #4                  // Field backgroundRefreshException:Ljava/util/concurrent/atomic/AtomicLong;
       4: areturn

  static org.apache.hadoop.util.Timer access$900(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #3                  // Field timer:Lorg/apache/hadoop/util/Timer;
       4: areturn

  static org.apache.hadoop.security.GroupMappingServiceProvider access$1000(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #2                  // Field impl:Lorg/apache/hadoop/security/GroupMappingServiceProvider;
       4: areturn

  static long access$1100(org.apache.hadoop.security.Groups);
    Code:
       0: aload_0
       1: getfield      #1                  // Field warningDeltaMs:J
       4: lreturn

  static {};
    Code:
       0: ldc           #125                // class org/apache/hadoop/security/Groups
       2: invokestatic  #127                // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #63                 // Field LOG:Lorg/slf4j/Logger;
       8: aconst_null
       9: putstatic     #123                // Field GROUPS:Lorg/apache/hadoop/security/Groups;
      12: return
}
