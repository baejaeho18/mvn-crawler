Compiled from "DiskChecker.java"
public class org.apache.hadoop.util.DiskChecker {
  public static final org.slf4j.Logger LOG;

  private static java.util.concurrent.atomic.AtomicReference<org.apache.hadoop.util.DiskChecker$FileIoProvider> fileIoProvider;

  private static final java.lang.String DISK_IO_FILE_PREFIX;

  static final int DISK_IO_MAX_ITERATIONS;

  public org.apache.hadoop.util.DiskChecker();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: return

  public static void checkDir(java.io.File) throws org.apache.hadoop.util.DiskChecker$DiskErrorException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method checkDirInternal:(Ljava/io/File;)V
       4: return

  public static void checkDirWithDiskIo(java.io.File) throws org.apache.hadoop.util.DiskChecker$DiskErrorException;
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method checkDirInternal:(Ljava/io/File;)V
       4: aload_0
       5: invokestatic  #3                  // Method doDiskIo:(Ljava/io/File;)V
       8: return

  private static void checkDirInternal(java.io.File) throws org.apache.hadoop.util.DiskChecker$DiskErrorException;
    Code:
       0: aload_0
       1: invokestatic  #4                  // Method mkdirsWithExistsCheck:(Ljava/io/File;)Z
       4: ifne          37
       7: new           #5                  // class org/apache/hadoop/util/DiskChecker$DiskErrorException
      10: dup
      11: new           #6                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #8                  // String Cannot create directory:
      20: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: invokevirtual #10                 // Method java/io/File.toString:()Ljava/lang/String;
      27: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #12                 // Method org/apache/hadoop/util/DiskChecker$DiskErrorException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: invokestatic  #13                 // Method checkAccessByFileMethods:(Ljava/io/File;)V
      41: return

  public static void checkDir(org.apache.hadoop.fs.LocalFileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws org.apache.hadoop.util.DiskChecker$DiskErrorException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #14                 // Method checkDirInternal:(Lorg/apache/hadoop/fs/LocalFileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
       6: return

  public static void checkDirWithDiskIo(org.apache.hadoop.fs.LocalFileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws org.apache.hadoop.util.DiskChecker$DiskErrorException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #14                 // Method checkDirInternal:(Lorg/apache/hadoop/fs/LocalFileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #15                 // Method org/apache/hadoop/fs/LocalFileSystem.pathToFile:(Lorg/apache/hadoop/fs/Path;)Ljava/io/File;
      11: invokestatic  #3                  // Method doDiskIo:(Ljava/io/File;)V
      14: return

  private static void checkDirInternal(org.apache.hadoop.fs.LocalFileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws org.apache.hadoop.util.DiskChecker$DiskErrorException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokestatic  #16                 // Method mkdirsWithExistsAndPermissionCheck:(Lorg/apache/hadoop/fs/LocalFileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
       6: aload_0
       7: aload_1
       8: invokevirtual #15                 // Method org/apache/hadoop/fs/LocalFileSystem.pathToFile:(Lorg/apache/hadoop/fs/Path;)Ljava/io/File;
      11: invokestatic  #13                 // Method checkAccessByFileMethods:(Ljava/io/File;)V
      14: return

  private static void checkAccessByFileMethods(java.io.File) throws org.apache.hadoop.util.DiskChecker$DiskErrorException;
    Code:
       0: aload_0
       1: invokevirtual #17                 // Method java/io/File.isDirectory:()Z
       4: ifne          37
       7: new           #5                  // class org/apache/hadoop/util/DiskChecker$DiskErrorException
      10: dup
      11: new           #6                  // class java/lang/StringBuilder
      14: dup
      15: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      18: ldc           #18                 // String Not a directory:
      20: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      23: aload_0
      24: invokevirtual #10                 // Method java/io/File.toString:()Ljava/lang/String;
      27: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #12                 // Method org/apache/hadoop/util/DiskChecker$DiskErrorException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: invokestatic  #19                 // Method org/apache/hadoop/fs/FileUtil.canRead:(Ljava/io/File;)Z
      41: ifne          74
      44: new           #5                  // class org/apache/hadoop/util/DiskChecker$DiskErrorException
      47: dup
      48: new           #6                  // class java/lang/StringBuilder
      51: dup
      52: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      55: ldc           #20                 // String Directory is not readable:
      57: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_0
      61: invokevirtual #10                 // Method java/io/File.toString:()Ljava/lang/String;
      64: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      67: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      70: invokespecial #12                 // Method org/apache/hadoop/util/DiskChecker$DiskErrorException."<init>":(Ljava/lang/String;)V
      73: athrow
      74: aload_0
      75: invokestatic  #21                 // Method org/apache/hadoop/fs/FileUtil.canWrite:(Ljava/io/File;)Z
      78: ifne          111
      81: new           #5                  // class org/apache/hadoop/util/DiskChecker$DiskErrorException
      84: dup
      85: new           #6                  // class java/lang/StringBuilder
      88: dup
      89: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      92: ldc           #22                 // String Directory is not writable:
      94: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: aload_0
      98: invokevirtual #10                 // Method java/io/File.toString:()Ljava/lang/String;
     101: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     104: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: invokespecial #12                 // Method org/apache/hadoop/util/DiskChecker$DiskErrorException."<init>":(Ljava/lang/String;)V
     110: athrow
     111: aload_0
     112: invokestatic  #23                 // Method org/apache/hadoop/fs/FileUtil.canExecute:(Ljava/io/File;)Z
     115: ifne          148
     118: new           #5                  // class org/apache/hadoop/util/DiskChecker$DiskErrorException
     121: dup
     122: new           #6                  // class java/lang/StringBuilder
     125: dup
     126: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
     129: ldc           #24                 // String Directory is not executable:
     131: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     134: aload_0
     135: invokevirtual #10                 // Method java/io/File.toString:()Ljava/lang/String;
     138: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     141: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     144: invokespecial #12                 // Method org/apache/hadoop/util/DiskChecker$DiskErrorException."<init>":(Ljava/lang/String;)V
     147: athrow
     148: return

  private static boolean mkdirsWithExistsCheck(java.io.File);
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method java/io/File.mkdir:()Z
       4: ifne          14
       7: aload_0
       8: invokevirtual #26                 // Method java/io/File.exists:()Z
      11: ifeq          16
      14: iconst_1
      15: ireturn
      16: aload_0
      17: invokevirtual #27                 // Method java/io/File.getCanonicalFile:()Ljava/io/File;
      20: astore_1
      21: goto          27
      24: astore_2
      25: iconst_0
      26: ireturn
      27: aload_1
      28: invokevirtual #29                 // Method java/io/File.getParent:()Ljava/lang/String;
      31: astore_2
      32: aload_2
      33: ifnull        68
      36: new           #30                 // class java/io/File
      39: dup
      40: aload_2
      41: invokespecial #31                 // Method java/io/File."<init>":(Ljava/lang/String;)V
      44: invokestatic  #4                  // Method mkdirsWithExistsCheck:(Ljava/io/File;)Z
      47: ifeq          68
      50: aload_1
      51: invokevirtual #25                 // Method java/io/File.mkdir:()Z
      54: ifne          64
      57: aload_1
      58: invokevirtual #26                 // Method java/io/File.exists:()Z
      61: ifeq          68
      64: iconst_1
      65: goto          69
      68: iconst_0
      69: ireturn
    Exception table:
       from    to  target type
          16    21    24   Class java/io/IOException

  static void mkdirsWithExistsAndPermissionCheck(org.apache.hadoop.fs.LocalFileSystem, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #15                 // Method org/apache/hadoop/fs/LocalFileSystem.pathToFile:(Lorg/apache/hadoop/fs/Path;)Ljava/io/File;
       5: astore_3
       6: iconst_0
       7: istore        4
       9: aload_3
      10: invokevirtual #26                 // Method java/io/File.exists:()Z
      13: ifne          22
      16: aload_3
      17: invokestatic  #4                  // Method mkdirsWithExistsCheck:(Ljava/io/File;)Z
      20: istore        4
      22: iload         4
      24: ifne          42
      27: aload_0
      28: aload_1
      29: invokevirtual #32                 // Method org/apache/hadoop/fs/LocalFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
      32: invokevirtual #33                 // Method org/apache/hadoop/fs/FileStatus.getPermission:()Lorg/apache/hadoop/fs/permission/FsPermission;
      35: aload_2
      36: invokevirtual #34                 // Method org/apache/hadoop/fs/permission/FsPermission.equals:(Ljava/lang/Object;)Z
      39: ifne          48
      42: aload_0
      43: aload_1
      44: aload_2
      45: invokevirtual #35                 // Method org/apache/hadoop/fs/LocalFileSystem.setPermission:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
      48: return

  private static void doDiskIo(java.io.File) throws org.apache.hadoop.util.DiskChecker$DiskErrorException;
    Code:
       0: aconst_null
       1: astore_1
       2: iconst_0
       3: istore_2
       4: iload_2
       5: iconst_3
       6: if_icmpge     33
       9: aload_0
      10: iload_2
      11: iconst_1
      12: iadd
      13: invokestatic  #37                 // Method getFileNameForDiskIoCheck:(Ljava/io/File;I)Ljava/io/File;
      16: astore_3
      17: aload_3
      18: invokestatic  #38                 // Method diskIoCheckWithoutNativeIo:(Ljava/io/File;)V
      21: return
      22: astore        4
      24: aload         4
      26: astore_1
      27: iinc          2, 1
      30: goto          4
      33: aload_1
      34: athrow
      35: astore_1
      36: new           #5                  // class org/apache/hadoop/util/DiskChecker$DiskErrorException
      39: dup
      40: new           #6                  // class java/lang/StringBuilder
      43: dup
      44: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      47: ldc           #39                 // String Error checking directory
      49: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      52: aload_0
      53: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      56: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      59: aload_1
      60: invokespecial #41                 // Method org/apache/hadoop/util/DiskChecker$DiskErrorException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      63: athrow
    Exception table:
       from    to  target type
          17    21    22   Class java/io/IOException
           0    21    35   Class java/io/IOException
          22    35    35   Class java/io/IOException

  private static void diskIoCheckWithoutNativeIo(java.io.File) throws java.io.IOException;
    Code:
       0: aconst_null
       1: astore_1
       2: getstatic     #42                 // Field fileIoProvider:Ljava/util/concurrent/atomic/AtomicReference;
       5: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       8: checkcast     #44                 // class org/apache/hadoop/util/DiskChecker$FileIoProvider
      11: astore_2
      12: aload_2
      13: aload_0
      14: invokeinterface #45,  2           // InterfaceMethod org/apache/hadoop/util/DiskChecker$FileIoProvider.get:(Ljava/io/File;)Ljava/io/FileOutputStream;
      19: astore_1
      20: aload_2
      21: aload_1
      22: iconst_1
      23: newarray       byte
      25: invokeinterface #46,  3           // InterfaceMethod org/apache/hadoop/util/DiskChecker$FileIoProvider.write:(Ljava/io/FileOutputStream;[B)V
      30: aload_1
      31: invokevirtual #47                 // Method java/io/FileOutputStream.getFD:()Ljava/io/FileDescriptor;
      34: invokevirtual #48                 // Method java/io/FileDescriptor.sync:()V
      37: aload_1
      38: invokevirtual #49                 // Method java/io/FileOutputStream.close:()V
      41: aconst_null
      42: astore_1
      43: aload_0
      44: invokevirtual #50                 // Method java/io/File.delete:()Z
      47: ifne          84
      50: aload_0
      51: invokevirtual #26                 // Method java/io/File.exists:()Z
      54: ifeq          84
      57: new           #28                 // class java/io/IOException
      60: dup
      61: new           #6                  // class java/lang/StringBuilder
      64: dup
      65: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      68: ldc           #51                 // String Failed to delete
      70: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_0
      74: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      77: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      80: invokespecial #52                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      83: athrow
      84: aconst_null
      85: astore_0
      86: aconst_null
      87: iconst_1
      88: anewarray     #53                 // class java/io/Closeable
      91: dup
      92: iconst_0
      93: aload_1
      94: aastore
      95: invokestatic  #54                 // Method org/apache/hadoop/io/IOUtils.cleanup:(Lorg/apache/commons/logging/Log;[Ljava/io/Closeable;)V
      98: aload_0
      99: invokestatic  #55                 // Method org/apache/commons/io/FileUtils.deleteQuietly:(Ljava/io/File;)Z
     102: pop
     103: goto          126
     106: astore_3
     107: aconst_null
     108: iconst_1
     109: anewarray     #53                 // class java/io/Closeable
     112: dup
     113: iconst_0
     114: aload_1
     115: aastore
     116: invokestatic  #54                 // Method org/apache/hadoop/io/IOUtils.cleanup:(Lorg/apache/commons/logging/Log;[Ljava/io/Closeable;)V
     119: aload_0
     120: invokestatic  #55                 // Method org/apache/commons/io/FileUtils.deleteQuietly:(Ljava/io/File;)Z
     123: pop
     124: aload_3
     125: athrow
     126: return
    Exception table:
       from    to  target type
           2    86   106   any

  static java.io.File getFileNameForDiskIoCheck(java.io.File, int);
    Code:
       0: iload_1
       1: iconst_3
       2: if_icmpge     48
       5: new           #30                 // class java/io/File
       8: dup
       9: aload_0
      10: new           #6                  // class java/lang/StringBuilder
      13: dup
      14: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #56                 // String DiskChecker.OK_TO_DELETE_.
      19: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: ldc           #57                 // String %03d
      24: iconst_1
      25: anewarray     #58                 // class java/lang/Object
      28: dup
      29: iconst_0
      30: iload_1
      31: invokestatic  #59                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      34: aastore
      35: invokestatic  #60                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      38: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      44: invokespecial #61                 // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
      47: areturn
      48: new           #30                 // class java/io/File
      51: dup
      52: aload_0
      53: new           #6                  // class java/lang/StringBuilder
      56: dup
      57: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      60: ldc           #56                 // String DiskChecker.OK_TO_DELETE_.
      62: invokevirtual #9                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: invokestatic  #62                 // Method java/util/UUID.randomUUID:()Ljava/util/UUID;
      68: invokevirtual #40                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      71: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      74: invokespecial #61                 // Method java/io/File."<init>":(Ljava/io/File;Ljava/lang/String;)V
      77: areturn

  static org.apache.hadoop.util.DiskChecker$FileIoProvider replaceFileOutputStreamProvider(org.apache.hadoop.util.DiskChecker$FileIoProvider);
    Code:
       0: getstatic     #42                 // Field fileIoProvider:Ljava/util/concurrent/atomic/AtomicReference;
       3: aload_0
       4: invokevirtual #63                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #44                 // class org/apache/hadoop/util/DiskChecker$FileIoProvider
      10: areturn

  static org.apache.hadoop.util.DiskChecker$FileIoProvider getFileOutputStreamProvider();
    Code:
       0: getstatic     #42                 // Field fileIoProvider:Ljava/util/concurrent/atomic/AtomicReference;
       3: invokevirtual #43                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       6: checkcast     #44                 // class org/apache/hadoop/util/DiskChecker$FileIoProvider
       9: areturn

  static {};
    Code:
       0: ldc           #36                 // class org/apache/hadoop/util/DiskChecker
       2: invokestatic  #64                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #65                 // Field LOG:Lorg/slf4j/Logger;
       8: new           #66                 // class java/util/concurrent/atomic/AtomicReference
      11: dup
      12: new           #67                 // class org/apache/hadoop/util/DiskChecker$DefaultFileIoProvider
      15: dup
      16: aconst_null
      17: invokespecial #68                 // Method org/apache/hadoop/util/DiskChecker$DefaultFileIoProvider."<init>":(Lorg/apache/hadoop/util/DiskChecker$1;)V
      20: invokespecial #69                 // Method java/util/concurrent/atomic/AtomicReference."<init>":(Ljava/lang/Object;)V
      23: putstatic     #42                 // Field fileIoProvider:Ljava/util/concurrent/atomic/AtomicReference;
      26: return
}
