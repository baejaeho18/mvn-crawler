Compiled from "CachingGetSpaceUsed.java"
public abstract class org.apache.hadoop.fs.CachingGetSpaceUsed implements java.io.Closeable,org.apache.hadoop.fs.GetSpaceUsed {
  static final org.slf4j.Logger LOG;

  protected final java.util.concurrent.atomic.AtomicLong used;

  private final java.util.concurrent.atomic.AtomicBoolean running;

  private final long refreshInterval;

  private final long jitter;

  private final java.lang.String dirPath;

  private java.lang.Thread refreshUsed;

  public org.apache.hadoop.fs.CachingGetSpaceUsed(org.apache.hadoop.fs.GetSpaceUsed$Builder) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #3                  // Method org/apache/hadoop/fs/GetSpaceUsed$Builder.getPath:()Ljava/io/File;
       5: aload_1
       6: invokevirtual #4                  // Method org/apache/hadoop/fs/GetSpaceUsed$Builder.getInterval:()J
       9: aload_1
      10: invokevirtual #5                  // Method org/apache/hadoop/fs/GetSpaceUsed$Builder.getJitter:()J
      13: aload_1
      14: invokevirtual #6                  // Method org/apache/hadoop/fs/GetSpaceUsed$Builder.getInitialUsed:()J
      17: invokespecial #7                  // Method "<init>":(Ljava/io/File;JJJ)V
      20: return

  org.apache.hadoop.fs.CachingGetSpaceUsed(java.io.File, long, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #8                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #9                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: invokespecial #10                 // Method java/util/concurrent/atomic/AtomicLong."<init>":()V
      12: putfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
      15: aload_0
      16: new           #12                 // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: iconst_1
      21: invokespecial #13                 // Method java/util/concurrent/atomic/AtomicBoolean."<init>":(Z)V
      24: putfield      #14                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
      27: aload_0
      28: aload_1
      29: invokevirtual #15                 // Method java/io/File.getCanonicalPath:()Ljava/lang/String;
      32: putfield      #16                 // Field dirPath:Ljava/lang/String;
      35: aload_0
      36: lload_2
      37: putfield      #2                  // Field refreshInterval:J
      40: aload_0
      41: lload         4
      43: putfield      #1                  // Field jitter:J
      46: aload_0
      47: getfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
      50: lload         6
      52: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      55: return

  void init();
    Code:
       0: aload_0
       1: getfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lconst_0
       8: lcmp
       9: ifge          24
      12: aload_0
      13: getfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
      16: lconst_0
      17: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
      20: aload_0
      21: invokevirtual #19                 // Method refresh:()V
      24: aload_0
      25: getfield      #2                  // Field refreshInterval:J
      28: lconst_0
      29: lcmp
      30: ifle          92
      33: aload_0
      34: new           #20                 // class java/lang/Thread
      37: dup
      38: new           #21                 // class org/apache/hadoop/fs/CachingGetSpaceUsed$RefreshThread
      41: dup
      42: aload_0
      43: invokespecial #22                 // Method org/apache/hadoop/fs/CachingGetSpaceUsed$RefreshThread."<init>":(Lorg/apache/hadoop/fs/CachingGetSpaceUsed;)V
      46: new           #23                 // class java/lang/StringBuilder
      49: dup
      50: invokespecial #24                 // Method java/lang/StringBuilder."<init>":()V
      53: ldc           #25                 // String refreshUsed-
      55: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      58: aload_0
      59: getfield      #16                 // Field dirPath:Ljava/lang/String;
      62: invokevirtual #26                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      65: invokevirtual #27                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      68: invokespecial #28                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      71: putfield      #29                 // Field refreshUsed:Ljava/lang/Thread;
      74: aload_0
      75: getfield      #29                 // Field refreshUsed:Ljava/lang/Thread;
      78: iconst_1
      79: invokevirtual #30                 // Method java/lang/Thread.setDaemon:(Z)V
      82: aload_0
      83: getfield      #29                 // Field refreshUsed:Ljava/lang/Thread;
      86: invokevirtual #31                 // Method java/lang/Thread.start:()V
      89: goto          105
      92: aload_0
      93: getfield      #14                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
      96: iconst_0
      97: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
     100: aload_0
     101: aconst_null
     102: putfield      #29                 // Field refreshUsed:Ljava/lang/Thread;
     105: return

  protected abstract void refresh();

  public long getUsed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #18                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lconst_0
       8: invokestatic  #33                 // Method java/lang/Math.max:(JJ)J
      11: lreturn

  public java.lang.String getDirPath();
    Code:
       0: aload_0
       1: getfield      #16                 // Field dirPath:Ljava/lang/String;
       4: areturn

  public void incDfsUsed(long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #34                 // Method java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
       8: pop2
       9: return

  boolean running();
    Code:
       0: aload_0
       1: getfield      #14                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: invokevirtual #35                 // Method java/util/concurrent/atomic/AtomicBoolean.get:()Z
       7: ireturn

  long getRefreshInterval();
    Code:
       0: aload_0
       1: getfield      #2                  // Field refreshInterval:J
       4: lreturn

  protected void setUsed(long);
    Code:
       0: aload_0
       1: getfield      #11                 // Field used:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #14                 // Field running:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: iconst_0
       5: invokevirtual #32                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
       8: aload_0
       9: getfield      #29                 // Field refreshUsed:Ljava/lang/Thread;
      12: ifnull        22
      15: aload_0
      16: getfield      #29                 // Field refreshUsed:Ljava/lang/Thread;
      19: invokevirtual #36                 // Method java/lang/Thread.interrupt:()V
      22: return

  static long access$000(org.apache.hadoop.fs.CachingGetSpaceUsed);
    Code:
       0: aload_0
       1: getfield      #2                  // Field refreshInterval:J
       4: lreturn

  static long access$100(org.apache.hadoop.fs.CachingGetSpaceUsed);
    Code:
       0: aload_0
       1: getfield      #1                  // Field jitter:J
       4: lreturn

  static {};
    Code:
       0: ldc           #37                 // class org/apache/hadoop/fs/CachingGetSpaceUsed
       2: invokestatic  #38                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #39                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
