Compiled from "InstrumentedLock.java"
public class org.apache.hadoop.util.InstrumentedLock implements java.util.concurrent.locks.Lock {
  private final java.util.concurrent.locks.Lock lock;

  private final org.slf4j.Logger logger;

  private final java.lang.String name;

  private final org.apache.hadoop.util.Timer clock;

  private final long minLoggingGap;

  private final long lockWarningThreshold;

  private volatile long lockAcquireTimestamp;

  private final java.util.concurrent.atomic.AtomicLong lastLogTimestamp;

  private final java.util.concurrent.atomic.AtomicLong warningsSuppressed;

  public org.apache.hadoop.util.InstrumentedLock(java.lang.String, org.slf4j.Logger, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: new           #1                  // class java/util/concurrent/locks/ReentrantLock
       6: dup
       7: invokespecial #2                  // Method java/util/concurrent/locks/ReentrantLock."<init>":()V
      10: lload_3
      11: lload         5
      13: invokespecial #3                  // Method "<init>":(Ljava/lang/String;Lorg/slf4j/Logger;Ljava/util/concurrent/locks/Lock;JJ)V
      16: return

  public org.apache.hadoop.util.InstrumentedLock(java.lang.String, org.slf4j.Logger, java.util.concurrent.locks.Lock, long, long);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: lload         4
       6: lload         6
       8: new           #4                  // class org/apache/hadoop/util/Timer
      11: dup
      12: invokespecial #5                  // Method org/apache/hadoop/util/Timer."<init>":()V
      15: invokespecial #6                  // Method "<init>":(Ljava/lang/String;Lorg/slf4j/Logger;Ljava/util/concurrent/locks/Lock;JJLorg/apache/hadoop/util/Timer;)V
      18: return

  org.apache.hadoop.util.InstrumentedLock(java.lang.String, org.slf4j.Logger, java.util.concurrent.locks.Lock, long, long, org.apache.hadoop.util.Timer);
    Code:
       0: aload_0
       1: invokespecial #7                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #8                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: lconst_0
      10: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      13: putfield      #10                 // Field warningsSuppressed:Ljava/util/concurrent/atomic/AtomicLong;
      16: aload_0
      17: aload_1
      18: putfield      #11                 // Field name:Ljava/lang/String;
      21: aload_0
      22: aload_3
      23: putfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
      26: aload_0
      27: aload         8
      29: putfield      #13                 // Field clock:Lorg/apache/hadoop/util/Timer;
      32: aload_0
      33: aload_2
      34: putfield      #14                 // Field logger:Lorg/slf4j/Logger;
      37: aload_0
      38: lload         4
      40: putfield      #15                 // Field minLoggingGap:J
      43: aload_0
      44: lload         6
      46: putfield      #16                 // Field lockWarningThreshold:J
      49: aload_0
      50: new           #8                  // class java/util/concurrent/atomic/AtomicLong
      53: dup
      54: aload         8
      56: invokevirtual #17                 // Method org/apache/hadoop/util/Timer.monotonicNow:()J
      59: aload_0
      60: getfield      #15                 // Field minLoggingGap:J
      63: aload_0
      64: getfield      #16                 // Field lockWarningThreshold:J
      67: invokestatic  #18                 // Method java/lang/Math.max:(JJ)J
      70: lsub
      71: invokespecial #9                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      74: putfield      #19                 // Field lastLogTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      77: return

  public void lock();
    Code:
       0: aload_0
       1: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #20,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lock:()V
       9: aload_0
      10: invokevirtual #21                 // Method startLockTiming:()V
      13: return

  public void lockInterruptibly() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #22,  1           // InterfaceMethod java/util/concurrent/locks/Lock.lockInterruptibly:()V
       9: aload_0
      10: invokevirtual #21                 // Method startLockTiming:()V
      13: return

  public boolean tryLock();
    Code:
       0: aload_0
       1: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #23,  1           // InterfaceMethod java/util/concurrent/locks/Lock.tryLock:()Z
       9: ifeq          18
      12: aload_0
      13: invokevirtual #21                 // Method startLockTiming:()V
      16: iconst_1
      17: ireturn
      18: iconst_0
      19: ireturn

  public boolean tryLock(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: lload_1
       5: aload_3
       6: invokeinterface #24,  4           // InterfaceMethod java/util/concurrent/locks/Lock.tryLock:(JLjava/util/concurrent/TimeUnit;)Z
      11: ifeq          20
      14: aload_0
      15: invokevirtual #21                 // Method startLockTiming:()V
      18: iconst_1
      19: ireturn
      20: iconst_0
      21: ireturn

  public void unlock();
    Code:
       0: aload_0
       1: getfield      #13                 // Field clock:Lorg/apache/hadoop/util/Timer;
       4: invokevirtual #17                 // Method org/apache/hadoop/util/Timer.monotonicNow:()J
       7: lstore_1
       8: aload_0
       9: getfield      #25                 // Field lockAcquireTimestamp:J
      12: lstore_3
      13: aload_0
      14: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
      17: invokeinterface #26,  1           // InterfaceMethod java/util/concurrent/locks/Lock.unlock:()V
      22: aload_0
      23: lload_3
      24: lload_1
      25: invokevirtual #27                 // Method check:(JJ)V
      28: return

  public java.util.concurrent.locks.Condition newCondition();
    Code:
       0: aload_0
       1: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: invokeinterface #28,  1           // InterfaceMethod java/util/concurrent/locks/Lock.newCondition:()Ljava/util/concurrent/locks/Condition;
       9: areturn

  void logWarning(long, long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field logger:Lorg/slf4j/Logger;
       4: ldc           #29                 // String Lock held time above threshold: lock identifier: %s lockHeldTimeMs=%d ms. Suppressed %d lock warnings. The stack trace is: %s
       6: iconst_4
       7: anewarray     #30                 // class java/lang/Object
      10: dup
      11: iconst_0
      12: aload_0
      13: getfield      #11                 // Field name:Ljava/lang/String;
      16: aastore
      17: dup
      18: iconst_1
      19: lload_1
      20: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      23: aastore
      24: dup
      25: iconst_2
      26: lload_3
      27: invokestatic  #31                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      30: aastore
      31: dup
      32: iconst_3
      33: invokestatic  #32                 // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
      36: invokestatic  #33                 // Method org/apache/hadoop/util/StringUtils.getStackTrace:(Ljava/lang/Thread;)Ljava/lang/String;
      39: aastore
      40: invokestatic  #34                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      43: invokeinterface #35,  2           // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;)V
      48: return

  protected void startLockTiming();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #13                 // Field clock:Lorg/apache/hadoop/util/Timer;
       5: invokevirtual #17                 // Method org/apache/hadoop/util/Timer.monotonicNow:()J
       8: putfield      #25                 // Field lockAcquireTimestamp:J
      11: return

  protected void check(long, long);
    Code:
       0: aload_0
       1: getfield      #14                 // Field logger:Lorg/slf4j/Logger;
       4: invokeinterface #36,  1           // InterfaceMethod org/slf4j/Logger.isWarnEnabled:()Z
       9: ifne          13
      12: return
      13: lload_3
      14: lload_1
      15: lsub
      16: lstore        5
      18: aload_0
      19: getfield      #16                 // Field lockWarningThreshold:J
      22: lload         5
      24: lsub
      25: lconst_0
      26: lcmp
      27: ifge          108
      30: aload_0
      31: getfield      #13                 // Field clock:Lorg/apache/hadoop/util/Timer;
      34: invokevirtual #17                 // Method org/apache/hadoop/util/Timer.monotonicNow:()J
      37: lstore        7
      39: aload_0
      40: getfield      #19                 // Field lastLogTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      43: invokevirtual #37                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      46: lstore        9
      48: lload         7
      50: lload         9
      52: lsub
      53: lstore        11
      55: lload         11
      57: aload_0
      58: getfield      #15                 // Field minLoggingGap:J
      61: lsub
      62: lconst_0
      63: lcmp
      64: ifge          76
      67: aload_0
      68: getfield      #10                 // Field warningsSuppressed:Ljava/util/concurrent/atomic/AtomicLong;
      71: invokevirtual #38                 // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
      74: pop2
      75: return
      76: aload_0
      77: getfield      #19                 // Field lastLogTimestamp:Ljava/util/concurrent/atomic/AtomicLong;
      80: lload         9
      82: lload         7
      84: invokevirtual #39                 // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      87: ifeq          30
      90: aload_0
      91: getfield      #10                 // Field warningsSuppressed:Ljava/util/concurrent/atomic/AtomicLong;
      94: lconst_0
      95: invokevirtual #40                 // Method java/util/concurrent/atomic/AtomicLong.getAndSet:(J)J
      98: lstore        11
     100: aload_0
     101: lload         5
     103: lload         11
     105: invokevirtual #41                 // Method logWarning:(JJ)V
     108: return

  protected java.util.concurrent.locks.Lock getLock();
    Code:
       0: aload_0
       1: getfield      #12                 // Field lock:Ljava/util/concurrent/locks/Lock;
       4: areturn

  protected org.apache.hadoop.util.Timer getTimer();
    Code:
       0: aload_0
       1: getfield      #13                 // Field clock:Lorg/apache/hadoop/util/Timer;
       4: areturn
}
