Compiled from "BufferedFSInputStream.java"
public class org.apache.hadoop.fs.BufferedFSInputStream extends java.io.BufferedInputStream implements org.apache.hadoop.fs.Seekable,org.apache.hadoop.fs.PositionedReadable,org.apache.hadoop.fs.HasFileDescriptor {
  public org.apache.hadoop.fs.BufferedFSInputStream(org.apache.hadoop.fs.FSInputStream, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #1                  // Method java/io/BufferedInputStream."<init>":(Ljava/io/InputStream;I)V
       6: return

  public long getPos() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:Ljava/io/InputStream;
       4: ifnonnull     17
       7: new           #3                  // class java/io/IOException
      10: dup
      11: ldc           #5                  // String Stream is closed!
      13: invokespecial #6                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #2                  // Field in:Ljava/io/InputStream;
      21: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
      24: invokevirtual #8                  // Method org/apache/hadoop/fs/FSInputStream.getPos:()J
      27: aload_0
      28: getfield      #9                  // Field count:I
      31: aload_0
      32: getfield      #10                 // Field pos:I
      35: isub
      36: i2l
      37: lsub
      38: lreturn

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          8
       6: lconst_0
       7: lreturn
       8: aload_0
       9: aload_0
      10: invokevirtual #11                 // Method getPos:()J
      13: lload_1
      14: ladd
      15: invokevirtual #12                 // Method seek:(J)V
      18: lload_1
      19: lreturn

  public void seek(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:Ljava/io/InputStream;
       4: ifnonnull     17
       7: new           #3                  // class java/io/IOException
      10: dup
      11: ldc           #5                  // String Stream is closed!
      13: invokespecial #6                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: lload_1
      18: lconst_0
      19: lcmp
      20: ifge          33
      23: new           #13                 // class java/io/EOFException
      26: dup
      27: ldc           #14                 // String Cannot seek to a negative offset
      29: invokespecial #15                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      32: athrow
      33: aload_0
      34: getfield      #10                 // Field pos:I
      37: aload_0
      38: getfield      #9                  // Field count:I
      41: if_icmpeq     87
      44: aload_0
      45: getfield      #2                  // Field in:Ljava/io/InputStream;
      48: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
      51: invokevirtual #8                  // Method org/apache/hadoop/fs/FSInputStream.getPos:()J
      54: lstore_3
      55: lload_3
      56: aload_0
      57: getfield      #9                  // Field count:I
      60: i2l
      61: lsub
      62: lstore        5
      64: lload_1
      65: lload         5
      67: lcmp
      68: iflt          87
      71: lload_1
      72: lload_3
      73: lcmp
      74: ifge          87
      77: aload_0
      78: lload_1
      79: lload         5
      81: lsub
      82: l2i
      83: putfield      #10                 // Field pos:I
      86: return
      87: aload_0
      88: iconst_0
      89: putfield      #10                 // Field pos:I
      92: aload_0
      93: iconst_0
      94: putfield      #9                  // Field count:I
      97: aload_0
      98: getfield      #2                  // Field in:Ljava/io/InputStream;
     101: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
     104: lload_1
     105: invokevirtual #16                 // Method org/apache/hadoop/fs/FSInputStream.seek:(J)V
     108: return

  public boolean seekToNewSource(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #10                 // Field pos:I
       5: aload_0
       6: iconst_0
       7: putfield      #9                  // Field count:I
      10: aload_0
      11: getfield      #2                  // Field in:Ljava/io/InputStream;
      14: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
      17: lload_1
      18: invokevirtual #17                 // Method org/apache/hadoop/fs/FSInputStream.seekToNewSource:(J)Z
      21: ireturn

  public int read(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:Ljava/io/InputStream;
       4: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
       7: lload_1
       8: aload_3
       9: iload         4
      11: iload         5
      13: invokevirtual #18                 // Method org/apache/hadoop/fs/FSInputStream.read:(J[BII)I
      16: ireturn

  public void readFully(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:Ljava/io/InputStream;
       4: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
       7: lload_1
       8: aload_3
       9: iload         4
      11: iload         5
      13: invokevirtual #19                 // Method org/apache/hadoop/fs/FSInputStream.readFully:(J[BII)V
      16: return

  public void readFully(long, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:Ljava/io/InputStream;
       4: checkcast     #7                  // class org/apache/hadoop/fs/FSInputStream
       7: lload_1
       8: aload_3
       9: invokevirtual #20                 // Method org/apache/hadoop/fs/FSInputStream.readFully:(J[B)V
      12: return

  public java.io.FileDescriptor getFileDescriptor() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field in:Ljava/io/InputStream;
       4: instanceof    #21                 // class org/apache/hadoop/fs/HasFileDescriptor
       7: ifeq          23
      10: aload_0
      11: getfield      #2                  // Field in:Ljava/io/InputStream;
      14: checkcast     #21                 // class org/apache/hadoop/fs/HasFileDescriptor
      17: invokeinterface #22,  1           // InterfaceMethod org/apache/hadoop/fs/HasFileDescriptor.getFileDescriptor:()Ljava/io/FileDescriptor;
      22: areturn
      23: aconst_null
      24: areturn
}
