Compiled from "SequenceFile.java"
public class org.apache.hadoop.io.SequenceFile$Writer implements java.io.Closeable,org.apache.hadoop.fs.Syncable {
  private org.apache.hadoop.conf.Configuration conf;

  org.apache.hadoop.fs.FSDataOutputStream out;

  boolean ownOutputStream;

  org.apache.hadoop.io.DataOutputBuffer buffer;

  java.lang.Class keyClass;

  java.lang.Class valClass;

  private final org.apache.hadoop.io.SequenceFile$CompressionType compress;

  org.apache.hadoop.io.compress.CompressionCodec codec;

  org.apache.hadoop.io.compress.CompressionOutputStream deflateFilter;

  java.io.DataOutputStream deflateOut;

  org.apache.hadoop.io.SequenceFile$Metadata metadata;

  org.apache.hadoop.io.compress.Compressor compressor;

  private boolean appendMode;

  protected org.apache.hadoop.io.serializer.Serializer keySerializer;

  protected org.apache.hadoop.io.serializer.Serializer uncompressedValSerializer;

  protected org.apache.hadoop.io.serializer.Serializer compressedValSerializer;

  long lastSyncPos;

  byte[] sync;

  int syncInterval;

  public static org.apache.hadoop.io.SequenceFile$Writer$Option file(org.apache.hadoop.fs.Path);
    Code:
       0: new           #3                  // class org/apache/hadoop/io/SequenceFile$Writer$FileOption
       3: dup
       4: aload_0
       5: invokespecial #4                  // Method org/apache/hadoop/io/SequenceFile$Writer$FileOption."<init>":(Lorg/apache/hadoop/fs/Path;)V
       8: areturn

  private static org.apache.hadoop.io.SequenceFile$Writer$Option filesystem(org.apache.hadoop.fs.FileSystem);
    Code:
       0: new           #5                  // class org/apache/hadoop/io/SequenceFile$Writer$FileSystemOption
       3: dup
       4: aload_0
       5: invokespecial #6                  // Method org/apache/hadoop/io/SequenceFile$Writer$FileSystemOption."<init>":(Lorg/apache/hadoop/fs/FileSystem;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option bufferSize(int);
    Code:
       0: new           #7                  // class org/apache/hadoop/io/SequenceFile$Writer$BufferSizeOption
       3: dup
       4: iload_0
       5: invokespecial #8                  // Method org/apache/hadoop/io/SequenceFile$Writer$BufferSizeOption."<init>":(I)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option stream(org.apache.hadoop.fs.FSDataOutputStream);
    Code:
       0: new           #9                  // class org/apache/hadoop/io/SequenceFile$Writer$StreamOption
       3: dup
       4: aload_0
       5: invokespecial #10                 // Method org/apache/hadoop/io/SequenceFile$Writer$StreamOption."<init>":(Lorg/apache/hadoop/fs/FSDataOutputStream;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option replication(short);
    Code:
       0: new           #11                 // class org/apache/hadoop/io/SequenceFile$Writer$ReplicationOption
       3: dup
       4: iload_0
       5: invokespecial #12                 // Method org/apache/hadoop/io/SequenceFile$Writer$ReplicationOption."<init>":(I)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option appendIfExists(boolean);
    Code:
       0: new           #13                 // class org/apache/hadoop/io/SequenceFile$Writer$AppendIfExistsOption
       3: dup
       4: iload_0
       5: invokespecial #14                 // Method org/apache/hadoop/io/SequenceFile$Writer$AppendIfExistsOption."<init>":(Z)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option blockSize(long);
    Code:
       0: new           #15                 // class org/apache/hadoop/io/SequenceFile$Writer$BlockSizeOption
       3: dup
       4: lload_0
       5: invokespecial #16                 // Method org/apache/hadoop/io/SequenceFile$Writer$BlockSizeOption."<init>":(J)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option progressable(org.apache.hadoop.util.Progressable);
    Code:
       0: new           #17                 // class org/apache/hadoop/io/SequenceFile$Writer$ProgressableOption
       3: dup
       4: aload_0
       5: invokespecial #18                 // Method org/apache/hadoop/io/SequenceFile$Writer$ProgressableOption."<init>":(Lorg/apache/hadoop/util/Progressable;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option keyClass(java.lang.Class<?>);
    Code:
       0: new           #19                 // class org/apache/hadoop/io/SequenceFile$Writer$KeyClassOption
       3: dup
       4: aload_0
       5: invokespecial #20                 // Method org/apache/hadoop/io/SequenceFile$Writer$KeyClassOption."<init>":(Ljava/lang/Class;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option valueClass(java.lang.Class<?>);
    Code:
       0: new           #21                 // class org/apache/hadoop/io/SequenceFile$Writer$ValueClassOption
       3: dup
       4: aload_0
       5: invokespecial #22                 // Method org/apache/hadoop/io/SequenceFile$Writer$ValueClassOption."<init>":(Ljava/lang/Class;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option metadata(org.apache.hadoop.io.SequenceFile$Metadata);
    Code:
       0: new           #23                 // class org/apache/hadoop/io/SequenceFile$Writer$MetadataOption
       3: dup
       4: aload_0
       5: invokespecial #24                 // Method org/apache/hadoop/io/SequenceFile$Writer$MetadataOption."<init>":(Lorg/apache/hadoop/io/SequenceFile$Metadata;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option compression(org.apache.hadoop.io.SequenceFile$CompressionType);
    Code:
       0: new           #25                 // class org/apache/hadoop/io/SequenceFile$Writer$CompressionOption
       3: dup
       4: aload_0
       5: invokespecial #26                 // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption."<init>":(Lorg/apache/hadoop/io/SequenceFile$CompressionType;)V
       8: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option compression(org.apache.hadoop.io.SequenceFile$CompressionType, org.apache.hadoop.io.compress.CompressionCodec);
    Code:
       0: new           #25                 // class org/apache/hadoop/io/SequenceFile$Writer$CompressionOption
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #27                 // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption."<init>":(Lorg/apache/hadoop/io/SequenceFile$CompressionType;Lorg/apache/hadoop/io/compress/CompressionCodec;)V
       9: areturn

  public static org.apache.hadoop.io.SequenceFile$Writer$Option syncInterval(int);
    Code:
       0: new           #28                 // class org/apache/hadoop/io/SequenceFile$Writer$SyncIntervalOption
       3: dup
       4: iload_0
       5: invokespecial #29                 // Method org/apache/hadoop/io/SequenceFile$Writer$SyncIntervalOption."<init>":(I)V
       8: areturn

  org.apache.hadoop.io.SequenceFile$Writer(org.apache.hadoop.conf.Configuration, org.apache.hadoop.io.SequenceFile$Writer$Option...) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #31                 // Field ownOutputStream:Z
       9: aload_0
      10: new           #32                 // class org/apache/hadoop/io/DataOutputBuffer
      13: dup
      14: invokespecial #33                 // Method org/apache/hadoop/io/DataOutputBuffer."<init>":()V
      17: putfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
      20: aload_0
      21: aconst_null
      22: putfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
      25: aload_0
      26: aconst_null
      27: putfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
      30: aload_0
      31: aconst_null
      32: putfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
      35: aload_0
      36: aconst_null
      37: putfield      #38                 // Field metadata:Lorg/apache/hadoop/io/SequenceFile$Metadata;
      40: aload_0
      41: aconst_null
      42: putfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
      45: aload_0
      46: iconst_0
      47: putfield      #40                 // Field appendMode:Z
      50: ldc           #41                 // String MD5
      52: invokestatic  #42                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
      55: astore_3
      56: invokestatic  #43                 // Method org/apache/hadoop/util/Time.now:()J
      59: lstore        4
      61: aload_3
      62: new           #44                 // class java/lang/StringBuilder
      65: dup
      66: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      69: new           #46                 // class java/rmi/server/UID
      72: dup
      73: invokespecial #47                 // Method java/rmi/server/UID."<init>":()V
      76: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      79: ldc           #49                 // String @
      81: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      84: lload         4
      86: invokevirtual #51                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      89: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      92: getstatic     #53                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      95: invokevirtual #54                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
      98: invokevirtual #55                 // Method java/security/MessageDigest.update:([B)V
     101: aload_0
     102: aload_3
     103: invokevirtual #56                 // Method java/security/MessageDigest.digest:()[B
     106: putfield      #57                 // Field sync:[B
     109: goto          122
     112: astore_3
     113: new           #59                 // class java/lang/RuntimeException
     116: dup
     117: aload_3
     118: invokespecial #60                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     121: athrow
     122: ldc           #15                 // class org/apache/hadoop/io/SequenceFile$Writer$BlockSizeOption
     124: aload_2
     125: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     128: checkcast     #15                 // class org/apache/hadoop/io/SequenceFile$Writer$BlockSizeOption
     131: astore_3
     132: ldc           #7                  // class org/apache/hadoop/io/SequenceFile$Writer$BufferSizeOption
     134: aload_2
     135: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     138: checkcast     #7                  // class org/apache/hadoop/io/SequenceFile$Writer$BufferSizeOption
     141: astore        4
     143: ldc           #11                 // class org/apache/hadoop/io/SequenceFile$Writer$ReplicationOption
     145: aload_2
     146: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     149: checkcast     #11                 // class org/apache/hadoop/io/SequenceFile$Writer$ReplicationOption
     152: astore        5
     154: ldc           #17                 // class org/apache/hadoop/io/SequenceFile$Writer$ProgressableOption
     156: aload_2
     157: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     160: checkcast     #17                 // class org/apache/hadoop/io/SequenceFile$Writer$ProgressableOption
     163: astore        6
     165: ldc           #3                  // class org/apache/hadoop/io/SequenceFile$Writer$FileOption
     167: aload_2
     168: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     171: checkcast     #3                  // class org/apache/hadoop/io/SequenceFile$Writer$FileOption
     174: astore        7
     176: ldc           #13                 // class org/apache/hadoop/io/SequenceFile$Writer$AppendIfExistsOption
     178: aload_2
     179: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     182: checkcast     #13                 // class org/apache/hadoop/io/SequenceFile$Writer$AppendIfExistsOption
     185: astore        8
     187: ldc           #5                  // class org/apache/hadoop/io/SequenceFile$Writer$FileSystemOption
     189: aload_2
     190: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     193: checkcast     #5                  // class org/apache/hadoop/io/SequenceFile$Writer$FileSystemOption
     196: astore        9
     198: ldc           #9                  // class org/apache/hadoop/io/SequenceFile$Writer$StreamOption
     200: aload_2
     201: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     204: checkcast     #9                  // class org/apache/hadoop/io/SequenceFile$Writer$StreamOption
     207: astore        10
     209: ldc           #19                 // class org/apache/hadoop/io/SequenceFile$Writer$KeyClassOption
     211: aload_2
     212: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     215: checkcast     #19                 // class org/apache/hadoop/io/SequenceFile$Writer$KeyClassOption
     218: astore        11
     220: ldc           #21                 // class org/apache/hadoop/io/SequenceFile$Writer$ValueClassOption
     222: aload_2
     223: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     226: checkcast     #21                 // class org/apache/hadoop/io/SequenceFile$Writer$ValueClassOption
     229: astore        12
     231: ldc           #23                 // class org/apache/hadoop/io/SequenceFile$Writer$MetadataOption
     233: aload_2
     234: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     237: checkcast     #23                 // class org/apache/hadoop/io/SequenceFile$Writer$MetadataOption
     240: astore        13
     242: ldc           #25                 // class org/apache/hadoop/io/SequenceFile$Writer$CompressionOption
     244: aload_2
     245: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     248: checkcast     #25                 // class org/apache/hadoop/io/SequenceFile$Writer$CompressionOption
     251: astore        14
     253: ldc           #28                 // class org/apache/hadoop/io/SequenceFile$Writer$SyncIntervalOption
     255: aload_2
     256: invokestatic  #61                 // Method org/apache/hadoop/util/Options.getOption:(Ljava/lang/Class;[Ljava/lang/Object;)Ljava/lang/Object;
     259: checkcast     #28                 // class org/apache/hadoop/io/SequenceFile$Writer$SyncIntervalOption
     262: astore        15
     264: aload         7
     266: ifnonnull     273
     269: iconst_1
     270: goto          274
     273: iconst_0
     274: aload         10
     276: ifnonnull     283
     279: iconst_1
     280: goto          284
     283: iconst_0
     284: if_icmpne     297
     287: new           #62                 // class java/lang/IllegalArgumentException
     290: dup
     291: ldc           #63                 // String file or stream must be specified
     293: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     296: athrow
     297: aload         7
     299: ifnonnull     331
     302: aload_3
     303: ifnonnull     321
     306: aload         4
     308: ifnonnull     321
     311: aload         5
     313: ifnonnull     321
     316: aload         6
     318: ifnull        331
     321: new           #62                 // class java/lang/IllegalArgumentException
     324: dup
     325: ldc           #65                 // String file modifier options not compatible with stream
     327: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     330: athrow
     331: aload         7
     333: ifnull        340
     336: iconst_1
     337: goto          341
     340: iconst_0
     341: istore        17
     343: iload         17
     345: ifeq          748
     348: aload         7
     350: invokevirtual #66                 // Method org/apache/hadoop/io/SequenceFile$Writer$FileOption.getValue:()Lorg/apache/hadoop/fs/Path;
     353: astore        18
     355: aload         9
     357: ifnull        370
     360: aload         9
     362: invokevirtual #67                 // Method org/apache/hadoop/io/SequenceFile$Writer$FileSystemOption.getValue:()Lorg/apache/hadoop/fs/FileSystem;
     365: astore        19
     367: goto          378
     370: aload         18
     372: aload_1
     373: invokevirtual #68                 // Method org/apache/hadoop/fs/Path.getFileSystem:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
     376: astore        19
     378: aload         4
     380: ifnonnull     390
     383: aload_1
     384: invokestatic  #69                 // Method org/apache/hadoop/io/SequenceFile.access$100:(Lorg/apache/hadoop/conf/Configuration;)I
     387: goto          395
     390: aload         4
     392: invokevirtual #70                 // Method org/apache/hadoop/io/SequenceFile$Writer$BufferSizeOption.getValue:()I
     395: istore        20
     397: aload         5
     399: ifnonnull     412
     402: aload         19
     404: aload         18
     406: invokevirtual #71                 // Method org/apache/hadoop/fs/FileSystem.getDefaultReplication:(Lorg/apache/hadoop/fs/Path;)S
     409: goto          418
     412: aload         5
     414: invokevirtual #72                 // Method org/apache/hadoop/io/SequenceFile$Writer$ReplicationOption.getValue:()I
     417: i2s
     418: istore        21
     420: aload_3
     421: ifnonnull     434
     424: aload         19
     426: aload         18
     428: invokevirtual #73                 // Method org/apache/hadoop/fs/FileSystem.getDefaultBlockSize:(Lorg/apache/hadoop/fs/Path;)J
     431: goto          438
     434: aload_3
     435: invokevirtual #74                 // Method org/apache/hadoop/io/SequenceFile$Writer$BlockSizeOption.getValue:()J
     438: lstore        22
     440: aload         6
     442: ifnonnull     449
     445: aconst_null
     446: goto          454
     449: aload         6
     451: invokevirtual #75                 // Method org/apache/hadoop/io/SequenceFile$Writer$ProgressableOption.getValue:()Lorg/apache/hadoop/util/Progressable;
     454: astore        24
     456: aload         8
     458: ifnull        727
     461: aload         8
     463: invokevirtual #76                 // Method org/apache/hadoop/io/SequenceFile$Writer$AppendIfExistsOption.getValue:()Z
     466: ifeq          727
     469: aload         19
     471: aload         18
     473: invokevirtual #77                 // Method org/apache/hadoop/fs/FileSystem.exists:(Lorg/apache/hadoop/fs/Path;)Z
     476: ifeq          727
     479: new           #78                 // class org/apache/hadoop/io/SequenceFile$Reader
     482: dup
     483: aload_1
     484: iconst_2
     485: anewarray     #79                 // class org/apache/hadoop/io/SequenceFile$Reader$Option
     488: dup
     489: iconst_0
     490: aload         18
     492: invokestatic  #80                 // Method org/apache/hadoop/io/SequenceFile$Reader.file:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/io/SequenceFile$Reader$Option;
     495: aastore
     496: dup
     497: iconst_1
     498: new           #81                 // class org/apache/hadoop/io/SequenceFile$Reader$OnlyHeaderOption
     501: dup
     502: aconst_null
     503: invokespecial #82                 // Method org/apache/hadoop/io/SequenceFile$Reader$OnlyHeaderOption."<init>":(Lorg/apache/hadoop/io/SequenceFile$1;)V
     506: aastore
     507: invokespecial #83                 // Method org/apache/hadoop/io/SequenceFile$Reader."<init>":(Lorg/apache/hadoop/conf/Configuration;[Lorg/apache/hadoop/io/SequenceFile$Reader$Option;)V
     510: astore        25
     512: aload         11
     514: invokevirtual #84                 // Method org/apache/hadoop/io/SequenceFile$Writer$KeyClassOption.getValue:()Ljava/lang/Class;
     517: aload         25
     519: invokevirtual #85                 // Method org/apache/hadoop/io/SequenceFile$Reader.getKeyClass:()Ljava/lang/Class;
     522: if_acmpne     538
     525: aload         12
     527: invokevirtual #86                 // Method org/apache/hadoop/io/SequenceFile$Writer$ValueClassOption.getValue:()Ljava/lang/Class;
     530: aload         25
     532: invokevirtual #87                 // Method org/apache/hadoop/io/SequenceFile$Reader.getValueClass:()Ljava/lang/Class;
     535: if_acmpeq     548
     538: new           #62                 // class java/lang/IllegalArgumentException
     541: dup
     542: ldc           #88                 // String Key/value class provided does not match the file
     544: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     547: athrow
     548: aload         25
     550: invokestatic  #89                 // Method org/apache/hadoop/io/SequenceFile$Reader.access$300:(Lorg/apache/hadoop/io/SequenceFile$Reader;)B
     553: invokestatic  #90                 // Method org/apache/hadoop/io/SequenceFile.access$400:()[B
     556: iconst_3
     557: baload
     558: if_icmpeq     579
     561: new           #91                 // class org/apache/hadoop/io/VersionMismatchException
     564: dup
     565: invokestatic  #90                 // Method org/apache/hadoop/io/SequenceFile.access$400:()[B
     568: iconst_3
     569: baload
     570: aload         25
     572: invokestatic  #89                 // Method org/apache/hadoop/io/SequenceFile$Reader.access$300:(Lorg/apache/hadoop/io/SequenceFile$Reader;)B
     575: invokespecial #92                 // Method org/apache/hadoop/io/VersionMismatchException."<init>":(BB)V
     578: athrow
     579: aload         13
     581: ifnull        594
     584: invokestatic  #93                 // Method org/apache/hadoop/io/SequenceFile.access$500:()Lorg/slf4j/Logger;
     587: ldc           #94                 // String MetaData Option is ignored during append
     589: invokeinterface #95,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
     594: aload         25
     596: invokevirtual #96                 // Method org/apache/hadoop/io/SequenceFile$Reader.getMetadata:()Lorg/apache/hadoop/io/SequenceFile$Metadata;
     599: invokestatic  #97                 // Method metadata:(Lorg/apache/hadoop/io/SequenceFile$Metadata;)Lorg/apache/hadoop/io/SequenceFile$Writer$Option;
     602: checkcast     #23                 // class org/apache/hadoop/io/SequenceFile$Writer$MetadataOption
     605: astore        13
     607: new           #25                 // class org/apache/hadoop/io/SequenceFile$Writer$CompressionOption
     610: dup
     611: aload         25
     613: invokevirtual #98                 // Method org/apache/hadoop/io/SequenceFile$Reader.getCompressionType:()Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     616: aload         25
     618: invokevirtual #99                 // Method org/apache/hadoop/io/SequenceFile$Reader.getCompressionCodec:()Lorg/apache/hadoop/io/compress/CompressionCodec;
     621: invokespecial #27                 // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption."<init>":(Lorg/apache/hadoop/io/SequenceFile$CompressionType;Lorg/apache/hadoop/io/compress/CompressionCodec;)V
     624: astore        26
     626: aload         26
     628: invokestatic  #100                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.access$600:(Lorg/apache/hadoop/io/SequenceFile$Writer$CompressionOption;)Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     631: aload         14
     633: invokestatic  #100                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.access$600:(Lorg/apache/hadoop/io/SequenceFile$Writer$CompressionOption;)Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     636: if_acmpne     669
     639: aload         26
     641: invokestatic  #100                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.access$600:(Lorg/apache/hadoop/io/SequenceFile$Writer$CompressionOption;)Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     644: getstatic     #101                // Field org/apache/hadoop/io/SequenceFile$CompressionType.NONE:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     647: if_acmpeq     679
     650: aload         26
     652: invokestatic  #102                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.access$700:(Lorg/apache/hadoop/io/SequenceFile$Writer$CompressionOption;)Lorg/apache/hadoop/io/compress/CompressionCodec;
     655: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
     658: aload         14
     660: invokestatic  #102                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.access$700:(Lorg/apache/hadoop/io/SequenceFile$Writer$CompressionOption;)Lorg/apache/hadoop/io/compress/CompressionCodec;
     663: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
     666: if_acmpeq     679
     669: new           #62                 // class java/lang/IllegalArgumentException
     672: dup
     673: ldc           #104                // String Compression option provided does not match the file
     675: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     678: athrow
     679: aload_0
     680: aload         25
     682: invokestatic  #105                // Method org/apache/hadoop/io/SequenceFile$Reader.access$800:(Lorg/apache/hadoop/io/SequenceFile$Reader;)[B
     685: putfield      #57                 // Field sync:[B
     688: aload         25
     690: invokevirtual #106                // Method org/apache/hadoop/io/SequenceFile$Reader.close:()V
     693: goto          706
     696: astore        27
     698: aload         25
     700: invokevirtual #106                // Method org/apache/hadoop/io/SequenceFile$Reader.close:()V
     703: aload         27
     705: athrow
     706: aload         19
     708: aload         18
     710: iload         20
     712: aload         24
     714: invokevirtual #107                // Method org/apache/hadoop/fs/FileSystem.append:(Lorg/apache/hadoop/fs/Path;ILorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
     717: astore        16
     719: aload_0
     720: iconst_1
     721: putfield      #40                 // Field appendMode:Z
     724: goto          745
     727: aload         19
     729: aload         18
     731: iconst_1
     732: iload         20
     734: iload         21
     736: lload         22
     738: aload         24
     740: invokevirtual #108                // Method org/apache/hadoop/fs/FileSystem.create:(Lorg/apache/hadoop/fs/Path;ZISJLorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
     743: astore        16
     745: goto          755
     748: aload         10
     750: invokevirtual #109                // Method org/apache/hadoop/io/SequenceFile$Writer$StreamOption.getValue:()Lorg/apache/hadoop/fs/FSDataOutputStream;
     753: astore        16
     755: aload         11
     757: ifnonnull     765
     760: ldc           #110                // class java/lang/Object
     762: goto          770
     765: aload         11
     767: invokevirtual #84                 // Method org/apache/hadoop/io/SequenceFile$Writer$KeyClassOption.getValue:()Ljava/lang/Class;
     770: astore        18
     772: aload         12
     774: ifnonnull     782
     777: ldc           #110                // class java/lang/Object
     779: goto          787
     782: aload         12
     784: invokevirtual #86                 // Method org/apache/hadoop/io/SequenceFile$Writer$ValueClassOption.getValue:()Ljava/lang/Class;
     787: astore        19
     789: aload         13
     791: ifnonnull     804
     794: new           #111                // class org/apache/hadoop/io/SequenceFile$Metadata
     797: dup
     798: invokespecial #112                // Method org/apache/hadoop/io/SequenceFile$Metadata."<init>":()V
     801: goto          809
     804: aload         13
     806: invokevirtual #113                // Method org/apache/hadoop/io/SequenceFile$Writer$MetadataOption.getValue:()Lorg/apache/hadoop/io/SequenceFile$Metadata;
     809: astore        20
     811: aload_0
     812: aload         14
     814: invokevirtual #114                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.getValue:()Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     817: putfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     820: aload         14
     822: invokevirtual #116                // Method org/apache/hadoop/io/SequenceFile$Writer$CompressionOption.getCodec:()Lorg/apache/hadoop/io/compress/CompressionCodec;
     825: astore        21
     827: aload         21
     829: ifnull        863
     832: aload         21
     834: instanceof    #117                // class org/apache/hadoop/io/compress/GzipCodec
     837: ifeq          863
     840: invokestatic  #118                // Method org/apache/hadoop/util/NativeCodeLoader.isNativeCodeLoaded:()Z
     843: ifne          863
     846: aload_1
     847: invokestatic  #119                // Method org/apache/hadoop/io/compress/zlib/ZlibFactory.isNativeZlibLoaded:(Lorg/apache/hadoop/conf/Configuration;)Z
     850: ifne          863
     853: new           #62                 // class java/lang/IllegalArgumentException
     856: dup
     857: ldc           #120                // String SequenceFile doesn\'t work with GzipCodec without native-hadoop code!
     859: invokespecial #64                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
     862: athrow
     863: aload_0
     864: aload         15
     866: ifnonnull     874
     869: ldc           #121                // int 102400
     871: goto          879
     874: aload         15
     876: invokevirtual #122                // Method org/apache/hadoop/io/SequenceFile$Writer$SyncIntervalOption.getValue:()I
     879: putfield      #123                // Field syncInterval:I
     882: aload_0
     883: aload_1
     884: aload         16
     886: iload         17
     888: aload         18
     890: aload         19
     892: aload         21
     894: aload         20
     896: aload_0
     897: getfield      #123                // Field syncInterval:I
     900: invokevirtual #124                // Method init:(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FSDataOutputStream;ZLjava/lang/Class;Ljava/lang/Class;Lorg/apache/hadoop/io/compress/CompressionCodec;Lorg/apache/hadoop/io/SequenceFile$Metadata;I)V
     903: return
    Exception table:
       from    to  target type
          50   109   112   Class java/lang/Exception
         512   688   696   any
         696   698   696   any

  public org.apache.hadoop.io.SequenceFile$Writer(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, java.lang.Class, java.lang.Class) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #31                 // Field ownOutputStream:Z
       9: aload_0
      10: new           #32                 // class org/apache/hadoop/io/DataOutputBuffer
      13: dup
      14: invokespecial #33                 // Method org/apache/hadoop/io/DataOutputBuffer."<init>":()V
      17: putfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
      20: aload_0
      21: aconst_null
      22: putfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
      25: aload_0
      26: aconst_null
      27: putfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
      30: aload_0
      31: aconst_null
      32: putfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
      35: aload_0
      36: aconst_null
      37: putfield      #38                 // Field metadata:Lorg/apache/hadoop/io/SequenceFile$Metadata;
      40: aload_0
      41: aconst_null
      42: putfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
      45: aload_0
      46: iconst_0
      47: putfield      #40                 // Field appendMode:Z
      50: ldc           #41                 // String MD5
      52: invokestatic  #42                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
      55: astore        6
      57: invokestatic  #43                 // Method org/apache/hadoop/util/Time.now:()J
      60: lstore        7
      62: aload         6
      64: new           #44                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      71: new           #46                 // class java/rmi/server/UID
      74: dup
      75: invokespecial #47                 // Method java/rmi/server/UID."<init>":()V
      78: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      81: ldc           #49                 // String @
      83: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: lload         7
      88: invokevirtual #51                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      91: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: getstatic     #53                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      97: invokevirtual #54                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     100: invokevirtual #55                 // Method java/security/MessageDigest.update:([B)V
     103: aload_0
     104: aload         6
     106: invokevirtual #56                 // Method java/security/MessageDigest.digest:()[B
     109: putfield      #57                 // Field sync:[B
     112: goto          127
     115: astore        6
     117: new           #59                 // class java/lang/RuntimeException
     120: dup
     121: aload         6
     123: invokespecial #60                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     126: athrow
     127: aload_0
     128: getstatic     #101                // Field org/apache/hadoop/io/SequenceFile$CompressionType.NONE:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     131: putfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     134: aload_0
     135: aload_2
     136: aload_1
     137: aload_3
     138: invokevirtual #125                // Method org/apache/hadoop/fs/FileSystem.create:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataOutputStream;
     141: iconst_1
     142: aload         4
     144: aload         5
     146: aconst_null
     147: new           #111                // class org/apache/hadoop/io/SequenceFile$Metadata
     150: dup
     151: invokespecial #112                // Method org/apache/hadoop/io/SequenceFile$Metadata."<init>":()V
     154: ldc           #121                // int 102400
     156: invokevirtual #124                // Method init:(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FSDataOutputStream;ZLjava/lang/Class;Ljava/lang/Class;Lorg/apache/hadoop/io/compress/CompressionCodec;Lorg/apache/hadoop/io/SequenceFile$Metadata;I)V
     159: return
    Exception table:
       from    to  target type
          50   112   115   Class java/lang/Exception

  public org.apache.hadoop.io.SequenceFile$Writer(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, java.lang.Class, java.lang.Class, org.apache.hadoop.util.Progressable, org.apache.hadoop.io.SequenceFile$Metadata) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #31                 // Field ownOutputStream:Z
       9: aload_0
      10: new           #32                 // class org/apache/hadoop/io/DataOutputBuffer
      13: dup
      14: invokespecial #33                 // Method org/apache/hadoop/io/DataOutputBuffer."<init>":()V
      17: putfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
      20: aload_0
      21: aconst_null
      22: putfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
      25: aload_0
      26: aconst_null
      27: putfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
      30: aload_0
      31: aconst_null
      32: putfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
      35: aload_0
      36: aconst_null
      37: putfield      #38                 // Field metadata:Lorg/apache/hadoop/io/SequenceFile$Metadata;
      40: aload_0
      41: aconst_null
      42: putfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
      45: aload_0
      46: iconst_0
      47: putfield      #40                 // Field appendMode:Z
      50: ldc           #41                 // String MD5
      52: invokestatic  #42                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
      55: astore        8
      57: invokestatic  #43                 // Method org/apache/hadoop/util/Time.now:()J
      60: lstore        9
      62: aload         8
      64: new           #44                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      71: new           #46                 // class java/rmi/server/UID
      74: dup
      75: invokespecial #47                 // Method java/rmi/server/UID."<init>":()V
      78: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      81: ldc           #49                 // String @
      83: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: lload         9
      88: invokevirtual #51                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      91: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: getstatic     #53                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      97: invokevirtual #54                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     100: invokevirtual #55                 // Method java/security/MessageDigest.update:([B)V
     103: aload_0
     104: aload         8
     106: invokevirtual #56                 // Method java/security/MessageDigest.digest:()[B
     109: putfield      #57                 // Field sync:[B
     112: goto          127
     115: astore        8
     117: new           #59                 // class java/lang/RuntimeException
     120: dup
     121: aload         8
     123: invokespecial #60                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     126: athrow
     127: aload_0
     128: getstatic     #101                // Field org/apache/hadoop/io/SequenceFile$CompressionType.NONE:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     131: putfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     134: aload_0
     135: aload_2
     136: aload_1
     137: aload_3
     138: aload         6
     140: invokevirtual #126                // Method org/apache/hadoop/fs/FileSystem.create:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
     143: iconst_1
     144: aload         4
     146: aload         5
     148: aconst_null
     149: aload         7
     151: ldc           #121                // int 102400
     153: invokevirtual #124                // Method init:(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FSDataOutputStream;ZLjava/lang/Class;Ljava/lang/Class;Lorg/apache/hadoop/io/compress/CompressionCodec;Lorg/apache/hadoop/io/SequenceFile$Metadata;I)V
     156: return
    Exception table:
       from    to  target type
          50   112   115   Class java/lang/Exception

  public org.apache.hadoop.io.SequenceFile$Writer(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.Path, java.lang.Class, java.lang.Class, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.io.SequenceFile$Metadata) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #30                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #31                 // Field ownOutputStream:Z
       9: aload_0
      10: new           #32                 // class org/apache/hadoop/io/DataOutputBuffer
      13: dup
      14: invokespecial #33                 // Method org/apache/hadoop/io/DataOutputBuffer."<init>":()V
      17: putfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
      20: aload_0
      21: aconst_null
      22: putfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
      25: aload_0
      26: aconst_null
      27: putfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
      30: aload_0
      31: aconst_null
      32: putfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
      35: aload_0
      36: aconst_null
      37: putfield      #38                 // Field metadata:Lorg/apache/hadoop/io/SequenceFile$Metadata;
      40: aload_0
      41: aconst_null
      42: putfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
      45: aload_0
      46: iconst_0
      47: putfield      #40                 // Field appendMode:Z
      50: ldc           #41                 // String MD5
      52: invokestatic  #42                 // Method java/security/MessageDigest.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;
      55: astore        12
      57: invokestatic  #43                 // Method org/apache/hadoop/util/Time.now:()J
      60: lstore        13
      62: aload         12
      64: new           #44                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      71: new           #46                 // class java/rmi/server/UID
      74: dup
      75: invokespecial #47                 // Method java/rmi/server/UID."<init>":()V
      78: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      81: ldc           #49                 // String @
      83: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      86: lload         13
      88: invokevirtual #51                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      91: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      94: getstatic     #53                 // Field java/nio/charset/StandardCharsets.UTF_8:Ljava/nio/charset/Charset;
      97: invokevirtual #54                 // Method java/lang/String.getBytes:(Ljava/nio/charset/Charset;)[B
     100: invokevirtual #55                 // Method java/security/MessageDigest.update:([B)V
     103: aload_0
     104: aload         12
     106: invokevirtual #56                 // Method java/security/MessageDigest.digest:()[B
     109: putfield      #57                 // Field sync:[B
     112: goto          127
     115: astore        12
     117: new           #59                 // class java/lang/RuntimeException
     120: dup
     121: aload         12
     123: invokespecial #60                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
     126: athrow
     127: aload_0
     128: getstatic     #101                // Field org/apache/hadoop/io/SequenceFile$CompressionType.NONE:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     131: putfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     134: aload_0
     135: aload_2
     136: aload_1
     137: aload_3
     138: iconst_1
     139: iload         6
     141: iload         7
     143: lload         8
     145: aload         10
     147: invokevirtual #108                // Method org/apache/hadoop/fs/FileSystem.create:(Lorg/apache/hadoop/fs/Path;ZISJLorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
     150: iconst_1
     151: aload         4
     153: aload         5
     155: aconst_null
     156: aload         11
     158: ldc           #121                // int 102400
     160: invokevirtual #124                // Method init:(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FSDataOutputStream;ZLjava/lang/Class;Ljava/lang/Class;Lorg/apache/hadoop/io/compress/CompressionCodec;Lorg/apache/hadoop/io/SequenceFile$Metadata;I)V
     163: return
    Exception table:
       from    to  target type
          50   112   115   Class java/lang/Exception

  boolean isCompressed();
    Code:
       0: aload_0
       1: getfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
       4: getstatic     #101                // Field org/apache/hadoop/io/SequenceFile$CompressionType.NONE:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
       7: if_acmpeq     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  boolean isBlockCompressed();
    Code:
       0: aload_0
       1: getfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
       4: getstatic     #127                // Field org/apache/hadoop/io/SequenceFile$CompressionType.BLOCK:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
       7: if_acmpne     14
      10: iconst_1
      11: goto          15
      14: iconst_0
      15: ireturn

  org.apache.hadoop.io.SequenceFile$Writer ownStream();
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #31                 // Field ownOutputStream:Z
       5: aload_0
       6: areturn

  private void writeFileHeader() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
       4: invokestatic  #90                 // Method org/apache/hadoop/io/SequenceFile.access$400:()[B
       7: invokevirtual #129                // Method org/apache/hadoop/fs/FSDataOutputStream.write:([B)V
      10: aload_0
      11: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      14: aload_0
      15: getfield      #130                // Field keyClass:Ljava/lang/Class;
      18: invokevirtual #131                // Method java/lang/Class.getName:()Ljava/lang/String;
      21: invokestatic  #132                // Method org/apache/hadoop/io/Text.writeString:(Ljava/io/DataOutput;Ljava/lang/String;)I
      24: pop
      25: aload_0
      26: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      29: aload_0
      30: getfield      #133                // Field valClass:Ljava/lang/Class;
      33: invokevirtual #131                // Method java/lang/Class.getName:()Ljava/lang/String;
      36: invokestatic  #132                // Method org/apache/hadoop/io/Text.writeString:(Ljava/io/DataOutput;Ljava/lang/String;)I
      39: pop
      40: aload_0
      41: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      44: aload_0
      45: invokevirtual #134                // Method isCompressed:()Z
      48: invokevirtual #135                // Method org/apache/hadoop/fs/FSDataOutputStream.writeBoolean:(Z)V
      51: aload_0
      52: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      55: aload_0
      56: invokevirtual #136                // Method isBlockCompressed:()Z
      59: invokevirtual #135                // Method org/apache/hadoop/fs/FSDataOutputStream.writeBoolean:(Z)V
      62: aload_0
      63: invokevirtual #134                // Method isCompressed:()Z
      66: ifeq          87
      69: aload_0
      70: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      73: aload_0
      74: getfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
      77: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      80: invokevirtual #131                // Method java/lang/Class.getName:()Ljava/lang/String;
      83: invokestatic  #132                // Method org/apache/hadoop/io/Text.writeString:(Ljava/io/DataOutput;Ljava/lang/String;)I
      86: pop
      87: aload_0
      88: getfield      #38                 // Field metadata:Lorg/apache/hadoop/io/SequenceFile$Metadata;
      91: aload_0
      92: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      95: invokevirtual #137                // Method org/apache/hadoop/io/SequenceFile$Metadata.write:(Ljava/io/DataOutput;)V
      98: aload_0
      99: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
     102: aload_0
     103: getfield      #57                 // Field sync:[B
     106: invokevirtual #129                // Method org/apache/hadoop/fs/FSDataOutputStream.write:([B)V
     109: aload_0
     110: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
     113: invokevirtual #138                // Method org/apache/hadoop/fs/FSDataOutputStream.flush:()V
     116: return

  void init(org.apache.hadoop.conf.Configuration, org.apache.hadoop.fs.FSDataOutputStream, boolean, java.lang.Class, java.lang.Class, org.apache.hadoop.io.compress.CompressionCodec, org.apache.hadoop.io.SequenceFile$Metadata, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #139                // Field conf:Lorg/apache/hadoop/conf/Configuration;
       5: aload_0
       6: aload_2
       7: putfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      10: aload_0
      11: iload_3
      12: putfield      #31                 // Field ownOutputStream:Z
      15: aload_0
      16: aload         4
      18: putfield      #130                // Field keyClass:Ljava/lang/Class;
      21: aload_0
      22: aload         5
      24: putfield      #133                // Field valClass:Ljava/lang/Class;
      27: aload_0
      28: aload         6
      30: putfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
      33: aload_0
      34: aload         7
      36: putfield      #38                 // Field metadata:Lorg/apache/hadoop/io/SequenceFile$Metadata;
      39: aload_0
      40: iload         8
      42: putfield      #123                // Field syncInterval:I
      45: new           #140                // class org/apache/hadoop/io/serializer/SerializationFactory
      48: dup
      49: aload_1
      50: invokespecial #141                // Method org/apache/hadoop/io/serializer/SerializationFactory."<init>":(Lorg/apache/hadoop/conf/Configuration;)V
      53: astore        9
      55: aload_0
      56: aload         9
      58: aload_0
      59: getfield      #130                // Field keyClass:Ljava/lang/Class;
      62: invokevirtual #142                // Method org/apache/hadoop/io/serializer/SerializationFactory.getSerializer:(Ljava/lang/Class;)Lorg/apache/hadoop/io/serializer/Serializer;
      65: putfield      #143                // Field keySerializer:Lorg/apache/hadoop/io/serializer/Serializer;
      68: aload_0
      69: getfield      #143                // Field keySerializer:Lorg/apache/hadoop/io/serializer/Serializer;
      72: ifnonnull     123
      75: new           #144                // class java/io/IOException
      78: dup
      79: new           #44                 // class java/lang/StringBuilder
      82: dup
      83: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      86: ldc           #145                // String Could not find a serializer for the Key class: \'
      88: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      91: aload_0
      92: getfield      #130                // Field keyClass:Ljava/lang/Class;
      95: invokevirtual #146                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
      98: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     101: ldc           #147                // String \'. Please ensure that the configuration \'
     103: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: ldc           #149                // String io.serializations
     108: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     111: ldc           #150                // String \' is properly configured, if you\'re usingcustom serialization.
     113: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     119: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     122: athrow
     123: aload_0
     124: getfield      #143                // Field keySerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     127: aload_0
     128: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     131: invokeinterface #152,  2          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.open:(Ljava/io/OutputStream;)V
     136: aload_0
     137: aload         9
     139: aload_0
     140: getfield      #133                // Field valClass:Ljava/lang/Class;
     143: invokevirtual #142                // Method org/apache/hadoop/io/serializer/SerializationFactory.getSerializer:(Ljava/lang/Class;)Lorg/apache/hadoop/io/serializer/Serializer;
     146: putfield      #153                // Field uncompressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     149: aload_0
     150: getfield      #153                // Field uncompressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     153: ifnonnull     204
     156: new           #144                // class java/io/IOException
     159: dup
     160: new           #44                 // class java/lang/StringBuilder
     163: dup
     164: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     167: ldc           #154                // String Could not find a serializer for the Value class: \'
     169: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     172: aload_0
     173: getfield      #133                // Field valClass:Ljava/lang/Class;
     176: invokevirtual #146                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
     179: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     182: ldc           #147                // String \'. Please ensure that the configuration \'
     184: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     187: ldc           #149                // String io.serializations
     189: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     192: ldc           #150                // String \' is properly configured, if you\'re usingcustom serialization.
     194: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     197: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     200: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     203: athrow
     204: aload_0
     205: getfield      #153                // Field uncompressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     208: aload_0
     209: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     212: invokeinterface #152,  2          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.open:(Ljava/io/OutputStream;)V
     217: aload_0
     218: getfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
     221: ifnull        370
     224: aload_0
     225: getfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
     228: aload_0
     229: getfield      #139                // Field conf:Lorg/apache/hadoop/conf/Configuration;
     232: invokestatic  #155                // Method org/apache/hadoop/util/ReflectionUtils.setConf:(Ljava/lang/Object;Lorg/apache/hadoop/conf/Configuration;)V
     235: aload_0
     236: aload_0
     237: getfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
     240: invokestatic  #156                // Method org/apache/hadoop/io/compress/CodecPool.getCompressor:(Lorg/apache/hadoop/io/compress/CompressionCodec;)Lorg/apache/hadoop/io/compress/Compressor;
     243: putfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
     246: aload_0
     247: aload_0
     248: getfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
     251: aload_0
     252: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     255: aload_0
     256: getfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
     259: invokeinterface #157,  3          // InterfaceMethod org/apache/hadoop/io/compress/CompressionCodec.createOutputStream:(Ljava/io/OutputStream;Lorg/apache/hadoop/io/compress/Compressor;)Lorg/apache/hadoop/io/compress/CompressionOutputStream;
     264: putfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
     267: aload_0
     268: new           #158                // class java/io/DataOutputStream
     271: dup
     272: new           #159                // class java/io/BufferedOutputStream
     275: dup
     276: aload_0
     277: getfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
     280: invokespecial #160                // Method java/io/BufferedOutputStream."<init>":(Ljava/io/OutputStream;)V
     283: invokespecial #161                // Method java/io/DataOutputStream."<init>":(Ljava/io/OutputStream;)V
     286: putfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
     289: aload_0
     290: aload         9
     292: aload_0
     293: getfield      #133                // Field valClass:Ljava/lang/Class;
     296: invokevirtual #142                // Method org/apache/hadoop/io/serializer/SerializationFactory.getSerializer:(Ljava/lang/Class;)Lorg/apache/hadoop/io/serializer/Serializer;
     299: putfield      #162                // Field compressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     302: aload_0
     303: getfield      #162                // Field compressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     306: ifnonnull     357
     309: new           #144                // class java/io/IOException
     312: dup
     313: new           #44                 // class java/lang/StringBuilder
     316: dup
     317: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     320: ldc           #154                // String Could not find a serializer for the Value class: \'
     322: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     325: aload_0
     326: getfield      #133                // Field valClass:Ljava/lang/Class;
     329: invokevirtual #146                // Method java/lang/Class.getCanonicalName:()Ljava/lang/String;
     332: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     335: ldc           #147                // String \'. Please ensure that the configuration \'
     337: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     340: ldc           #149                // String io.serializations
     342: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     345: ldc           #150                // String \' is properly configured, if you\'re usingcustom serialization.
     347: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     350: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     353: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     356: athrow
     357: aload_0
     358: getfield      #162                // Field compressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     361: aload_0
     362: getfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
     365: invokeinterface #152,  2          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.open:(Ljava/io/OutputStream;)V
     370: aload_0
     371: getfield      #40                 // Field appendMode:Z
     374: ifeq          384
     377: aload_0
     378: invokevirtual #163                // Method sync:()V
     381: goto          388
     384: aload_0
     385: invokespecial #164                // Method writeFileHeader:()V
     388: return

  public java.lang.Class getKeyClass();
    Code:
       0: aload_0
       1: getfield      #130                // Field keyClass:Ljava/lang/Class;
       4: areturn

  public java.lang.Class getValueClass();
    Code:
       0: aload_0
       1: getfield      #133                // Field valClass:Ljava/lang/Class;
       4: areturn

  public org.apache.hadoop.io.compress.CompressionCodec getCompressionCodec();
    Code:
       0: aload_0
       1: getfield      #35                 // Field codec:Lorg/apache/hadoop/io/compress/CompressionCodec;
       4: areturn

  public void sync() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #57                 // Field sync:[B
       4: ifnull        52
       7: aload_0
       8: getfield      #165                // Field lastSyncPos:J
      11: aload_0
      12: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      15: invokevirtual #166                // Method org/apache/hadoop/fs/FSDataOutputStream.getPos:()J
      18: lcmp
      19: ifeq          52
      22: aload_0
      23: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      26: iconst_m1
      27: invokevirtual #167                // Method org/apache/hadoop/fs/FSDataOutputStream.writeInt:(I)V
      30: aload_0
      31: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      34: aload_0
      35: getfield      #57                 // Field sync:[B
      38: invokevirtual #129                // Method org/apache/hadoop/fs/FSDataOutputStream.write:([B)V
      41: aload_0
      42: aload_0
      43: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      46: invokevirtual #166                // Method org/apache/hadoop/fs/FSDataOutputStream.getPos:()J
      49: putfield      #165                // Field lastSyncPos:J
      52: return

  public void syncFs() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      11: invokevirtual #168                // Method org/apache/hadoop/fs/FSDataOutputStream.hflush:()V
      14: return

  public void hsync() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      11: invokevirtual #169                // Method org/apache/hadoop/fs/FSDataOutputStream.hsync:()V
      14: return

  public void hflush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
       4: ifnull        14
       7: aload_0
       8: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      11: invokevirtual #168                // Method org/apache/hadoop/fs/FSDataOutputStream.hflush:()V
      14: return

  org.apache.hadoop.conf.Configuration getConf();
    Code:
       0: aload_0
       1: getfield      #139                // Field conf:Lorg/apache/hadoop/conf/Configuration;
       4: areturn

  public synchronized void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #143                // Field keySerializer:Lorg/apache/hadoop/io/serializer/Serializer;
       4: invokeinterface #170,  1          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.close:()V
       9: aload_0
      10: getfield      #153                // Field uncompressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
      13: invokeinterface #170,  1          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.close:()V
      18: aload_0
      19: getfield      #162                // Field compressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
      22: ifnull        34
      25: aload_0
      26: getfield      #162                // Field compressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
      29: invokeinterface #170,  1          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.close:()V
      34: aload_0
      35: getfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
      38: invokestatic  #171                // Method org/apache/hadoop/io/compress/CodecPool.returnCompressor:(Lorg/apache/hadoop/io/compress/Compressor;)V
      41: aload_0
      42: aconst_null
      43: putfield      #39                 // Field compressor:Lorg/apache/hadoop/io/compress/Compressor;
      46: aload_0
      47: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      50: ifnull        82
      53: aload_0
      54: getfield      #31                 // Field ownOutputStream:Z
      57: ifeq          70
      60: aload_0
      61: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      64: invokevirtual #172                // Method org/apache/hadoop/fs/FSDataOutputStream.close:()V
      67: goto          77
      70: aload_0
      71: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      74: invokevirtual #138                // Method org/apache/hadoop/fs/FSDataOutputStream.flush:()V
      77: aload_0
      78: aconst_null
      79: putfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      82: return

  synchronized void checkAndWriteSync() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #57                 // Field sync:[B
       4: ifnull        32
       7: aload_0
       8: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      11: invokevirtual #166                // Method org/apache/hadoop/fs/FSDataOutputStream.getPos:()J
      14: aload_0
      15: getfield      #165                // Field lastSyncPos:J
      18: aload_0
      19: getfield      #123                // Field syncInterval:I
      22: i2l
      23: ladd
      24: lcmp
      25: iflt          32
      28: aload_0
      29: invokevirtual #163                // Method sync:()V
      32: return

  public void append(org.apache.hadoop.io.Writable, org.apache.hadoop.io.Writable) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #173                // Method append:(Ljava/lang/Object;Ljava/lang/Object;)V
       6: return

  public synchronized void append(java.lang.Object, java.lang.Object) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
       4: aload_0
       5: getfield      #130                // Field keyClass:Ljava/lang/Class;
       8: if_acmpeq     56
      11: new           #144                // class java/io/IOException
      14: dup
      15: new           #44                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #174                // String wrong key class:
      24: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: aload_1
      28: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      31: invokevirtual #131                // Method java/lang/Class.getName:()Ljava/lang/String;
      34: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      37: ldc           #175                // String  is not
      39: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      42: aload_0
      43: getfield      #130                // Field keyClass:Ljava/lang/Class;
      46: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      49: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      52: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      55: athrow
      56: aload_2
      57: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      60: aload_0
      61: getfield      #133                // Field valClass:Ljava/lang/Class;
      64: if_acmpeq     112
      67: new           #144                // class java/io/IOException
      70: dup
      71: new           #44                 // class java/lang/StringBuilder
      74: dup
      75: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      78: ldc           #176                // String wrong value class:
      80: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      83: aload_2
      84: invokevirtual #103                // Method java/lang/Object.getClass:()Ljava/lang/Class;
      87: invokevirtual #131                // Method java/lang/Class.getName:()Ljava/lang/String;
      90: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      93: ldc           #175                // String  is not
      95: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      98: aload_0
      99: getfield      #133                // Field valClass:Ljava/lang/Class;
     102: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     105: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     108: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     111: athrow
     112: aload_0
     113: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     116: invokevirtual #177                // Method org/apache/hadoop/io/DataOutputBuffer.reset:()Lorg/apache/hadoop/io/DataOutputBuffer;
     119: pop
     120: aload_0
     121: getfield      #143                // Field keySerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     124: aload_1
     125: invokeinterface #178,  2          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.serialize:(Ljava/lang/Object;)V
     130: aload_0
     131: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     134: invokevirtual #179                // Method org/apache/hadoop/io/DataOutputBuffer.getLength:()I
     137: istore_3
     138: iload_3
     139: ifge          169
     142: new           #144                // class java/io/IOException
     145: dup
     146: new           #44                 // class java/lang/StringBuilder
     149: dup
     150: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
     153: ldc           #180                // String negative length keys not allowed:
     155: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     158: aload_1
     159: invokevirtual #48                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     162: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     165: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     168: athrow
     169: aload_0
     170: getfield      #115                // Field compress:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     173: getstatic     #181                // Field org/apache/hadoop/io/SequenceFile$CompressionType.RECORD:Lorg/apache/hadoop/io/SequenceFile$CompressionType;
     176: if_acmpne     213
     179: aload_0
     180: getfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
     183: invokevirtual #182                // Method org/apache/hadoop/io/compress/CompressionOutputStream.resetState:()V
     186: aload_0
     187: getfield      #162                // Field compressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     190: aload_2
     191: invokeinterface #178,  2          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.serialize:(Ljava/lang/Object;)V
     196: aload_0
     197: getfield      #37                 // Field deflateOut:Ljava/io/DataOutputStream;
     200: invokevirtual #183                // Method java/io/DataOutputStream.flush:()V
     203: aload_0
     204: getfield      #36                 // Field deflateFilter:Lorg/apache/hadoop/io/compress/CompressionOutputStream;
     207: invokevirtual #184                // Method org/apache/hadoop/io/compress/CompressionOutputStream.finish:()V
     210: goto          223
     213: aload_0
     214: getfield      #153                // Field uncompressedValSerializer:Lorg/apache/hadoop/io/serializer/Serializer;
     217: aload_2
     218: invokeinterface #178,  2          // InterfaceMethod org/apache/hadoop/io/serializer/Serializer.serialize:(Ljava/lang/Object;)V
     223: aload_0
     224: invokevirtual #185                // Method checkAndWriteSync:()V
     227: aload_0
     228: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
     231: aload_0
     232: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     235: invokevirtual #179                // Method org/apache/hadoop/io/DataOutputBuffer.getLength:()I
     238: invokevirtual #167                // Method org/apache/hadoop/fs/FSDataOutputStream.writeInt:(I)V
     241: aload_0
     242: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
     245: iload_3
     246: invokevirtual #167                // Method org/apache/hadoop/fs/FSDataOutputStream.writeInt:(I)V
     249: aload_0
     250: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
     253: aload_0
     254: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     257: invokevirtual #186                // Method org/apache/hadoop/io/DataOutputBuffer.getData:()[B
     260: iconst_0
     261: aload_0
     262: getfield      #34                 // Field buffer:Lorg/apache/hadoop/io/DataOutputBuffer;
     265: invokevirtual #179                // Method org/apache/hadoop/io/DataOutputBuffer.getLength:()I
     268: invokevirtual #187                // Method org/apache/hadoop/fs/FSDataOutputStream.write:([BII)V
     271: return

  public synchronized void appendRaw(byte[], int, int, org.apache.hadoop.io.SequenceFile$ValueBytes) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifge          31
       4: new           #144                // class java/io/IOException
       7: dup
       8: new           #44                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #45                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #180                // String negative length keys not allowed:
      17: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: iload_3
      21: invokevirtual #188                // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      24: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      27: invokespecial #151                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload         4
      33: invokeinterface #189,  1          // InterfaceMethod org/apache/hadoop/io/SequenceFile$ValueBytes.getSize:()I
      38: istore        5
      40: aload_0
      41: invokevirtual #185                // Method checkAndWriteSync:()V
      44: aload_0
      45: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      48: iload_3
      49: iload         5
      51: iadd
      52: invokevirtual #167                // Method org/apache/hadoop/fs/FSDataOutputStream.writeInt:(I)V
      55: aload_0
      56: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      59: iload_3
      60: invokevirtual #167                // Method org/apache/hadoop/fs/FSDataOutputStream.writeInt:(I)V
      63: aload_0
      64: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      67: aload_1
      68: iload_2
      69: iload_3
      70: invokevirtual #187                // Method org/apache/hadoop/fs/FSDataOutputStream.write:([BII)V
      73: aload         4
      75: aload_0
      76: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
      79: invokeinterface #190,  2          // InterfaceMethod org/apache/hadoop/io/SequenceFile$ValueBytes.writeUncompressedBytes:(Ljava/io/DataOutputStream;)V
      84: return

  public synchronized long getLength() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #128                // Field out:Lorg/apache/hadoop/fs/FSDataOutputStream;
       4: invokevirtual #166                // Method org/apache/hadoop/fs/FSDataOutputStream.getPos:()J
       7: lreturn

  static org.apache.hadoop.io.SequenceFile$Writer$Option access$000(org.apache.hadoop.fs.FileSystem);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method filesystem:(Lorg/apache/hadoop/fs/FileSystem;)Lorg/apache/hadoop/io/SequenceFile$Writer$Option;
       4: areturn
}
