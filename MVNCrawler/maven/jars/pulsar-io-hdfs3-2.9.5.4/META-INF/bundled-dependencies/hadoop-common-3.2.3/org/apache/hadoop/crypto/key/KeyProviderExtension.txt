Compiled from "KeyProviderExtension.java"
public abstract class org.apache.hadoop.crypto.key.KeyProviderExtension<E extends org.apache.hadoop.crypto.key.KeyProviderExtension$Extension> extends org.apache.hadoop.crypto.key.KeyProvider {
  private org.apache.hadoop.crypto.key.KeyProvider keyProvider;

  private E extension;

  public org.apache.hadoop.crypto.key.KeyProviderExtension(org.apache.hadoop.crypto.key.KeyProvider, E);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #1                  // Method org/apache/hadoop/crypto/key/KeyProvider.getConf:()Lorg/apache/hadoop/conf/Configuration;
       5: invokespecial #2                  // Method org/apache/hadoop/crypto/key/KeyProvider."<init>":(Lorg/apache/hadoop/conf/Configuration;)V
       8: aload_0
       9: aload_1
      10: putfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
      13: aload_0
      14: aload_2
      15: putfield      #4                  // Field extension:Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
      18: return

  protected E getExtension();
    Code:
       0: aload_0
       1: getfield      #4                  // Field extension:Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: areturn

  protected org.apache.hadoop.crypto.key.KeyProvider getKeyProvider();
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: areturn

  public boolean isTransient();
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: invokevirtual #5                  // Method org/apache/hadoop/crypto/key/KeyProvider.isTransient:()Z
       7: ireturn

  public org.apache.hadoop.crypto.key.KeyProvider$Metadata[] getKeysMetadata(java.lang.String...) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #6                  // Method org/apache/hadoop/crypto/key/KeyProvider.getKeysMetadata:([Ljava/lang/String;)[Lorg/apache/hadoop/crypto/key/KeyProvider$Metadata;
       8: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion getCurrentKey(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #7                  // Method org/apache/hadoop/crypto/key/KeyProvider.getCurrentKey:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
       8: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion createKey(java.lang.String, org.apache.hadoop.crypto.key.KeyProvider$Options) throws java.security.NoSuchAlgorithmException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: aload_2
       6: invokevirtual #8                  // Method org/apache/hadoop/crypto/key/KeyProvider.createKey:(Ljava/lang/String;Lorg/apache/hadoop/crypto/key/KeyProvider$Options;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
       9: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion rollNewVersion(java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #9                  // Method org/apache/hadoop/crypto/key/KeyProvider.rollNewVersion:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
       8: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion getKeyVersion(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider.getKeyVersion:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
       8: areturn

  public java.util.List<java.lang.String> getKeys() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: invokevirtual #11                 // Method org/apache/hadoop/crypto/key/KeyProvider.getKeys:()Ljava/util/List;
       7: areturn

  public java.util.List<org.apache.hadoop.crypto.key.KeyProvider$KeyVersion> getKeyVersions(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #12                 // Method org/apache/hadoop/crypto/key/KeyProvider.getKeyVersions:(Ljava/lang/String;)Ljava/util/List;
       8: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$Metadata getMetadata(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #13                 // Method org/apache/hadoop/crypto/key/KeyProvider.getMetadata:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$Metadata;
       8: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion createKey(java.lang.String, byte[], org.apache.hadoop.crypto.key.KeyProvider$Options) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #14                 // Method org/apache/hadoop/crypto/key/KeyProvider.createKey:(Ljava/lang/String;[BLorg/apache/hadoop/crypto/key/KeyProvider$Options;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      10: areturn

  public void deleteKey(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #15                 // Method org/apache/hadoop/crypto/key/KeyProvider.deleteKey:(Ljava/lang/String;)V
       8: return

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion rollNewVersion(java.lang.String, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: aload_2
       6: invokevirtual #16                 // Method org/apache/hadoop/crypto/key/KeyProvider.rollNewVersion:(Ljava/lang/String;[B)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
       9: areturn

  public void invalidateCache(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #17                 // Method org/apache/hadoop/crypto/key/KeyProvider.invalidateCache:(Ljava/lang/String;)V
       8: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: invokevirtual #18                 // Method org/apache/hadoop/crypto/key/KeyProvider.flush:()V
       7: return

  public java.lang.String toString();
    Code:
       0: new           #19                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #21                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      11: invokevirtual #22                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      14: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      17: ldc           #24                 // String :
      19: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #3                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
      26: invokevirtual #25                 // Method java/lang/Object.toString:()Ljava/lang/String;
      29: invokevirtual #23                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #26                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: areturn
}
