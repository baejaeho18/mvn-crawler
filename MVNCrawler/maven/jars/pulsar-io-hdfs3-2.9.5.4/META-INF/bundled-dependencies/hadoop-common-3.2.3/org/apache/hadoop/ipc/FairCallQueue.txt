Compiled from "FairCallQueue.java"
public class org.apache.hadoop.ipc.FairCallQueue<E extends org.apache.hadoop.ipc.Schedulable> extends java.util.AbstractQueue<E> implements java.util.concurrent.BlockingQueue<E> {
  public static final int IPC_CALLQUEUE_PRIORITY_LEVELS_DEFAULT;

  public static final java.lang.String IPC_CALLQUEUE_PRIORITY_LEVELS_KEY;

  public static final org.slf4j.Logger LOG;

  private final java.util.ArrayList<java.util.concurrent.BlockingQueue<E>> queues;

  private final java.util.concurrent.Semaphore semaphore;

  private org.apache.hadoop.ipc.RpcMultiplexer multiplexer;

  private final java.util.ArrayList<java.util.concurrent.atomic.AtomicLong> overflowedCalls;

  private void signalNotEmpty();
    Code:
       0: aload_0
       1: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #2                  // Method java/util/concurrent/Semaphore.release:()V
       7: return

  public org.apache.hadoop.ipc.FairCallQueue(int, int, java.lang.String, org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/util/AbstractQueue."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/Semaphore
       8: dup
       9: iconst_0
      10: invokespecial #5                  // Method java/util/concurrent/Semaphore."<init>":(I)V
      13: putfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
      16: iload_1
      17: iconst_1
      18: if_icmpge     31
      21: new           #6                  // class java/lang/IllegalArgumentException
      24: dup
      25: ldc           #7                  // String Number of Priority Levels must be at least 1
      27: invokespecial #8                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: iload_1
      32: istore        5
      34: getstatic     #9                  // Field LOG:Lorg/slf4j/Logger;
      37: new           #10                 // class java/lang/StringBuilder
      40: dup
      41: invokespecial #11                 // Method java/lang/StringBuilder."<init>":()V
      44: ldc           #12                 // String FairCallQueue is in use with
      46: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      49: iload         5
      51: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      54: ldc           #15                 // String  queues with total capacity of
      56: invokevirtual #13                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: iload_2
      60: invokevirtual #14                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      63: invokevirtual #16                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      66: invokeinterface #17,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      71: aload_0
      72: new           #18                 // class java/util/ArrayList
      75: dup
      76: iload         5
      78: invokespecial #19                 // Method java/util/ArrayList."<init>":(I)V
      81: putfield      #20                 // Field queues:Ljava/util/ArrayList;
      84: aload_0
      85: new           #18                 // class java/util/ArrayList
      88: dup
      89: iload         5
      91: invokespecial #19                 // Method java/util/ArrayList."<init>":(I)V
      94: putfield      #21                 // Field overflowedCalls:Ljava/util/ArrayList;
      97: iload_2
      98: iload         5
     100: idiv
     101: istore        6
     103: iload         6
     105: iload_2
     106: iload         5
     108: irem
     109: iadd
     110: istore        7
     112: iconst_0
     113: istore        8
     115: iload         8
     117: iload         5
     119: if_icmpge     186
     122: iload         8
     124: ifne          147
     127: aload_0
     128: getfield      #20                 // Field queues:Ljava/util/ArrayList;
     131: new           #22                 // class java/util/concurrent/LinkedBlockingQueue
     134: dup
     135: iload         7
     137: invokespecial #23                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
     140: invokevirtual #24                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     143: pop
     144: goto          164
     147: aload_0
     148: getfield      #20                 // Field queues:Ljava/util/ArrayList;
     151: new           #22                 // class java/util/concurrent/LinkedBlockingQueue
     154: dup
     155: iload         6
     157: invokespecial #23                 // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
     160: invokevirtual #24                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     163: pop
     164: aload_0
     165: getfield      #21                 // Field overflowedCalls:Ljava/util/ArrayList;
     168: new           #25                 // class java/util/concurrent/atomic/AtomicLong
     171: dup
     172: lconst_0
     173: invokespecial #26                 // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
     176: invokevirtual #24                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     179: pop
     180: iinc          8, 1
     183: goto          115
     186: aload_0
     187: new           #27                 // class org/apache/hadoop/ipc/WeightedRoundRobinMultiplexer
     190: dup
     191: iload         5
     193: aload_3
     194: aload         4
     196: invokespecial #28                 // Method org/apache/hadoop/ipc/WeightedRoundRobinMultiplexer."<init>":(ILjava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V
     199: putfield      #29                 // Field multiplexer:Lorg/apache/hadoop/ipc/RpcMultiplexer;
     202: aload_3
     203: invokestatic  #30                 // Method org/apache/hadoop/ipc/FairCallQueue$MetricsProxy.getInstance:(Ljava/lang/String;)Lorg/apache/hadoop/ipc/FairCallQueue$MetricsProxy;
     206: astore        8
     208: aload         8
     210: aload_0
     211: invokevirtual #31                 // Method org/apache/hadoop/ipc/FairCallQueue$MetricsProxy.setDelegate:(Lorg/apache/hadoop/ipc/FairCallQueue;)V
     214: return

  private E removeNextElement();
    Code:
       0: aload_0
       1: getfield      #29                 // Field multiplexer:Lorg/apache/hadoop/ipc/RpcMultiplexer;
       4: invokeinterface #32,  1           // InterfaceMethod org/apache/hadoop/ipc/RpcMultiplexer.getAndAdvanceCurrentIndex:()I
       9: istore_1
      10: aload_0
      11: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      14: iload_1
      15: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      18: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      21: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      26: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
      29: astore_2
      30: aload_2
      31: ifnonnull     80
      34: iconst_0
      35: istore_3
      36: aload_2
      37: ifnonnull     77
      40: iload_3
      41: aload_0
      42: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      45: invokevirtual #37                 // Method java/util/ArrayList.size:()I
      48: if_icmpge     77
      51: aload_0
      52: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      55: iload_3
      56: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      59: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      62: invokeinterface #35,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.poll:()Ljava/lang/Object;
      67: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
      70: astore_2
      71: iinc          3, 1
      74: goto          36
      77: goto          30
      80: aload_2
      81: areturn

  public boolean add(E);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/ipc/Schedulable.getPriorityLevel:()I
       6: istore_2
       7: aload_0
       8: iload_2
       9: aload_1
      10: iconst_1
      11: invokespecial #39                 // Method offerQueues:(ILorg/apache/hadoop/ipc/Schedulable;Z)Z
      14: ifne          40
      17: iload_2
      18: aload_0
      19: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      22: invokevirtual #37                 // Method java/util/ArrayList.size:()I
      25: iconst_1
      26: isub
      27: if_icmpne     36
      30: getstatic     #40                 // Field org/apache/hadoop/ipc/CallQueueManager$CallQueueOverflowException.DISCONNECT:Lorg/apache/hadoop/ipc/CallQueueManager$CallQueueOverflowException;
      33: goto          39
      36: getstatic     #41                 // Field org/apache/hadoop/ipc/CallQueueManager$CallQueueOverflowException.KEEPALIVE:Lorg/apache/hadoop/ipc/CallQueueManager$CallQueueOverflowException;
      39: athrow
      40: iconst_1
      41: ireturn

  public void put(E) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/ipc/Schedulable.getPriorityLevel:()I
       6: istore_2
       7: aload_0
       8: iload_2
       9: aload_1
      10: iconst_0
      11: invokespecial #39                 // Method offerQueues:(ILorg/apache/hadoop/ipc/Schedulable;Z)Z
      14: ifne          31
      17: aload_0
      18: aload_0
      19: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      22: invokevirtual #37                 // Method java/util/ArrayList.size:()I
      25: iconst_1
      26: isub
      27: aload_1
      28: invokevirtual #42                 // Method putQueue:(ILorg/apache/hadoop/ipc/Schedulable;)V
      31: return

  void putQueue(int, E) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #20                 // Field queues:Ljava/util/ArrayList;
       4: iload_1
       5: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
       8: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      11: aload_2
      12: invokeinterface #43,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.put:(Ljava/lang/Object;)V
      17: aload_0
      18: invokespecial #44                 // Method signalNotEmpty:()V
      21: return

  boolean offerQueue(int, E);
    Code:
       0: aload_0
       1: getfield      #20                 // Field queues:Ljava/util/ArrayList;
       4: iload_1
       5: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
       8: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      11: aload_2
      12: invokeinterface #45,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;)Z
      17: istore_3
      18: iload_3
      19: ifeq          26
      22: aload_0
      23: invokespecial #44                 // Method signalNotEmpty:()V
      26: iload_3
      27: ireturn

  private boolean offerQueues(int, E, boolean);
    Code:
       0: aload_0
       1: getfield      #20                 // Field queues:Ljava/util/ArrayList;
       4: invokevirtual #37                 // Method java/util/ArrayList.size:()I
       7: iload_3
       8: ifeq          15
      11: iconst_1
      12: goto          16
      15: iconst_2
      16: isub
      17: istore        4
      19: iload_1
      20: istore        5
      22: iload         5
      24: iload         4
      26: if_icmpgt     63
      29: aload_0
      30: iload         5
      32: aload_2
      33: invokevirtual #46                 // Method offerQueue:(ILorg/apache/hadoop/ipc/Schedulable;)Z
      36: ifeq          41
      39: iconst_1
      40: ireturn
      41: aload_0
      42: getfield      #21                 // Field overflowedCalls:Ljava/util/ArrayList;
      45: iload         5
      47: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      50: checkcast     #25                 // class java/util/concurrent/atomic/AtomicLong
      53: invokevirtual #47                 // Method java/util/concurrent/atomic/AtomicLong.getAndIncrement:()J
      56: pop2
      57: iinc          5, 1
      60: goto          22
      63: iconst_0
      64: ireturn

  public boolean offer(E, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/ipc/Schedulable.getPriorityLevel:()I
       6: istore        5
       8: aload_0
       9: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      12: iload         5
      14: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      17: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      20: astore        6
      22: aload         6
      24: aload_1
      25: lload_2
      26: aload         4
      28: invokeinterface #48,  5           // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)Z
      33: istore        7
      35: iload         7
      37: ifeq          44
      40: aload_0
      41: invokespecial #44                 // Method signalNotEmpty:()V
      44: iload         7
      46: ireturn

  public boolean offer(E);
    Code:
       0: aload_1
       1: invokeinterface #38,  1           // InterfaceMethod org/apache/hadoop/ipc/Schedulable.getPriorityLevel:()I
       6: istore_2
       7: aload_0
       8: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      11: iload_2
      12: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      15: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      18: astore_3
      19: aload_3
      20: aload_1
      21: invokeinterface #45,  2           // InterfaceMethod java/util/concurrent/BlockingQueue.offer:(Ljava/lang/Object;)Z
      26: istore        4
      28: iload         4
      30: ifeq          37
      33: aload_0
      34: invokespecial #44                 // Method signalNotEmpty:()V
      37: iload         4
      39: ireturn

  public E take() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #49                 // Method java/util/concurrent/Semaphore.acquire:()V
       7: aload_0
       8: invokespecial #50                 // Method removeNextElement:()Lorg/apache/hadoop/ipc/Schedulable;
      11: areturn

  public E poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
       4: lload_1
       5: aload_3
       6: invokevirtual #51                 // Method java/util/concurrent/Semaphore.tryAcquire:(JLjava/util/concurrent/TimeUnit;)Z
       9: ifeq          19
      12: aload_0
      13: invokespecial #50                 // Method removeNextElement:()Lorg/apache/hadoop/ipc/Schedulable;
      16: goto          20
      19: aconst_null
      20: areturn

  public E poll();
    Code:
       0: aload_0
       1: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #52                 // Method java/util/concurrent/Semaphore.tryAcquire:()Z
       7: ifeq          17
      10: aload_0
      11: invokespecial #50                 // Method removeNextElement:()Lorg/apache/hadoop/ipc/Schedulable;
      14: goto          18
      17: aconst_null
      18: areturn

  public E peek();
    Code:
       0: aconst_null
       1: astore_1
       2: iconst_0
       3: istore_2
       4: aload_1
       5: ifnonnull     45
       8: iload_2
       9: aload_0
      10: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      13: invokevirtual #37                 // Method java/util/ArrayList.size:()I
      16: if_icmpge     45
      19: aload_0
      20: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      23: iload_2
      24: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      27: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      30: invokeinterface #53,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.peek:()Ljava/lang/Object;
      35: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
      38: astore_1
      39: iinc          2, 1
      42: goto          4
      45: aload_1
      46: areturn

  public int size();
    Code:
       0: aload_0
       1: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #54                 // Method java/util/concurrent/Semaphore.availablePermits:()I
       7: ireturn

  public java.util.Iterator<E> iterator();
    Code:
       0: new           #55                 // class org/apache/commons/lang3/NotImplementedException
       3: dup
       4: ldc           #56                 // String Code is not implemented
       6: invokespecial #57                 // Method org/apache/commons/lang3/NotImplementedException."<init>":(Ljava/lang/String;)V
       9: athrow

  public int drainTo(java.util.Collection<? super E>, int);
    Code:
       0: aload_0
       1: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
       4: invokevirtual #58                 // Method java/util/concurrent/Semaphore.drainPermits:()I
       7: istore_3
       8: iload_2
       9: iload_3
      10: invokestatic  #59                 // Method java/lang/Math.min:(II)I
      13: istore        4
      15: iload         4
      17: istore        5
      19: iconst_0
      20: istore        6
      22: iload         5
      24: ifle          70
      27: iload         6
      29: aload_0
      30: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      33: invokevirtual #37                 // Method java/util/ArrayList.size:()I
      36: if_icmpge     70
      39: iload         5
      41: aload_0
      42: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      45: iload         6
      47: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      50: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      53: aload_1
      54: iload         5
      56: invokeinterface #60,  3           // InterfaceMethod java/util/concurrent/BlockingQueue.drainTo:(Ljava/util/Collection;I)I
      61: isub
      62: istore        5
      64: iinc          6, 1
      67: goto          22
      70: iload         4
      72: iload         5
      74: isub
      75: istore        6
      77: iload_3
      78: iload         6
      80: if_icmple     94
      83: aload_0
      84: getfield      #1                  // Field semaphore:Ljava/util/concurrent/Semaphore;
      87: iload_3
      88: iload         6
      90: isub
      91: invokevirtual #61                 // Method java/util/concurrent/Semaphore.release:(I)V
      94: iload         6
      96: ireturn

  public int drainTo(java.util.Collection<? super E>);
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #63                 // int 2147483647
       4: invokevirtual #64                 // Method drainTo:(Ljava/util/Collection;I)I
       7: ireturn

  public int remainingCapacity();
    Code:
       0: iconst_0
       1: istore_1
       2: aload_0
       3: getfield      #20                 // Field queues:Ljava/util/ArrayList;
       6: invokevirtual #65                 // Method java/util/ArrayList.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #66,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          41
      19: aload_2
      20: invokeinterface #67,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      28: astore_3
      29: iload_1
      30: aload_3
      31: invokeinterface #68,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.remainingCapacity:()I
      36: iadd
      37: istore_1
      38: goto          10
      41: iload_1
      42: ireturn

  public int[] getQueueSizes();
    Code:
       0: aload_0
       1: getfield      #20                 // Field queues:Ljava/util/ArrayList;
       4: invokevirtual #37                 // Method java/util/ArrayList.size:()I
       7: istore_1
       8: iload_1
       9: newarray       int
      11: astore_2
      12: iconst_0
      13: istore_3
      14: iload_3
      15: iload_1
      16: if_icmpge     44
      19: aload_2
      20: iload_3
      21: aload_0
      22: getfield      #20                 // Field queues:Ljava/util/ArrayList;
      25: iload_3
      26: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      29: checkcast     #34                 // class java/util/concurrent/BlockingQueue
      32: invokeinterface #69,  1           // InterfaceMethod java/util/concurrent/BlockingQueue.size:()I
      37: iastore
      38: iinc          3, 1
      41: goto          14
      44: aload_2
      45: areturn

  public long[] getOverflowedCalls();
    Code:
       0: aload_0
       1: getfield      #20                 // Field queues:Ljava/util/ArrayList;
       4: invokevirtual #37                 // Method java/util/ArrayList.size:()I
       7: istore_1
       8: iload_1
       9: newarray       long
      11: astore_2
      12: iconst_0
      13: istore_3
      14: iload_3
      15: iload_1
      16: if_icmpge     42
      19: aload_2
      20: iload_3
      21: aload_0
      22: getfield      #21                 // Field overflowedCalls:Ljava/util/ArrayList;
      25: iload_3
      26: invokevirtual #33                 // Method java/util/ArrayList.get:(I)Ljava/lang/Object;
      29: checkcast     #25                 // class java/util/concurrent/atomic/AtomicLong
      32: invokevirtual #70                 // Method java/util/concurrent/atomic/AtomicLong.get:()J
      35: lastore
      36: iinc          3, 1
      39: goto          14
      42: aload_2
      43: areturn

  public void setMultiplexer(org.apache.hadoop.ipc.RpcMultiplexer);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #29                 // Field multiplexer:Lorg/apache/hadoop/ipc/RpcMultiplexer;
       5: return

  public boolean add(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
       5: invokevirtual #71                 // Method add:(Lorg/apache/hadoop/ipc/Schedulable;)Z
       8: ireturn

  public java.lang.Object peek();
    Code:
       0: aload_0
       1: invokevirtual #72                 // Method peek:()Lorg/apache/hadoop/ipc/Schedulable;
       4: areturn

  public java.lang.Object poll();
    Code:
       0: aload_0
       1: invokevirtual #73                 // Method poll:()Lorg/apache/hadoop/ipc/Schedulable;
       4: areturn

  public boolean offer(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
       5: invokevirtual #74                 // Method offer:(Lorg/apache/hadoop/ipc/Schedulable;)Z
       8: ireturn

  public java.lang.Object poll(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: invokevirtual #75                 // Method poll:(JLjava/util/concurrent/TimeUnit;)Lorg/apache/hadoop/ipc/Schedulable;
       6: areturn

  public java.lang.Object take() throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: invokevirtual #76                 // Method take:()Lorg/apache/hadoop/ipc/Schedulable;
       4: areturn

  public boolean offer(java.lang.Object, long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
       5: lload_2
       6: aload         4
       8: invokevirtual #77                 // Method offer:(Lorg/apache/hadoop/ipc/Schedulable;JLjava/util/concurrent/TimeUnit;)Z
      11: ireturn

  public void put(java.lang.Object) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #36                 // class org/apache/hadoop/ipc/Schedulable
       5: invokevirtual #78                 // Method put:(Lorg/apache/hadoop/ipc/Schedulable;)V
       8: return

  static {};
    Code:
       0: ldc           #79                 // class org/apache/hadoop/ipc/FairCallQueue
       2: invokestatic  #80                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #9                  // Field LOG:Lorg/slf4j/Logger;
       8: return
}
