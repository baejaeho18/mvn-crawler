Compiled from "ChecksumFileSystem.java"
class org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream extends org.apache.hadoop.fs.FSDataInputStream {
  private org.apache.hadoop.fs.FileSystem fs;

  private org.apache.hadoop.fs.Path file;

  private long fileLen;

  org.apache.hadoop.fs.ChecksumFileSystem$FSDataBoundedInputStream(org.apache.hadoop.fs.FileSystem, org.apache.hadoop.fs.Path, java.io.InputStream);
    Code:
       0: aload_0
       1: aload_3
       2: invokespecial #1                  // Method org/apache/hadoop/fs/FSDataInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: ldc2_w        #2                  // long -1l
       9: putfield      #4                  // Field fileLen:J
      12: aload_0
      13: aload_1
      14: putfield      #5                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      17: aload_0
      18: aload_2
      19: putfield      #6                  // Field file:Lorg/apache/hadoop/fs/Path;
      22: return

  public boolean markSupported();
    Code:
       0: iconst_0
       1: ireturn

  private long getFileLength() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field fileLen:J
       4: ldc2_w        #2                  // long -1l
       7: lcmp
       8: ifne          29
      11: aload_0
      12: aload_0
      13: getfield      #5                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      16: aload_0
      17: getfield      #6                  // Field file:Lorg/apache/hadoop/fs/Path;
      20: invokevirtual #7                  // Method org/apache/hadoop/fs/FileSystem.getContentSummary:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/ContentSummary;
      23: invokevirtual #8                  // Method org/apache/hadoop/fs/ContentSummary.getLength:()J
      26: putfield      #4                  // Field fileLen:J
      29: aload_0
      30: getfield      #4                  // Field fileLen:J
      33: lreturn

  public synchronized long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getPos:()J
       4: lstore_3
       5: aload_0
       6: invokespecial #10                 // Method getFileLength:()J
       9: lstore        5
      11: lload_1
      12: lload_3
      13: ladd
      14: lload         5
      16: lcmp
      17: ifle          25
      20: lload         5
      22: lload_3
      23: lsub
      24: lstore_1
      25: aload_0
      26: lload_1
      27: invokespecial #11                 // Method org/apache/hadoop/fs/FSDataInputStream.skip:(J)J
      30: lreturn

  public synchronized void seek(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: aload_0
       2: invokespecial #10                 // Method getFileLength:()J
       5: lcmp
       6: ifle          19
       9: new           #12                 // class java/io/EOFException
      12: dup
      13: ldc           #13                 // String Cannot seek after EOF
      15: invokespecial #14                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_0
      20: lload_1
      21: invokespecial #15                 // Method org/apache/hadoop/fs/FSDataInputStream.seek:(J)V
      24: return
}
