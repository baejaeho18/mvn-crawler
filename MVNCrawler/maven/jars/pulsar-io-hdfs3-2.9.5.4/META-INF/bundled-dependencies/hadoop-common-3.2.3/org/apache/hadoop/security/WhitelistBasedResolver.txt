Compiled from "WhitelistBasedResolver.java"
public class org.apache.hadoop.security.WhitelistBasedResolver extends org.apache.hadoop.security.SaslPropertiesResolver {
  public static final org.slf4j.Logger LOG;

  private static final java.lang.String FIXEDWHITELIST_DEFAULT_LOCATION;

  private static final java.lang.String VARIABLEWHITELIST_DEFAULT_LOCATION;

  public static final java.lang.String HADOOP_SECURITY_SASL_FIXEDWHITELIST_FILE;

  public static final java.lang.String HADOOP_SECURITY_SASL_VARIABLEWHITELIST_ENABLE;

  public static final java.lang.String HADOOP_SECURITY_SASL_VARIABLEWHITELIST_FILE;

  public static final java.lang.String HADOOP_SECURITY_SASL_VARIABLEWHITELIST_CACHE_SECS;

  public static final java.lang.String HADOOP_RPC_PROTECTION_NON_WHITELIST;

  private org.apache.hadoop.util.CombinedIPWhiteList whiteList;

  private java.util.Map<java.lang.String, java.lang.String> saslProps;

  public org.apache.hadoop.security.WhitelistBasedResolver();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/security/SaslPropertiesResolver."<init>":()V
       4: return

  public void setConf(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method org/apache/hadoop/security/SaslPropertiesResolver.setConf:(Lorg/apache/hadoop/conf/Configuration;)V
       5: aload_1
       6: ldc           #4                  // String hadoop.security.sasl.fixedwhitelist.file
       8: ldc           #5                  // String /etc/hadoop/fixedwhitelist
      10: invokevirtual #6                  // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      13: astore_2
      14: aconst_null
      15: astore_3
      16: lconst_0
      17: lstore        4
      19: aload_1
      20: ldc           #7                  // String hadoop.security.sasl.variablewhitelist.enable
      22: iconst_0
      23: invokevirtual #8                  // Method org/apache/hadoop/conf/Configuration.getBoolean:(Ljava/lang/String;Z)Z
      26: ifeq          53
      29: aload_1
      30: ldc           #9                  // String hadoop.security.sasl.variablewhitelist.file
      32: ldc           #10                 // String /etc/hadoop/whitelist
      34: invokevirtual #6                  // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      37: astore_3
      38: aload_1
      39: ldc           #11                 // String hadoop.security.sasl.variablewhitelist.cache.secs
      41: ldc2_w        #12                 // long 3600l
      44: invokevirtual #14                 // Method org/apache/hadoop/conf/Configuration.getLong:(Ljava/lang/String;J)J
      47: ldc2_w        #15                 // long 1000l
      50: lmul
      51: lstore        4
      53: aload_0
      54: new           #17                 // class org/apache/hadoop/util/CombinedIPWhiteList
      57: dup
      58: aload_2
      59: aload_3
      60: lload         4
      62: invokespecial #18                 // Method org/apache/hadoop/util/CombinedIPWhiteList."<init>":(Ljava/lang/String;Ljava/lang/String;J)V
      65: putfield      #19                 // Field whiteList:Lorg/apache/hadoop/util/CombinedIPWhiteList;
      68: aload_0
      69: aload_1
      70: invokestatic  #20                 // Method getSaslProperties:(Lorg/apache/hadoop/conf/Configuration;)Ljava/util/Map;
      73: putfield      #21                 // Field saslProps:Ljava/util/Map;
      76: return

  public java.util.Map<java.lang.String, java.lang.String> getServerProperties(java.net.InetAddress);
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: getfield      #21                 // Field saslProps:Ljava/util/Map;
       8: areturn
       9: aload_0
      10: getfield      #19                 // Field whiteList:Lorg/apache/hadoop/util/CombinedIPWhiteList;
      13: aload_1
      14: invokevirtual #22                 // Method java/net/InetAddress.getHostAddress:()Ljava/lang/String;
      17: invokevirtual #23                 // Method org/apache/hadoop/util/CombinedIPWhiteList.isIn:(Ljava/lang/String;)Z
      20: ifeq          30
      23: aload_0
      24: invokevirtual #24                 // Method getDefaultProperties:()Ljava/util/Map;
      27: goto          34
      30: aload_0
      31: getfield      #21                 // Field saslProps:Ljava/util/Map;
      34: areturn

  public java.util.Map<java.lang.String, java.lang.String> getServerProperties(java.lang.String) throws java.net.UnknownHostException;
    Code:
       0: aload_1
       1: ifnonnull     9
       4: aload_0
       5: getfield      #21                 // Field saslProps:Ljava/util/Map;
       8: areturn
       9: aload_0
      10: aload_1
      11: invokestatic  #25                 // Method java/net/InetAddress.getByName:(Ljava/lang/String;)Ljava/net/InetAddress;
      14: invokevirtual #26                 // Method getServerProperties:(Ljava/net/InetAddress;)Ljava/util/Map;
      17: areturn

  static java.util.Map<java.lang.String, java.lang.String> getSaslProperties(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: ldc           #27                 // String hadoop.rpc.protection.non-whitelist
       3: getstatic     #28                 // Field org/apache/hadoop/security/SaslRpcServer$QualityOfProtection.PRIVACY:Lorg/apache/hadoop/security/SaslRpcServer$QualityOfProtection;
       6: invokestatic  #29                 // Method getSaslProperties:(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Lorg/apache/hadoop/security/SaslRpcServer$QualityOfProtection;)Ljava/util/Map;
       9: areturn

  static {};
    Code:
       0: ldc           #3                  // class org/apache/hadoop/security/WhitelistBasedResolver
       2: invokestatic  #30                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #31                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
