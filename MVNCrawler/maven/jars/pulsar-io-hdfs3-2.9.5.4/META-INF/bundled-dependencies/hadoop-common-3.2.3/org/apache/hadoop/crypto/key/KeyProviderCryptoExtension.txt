Compiled from "KeyProviderCryptoExtension.java"
public class org.apache.hadoop.crypto.key.KeyProviderCryptoExtension extends org.apache.hadoop.crypto.key.KeyProviderExtension<org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$CryptoExtension> {
  public static final java.lang.String EEK;

  public static final java.lang.String EK;

  protected org.apache.hadoop.crypto.key.KeyProviderCryptoExtension(org.apache.hadoop.crypto.key.KeyProvider, org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$CryptoExtension);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #1                  // Method org/apache/hadoop/crypto/key/KeyProviderExtension."<init>":(Lorg/apache/hadoop/crypto/key/KeyProvider;Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;)V
       6: return

  public void warmUpEncryptedKeys(java.lang.String...) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getExtension:()Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       7: aload_1
       8: invokeinterface #4,  2            // InterfaceMethod org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension.warmUpEncryptedKeys:([Ljava/lang/String;)V
      13: return

  public org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion generateEncryptedKey(java.lang.String) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getExtension:()Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       7: aload_1
       8: invokeinterface #5,  2            // InterfaceMethod org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension.generateEncryptedKey:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;
      13: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getExtension:()Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       7: aload_1
       8: invokeinterface #6,  2            // InterfaceMethod org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension.decryptEncryptedKey:(Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      13: areturn

  public org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getExtension:()Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       7: aload_1
       8: invokeinterface #7,  2            // InterfaceMethod org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension.reencryptEncryptedKey:(Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;)Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;
      13: areturn

  public void drain(java.lang.String);
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getExtension:()Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       7: aload_1
       8: invokeinterface #8,  2            // InterfaceMethod org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension.drain:(Ljava/lang/String;)V
      13: return

  public void reencryptEncryptedKeys(java.util.List<org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion>) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: invokevirtual #2                  // Method getExtension:()Lorg/apache/hadoop/crypto/key/KeyProviderExtension$Extension;
       4: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       7: aload_1
       8: invokeinterface #9,  2            // InterfaceMethod org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension.reencryptEncryptedKeys:(Ljava/util/List;)V
      13: return

  public static org.apache.hadoop.crypto.key.KeyProviderCryptoExtension createKeyProviderCryptoExtension(org.apache.hadoop.crypto.key.KeyProvider);
    Code:
       0: aconst_null
       1: astore_1
       2: aload_0
       3: instanceof    #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
       6: ifeq          17
       9: aload_0
      10: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
      13: astore_1
      14: goto          63
      17: aload_0
      18: instanceof    #10                 // class org/apache/hadoop/crypto/key/KeyProviderExtension
      21: ifeq          53
      24: aload_0
      25: checkcast     #10                 // class org/apache/hadoop/crypto/key/KeyProviderExtension
      28: invokevirtual #11                 // Method org/apache/hadoop/crypto/key/KeyProviderExtension.getKeyProvider:()Lorg/apache/hadoop/crypto/key/KeyProvider;
      31: instanceof    #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
      34: ifeq          53
      37: aload_0
      38: checkcast     #10                 // class org/apache/hadoop/crypto/key/KeyProviderExtension
      41: astore_2
      42: aload_2
      43: invokevirtual #11                 // Method org/apache/hadoop/crypto/key/KeyProviderExtension.getKeyProvider:()Lorg/apache/hadoop/crypto/key/KeyProvider;
      46: checkcast     #3                  // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension
      49: astore_1
      50: goto          63
      53: new           #12                 // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$DefaultCryptoExtension
      56: dup
      57: aload_0
      58: aconst_null
      59: invokespecial #13                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$DefaultCryptoExtension."<init>":(Lorg/apache/hadoop/crypto/key/KeyProvider;Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$1;)V
      62: astore_1
      63: new           #14                 // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension
      66: dup
      67: aload_0
      68: aload_1
      69: invokespecial #15                 // Method "<init>":(Lorg/apache/hadoop/crypto/key/KeyProvider;Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$CryptoExtension;)V
      72: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method getKeyProvider:()Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: astore_1
       5: aload_1
       6: ifnull        18
       9: aload_1
      10: aload_0
      11: if_acmpeq     18
      14: aload_1
      15: invokevirtual #17                 // Method org/apache/hadoop/crypto/key/KeyProvider.close:()V
      18: return
}
