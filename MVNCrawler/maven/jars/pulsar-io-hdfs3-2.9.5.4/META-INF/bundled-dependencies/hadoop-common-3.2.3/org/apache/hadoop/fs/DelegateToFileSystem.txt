Compiled from "DelegateToFileSystem.java"
public abstract class org.apache.hadoop.fs.DelegateToFileSystem extends org.apache.hadoop.fs.AbstractFileSystem {
  private static final int DELEGATE_TO_FS_DEFAULT_PORT;

  protected final org.apache.hadoop.fs.FileSystem fsImpl;

  protected org.apache.hadoop.fs.DelegateToFileSystem(java.net.URI, org.apache.hadoop.fs.FileSystem, org.apache.hadoop.conf.Configuration, java.lang.String, boolean) throws java.io.IOException, java.net.URISyntaxException;
    Code:
       0: aload_0
       1: aload_1
       2: aload         4
       4: iload         5
       6: aload_2
       7: invokestatic  #1                  // Method getDefaultPortIfDefined:(Lorg/apache/hadoop/fs/FileSystem;)I
      10: invokespecial #2                  // Method org/apache/hadoop/fs/AbstractFileSystem."<init>":(Ljava/net/URI;Ljava/lang/String;ZI)V
      13: aload_0
      14: aload_2
      15: putfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
      18: aload_0
      19: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
      22: aload_1
      23: aload_3
      24: invokevirtual #4                  // Method org/apache/hadoop/fs/FileSystem.initialize:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V
      27: aload_0
      28: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
      31: aload_0
      32: invokevirtual #5                  // Method getStatistics:()Lorg/apache/hadoop/fs/FileSystem$Statistics;
      35: putfield      #6                  // Field org/apache/hadoop/fs/FileSystem.statistics:Lorg/apache/hadoop/fs/FileSystem$Statistics;
      38: return

  private static int getDefaultPortIfDefined(org.apache.hadoop.fs.FileSystem);
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method org/apache/hadoop/fs/FileSystem.getDefaultPort:()I
       4: istore_1
       5: iload_1
       6: ifeq          13
       9: iload_1
      10: goto          14
      13: iconst_m1
      14: ireturn

  public org.apache.hadoop.fs.Path getInitialWorkingDirectory();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #9                  // Method org/apache/hadoop/fs/FileSystem.getInitialWorkingDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  public org.apache.hadoop.fs.FSDataOutputStream createInternal(org.apache.hadoop.fs.Path, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, org.apache.hadoop.fs.permission.FsPermission, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.fs.Options$ChecksumOpt, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: iload         10
       7: ifne          87
      10: aload_0
      11: aload_1
      12: invokevirtual #11                 // Method org/apache/hadoop/fs/Path.getParent:()Lorg/apache/hadoop/fs/Path;
      15: invokevirtual #12                 // Method getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
      18: astore        11
      20: aload         11
      22: ifnonnull     52
      25: new           #13                 // class java/io/FileNotFoundException
      28: dup
      29: new           #14                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #16                 // String Missing parent:
      38: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_1
      42: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      45: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      48: invokespecial #20                 // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: aload         11
      54: invokevirtual #21                 // Method org/apache/hadoop/fs/FileStatus.isDirectory:()Z
      57: ifne          87
      60: new           #22                 // class org/apache/hadoop/fs/ParentNotDirectoryException
      63: dup
      64: new           #14                 // class java/lang/StringBuilder
      67: dup
      68: invokespecial #15                 // Method java/lang/StringBuilder."<init>":()V
      71: ldc           #23                 // String parent is not a dir:
      73: invokevirtual #17                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      76: aload_1
      77: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      80: invokevirtual #19                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      83: invokespecial #24                 // Method org/apache/hadoop/fs/ParentNotDirectoryException."<init>":(Ljava/lang/String;)V
      86: athrow
      87: aload_0
      88: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
      91: aload_1
      92: aload_3
      93: aload_2
      94: iload         4
      96: iload         5
      98: lload         6
     100: aload         8
     102: aload         9
     104: invokevirtual #25                 // Method org/apache/hadoop/fs/FileSystem.primitiveCreate:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Ljava/util/EnumSet;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;)Lorg/apache/hadoop/fs/FSDataOutputStream;
     107: areturn

  public boolean delete(org.apache.hadoop.fs.Path, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: iload_2
      11: invokevirtual #26                 // Method org/apache/hadoop/fs/FileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      14: ireturn

  public org.apache.hadoop.fs.BlockLocation[] getFileBlockLocations(org.apache.hadoop.fs.Path, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: lload_2
      11: lload         4
      13: invokevirtual #27                 // Method org/apache/hadoop/fs/FileSystem.getFileBlockLocations:(Lorg/apache/hadoop/fs/Path;JJ)[Lorg/apache/hadoop/fs/BlockLocation;
      16: areturn

  public org.apache.hadoop.fs.FileChecksum getFileChecksum(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: invokevirtual #28                 // Method org/apache/hadoop/fs/FileSystem.getFileChecksum:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileChecksum;
      13: areturn

  public org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: invokevirtual #29                 // Method org/apache/hadoop/fs/FileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
      13: areturn

  public org.apache.hadoop.fs.FileStatus getFileLinkStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #30                 // Method org/apache/hadoop/fs/FileSystem.getFileLinkStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
       8: astore_2
       9: aload_2
      10: invokevirtual #31                 // Method org/apache/hadoop/fs/FileStatus.isSymlink:()Z
      13: ifeq          28
      16: aload_2
      17: aload_0
      18: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
      21: aload_1
      22: invokevirtual #32                 // Method org/apache/hadoop/fs/FileSystem.getLinkTarget:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      25: invokevirtual #33                 // Method org/apache/hadoop/fs/FileStatus.setSymlink:(Lorg/apache/hadoop/fs/Path;)V
      28: aload_2
      29: areturn

  public org.apache.hadoop.fs.FsStatus getFsStatus() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #34                 // Method org/apache/hadoop/fs/FileSystem.getStatus:()Lorg/apache/hadoop/fs/FsStatus;
       7: areturn

  public org.apache.hadoop.fs.FsStatus getFsStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #35                 // Method org/apache/hadoop/fs/FileSystem.getStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsStatus;
       8: areturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #36                 // Method org/apache/hadoop/fs/FileSystem.getServerDefaults:()Lorg/apache/hadoop/fs/FsServerDefaults;
       7: areturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #37                 // Method org/apache/hadoop/fs/FileSystem.getServerDefaults:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsServerDefaults;
       8: areturn

  public org.apache.hadoop.fs.Path getHomeDirectory();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #38                 // Method org/apache/hadoop/fs/FileSystem.getHomeDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  public int getUriDefaultPort();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokestatic  #1                  // Method getDefaultPortIfDefined:(Lorg/apache/hadoop/fs/FileSystem;)I
       7: ireturn

  public org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: invokevirtual #39                 // Method org/apache/hadoop/fs/FileSystem.listStatus:(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
      13: areturn

  public void mkdir(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: aload_2
      11: iload_3
      12: invokevirtual #40                 // Method org/apache/hadoop/fs/FileSystem.primitiveMkdir:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Z)V
      15: return

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: iload_2
      11: invokevirtual #41                 // Method org/apache/hadoop/fs/FileSystem.open:(Lorg/apache/hadoop/fs/Path;I)Lorg/apache/hadoop/fs/FSDataInputStream;
      14: areturn

  public boolean truncate(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: lload_2
      11: invokevirtual #42                 // Method org/apache/hadoop/fs/FileSystem.truncate:(Lorg/apache/hadoop/fs/Path;J)Z
      14: ireturn

  public void renameInternal(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: aload_2
       7: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
      10: aload_0
      11: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
      14: aload_1
      15: aload_2
      16: iconst_1
      17: anewarray     #43                 // class org/apache/hadoop/fs/Options$Rename
      20: dup
      21: iconst_0
      22: getstatic     #44                 // Field org/apache/hadoop/fs/Options$Rename.NONE:Lorg/apache/hadoop/fs/Options$Rename;
      25: aastore
      26: invokevirtual #45                 // Method org/apache/hadoop/fs/FileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      29: return

  public void setOwner(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: aload_2
      11: aload_3
      12: invokevirtual #46                 // Method org/apache/hadoop/fs/FileSystem.setOwner:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;Ljava/lang/String;)V
      15: return

  public void setPermission(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: aload_2
      11: invokevirtual #47                 // Method org/apache/hadoop/fs/FileSystem.setPermission:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
      14: return

  public boolean setReplication(org.apache.hadoop.fs.Path, short) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: iload_2
      11: invokevirtual #48                 // Method org/apache/hadoop/fs/FileSystem.setReplication:(Lorg/apache/hadoop/fs/Path;S)Z
      14: ireturn

  public void setTimes(org.apache.hadoop.fs.Path, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #10                 // Method checkPath:(Lorg/apache/hadoop/fs/Path;)V
       5: aload_0
       6: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_1
      10: lload_2
      11: lload         4
      13: invokevirtual #49                 // Method org/apache/hadoop/fs/FileSystem.setTimes:(Lorg/apache/hadoop/fs/Path;JJ)V
      16: return

  public void setVerifyChecksum(boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: invokevirtual #50                 // Method org/apache/hadoop/fs/FileSystem.setVerifyChecksum:(Z)V
       8: return

  public boolean supportsSymlinks();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #51                 // Method org/apache/hadoop/fs/FileSystem.supportsSymlinks:()Z
       7: ireturn

  public void createSymlink(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokevirtual #52                 // Method org/apache/hadoop/fs/FileSystem.createSymlink:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;Z)V
      10: return

  public org.apache.hadoop.fs.Path getLinkTarget(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #32                 // Method org/apache/hadoop/fs/FileSystem.getLinkTarget:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public java.lang.String getCanonicalServiceName();
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #53                 // Method org/apache/hadoop/fs/FileSystem.getCanonicalServiceName:()Ljava/lang/String;
       7: areturn

  public java.util.List<org.apache.hadoop.security.token.Token<?>> getDelegationTokens(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aconst_null
       6: invokevirtual #54                 // Method org/apache/hadoop/fs/FileSystem.addDelegationTokens:(Ljava/lang/String;Lorg/apache/hadoop/security/Credentials;)[Lorg/apache/hadoop/security/token/Token;
       9: invokestatic  #55                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      12: areturn

  public boolean hasPathCapability(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field fsImpl:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #56                 // Method org/apache/hadoop/fs/FileSystem.hasPathCapability:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)Z
       9: ireturn
}
