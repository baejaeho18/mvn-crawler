Compiled from "DirectBufferPool.java"
public class org.apache.hadoop.util.DirectBufferPool {
  final java.util.concurrent.ConcurrentMap<java.lang.Integer, java.util.Queue<java.lang.ref.WeakReference<java.nio.ByteBuffer>>> buffersBySize;

  public org.apache.hadoop.util.DirectBufferPool();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/ConcurrentHashMap
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      12: putfield      #4                  // Field buffersBySize:Ljava/util/concurrent/ConcurrentMap;
      15: return

  public java.nio.ByteBuffer getBuffer(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffersBySize:Ljava/util/concurrent/ConcurrentMap;
       4: iload_1
       5: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #6,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #7                  // class java/util/Queue
      16: astore_2
      17: aload_2
      18: ifnonnull     26
      21: iload_1
      22: invokestatic  #8                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      25: areturn
      26: aload_2
      27: invokeinterface #9,  1            // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
      32: checkcast     #10                 // class java/lang/ref/WeakReference
      35: dup
      36: astore_3
      37: ifnull        60
      40: aload_3
      41: invokevirtual #11                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      44: checkcast     #12                 // class java/nio/ByteBuffer
      47: astore        4
      49: aload         4
      51: ifnull        57
      54: aload         4
      56: areturn
      57: goto          26
      60: iload_1
      61: invokestatic  #8                  // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      64: areturn

  public void returnBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: invokevirtual #13                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
       4: pop
       5: aload_1
       6: invokevirtual #14                 // Method java/nio/ByteBuffer.capacity:()I
       9: istore_2
      10: aload_0
      11: getfield      #4                  // Field buffersBySize:Ljava/util/concurrent/ConcurrentMap;
      14: iload_2
      15: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      18: invokeinterface #6,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #7                  // class java/util/Queue
      26: astore_3
      27: aload_3
      28: ifnonnull     66
      31: new           #15                 // class java/util/concurrent/ConcurrentLinkedQueue
      34: dup
      35: invokespecial #16                 // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      38: astore_3
      39: aload_0
      40: getfield      #4                  // Field buffersBySize:Ljava/util/concurrent/ConcurrentMap;
      43: iload_2
      44: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      47: aload_3
      48: invokeinterface #17,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      53: checkcast     #7                  // class java/util/Queue
      56: astore        4
      58: aload         4
      60: ifnull        66
      63: aload         4
      65: astore_3
      66: aload_3
      67: new           #10                 // class java/lang/ref/WeakReference
      70: dup
      71: aload_1
      72: invokespecial #18                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
      75: invokeinterface #19,  2           // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      80: pop
      81: return

  int countBuffersOfSize(int);
    Code:
       0: aload_0
       1: getfield      #4                  // Field buffersBySize:Ljava/util/concurrent/ConcurrentMap;
       4: iload_1
       5: invokestatic  #5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
       8: invokeinterface #6,  2            // InterfaceMethod java/util/concurrent/ConcurrentMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      13: checkcast     #7                  // class java/util/Queue
      16: astore_2
      17: aload_2
      18: ifnonnull     23
      21: iconst_0
      22: ireturn
      23: aload_2
      24: invokeinterface #20,  1           // InterfaceMethod java/util/Queue.size:()I
      29: ireturn
}
