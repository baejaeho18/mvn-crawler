Compiled from "OpensslCipher.java"
public final class org.apache.hadoop.crypto.OpensslCipher {
  private static final org.slf4j.Logger LOG;

  public static final int ENCRYPT_MODE;

  public static final int DECRYPT_MODE;

  private long context;

  private final int alg;

  private final int padding;

  private static final java.lang.String loadingFailureReason;

  public static java.lang.String getLoadingFailureReason();
    Code:
       0: getstatic     #1                  // Field loadingFailureReason:Ljava/lang/String;
       3: areturn

  private org.apache.hadoop.crypto.OpensslCipher(long, int, int);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: lconst_0
       6: putfield      #3                  // Field context:J
       9: aload_0
      10: lload_1
      11: putfield      #3                  // Field context:J
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field alg:I
      19: aload_0
      20: iload         4
      22: putfield      #5                  // Field padding:I
      25: return

  public static final org.apache.hadoop.crypto.OpensslCipher getInstance(java.lang.String) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException;
    Code:
       0: aload_0
       1: invokestatic  #6                  // Method tokenizeTransformation:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/OpensslCipher$Transform;
       4: astore_1
       5: aload_1
       6: getfield      #7                  // Field org/apache/hadoop/crypto/OpensslCipher$Transform.alg:Ljava/lang/String;
       9: aload_1
      10: getfield      #8                  // Field org/apache/hadoop/crypto/OpensslCipher$Transform.mode:Ljava/lang/String;
      13: invokestatic  #9                  // Method org/apache/hadoop/crypto/OpensslCipher$AlgMode.get:(Ljava/lang/String;Ljava/lang/String;)I
      16: istore_2
      17: aload_1
      18: getfield      #10                 // Field org/apache/hadoop/crypto/OpensslCipher$Transform.padding:Ljava/lang/String;
      21: invokestatic  #11                 // Method org/apache/hadoop/crypto/OpensslCipher$Padding.get:(Ljava/lang/String;)I
      24: istore_3
      25: iload_2
      26: iload_3
      27: invokestatic  #12                 // Method initContext:(II)J
      30: lstore        4
      32: new           #13                 // class org/apache/hadoop/crypto/OpensslCipher
      35: dup
      36: lload         4
      38: iload_2
      39: iload_3
      40: invokespecial #14                 // Method "<init>":(JII)V
      43: areturn

  private static org.apache.hadoop.crypto.OpensslCipher$Transform tokenizeTransformation(java.lang.String) throws java.security.NoSuchAlgorithmException;
    Code:
       0: aload_0
       1: ifnonnull     14
       4: new           #15                 // class java/security/NoSuchAlgorithmException
       7: dup
       8: ldc           #16                 // String No transformation given.
      10: invokespecial #17                 // Method java/security/NoSuchAlgorithmException."<init>":(Ljava/lang/String;)V
      13: athrow
      14: iconst_3
      15: anewarray     #18                 // class java/lang/String
      18: astore_1
      19: iconst_0
      20: istore_2
      21: new           #19                 // class java/util/StringTokenizer
      24: dup
      25: aload_0
      26: ldc           #20                 // String /
      28: invokespecial #21                 // Method java/util/StringTokenizer."<init>":(Ljava/lang/String;Ljava/lang/String;)V
      31: astore_3
      32: aload_3
      33: invokevirtual #22                 // Method java/util/StringTokenizer.hasMoreTokens:()Z
      36: ifeq          60
      39: iload_2
      40: iconst_3
      41: if_icmpge     60
      44: aload_1
      45: iload_2
      46: iinc          2, 1
      49: aload_3
      50: invokevirtual #23                 // Method java/util/StringTokenizer.nextToken:()Ljava/lang/String;
      53: invokevirtual #24                 // Method java/lang/String.trim:()Ljava/lang/String;
      56: aastore
      57: goto          32
      60: iload_2
      61: iconst_3
      62: if_icmpne     72
      65: aload_3
      66: invokevirtual #22                 // Method java/util/StringTokenizer.hasMoreTokens:()Z
      69: ifeq          99
      72: new           #15                 // class java/security/NoSuchAlgorithmException
      75: dup
      76: new           #25                 // class java/lang/StringBuilder
      79: dup
      80: invokespecial #26                 // Method java/lang/StringBuilder."<init>":()V
      83: ldc           #27                 // String Invalid transformation format:
      85: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      88: aload_0
      89: invokevirtual #28                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      92: invokevirtual #29                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      95: invokespecial #17                 // Method java/security/NoSuchAlgorithmException."<init>":(Ljava/lang/String;)V
      98: athrow
      99: new           #30                 // class org/apache/hadoop/crypto/OpensslCipher$Transform
     102: dup
     103: aload_1
     104: iconst_0
     105: aaload
     106: aload_1
     107: iconst_1
     108: aaload
     109: aload_1
     110: iconst_2
     111: aaload
     112: invokespecial #31                 // Method org/apache/hadoop/crypto/OpensslCipher$Transform."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
     115: areturn

  public void init(int, byte[], byte[]);
    Code:
       0: aload_0
       1: aload_0
       2: aload_0
       3: getfield      #3                  // Field context:J
       6: iload_1
       7: aload_0
       8: getfield      #4                  // Field alg:I
      11: aload_0
      12: getfield      #5                  // Field padding:I
      15: aload_2
      16: aload_3
      17: invokespecial #32                 // Method init:(JIII[B[B)J
      20: putfield      #3                  // Field context:J
      23: return

  public int update(java.nio.ByteBuffer, java.nio.ByteBuffer) throws javax.crypto.ShortBufferException;
    Code:
       0: aload_0
       1: invokespecial #33                 // Method checkState:()V
       4: aload_1
       5: invokevirtual #34                 // Method java/nio/ByteBuffer.isDirect:()Z
       8: ifeq          22
      11: aload_2
      12: invokevirtual #34                 // Method java/nio/ByteBuffer.isDirect:()Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ldc           #35                 // String Direct buffers are required.
      25: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      28: aload_0
      29: aload_0
      30: getfield      #3                  // Field context:J
      33: aload_1
      34: aload_1
      35: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      38: aload_1
      39: invokevirtual #38                 // Method java/nio/ByteBuffer.remaining:()I
      42: aload_2
      43: aload_2
      44: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      47: aload_2
      48: invokevirtual #38                 // Method java/nio/ByteBuffer.remaining:()I
      51: invokespecial #39                 // Method update:(JLjava/nio/ByteBuffer;IILjava/nio/ByteBuffer;II)I
      54: istore_3
      55: aload_1
      56: aload_1
      57: invokevirtual #40                 // Method java/nio/ByteBuffer.limit:()I
      60: invokevirtual #41                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      63: pop
      64: aload_2
      65: aload_2
      66: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      69: iload_3
      70: iadd
      71: invokevirtual #41                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      74: pop
      75: iload_3
      76: ireturn

  public int doFinal(java.nio.ByteBuffer) throws javax.crypto.ShortBufferException, javax.crypto.IllegalBlockSizeException, javax.crypto.BadPaddingException;
    Code:
       0: aload_0
       1: invokespecial #33                 // Method checkState:()V
       4: aload_1
       5: invokevirtual #34                 // Method java/nio/ByteBuffer.isDirect:()Z
       8: ldc           #42                 // String Direct buffer is required.
      10: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      13: aload_0
      14: aload_0
      15: getfield      #3                  // Field context:J
      18: aload_1
      19: aload_1
      20: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      23: aload_1
      24: invokevirtual #38                 // Method java/nio/ByteBuffer.remaining:()I
      27: invokespecial #43                 // Method doFinal:(JLjava/nio/ByteBuffer;II)I
      30: istore_2
      31: aload_1
      32: aload_1
      33: invokevirtual #37                 // Method java/nio/ByteBuffer.position:()I
      36: iload_2
      37: iadd
      38: invokevirtual #41                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      41: pop
      42: iload_2
      43: ireturn

  public void clean();
    Code:
       0: aload_0
       1: getfield      #3                  // Field context:J
       4: lconst_0
       5: lcmp
       6: ifeq          22
       9: aload_0
      10: aload_0
      11: getfield      #3                  // Field context:J
      14: invokespecial #44                 // Method clean:(J)V
      17: aload_0
      18: lconst_0
      19: putfield      #3                  // Field context:J
      22: return

  private void checkState();
    Code:
       0: aload_0
       1: getfield      #3                  // Field context:J
       4: lconst_0
       5: lcmp
       6: ifeq          13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: invokestatic  #45                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      17: return

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: invokevirtual #46                 // Method clean:()V
       4: return

  private static native void initIDs();

  private static native long initContext(int, int);

  private native long init(long, int, int, int, byte[], byte[]);

  private native int update(long, java.nio.ByteBuffer, int, int, java.nio.ByteBuffer, int, int);

  private native int doFinal(long, java.nio.ByteBuffer, int, int);

  private native void clean(long);

  public static native java.lang.String getLibraryName();

  static {};
    Code:
       0: ldc           #13                 // class org/apache/hadoop/crypto/OpensslCipher
       2: invokevirtual #47                 // Method java/lang/Class.getName:()Ljava/lang/String;
       5: invokestatic  #48                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/String;)Lorg/slf4j/Logger;
       8: putstatic     #49                 // Field LOG:Lorg/slf4j/Logger;
      11: aconst_null
      12: astore_0
      13: invokestatic  #50                 // Method org/apache/hadoop/util/NativeCodeLoader.buildSupportsOpenssl:()Z
      16: ifne          35
      19: getstatic     #51                 // Field org/apache/hadoop/util/PerformanceAdvisory.LOG:Lorg/slf4j/Logger;
      22: ldc           #52                 // String Build does not support openssl
      24: invokeinterface #53,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      29: ldc           #54                 // String build does not support openssl.
      31: astore_0
      32: goto          38
      35: invokestatic  #55                 // Method initIDs:()V
      38: aload_0
      39: putstatic     #1                  // Field loadingFailureReason:Ljava/lang/String;
      42: goto          76
      45: astore_1
      46: aload_1
      47: invokevirtual #57                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
      50: astore_0
      51: getstatic     #49                 // Field LOG:Lorg/slf4j/Logger;
      54: ldc           #58                 // String Failed to load OpenSSL Cipher.
      56: aload_1
      57: invokeinterface #59,  3           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Throwable;)V
      62: aload_0
      63: putstatic     #1                  // Field loadingFailureReason:Ljava/lang/String;
      66: goto          76
      69: astore_2
      70: aload_0
      71: putstatic     #1                  // Field loadingFailureReason:Ljava/lang/String;
      74: aload_2
      75: athrow
      76: return
    Exception table:
       from    to  target type
          13    38    45   Class java/lang/Throwable
          13    38    69   any
          45    62    69   any
}
