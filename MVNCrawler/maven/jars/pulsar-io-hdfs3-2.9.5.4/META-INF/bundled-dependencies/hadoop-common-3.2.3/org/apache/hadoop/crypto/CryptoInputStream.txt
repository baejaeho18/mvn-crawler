Compiled from "CryptoInputStream.java"
public class org.apache.hadoop.crypto.CryptoInputStream extends java.io.FilterInputStream implements org.apache.hadoop.fs.Seekable,org.apache.hadoop.fs.PositionedReadable,org.apache.hadoop.fs.ByteBufferReadable,org.apache.hadoop.fs.HasFileDescriptor,org.apache.hadoop.fs.CanSetDropBehind,org.apache.hadoop.fs.CanSetReadahead,org.apache.hadoop.fs.HasEnhancedByteBufferAccess,java.nio.channels.ReadableByteChannel,org.apache.hadoop.fs.CanUnbuffer,org.apache.hadoop.fs.StreamCapabilities {
  private final byte[] oneByteBuf;

  private final org.apache.hadoop.crypto.CryptoCodec codec;

  private final org.apache.hadoop.crypto.Decryptor decryptor;

  private final int bufferSize;

  private java.nio.ByteBuffer inBuffer;

  private java.nio.ByteBuffer outBuffer;

  private long streamOffset;

  private java.lang.Boolean usingByteBufferRead;

  private byte padding;

  private boolean closed;

  private final byte[] key;

  private final byte[] initIV;

  private byte[] iv;

  private final boolean isByteBufferReadable;

  private final boolean isReadableByteChannel;

  private final java.util.Queue<java.nio.ByteBuffer> bufferPool;

  private final java.util.Queue<org.apache.hadoop.crypto.Decryptor> decryptorPool;

  private byte[] tmpBuf;

  public org.apache.hadoop.crypto.CryptoInputStream(java.io.InputStream, org.apache.hadoop.crypto.CryptoCodec, int, byte[], byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: aload         5
       8: aload_1
       9: invokestatic  #1                  // Method org/apache/hadoop/crypto/CryptoStreamUtils.getInputStreamOffset:(Ljava/io/InputStream;)J
      12: invokespecial #2                  // Method "<init>":(Ljava/io/InputStream;Lorg/apache/hadoop/crypto/CryptoCodec;I[B[BJ)V
      15: return

  public org.apache.hadoop.crypto.CryptoInputStream(java.io.InputStream, org.apache.hadoop.crypto.CryptoCodec, int, byte[], byte[], long) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method java/io/FilterInputStream."<init>":(Ljava/io/InputStream;)V
       5: aload_0
       6: iconst_1
       7: newarray       byte
       9: putfield      #4                  // Field oneByteBuf:[B
      12: aload_0
      13: lconst_0
      14: putfield      #5                  // Field streamOffset:J
      17: aload_0
      18: aconst_null
      19: putfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
      22: aload_0
      23: new           #7                  // class java/util/concurrent/ConcurrentLinkedQueue
      26: dup
      27: invokespecial #8                  // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      30: putfield      #9                  // Field bufferPool:Ljava/util/Queue;
      33: aload_0
      34: new           #7                  // class java/util/concurrent/ConcurrentLinkedQueue
      37: dup
      38: invokespecial #8                  // Method java/util/concurrent/ConcurrentLinkedQueue."<init>":()V
      41: putfield      #10                 // Field decryptorPool:Ljava/util/Queue;
      44: aload_2
      45: invokestatic  #11                 // Method org/apache/hadoop/crypto/CryptoStreamUtils.checkCodec:(Lorg/apache/hadoop/crypto/CryptoCodec;)V
      48: aload_0
      49: aload_2
      50: iload_3
      51: invokestatic  #12                 // Method org/apache/hadoop/crypto/CryptoStreamUtils.checkBufferSize:(Lorg/apache/hadoop/crypto/CryptoCodec;I)I
      54: putfield      #13                 // Field bufferSize:I
      57: aload_0
      58: aload_2
      59: putfield      #14                 // Field codec:Lorg/apache/hadoop/crypto/CryptoCodec;
      62: aload_0
      63: aload         4
      65: invokevirtual #15                 // Method "[B".clone:()Ljava/lang/Object;
      68: checkcast     #16                 // class "[B"
      71: putfield      #17                 // Field key:[B
      74: aload_0
      75: aload         5
      77: invokevirtual #18                 // Method "[B".clone:()Ljava/lang/Object;
      80: checkcast     #16                 // class "[B"
      83: putfield      #19                 // Field initIV:[B
      86: aload_0
      87: aload         5
      89: invokevirtual #20                 // Method "[B".clone:()Ljava/lang/Object;
      92: checkcast     #16                 // class "[B"
      95: putfield      #21                 // Field iv:[B
      98: aload_0
      99: lload         6
     101: putfield      #5                  // Field streamOffset:J
     104: aload_0
     105: aload_1
     106: instanceof    #22                 // class org/apache/hadoop/fs/ByteBufferReadable
     109: putfield      #23                 // Field isByteBufferReadable:Z
     112: aload_0
     113: aload_1
     114: instanceof    #24                 // class java/nio/channels/ReadableByteChannel
     117: putfield      #25                 // Field isReadableByteChannel:Z
     120: aload_0
     121: aload_0
     122: getfield      #13                 // Field bufferSize:I
     125: invokestatic  #26                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     128: putfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     131: aload_0
     132: aload_0
     133: getfield      #13                 // Field bufferSize:I
     136: invokestatic  #26                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
     139: putfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     142: aload_0
     143: aload_0
     144: invokespecial #29                 // Method getDecryptor:()Lorg/apache/hadoop/crypto/Decryptor;
     147: putfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
     150: aload_0
     151: lload         6
     153: invokespecial #31                 // Method resetStreamOffset:(J)V
     156: return

  public org.apache.hadoop.crypto.CryptoInputStream(java.io.InputStream, org.apache.hadoop.crypto.CryptoCodec, byte[], byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_2
       4: invokevirtual #32                 // Method org/apache/hadoop/crypto/CryptoCodec.getConf:()Lorg/apache/hadoop/conf/Configuration;
       7: invokestatic  #33                 // Method org/apache/hadoop/crypto/CryptoStreamUtils.getBufferSize:(Lorg/apache/hadoop/conf/Configuration;)I
      10: aload_3
      11: aload         4
      13: invokespecial #34                 // Method "<init>":(Ljava/io/InputStream;Lorg/apache/hadoop/crypto/CryptoCodec;I[B[B)V
      16: return

  public java.io.InputStream getWrappedStream();
    Code:
       0: aload_0
       1: getfield      #35                 // Field in:Ljava/io/InputStream;
       4: areturn

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_1
       5: ifnonnull     16
       8: new           #37                 // class java/lang/NullPointerException
      11: dup
      12: invokespecial #38                 // Method java/lang/NullPointerException."<init>":()V
      15: athrow
      16: iload_2
      17: iflt          32
      20: iload_3
      21: iflt          32
      24: iload_3
      25: aload_1
      26: arraylength
      27: iload_2
      28: isub
      29: if_icmple     40
      32: new           #39                 // class java/lang/IndexOutOfBoundsException
      35: dup
      36: invokespecial #40                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      39: athrow
      40: iload_3
      41: ifne          46
      44: iconst_0
      45: ireturn
      46: aload_0
      47: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      50: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      53: istore        4
      55: iload         4
      57: ifle          83
      60: iload_3
      61: iload         4
      63: invokestatic  #42                 // Method java/lang/Math.min:(II)I
      66: istore        5
      68: aload_0
      69: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      72: aload_1
      73: iload_2
      74: iload         5
      76: invokevirtual #43                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
      79: pop
      80: iload         5
      82: ireturn
      83: iconst_0
      84: istore        5
      86: aload_0
      87: getfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
      90: ifnonnull     203
      93: aload_0
      94: getfield      #23                 // Field isByteBufferReadable:Z
      97: ifne          107
     100: aload_0
     101: getfield      #25                 // Field isReadableByteChannel:Z
     104: ifeq          173
     107: aload_0
     108: getfield      #23                 // Field isByteBufferReadable:Z
     111: ifeq          133
     114: aload_0
     115: getfield      #35                 // Field in:Ljava/io/InputStream;
     118: checkcast     #22                 // class org/apache/hadoop/fs/ByteBufferReadable
     121: aload_0
     122: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     125: invokeinterface #44,  2           // InterfaceMethod org/apache/hadoop/fs/ByteBufferReadable.read:(Ljava/nio/ByteBuffer;)I
     130: goto          149
     133: aload_0
     134: getfield      #35                 // Field in:Ljava/io/InputStream;
     137: checkcast     #24                 // class java/nio/channels/ReadableByteChannel
     140: aload_0
     141: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     144: invokeinterface #45,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I
     149: istore        5
     151: aload_0
     152: getstatic     #46                 // Field java/lang/Boolean.TRUE:Ljava/lang/Boolean;
     155: putfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
     158: goto          180
     161: astore        6
     163: aload_0
     164: getstatic     #48                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
     167: putfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
     170: goto          180
     173: aload_0
     174: getstatic     #48                 // Field java/lang/Boolean.FALSE:Ljava/lang/Boolean;
     177: putfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
     180: aload_0
     181: getfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
     184: invokevirtual #49                 // Method java/lang/Boolean.booleanValue:()Z
     187: ifne          270
     190: aload_0
     191: aload_0
     192: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     195: invokespecial #50                 // Method readFromUnderlyingStream:(Ljava/nio/ByteBuffer;)I
     198: istore        5
     200: goto          270
     203: aload_0
     204: getfield      #6                  // Field usingByteBufferRead:Ljava/lang/Boolean;
     207: invokevirtual #49                 // Method java/lang/Boolean.booleanValue:()Z
     210: ifeq          260
     213: aload_0
     214: getfield      #23                 // Field isByteBufferReadable:Z
     217: ifeq          239
     220: aload_0
     221: getfield      #35                 // Field in:Ljava/io/InputStream;
     224: checkcast     #22                 // class org/apache/hadoop/fs/ByteBufferReadable
     227: aload_0
     228: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     231: invokeinterface #44,  2           // InterfaceMethod org/apache/hadoop/fs/ByteBufferReadable.read:(Ljava/nio/ByteBuffer;)I
     236: goto          255
     239: aload_0
     240: getfield      #35                 // Field in:Ljava/io/InputStream;
     243: checkcast     #24                 // class java/nio/channels/ReadableByteChannel
     246: aload_0
     247: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     250: invokeinterface #45,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I
     255: istore        5
     257: goto          270
     260: aload_0
     261: aload_0
     262: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     265: invokespecial #50                 // Method readFromUnderlyingStream:(Ljava/nio/ByteBuffer;)I
     268: istore        5
     270: iload         5
     272: ifgt          278
     275: iload         5
     277: ireturn
     278: aload_0
     279: dup
     280: getfield      #5                  // Field streamOffset:J
     283: iload         5
     285: i2l
     286: ladd
     287: putfield      #5                  // Field streamOffset:J
     290: aload_0
     291: aload_0
     292: getfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
     295: aload_0
     296: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     299: aload_0
     300: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     303: aload_0
     304: getfield      #51                 // Field padding:B
     307: invokespecial #52                 // Method decrypt:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;B)V
     310: aload_0
     311: aload_0
     312: aload_0
     313: getfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
     316: aload_0
     317: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     320: aload_0
     321: getfield      #5                  // Field streamOffset:J
     324: aload_0
     325: getfield      #21                 // Field iv:[B
     328: invokespecial #53                 // Method afterDecryption:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;J[B)B
     331: putfield      #51                 // Field padding:B
     334: iload_3
     335: aload_0
     336: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     339: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
     342: invokestatic  #42                 // Method java/lang/Math.min:(II)I
     345: istore        5
     347: aload_0
     348: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     351: aload_1
     352: iload_2
     353: iload         5
     355: invokevirtual #43                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     358: pop
     359: iload         5
     361: ireturn
    Exception table:
       from    to  target type
         107   158   161   Class java/lang/UnsupportedOperationException

  private int readFromUnderlyingStream(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
       4: istore_2
       5: aload_0
       6: invokespecial #54                 // Method getTmpBuf:()[B
       9: astore_3
      10: aload_0
      11: getfield      #35                 // Field in:Ljava/io/InputStream;
      14: aload_3
      15: iconst_0
      16: iload_2
      17: invokevirtual #55                 // Method java/io/InputStream.read:([BII)I
      20: istore        4
      22: iload         4
      24: ifle          36
      27: aload_1
      28: aload_3
      29: iconst_0
      30: iload         4
      32: invokevirtual #56                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      35: pop
      36: iload         4
      38: ireturn

  private byte[] getTmpBuf();
    Code:
       0: aload_0
       1: getfield      #57                 // Field tmpBuf:[B
       4: ifnonnull     17
       7: aload_0
       8: aload_0
       9: getfield      #13                 // Field bufferSize:I
      12: newarray       byte
      14: putfield      #57                 // Field tmpBuf:[B
      17: aload_0
      18: getfield      #57                 // Field tmpBuf:[B
      21: areturn

  private void decrypt(org.apache.hadoop.crypto.Decryptor, java.nio.ByteBuffer, java.nio.ByteBuffer, byte) throws java.io.IOException;
    Code:
       0: aload_2
       1: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
       4: iload         4
       6: if_icmplt     13
       9: iconst_1
      10: goto          14
      13: iconst_0
      14: invokestatic  #59                 // Method com/google/common/base/Preconditions.checkState:(Z)V
      17: aload_2
      18: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
      21: iload         4
      23: if_icmpne     27
      26: return
      27: aload_2
      28: invokevirtual #60                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      31: pop
      32: aload_3
      33: invokevirtual #61                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      36: pop
      37: aload_1
      38: aload_2
      39: aload_3
      40: invokeinterface #62,  3           // InterfaceMethod org/apache/hadoop/crypto/Decryptor.decrypt:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
      45: aload_2
      46: invokevirtual #61                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      49: pop
      50: aload_3
      51: invokevirtual #60                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      54: pop
      55: iload         4
      57: ifle          67
      60: aload_3
      61: iload         4
      63: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      66: pop
      67: return

  private byte afterDecryption(org.apache.hadoop.crypto.Decryptor, java.nio.ByteBuffer, long, byte[]) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        6
       3: aload_1
       4: invokeinterface #64,  1           // InterfaceMethod org/apache/hadoop/crypto/Decryptor.isContextReset:()Z
       9: ifeq          34
      12: aload_0
      13: aload_1
      14: lload_3
      15: aload         5
      17: invokespecial #65                 // Method updateDecryptor:(Lorg/apache/hadoop/crypto/Decryptor;J[B)V
      20: aload_0
      21: lload_3
      22: invokespecial #66                 // Method getPadding:(J)B
      25: istore        6
      27: aload_2
      28: iload         6
      30: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      33: pop
      34: iload         6
      36: ireturn

  private long getCounter(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #14                 // Field codec:Lorg/apache/hadoop/crypto/CryptoCodec;
       5: invokevirtual #67                 // Method org/apache/hadoop/crypto/CryptoCodec.getCipherSuite:()Lorg/apache/hadoop/crypto/CipherSuite;
       8: invokevirtual #68                 // Method org/apache/hadoop/crypto/CipherSuite.getAlgorithmBlockSize:()I
      11: i2l
      12: ldiv
      13: lreturn

  private byte getPadding(long);
    Code:
       0: lload_1
       1: aload_0
       2: getfield      #14                 // Field codec:Lorg/apache/hadoop/crypto/CryptoCodec;
       5: invokevirtual #67                 // Method org/apache/hadoop/crypto/CryptoCodec.getCipherSuite:()Lorg/apache/hadoop/crypto/CipherSuite;
       8: invokevirtual #68                 // Method org/apache/hadoop/crypto/CipherSuite.getAlgorithmBlockSize:()I
      11: i2l
      12: lrem
      13: l2i
      14: i2b
      15: ireturn

  private void updateDecryptor(org.apache.hadoop.crypto.Decryptor, long, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_2
       2: invokespecial #69                 // Method getCounter:(J)J
       5: lstore        5
       7: aload_0
       8: getfield      #14                 // Field codec:Lorg/apache/hadoop/crypto/CryptoCodec;
      11: aload_0
      12: getfield      #19                 // Field initIV:[B
      15: lload         5
      17: aload         4
      19: invokevirtual #70                 // Method org/apache/hadoop/crypto/CryptoCodec.calculateIV:([BJ[B)V
      22: aload_1
      23: aload_0
      24: getfield      #17                 // Field key:[B
      27: aload         4
      29: invokeinterface #71,  3           // InterfaceMethod org/apache/hadoop/crypto/Decryptor.init:([B[B)V
      34: return

  private void resetStreamOffset(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #5                  // Field streamOffset:J
       5: aload_0
       6: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
       9: invokevirtual #61                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      12: pop
      13: aload_0
      14: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      17: invokevirtual #61                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
      20: pop
      21: aload_0
      22: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      25: iconst_0
      26: invokevirtual #72                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      29: pop
      30: aload_0
      31: aload_0
      32: getfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
      35: lload_1
      36: aload_0
      37: getfield      #21                 // Field iv:[B
      40: invokespecial #65                 // Method updateDecryptor:(Lorg/apache/hadoop/crypto/Decryptor;J[B)V
      43: aload_0
      44: aload_0
      45: lload_1
      46: invokespecial #66                 // Method getPadding:(J)B
      49: putfield      #51                 // Field padding:B
      52: aload_0
      53: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
      56: aload_0
      57: getfield      #51                 // Field padding:B
      60: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      63: pop
      64: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #73                 // Field closed:Z
       4: ifeq          8
       7: return
       8: aload_0
       9: invokespecial #74                 // Method java/io/FilterInputStream.close:()V
      12: aload_0
      13: invokespecial #75                 // Method freeBuffers:()V
      16: aload_0
      17: getfield      #14                 // Field codec:Lorg/apache/hadoop/crypto/CryptoCodec;
      20: invokevirtual #76                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
      23: aload_0
      24: iconst_1
      25: putfield      #73                 // Field closed:Z
      28: return

  public int read(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_0
       5: getfield      #35                 // Field in:Ljava/io/InputStream;
       8: checkcast     #77                 // class org/apache/hadoop/fs/PositionedReadable
      11: lload_1
      12: aload_3
      13: iload         4
      15: iload         5
      17: invokeinterface #78,  6           // InterfaceMethod org/apache/hadoop/fs/PositionedReadable.read:(J[BII)I
      22: istore        6
      24: iload         6
      26: ifle          39
      29: aload_0
      30: lload_1
      31: aload_3
      32: iload         4
      34: iload         6
      36: invokespecial #79                 // Method decrypt:(J[BII)V
      39: iload         6
      41: ireturn
      42: astore        6
      44: new           #47                 // class java/lang/UnsupportedOperationException
      47: dup
      48: ldc           #81                 // String This stream does not support positioned read.
      50: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      53: athrow
    Exception table:
       from    to  target type
           4    41    42   Class java/lang/ClassCastException

  private void decrypt(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #83                 // Method getBuffer:()Ljava/nio/ByteBuffer;
       4: astore        6
       6: aload_0
       7: invokespecial #83                 // Method getBuffer:()Ljava/nio/ByteBuffer;
      10: astore        7
      12: aconst_null
      13: astore        8
      15: aload_0
      16: invokespecial #29                 // Method getDecryptor:()Lorg/apache/hadoop/crypto/Decryptor;
      19: astore        8
      21: aload_0
      22: getfield      #19                 // Field initIV:[B
      25: invokevirtual #84                 // Method "[B".clone:()Ljava/lang/Object;
      28: checkcast     #16                 // class "[B"
      31: astore        9
      33: aload_0
      34: aload         8
      36: lload_1
      37: aload         9
      39: invokespecial #65                 // Method updateDecryptor:(Lorg/apache/hadoop/crypto/Decryptor;J[B)V
      42: aload_0
      43: lload_1
      44: invokespecial #66                 // Method getPadding:(J)B
      47: istore        10
      49: aload         6
      51: iload         10
      53: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      56: pop
      57: iconst_0
      58: istore        11
      60: iload         11
      62: iload         5
      64: if_icmpge     149
      67: iload         5
      69: iload         11
      71: isub
      72: aload         6
      74: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      77: invokestatic  #42                 // Method java/lang/Math.min:(II)I
      80: istore        12
      82: aload         6
      84: aload_3
      85: iload         4
      87: iload         11
      89: iadd
      90: iload         12
      92: invokevirtual #56                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
      95: pop
      96: aload_0
      97: aload         8
      99: aload         6
     101: aload         7
     103: iload         10
     105: invokespecial #52                 // Method decrypt:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;B)V
     108: aload         7
     110: aload_3
     111: iload         4
     113: iload         11
     115: iadd
     116: iload         12
     118: invokevirtual #43                 // Method java/nio/ByteBuffer.get:([BII)Ljava/nio/ByteBuffer;
     121: pop
     122: iload         11
     124: iload         12
     126: iadd
     127: istore        11
     129: aload_0
     130: aload         8
     132: aload         6
     134: lload_1
     135: iload         11
     137: i2l
     138: ladd
     139: aload         9
     141: invokespecial #53                 // Method afterDecryption:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;J[B)B
     144: istore        10
     146: goto          60
     149: aload_0
     150: aload         6
     152: invokespecial #85                 // Method returnBuffer:(Ljava/nio/ByteBuffer;)V
     155: aload_0
     156: aload         7
     158: invokespecial #85                 // Method returnBuffer:(Ljava/nio/ByteBuffer;)V
     161: aload_0
     162: aload         8
     164: invokespecial #86                 // Method returnDecryptor:(Lorg/apache/hadoop/crypto/Decryptor;)V
     167: goto          193
     170: astore        13
     172: aload_0
     173: aload         6
     175: invokespecial #85                 // Method returnBuffer:(Ljava/nio/ByteBuffer;)V
     178: aload_0
     179: aload         7
     181: invokespecial #85                 // Method returnBuffer:(Ljava/nio/ByteBuffer;)V
     184: aload_0
     185: aload         8
     187: invokespecial #86                 // Method returnDecryptor:(Lorg/apache/hadoop/crypto/Decryptor;)V
     190: aload         13
     192: athrow
     193: return
    Exception table:
       from    to  target type
          15   149   170   any
         170   172   170   any

  public void readFully(long, byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_0
       5: getfield      #35                 // Field in:Ljava/io/InputStream;
       8: checkcast     #77                 // class org/apache/hadoop/fs/PositionedReadable
      11: lload_1
      12: aload_3
      13: iload         4
      15: iload         5
      17: invokeinterface #87,  6           // InterfaceMethod org/apache/hadoop/fs/PositionedReadable.readFully:(J[BII)V
      22: iload         5
      24: ifle          37
      27: aload_0
      28: lload_1
      29: aload_3
      30: iload         4
      32: iload         5
      34: invokespecial #79                 // Method decrypt:(J[BII)V
      37: goto          52
      40: astore        6
      42: new           #47                 // class java/lang/UnsupportedOperationException
      45: dup
      46: ldc           #88                 // String This stream does not support positioned readFully.
      48: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      51: athrow
      52: return
    Exception table:
       from    to  target type
           4    37    40   Class java/lang/ClassCastException

  public void readFully(long, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: lload_1
       2: aload_3
       3: iconst_0
       4: aload_3
       5: arraylength
       6: invokevirtual #89                 // Method readFully:(J[BII)V
       9: return

  public void seek(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #90                 // class java/io/EOFException
       9: dup
      10: ldc           #92                 // String Cannot seek to a negative offset
      12: invokespecial #93                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: invokespecial #36                 // Method checkStream:()V
      20: lload_1
      21: aload_0
      22: getfield      #5                  // Field streamOffset:J
      25: lcmp
      26: ifgt          88
      29: lload_1
      30: aload_0
      31: getfield      #5                  // Field streamOffset:J
      34: aload_0
      35: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      38: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      41: i2l
      42: lsub
      43: lcmp
      44: iflt          88
      47: lload_1
      48: aload_0
      49: getfield      #5                  // Field streamOffset:J
      52: aload_0
      53: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      56: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      59: i2l
      60: lsub
      61: lsub
      62: l2i
      63: istore_3
      64: iload_3
      65: ifle          85
      68: aload_0
      69: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      72: aload_0
      73: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      76: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
      79: iload_3
      80: iadd
      81: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      84: pop
      85: goto          106
      88: aload_0
      89: getfield      #35                 // Field in:Ljava/io/InputStream;
      92: checkcast     #94                 // class org/apache/hadoop/fs/Seekable
      95: lload_1
      96: invokeinterface #95,  3           // InterfaceMethod org/apache/hadoop/fs/Seekable.seek:(J)V
     101: aload_0
     102: lload_1
     103: invokespecial #31                 // Method resetStreamOffset:(J)V
     106: goto          120
     109: astore_3
     110: new           #47                 // class java/lang/UnsupportedOperationException
     113: dup
     114: ldc           #96                 // String This stream does not support seek.
     116: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
     119: athrow
     120: return
    Exception table:
       from    to  target type
          20   106   109   Class java/lang/ClassCastException

  public long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #97                 // String Negative skip length.
      13: invokestatic  #98                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      16: aload_0
      17: invokespecial #36                 // Method checkStream:()V
      20: lload_1
      21: lconst_0
      22: lcmp
      23: ifne          28
      26: lconst_0
      27: lreturn
      28: lload_1
      29: aload_0
      30: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      33: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      36: i2l
      37: lcmp
      38: ifgt          63
      41: aload_0
      42: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      45: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
      48: lload_1
      49: l2i
      50: iadd
      51: istore_3
      52: aload_0
      53: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      56: iload_3
      57: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      60: pop
      61: lload_1
      62: lreturn
      63: lload_1
      64: aload_0
      65: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      68: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      71: i2l
      72: lsub
      73: lstore_1
      74: aload_0
      75: getfield      #35                 // Field in:Ljava/io/InputStream;
      78: lload_1
      79: invokevirtual #99                 // Method java/io/InputStream.skip:(J)J
      82: lstore_3
      83: lload_3
      84: lconst_0
      85: lcmp
      86: ifge          91
      89: lconst_0
      90: lstore_3
      91: aload_0
      92: getfield      #5                  // Field streamOffset:J
      95: lload_3
      96: ladd
      97: lstore        5
      99: lload_3
     100: aload_0
     101: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     104: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
     107: i2l
     108: ladd
     109: lstore_3
     110: aload_0
     111: lload         5
     113: invokespecial #31                 // Method resetStreamOffset:(J)V
     116: lload_3
     117: lreturn

  public long getPos() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_0
       5: getfield      #5                  // Field streamOffset:J
       8: aload_0
       9: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      12: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      15: i2l
      16: lsub
      17: lreturn

  public int read(java.nio.ByteBuffer) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_0
       5: getfield      #23                 // Field isByteBufferReadable:Z
       8: ifne          18
      11: aload_0
      12: getfield      #25                 // Field isReadableByteChannel:Z
      15: ifeq          182
      18: aload_0
      19: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      22: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      25: istore_2
      26: iload_2
      27: ifle          96
      30: aload_1
      31: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      34: istore_3
      35: iload_3
      36: iload_2
      37: if_icmpgt     87
      40: aload_0
      41: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      44: invokevirtual #100                // Method java/nio/ByteBuffer.limit:()I
      47: istore        4
      49: aload_0
      50: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      53: aload_0
      54: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      57: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
      60: iload_3
      61: iadd
      62: invokevirtual #72                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      65: pop
      66: aload_1
      67: aload_0
      68: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      71: invokevirtual #101                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      74: pop
      75: aload_0
      76: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      79: iload         4
      81: invokevirtual #72                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      84: pop
      85: iload_3
      86: ireturn
      87: aload_1
      88: aload_0
      89: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      92: invokevirtual #101                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      95: pop
      96: aload_1
      97: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
     100: istore_3
     101: aload_0
     102: getfield      #23                 // Field isByteBufferReadable:Z
     105: ifeq          124
     108: aload_0
     109: getfield      #35                 // Field in:Ljava/io/InputStream;
     112: checkcast     #22                 // class org/apache/hadoop/fs/ByteBufferReadable
     115: aload_1
     116: invokeinterface #44,  2           // InterfaceMethod org/apache/hadoop/fs/ByteBufferReadable.read:(Ljava/nio/ByteBuffer;)I
     121: goto          137
     124: aload_0
     125: getfield      #35                 // Field in:Ljava/io/InputStream;
     128: checkcast     #24                 // class java/nio/channels/ReadableByteChannel
     131: aload_1
     132: invokeinterface #45,  2           // InterfaceMethod java/nio/channels/ReadableByteChannel.read:(Ljava/nio/ByteBuffer;)I
     137: istore        4
     139: iload         4
     141: ifle          164
     144: aload_0
     145: dup
     146: getfield      #5                  // Field streamOffset:J
     149: iload         4
     151: i2l
     152: ladd
     153: putfield      #5                  // Field streamOffset:J
     156: aload_0
     157: aload_1
     158: iload         4
     160: iload_3
     161: invokespecial #102                // Method decrypt:(Ljava/nio/ByteBuffer;II)V
     164: iload         4
     166: iflt          174
     169: iload_2
     170: iload         4
     172: iadd
     173: ireturn
     174: iload_2
     175: ifne          180
     178: iconst_m1
     179: ireturn
     180: iload_2
     181: ireturn
     182: iconst_0
     183: istore_2
     184: aload_1
     185: invokevirtual #103                // Method java/nio/ByteBuffer.hasArray:()Z
     188: ifeq          226
     191: aload_0
     192: aload_1
     193: invokevirtual #104                // Method java/nio/ByteBuffer.array:()[B
     196: aload_1
     197: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
     200: aload_1
     201: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
     204: invokevirtual #105                // Method read:([BII)I
     207: istore_2
     208: iload_2
     209: ifle          251
     212: aload_1
     213: aload_1
     214: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
     217: iload_2
     218: iadd
     219: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     222: pop
     223: goto          251
     226: aload_1
     227: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
     230: newarray       byte
     232: astore_3
     233: aload_0
     234: aload_3
     235: invokevirtual #106                // Method read:([B)I
     238: istore_2
     239: iload_2
     240: ifle          251
     243: aload_1
     244: aload_3
     245: iconst_0
     246: iload_2
     247: invokevirtual #56                 // Method java/nio/ByteBuffer.put:([BII)Ljava/nio/ByteBuffer;
     250: pop
     251: iload_2
     252: ireturn

  private void decrypt(java.nio.ByteBuffer, int, int) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
       4: istore        4
       6: aload_1
       7: invokevirtual #100                // Method java/nio/ByteBuffer.limit:()I
      10: istore        5
      12: iconst_0
      13: istore        6
      15: iload         6
      17: iload_2
      18: if_icmpge     191
      21: aload_1
      22: iload_3
      23: iload         6
      25: iadd
      26: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      29: pop
      30: aload_1
      31: iload_3
      32: iload         6
      34: iadd
      35: iload_2
      36: iload         6
      38: isub
      39: aload_0
      40: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
      43: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      46: invokestatic  #42                 // Method java/lang/Math.min:(II)I
      49: iadd
      50: invokevirtual #72                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      53: pop
      54: aload_0
      55: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
      58: aload_1
      59: invokevirtual #101                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      62: pop
      63: aload_0
      64: aload_0
      65: getfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
      68: aload_0
      69: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
      72: aload_0
      73: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      76: aload_0
      77: getfield      #51                 // Field padding:B
      80: invokespecial #52                 // Method decrypt:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;B)V
      83: aload_1
      84: iload_3
      85: iload         6
      87: iadd
      88: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
      91: pop
      92: aload_1
      93: iload         5
      95: invokevirtual #72                 // Method java/nio/ByteBuffer.limit:(I)Ljava/nio/Buffer;
      98: pop
      99: iload         6
     101: aload_0
     102: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     105: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
     108: iadd
     109: istore        6
     111: aload_1
     112: aload_0
     113: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
     116: invokevirtual #101                // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
     119: pop
     120: aload_0
     121: aload_0
     122: aload_0
     123: getfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
     126: aload_0
     127: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     130: aload_0
     131: getfield      #5                  // Field streamOffset:J
     134: iload_2
     135: iload         6
     137: isub
     138: i2l
     139: lsub
     140: aload_0
     141: getfield      #21                 // Field iv:[B
     144: invokespecial #53                 // Method afterDecryption:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;J[B)B
     147: putfield      #51                 // Field padding:B
     150: goto          188
     153: astore        7
     155: aload_0
     156: aload_0
     157: aload_0
     158: getfield      #30                 // Field decryptor:Lorg/apache/hadoop/crypto/Decryptor;
     161: aload_0
     162: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
     165: aload_0
     166: getfield      #5                  // Field streamOffset:J
     169: iload_2
     170: iload         6
     172: isub
     173: i2l
     174: lsub
     175: aload_0
     176: getfield      #21                 // Field iv:[B
     179: invokespecial #53                 // Method afterDecryption:(Lorg/apache/hadoop/crypto/Decryptor;Ljava/nio/ByteBuffer;J[B)B
     182: putfield      #51                 // Field padding:B
     185: aload         7
     187: athrow
     188: goto          15
     191: aload_1
     192: iload         4
     194: invokevirtual #63                 // Method java/nio/ByteBuffer.position:(I)Ljava/nio/Buffer;
     197: pop
     198: return
    Exception table:
       from    to  target type
          63   120   153   any
         153   155   153   any

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_0
       5: getfield      #35                 // Field in:Ljava/io/InputStream;
       8: invokevirtual #107                // Method java/io/InputStream.available:()I
      11: aload_0
      12: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      15: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      18: iadd
      19: ireturn

  public boolean markSupported();
    Code:
       0: iconst_0
       1: ireturn

  public void mark(int);
    Code:
       0: return

  public void reset() throws java.io.IOException;
    Code:
       0: new           #108                // class java/io/IOException
       3: dup
       4: ldc           #109                // String Mark/reset not supported
       6: invokespecial #110                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
       9: athrow

  public boolean seekToNewSource(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          10
       6: iconst_1
       7: goto          11
      10: iconst_0
      11: ldc           #111                // String Cannot seek to negative offset.
      13: invokestatic  #98                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      16: aload_0
      17: invokespecial #36                 // Method checkStream:()V
      20: aload_0
      21: getfield      #35                 // Field in:Ljava/io/InputStream;
      24: checkcast     #94                 // class org/apache/hadoop/fs/Seekable
      27: lload_1
      28: invokeinterface #112,  3          // InterfaceMethod org/apache/hadoop/fs/Seekable.seekToNewSource:(J)Z
      33: istore_3
      34: aload_0
      35: lload_1
      36: invokespecial #31                 // Method resetStreamOffset:(J)V
      39: iload_3
      40: ireturn
      41: astore_3
      42: new           #47                 // class java/lang/UnsupportedOperationException
      45: dup
      46: ldc           #113                // String This stream does not support seekToNewSource.
      48: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      51: athrow
    Exception table:
       from    to  target type
          20    40    41   Class java/lang/ClassCastException

  public java.nio.ByteBuffer read(org.apache.hadoop.io.ByteBufferPool, int, java.util.EnumSet<org.apache.hadoop.fs.ReadOption>) throws java.io.IOException, java.lang.UnsupportedOperationException;
    Code:
       0: aload_0
       1: invokespecial #36                 // Method checkStream:()V
       4: aload_0
       5: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
       8: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      11: ifle          38
      14: aload_0
      15: getfield      #35                 // Field in:Ljava/io/InputStream;
      18: checkcast     #94                 // class org/apache/hadoop/fs/Seekable
      21: aload_0
      22: invokevirtual #114                // Method getPos:()J
      25: invokeinterface #95,  3           // InterfaceMethod org/apache/hadoop/fs/Seekable.seek:(J)V
      30: aload_0
      31: aload_0
      32: invokevirtual #114                // Method getPos:()J
      35: invokespecial #31                 // Method resetStreamOffset:(J)V
      38: aload_0
      39: getfield      #35                 // Field in:Ljava/io/InputStream;
      42: checkcast     #115                // class org/apache/hadoop/fs/HasEnhancedByteBufferAccess
      45: aload_1
      46: iload_2
      47: aload_3
      48: invokeinterface #116,  4          // InterfaceMethod org/apache/hadoop/fs/HasEnhancedByteBufferAccess.read:(Lorg/apache/hadoop/io/ByteBufferPool;ILjava/util/EnumSet;)Ljava/nio/ByteBuffer;
      53: astore        4
      55: aload         4
      57: ifnull        104
      60: aload         4
      62: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      65: istore        5
      67: iload         5
      69: ifle          104
      72: aload_0
      73: dup
      74: getfield      #5                  // Field streamOffset:J
      77: aload         4
      79: invokevirtual #41                 // Method java/nio/ByteBuffer.remaining:()I
      82: i2l
      83: ladd
      84: putfield      #5                  // Field streamOffset:J
      87: aload         4
      89: invokevirtual #58                 // Method java/nio/ByteBuffer.position:()I
      92: istore        6
      94: aload_0
      95: aload         4
      97: iload         5
      99: iload         6
     101: invokespecial #102                // Method decrypt:(Ljava/nio/ByteBuffer;II)V
     104: aload         4
     106: areturn
     107: astore        4
     109: new           #47                 // class java/lang/UnsupportedOperationException
     112: dup
     113: ldc           #117                // String This stream does not support enhanced byte buffer access.
     115: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
     118: athrow
    Exception table:
       from    to  target type
           4   106   107   Class java/lang/ClassCastException

  public void releaseBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: getfield      #35                 // Field in:Ljava/io/InputStream;
       4: checkcast     #115                // class org/apache/hadoop/fs/HasEnhancedByteBufferAccess
       7: aload_1
       8: invokeinterface #118,  2          // InterfaceMethod org/apache/hadoop/fs/HasEnhancedByteBufferAccess.releaseBuffer:(Ljava/nio/ByteBuffer;)V
      13: goto          27
      16: astore_2
      17: new           #47                 // class java/lang/UnsupportedOperationException
      20: dup
      21: ldc           #119                // String This stream does not support release buffer.
      23: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/ClassCastException

  public void setReadahead(java.lang.Long) throws java.io.IOException, java.lang.UnsupportedOperationException;
    Code:
       0: aload_0
       1: getfield      #35                 // Field in:Ljava/io/InputStream;
       4: checkcast     #120                // class org/apache/hadoop/fs/CanSetReadahead
       7: aload_1
       8: invokeinterface #121,  2          // InterfaceMethod org/apache/hadoop/fs/CanSetReadahead.setReadahead:(Ljava/lang/Long;)V
      13: goto          27
      16: astore_2
      17: new           #47                 // class java/lang/UnsupportedOperationException
      20: dup
      21: ldc           #122                // String This stream does not support setting the readahead caching strategy.
      23: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/ClassCastException

  public void setDropBehind(java.lang.Boolean) throws java.io.IOException, java.lang.UnsupportedOperationException;
    Code:
       0: aload_0
       1: getfield      #35                 // Field in:Ljava/io/InputStream;
       4: checkcast     #123                // class org/apache/hadoop/fs/CanSetDropBehind
       7: aload_1
       8: invokeinterface #124,  2          // InterfaceMethod org/apache/hadoop/fs/CanSetDropBehind.setDropBehind:(Ljava/lang/Boolean;)V
      13: goto          27
      16: astore_2
      17: new           #47                 // class java/lang/UnsupportedOperationException
      20: dup
      21: ldc           #125                // String This stream does not support setting the drop-behind caching setting.
      23: invokespecial #82                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
      26: athrow
      27: return
    Exception table:
       from    to  target type
           0    13    16   Class java/lang/ClassCastException

  public java.io.FileDescriptor getFileDescriptor() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #35                 // Field in:Ljava/io/InputStream;
       4: instanceof    #126                // class org/apache/hadoop/fs/HasFileDescriptor
       7: ifeq          23
      10: aload_0
      11: getfield      #35                 // Field in:Ljava/io/InputStream;
      14: checkcast     #126                // class org/apache/hadoop/fs/HasFileDescriptor
      17: invokeinterface #127,  1          // InterfaceMethod org/apache/hadoop/fs/HasFileDescriptor.getFileDescriptor:()Ljava/io/FileDescriptor;
      22: areturn
      23: aload_0
      24: getfield      #35                 // Field in:Ljava/io/InputStream;
      27: instanceof    #128                // class java/io/FileInputStream
      30: ifeq          44
      33: aload_0
      34: getfield      #35                 // Field in:Ljava/io/InputStream;
      37: checkcast     #128                // class java/io/FileInputStream
      40: invokevirtual #129                // Method java/io/FileInputStream.getFD:()Ljava/io/FileDescriptor;
      43: areturn
      44: aconst_null
      45: areturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #4                  // Field oneByteBuf:[B
       5: iconst_0
       6: iconst_1
       7: invokevirtual #105                // Method read:([BII)I
      10: iconst_m1
      11: if_icmpne     18
      14: iconst_m1
      15: goto          28
      18: aload_0
      19: getfield      #4                  // Field oneByteBuf:[B
      22: iconst_0
      23: baload
      24: sipush        255
      27: iand
      28: ireturn

  private void checkStream() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #73                 // Field closed:Z
       4: ifeq          17
       7: new           #108                // class java/io/IOException
      10: dup
      11: ldc           #130                // String Stream closed
      13: invokespecial #110                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  private java.nio.ByteBuffer getBuffer();
    Code:
       0: aload_0
       1: getfield      #9                  // Field bufferPool:Ljava/util/Queue;
       4: invokeinterface #131,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #132                // class java/nio/ByteBuffer
      12: astore_1
      13: aload_1
      14: ifnonnull     25
      17: aload_0
      18: getfield      #13                 // Field bufferSize:I
      21: invokestatic  #26                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      24: astore_1
      25: aload_1
      26: areturn

  private void returnBuffer(java.nio.ByteBuffer);
    Code:
       0: aload_1
       1: ifnull        20
       4: aload_1
       5: invokevirtual #61                 // Method java/nio/ByteBuffer.clear:()Ljava/nio/Buffer;
       8: pop
       9: aload_0
      10: getfield      #9                  // Field bufferPool:Ljava/util/Queue;
      13: aload_1
      14: invokeinterface #133,  2          // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      19: pop
      20: return

  private void freeBuffers();
    Code:
       0: aload_0
       1: getfield      #27                 // Field inBuffer:Ljava/nio/ByteBuffer;
       4: invokestatic  #134                // Method org/apache/hadoop/crypto/CryptoStreamUtils.freeDB:(Ljava/nio/ByteBuffer;)V
       7: aload_0
       8: getfield      #28                 // Field outBuffer:Ljava/nio/ByteBuffer;
      11: invokestatic  #134                // Method org/apache/hadoop/crypto/CryptoStreamUtils.freeDB:(Ljava/nio/ByteBuffer;)V
      14: aload_0
      15: invokespecial #135                // Method cleanBufferPool:()V
      18: return

  private void cleanBufferPool();
    Code:
       0: aload_0
       1: getfield      #9                  // Field bufferPool:Ljava/util/Queue;
       4: invokeinterface #131,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #132                // class java/nio/ByteBuffer
      12: dup
      13: astore_1
      14: ifnull        24
      17: aload_1
      18: invokestatic  #134                // Method org/apache/hadoop/crypto/CryptoStreamUtils.freeDB:(Ljava/nio/ByteBuffer;)V
      21: goto          0
      24: return

  private org.apache.hadoop.crypto.Decryptor getDecryptor() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field decryptorPool:Ljava/util/Queue;
       4: invokeinterface #131,  1          // InterfaceMethod java/util/Queue.poll:()Ljava/lang/Object;
       9: checkcast     #136                // class org/apache/hadoop/crypto/Decryptor
      12: astore_1
      13: aload_1
      14: ifnonnull     38
      17: aload_0
      18: getfield      #14                 // Field codec:Lorg/apache/hadoop/crypto/CryptoCodec;
      21: invokevirtual #137                // Method org/apache/hadoop/crypto/CryptoCodec.createDecryptor:()Lorg/apache/hadoop/crypto/Decryptor;
      24: astore_1
      25: goto          38
      28: astore_2
      29: new           #108                // class java/io/IOException
      32: dup
      33: aload_2
      34: invokespecial #139                // Method java/io/IOException."<init>":(Ljava/lang/Throwable;)V
      37: athrow
      38: aload_1
      39: areturn
    Exception table:
       from    to  target type
          17    25    28   Class java/security/GeneralSecurityException

  private void returnDecryptor(org.apache.hadoop.crypto.Decryptor);
    Code:
       0: aload_1
       1: ifnull        15
       4: aload_0
       5: getfield      #10                 // Field decryptorPool:Ljava/util/Queue;
       8: aload_1
       9: invokeinterface #133,  2          // InterfaceMethod java/util/Queue.add:(Ljava/lang/Object;)Z
      14: pop
      15: return

  public boolean isOpen();
    Code:
       0: aload_0
       1: getfield      #73                 // Field closed:Z
       4: ifne          11
       7: iconst_1
       8: goto          12
      11: iconst_0
      12: ireturn

  private void cleanDecryptorPool();
    Code:
       0: aload_0
       1: getfield      #10                 // Field decryptorPool:Ljava/util/Queue;
       4: invokeinterface #140,  1          // InterfaceMethod java/util/Queue.clear:()V
       9: return

  public void unbuffer();
    Code:
       0: aload_0
       1: invokespecial #135                // Method cleanBufferPool:()V
       4: aload_0
       5: invokespecial #141                // Method cleanDecryptorPool:()V
       8: aload_0
       9: getfield      #35                 // Field in:Ljava/io/InputStream;
      12: invokestatic  #142                // Method org/apache/hadoop/fs/StreamCapabilitiesPolicy.unbuffer:(Ljava/io/InputStream;)V
      15: return

  public boolean hasCapability(java.lang.String);
    Code:
       0: aload_1
       1: invokestatic  #143                // Method org/apache/hadoop/util/StringUtils.toLowerCase:(Ljava/lang/String;)Ljava/lang/String;
       4: astore_2
       5: iconst_m1
       6: istore_3
       7: aload_2
       8: invokevirtual #144                // Method java/lang/String.hashCode:()I
      11: lookupswitch  { // 3
           -2087739698: 72
             947793366: 44
            1333858537: 58
               default: 83
          }
      44: aload_2
      45: ldc           #145                // String in:readahead
      47: invokevirtual #146                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      50: ifeq          83
      53: iconst_0
      54: istore_3
      55: goto          83
      58: aload_2
      59: ldc           #147                // String dropbehind
      61: invokevirtual #146                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      64: ifeq          83
      67: iconst_1
      68: istore_3
      69: goto          83
      72: aload_2
      73: ldc           #148                // String in:unbuffer
      75: invokevirtual #146                // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      78: ifeq          83
      81: iconst_2
      82: istore_3
      83: iload_3
      84: tableswitch   { // 0 to 2
                     0: 112
                     1: 112
                     2: 112
               default: 114
          }
     112: iconst_1
     113: ireturn
     114: iconst_0
     115: ireturn
}
