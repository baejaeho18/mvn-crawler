Compiled from "Chunk.java"
public class org.apache.hadoop.io.file.tfile.Chunk$SingleChunkEncoder extends java.io.OutputStream {
  private final java.io.DataOutputStream out;

  private int remain;

  private boolean closed;

  public org.apache.hadoop.io.file.tfile.Chunk$SingleChunkEncoder(java.io.DataOutputStream, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field closed:Z
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field out:Ljava/io/DataOutputStream;
      14: aload_0
      15: iload_2
      16: putfield      #4                  // Field remain:I
      19: aload_1
      20: iload_2
      21: invokestatic  #5                  // Method org/apache/hadoop/io/file/tfile/Utils.writeVInt:(Ljava/io/DataOutput;I)V
      24: return

  public void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field remain:I
       4: ifle          28
       7: aload_0
       8: getfield      #3                  // Field out:Ljava/io/DataOutputStream;
      11: iload_1
      12: invokevirtual #6                  // Method java/io/DataOutputStream.write:(I)V
      15: aload_0
      16: dup
      17: getfield      #4                  // Field remain:I
      20: iconst_1
      21: isub
      22: putfield      #4                  // Field remain:I
      25: goto          38
      28: new           #7                  // class java/io/IOException
      31: dup
      32: ldc           #8                  // String Writing more bytes than advertised size.
      34: invokespecial #9                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: return

  public void write(byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #10                 // Method write:([BII)V
       8: return

  public void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field remain:I
       4: iload_3
       5: if_icmplt     31
       8: aload_0
       9: getfield      #3                  // Field out:Ljava/io/DataOutputStream;
      12: aload_1
      13: iload_2
      14: iload_3
      15: invokevirtual #11                 // Method java/io/DataOutputStream.write:([BII)V
      18: aload_0
      19: dup
      20: getfield      #4                  // Field remain:I
      23: iload_3
      24: isub
      25: putfield      #4                  // Field remain:I
      28: goto          41
      31: new           #7                  // class java/io/IOException
      34: dup
      35: ldc           #8                  // String Writing more bytes than advertised size.
      37: invokespecial #9                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: return

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field out:Ljava/io/DataOutputStream;
       4: invokevirtual #12                 // Method java/io/DataOutputStream.flush:()V
       7: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field closed:Z
       4: iconst_1
       5: if_icmpne     9
       8: return
       9: aload_0
      10: getfield      #4                  // Field remain:I
      13: ifle          26
      16: new           #7                  // class java/io/IOException
      19: dup
      20: ldc           #13                 // String Writing less bytes than advertised size.
      22: invokespecial #9                  // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: iconst_1
      28: putfield      #2                  // Field closed:Z
      31: goto          42
      34: astore_1
      35: aload_0
      36: iconst_1
      37: putfield      #2                  // Field closed:Z
      40: aload_1
      41: athrow
      42: return
    Exception table:
       from    to  target type
           9    26    34   any
}
