Compiled from "And.java"
final class org.apache.hadoop.fs.shell.find.And extends org.apache.hadoop.fs.shell.find.BaseExpression {
  private static final java.lang.String[] USAGE;

  private static final java.lang.String[] HELP;

  public static void registerExpression(org.apache.hadoop.fs.shell.find.ExpressionFactory) throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc           #1                  // class org/apache/hadoop/fs/shell/find/And
       3: iconst_1
       4: anewarray     #2                  // class java/lang/String
       7: dup
       8: iconst_0
       9: ldc           #3                  // String -a
      11: aastore
      12: invokevirtual #4                  // Method org/apache/hadoop/fs/shell/find/ExpressionFactory.addClass:(Ljava/lang/Class;[Ljava/lang/String;)V
      15: aload_0
      16: ldc           #1                  // class org/apache/hadoop/fs/shell/find/And
      18: iconst_1
      19: anewarray     #2                  // class java/lang/String
      22: dup
      23: iconst_0
      24: ldc           #5                  // String -and
      26: aastore
      27: invokevirtual #4                  // Method org/apache/hadoop/fs/shell/find/ExpressionFactory.addClass:(Ljava/lang/Class;[Ljava/lang/String;)V
      30: return

  public org.apache.hadoop.fs.shell.find.And();
    Code:
       0: aload_0
       1: invokespecial #6                  // Method org/apache/hadoop/fs/shell/find/BaseExpression."<init>":()V
       4: aload_0
       5: getstatic     #7                  // Field USAGE:[Ljava/lang/String;
       8: invokevirtual #8                  // Method setUsage:([Ljava/lang/String;)V
      11: aload_0
      12: getstatic     #9                  // Field HELP:[Ljava/lang/String;
      15: invokevirtual #10                 // Method setHelp:([Ljava/lang/String;)V
      18: return

  public org.apache.hadoop.fs.shell.find.Result apply(org.apache.hadoop.fs.shell.PathData, int) throws java.io.IOException;
    Code:
       0: getstatic     #11                 // Field org/apache/hadoop/fs/shell/find/Result.PASS:Lorg/apache/hadoop/fs/shell/find/Result;
       3: astore_3
       4: aload_0
       5: invokevirtual #12                 // Method getChildren:()Ljava/util/List;
       8: invokeinterface #13,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      13: astore        4
      15: aload         4
      17: invokeinterface #14,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      22: ifeq          67
      25: aload         4
      27: invokeinterface #15,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      32: checkcast     #16                 // class org/apache/hadoop/fs/shell/find/Expression
      35: astore        5
      37: aload         5
      39: aload_1
      40: iconst_m1
      41: invokeinterface #17,  3           // InterfaceMethod org/apache/hadoop/fs/shell/find/Expression.apply:(Lorg/apache/hadoop/fs/shell/PathData;I)Lorg/apache/hadoop/fs/shell/find/Result;
      46: astore        6
      48: aload_3
      49: aload         6
      51: invokevirtual #18                 // Method org/apache/hadoop/fs/shell/find/Result.combine:(Lorg/apache/hadoop/fs/shell/find/Result;)Lorg/apache/hadoop/fs/shell/find/Result;
      54: astore_3
      55: aload_3
      56: invokevirtual #19                 // Method org/apache/hadoop/fs/shell/find/Result.isPass:()Z
      59: ifne          64
      62: aload_3
      63: areturn
      64: goto          15
      67: aload_3
      68: areturn

  public boolean isOperator();
    Code:
       0: iconst_1
       1: ireturn

  public int getPrecedence();
    Code:
       0: sipush        200
       3: ireturn

  public void addChildren(java.util.Deque<org.apache.hadoop.fs.shell.find.Expression>);
    Code:
       0: aload_0
       1: aload_1
       2: iconst_2
       3: invokevirtual #20                 // Method addChildren:(Ljava/util/Deque;I)V
       6: return

  static {};
    Code:
       0: iconst_3
       1: anewarray     #2                  // class java/lang/String
       4: dup
       5: iconst_0
       6: ldc           #21                 // String expression -a expression
       8: aastore
       9: dup
      10: iconst_1
      11: ldc           #22                 // String expression -and expression
      13: aastore
      14: dup
      15: iconst_2
      16: ldc           #23                 // String expression expression
      18: aastore
      19: putstatic     #7                  // Field USAGE:[Ljava/lang/String;
      22: iconst_5
      23: anewarray     #2                  // class java/lang/String
      26: dup
      27: iconst_0
      28: ldc           #24                 // String Logical AND operator for joining two expressions. Returns
      30: aastore
      31: dup
      32: iconst_1
      33: ldc           #25                 // String true if both child expressions return true. Implied by the
      35: aastore
      36: dup
      37: iconst_2
      38: ldc           #26                 // String juxtaposition of two expressions and so does not need to be
      40: aastore
      41: dup
      42: iconst_3
      43: ldc           #27                 // String explicitly specified. The second expression will not be
      45: aastore
      46: dup
      47: iconst_4
      48: ldc           #28                 // String applied if the first fails.
      50: aastore
      51: putstatic     #9                  // Field HELP:[Ljava/lang/String;
      54: return
}
