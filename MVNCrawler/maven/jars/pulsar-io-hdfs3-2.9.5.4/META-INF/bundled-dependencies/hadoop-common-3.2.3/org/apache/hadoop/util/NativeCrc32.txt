Compiled from "NativeCrc32.java"
class org.apache.hadoop.util.NativeCrc32 {
  private static final boolean isSparc;

  public static final int CHECKSUM_CRC32;

  public static final int CHECKSUM_CRC32C;

  org.apache.hadoop.util.NativeCrc32();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: return

  public static boolean isAvailable();
    Code:
       0: getstatic     #3                  // Field isSparc:Z
       3: ifeq          8
       6: iconst_0
       7: ireturn
       8: invokestatic  #4                  // Method org/apache/hadoop/util/NativeCodeLoader.isNativeCodeLoaded:()Z
      11: ireturn

  public static void verifyChunkedSums(int, int, java.nio.ByteBuffer, java.nio.ByteBuffer, java.lang.String, long) throws org.apache.hadoop.fs.ChecksumException;
    Code:
       0: iload_0
       1: iload_1
       2: aload_2
       3: aload_2
       4: invokevirtual #5                  // Method java/nio/ByteBuffer.position:()I
       7: aload_3
       8: aload_3
       9: invokevirtual #5                  // Method java/nio/ByteBuffer.position:()I
      12: aload_3
      13: invokevirtual #6                  // Method java/nio/ByteBuffer.remaining:()I
      16: aload         4
      18: lload         5
      20: iconst_1
      21: invokestatic  #7                  // Method nativeComputeChunkedSums:(IILjava/nio/ByteBuffer;ILjava/nio/ByteBuffer;IILjava/lang/String;JZ)V
      24: return

  public static void verifyChunkedSumsByteArray(int, int, byte[], int, byte[], int, int, java.lang.String, long) throws org.apache.hadoop.fs.ChecksumException;
    Code:
       0: iload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: aload         7
      12: lload         8
      14: iconst_1
      15: invokestatic  #8                  // Method nativeComputeChunkedSumsByteArray:(II[BI[BIILjava/lang/String;JZ)V
      18: return

  public static void calculateChunkedSums(int, int, java.nio.ByteBuffer, java.nio.ByteBuffer);
    Code:
       0: iload_0
       1: iload_1
       2: aload_2
       3: aload_2
       4: invokevirtual #5                  // Method java/nio/ByteBuffer.position:()I
       7: aload_3
       8: aload_3
       9: invokevirtual #5                  // Method java/nio/ByteBuffer.position:()I
      12: aload_3
      13: invokevirtual #6                  // Method java/nio/ByteBuffer.remaining:()I
      16: ldc           #9                  // String
      18: lconst_0
      19: iconst_0
      20: invokestatic  #7                  // Method nativeComputeChunkedSums:(IILjava/nio/ByteBuffer;ILjava/nio/ByteBuffer;IILjava/lang/String;JZ)V
      23: return

  public static void calculateChunkedSumsByteArray(int, int, byte[], int, byte[], int, int);
    Code:
       0: iload_0
       1: iload_1
       2: aload_2
       3: iload_3
       4: aload         4
       6: iload         5
       8: iload         6
      10: ldc           #9                  // String
      12: lconst_0
      13: iconst_0
      14: invokestatic  #8                  // Method nativeComputeChunkedSumsByteArray:(II[BI[BIILjava/lang/String;JZ)V
      17: return

  static native void nativeVerifyChunkedSums(int, int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int, java.lang.String, long) throws org.apache.hadoop.fs.ChecksumException;

  private static native void nativeComputeChunkedSums(int, int, java.nio.ByteBuffer, int, java.nio.ByteBuffer, int, int, java.lang.String, long, boolean);

  private static native void nativeComputeChunkedSumsByteArray(int, int, byte[], int, byte[], int, int, java.lang.String, long, boolean);

  static {};
    Code:
       0: ldc           #10                 // String os.arch
       2: invokestatic  #11                 // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
       5: invokevirtual #12                 // Method java/lang/String.toLowerCase:()Ljava/lang/String;
       8: ldc           #13                 // String sparc
      10: invokevirtual #14                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      13: putstatic     #3                  // Field isSparc:Z
      16: return
}
