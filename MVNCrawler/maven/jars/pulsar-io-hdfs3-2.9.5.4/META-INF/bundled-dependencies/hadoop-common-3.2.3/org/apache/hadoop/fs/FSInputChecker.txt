Compiled from "FSInputChecker.java"
public abstract class org.apache.hadoop.fs.FSInputChecker extends org.apache.hadoop.fs.FSInputStream {
  public static final org.slf4j.Logger LOG;

  protected org.apache.hadoop.fs.Path file;

  private java.util.zip.Checksum sum;

  private boolean verifyChecksum;

  private int maxChunkSize;

  private byte[] buf;

  private byte[] checksum;

  private java.nio.IntBuffer checksumInts;

  private int pos;

  private int count;

  private int numOfRetries;

  private long chunkPos;

  private static final int CHUNKS_PER_READ;

  protected static final int CHECKSUM_SIZE;

  static final boolean $assertionsDisabled;

  protected org.apache.hadoop.fs.FSInputChecker(org.apache.hadoop.fs.Path, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/fs/FSInputStream."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field verifyChecksum:Z
       9: aload_0
      10: lconst_0
      11: putfield      #3                  // Field chunkPos:J
      14: aload_0
      15: aload_1
      16: putfield      #4                  // Field file:Lorg/apache/hadoop/fs/Path;
      19: aload_0
      20: iload_2
      21: putfield      #5                  // Field numOfRetries:I
      24: return

  protected org.apache.hadoop.fs.FSInputChecker(org.apache.hadoop.fs.Path, int, boolean, java.util.zip.Checksum, int, int);
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: invokespecial #6                  // Method "<init>":(Lorg/apache/hadoop/fs/Path;I)V
       6: aload_0
       7: iload_3
       8: aload         4
      10: iload         5
      12: iload         6
      14: invokevirtual #7                  // Method set:(ZLjava/util/zip/Checksum;II)V
      17: return

  protected abstract int readChunk(long, byte[], int, int, byte[]) throws java.io.IOException;

  protected abstract long getChunkPosition(long);

  protected synchronized boolean needChecksum();
    Code:
       0: aload_0
       1: getfield      #2                  // Field verifyChecksum:Z
       4: ifeq          18
       7: aload_0
       8: getfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      11: ifnull        18
      14: iconst_1
      15: goto          19
      18: iconst_0
      19: ireturn

  public synchronized int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field pos:I
       4: aload_0
       5: getfield      #10                 // Field count:I
       8: if_icmplt     28
      11: aload_0
      12: invokespecial #11                 // Method fill:()V
      15: aload_0
      16: getfield      #9                  // Field pos:I
      19: aload_0
      20: getfield      #10                 // Field count:I
      23: if_icmplt     28
      26: iconst_m1
      27: ireturn
      28: aload_0
      29: getfield      #12                 // Field buf:[B
      32: aload_0
      33: dup
      34: getfield      #9                  // Field pos:I
      37: dup_x1
      38: iconst_1
      39: iadd
      40: putfield      #9                  // Field pos:I
      43: baload
      44: sipush        255
      47: iand
      48: ireturn

  public synchronized int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_2
       1: iload_3
       2: ior
       3: iload_2
       4: iload_3
       5: iadd
       6: ior
       7: aload_1
       8: arraylength
       9: iload_2
      10: iload_3
      11: iadd
      12: isub
      13: ior
      14: ifge          25
      17: new           #13                 // class java/lang/IndexOutOfBoundsException
      20: dup
      21: invokespecial #14                 // Method java/lang/IndexOutOfBoundsException."<init>":()V
      24: athrow
      25: iload_3
      26: ifne          31
      29: iconst_0
      30: ireturn
      31: iconst_0
      32: istore        4
      34: aload_0
      35: aload_1
      36: iload_2
      37: iload         4
      39: iadd
      40: iload_3
      41: iload         4
      43: isub
      44: invokespecial #15                 // Method read1:([BII)I
      47: istore        5
      49: iload         5
      51: ifgt          67
      54: iload         4
      56: ifne          64
      59: iload         5
      61: goto          66
      64: iload         4
      66: ireturn
      67: iload         4
      69: iload         5
      71: iadd
      72: istore        4
      74: iload         4
      76: iload_3
      77: if_icmplt     83
      80: iload         4
      82: ireturn
      83: goto          34

  private void fill() throws java.io.IOException;
    Code:
       0: getstatic     #16                 // Field $assertionsDisabled:Z
       3: ifne          25
       6: aload_0
       7: getfield      #9                  // Field pos:I
      10: aload_0
      11: getfield      #10                 // Field count:I
      14: if_icmpge     25
      17: new           #17                 // class java/lang/AssertionError
      20: dup
      21: invokespecial #18                 // Method java/lang/AssertionError."<init>":()V
      24: athrow
      25: aload_0
      26: aload_0
      27: aload_0
      28: getfield      #12                 // Field buf:[B
      31: iconst_0
      32: aload_0
      33: getfield      #19                 // Field maxChunkSize:I
      36: invokespecial #20                 // Method readChecksumChunk:([BII)I
      39: putfield      #10                 // Field count:I
      42: aload_0
      43: getfield      #10                 // Field count:I
      46: ifge          54
      49: aload_0
      50: iconst_0
      51: putfield      #10                 // Field count:I
      54: return

  protected final synchronized int readAndDiscard(int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_2
       2: iload_2
       3: iload_1
       4: if_icmpge     78
       7: aload_0
       8: getfield      #9                  // Field pos:I
      11: aload_0
      12: getfield      #10                 // Field count:I
      15: if_icmplt     45
      18: aload_0
      19: aload_0
      20: aload_0
      21: getfield      #12                 // Field buf:[B
      24: iconst_0
      25: aload_0
      26: getfield      #19                 // Field maxChunkSize:I
      29: invokespecial #20                 // Method readChecksumChunk:([BII)I
      32: putfield      #10                 // Field count:I
      35: aload_0
      36: getfield      #10                 // Field count:I
      39: ifgt          45
      42: goto          78
      45: aload_0
      46: getfield      #10                 // Field count:I
      49: aload_0
      50: getfield      #9                  // Field pos:I
      53: isub
      54: iload_1
      55: iload_2
      56: isub
      57: invokestatic  #21                 // Method java/lang/Math.min:(II)I
      60: istore_3
      61: aload_0
      62: dup
      63: getfield      #9                  // Field pos:I
      66: iload_3
      67: iadd
      68: putfield      #9                  // Field pos:I
      71: iload_2
      72: iload_3
      73: iadd
      74: istore_2
      75: goto          2
      78: iload_2
      79: ireturn

  private int read1(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field count:I
       4: aload_0
       5: getfield      #9                  // Field pos:I
       8: isub
       9: istore        4
      11: iload         4
      13: ifgt          55
      16: iload_3
      17: aload_0
      18: getfield      #19                 // Field maxChunkSize:I
      21: if_icmplt     36
      24: aload_0
      25: aload_1
      26: iload_2
      27: iload_3
      28: invokespecial #20                 // Method readChecksumChunk:([BII)I
      31: istore        5
      33: iload         5
      35: ireturn
      36: aload_0
      37: invokespecial #11                 // Method fill:()V
      40: aload_0
      41: getfield      #10                 // Field count:I
      44: ifgt          49
      47: iconst_m1
      48: ireturn
      49: aload_0
      50: getfield      #10                 // Field count:I
      53: istore        4
      55: iload         4
      57: iload_3
      58: if_icmpge     66
      61: iload         4
      63: goto          67
      66: iload_3
      67: istore        5
      69: aload_0
      70: getfield      #12                 // Field buf:[B
      73: aload_0
      74: getfield      #9                  // Field pos:I
      77: aload_1
      78: iload_2
      79: iload         5
      81: invokestatic  #22                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      84: aload_0
      85: dup
      86: getfield      #9                  // Field pos:I
      89: iload         5
      91: iadd
      92: putfield      #9                  // Field pos:I
      95: iload         5
      97: ireturn

  private int readChecksumChunk(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_0
       2: iconst_0
       3: dup_x1
       4: putfield      #9                  // Field pos:I
       7: putfield      #10                 // Field count:I
      10: iconst_0
      11: istore        4
      13: iconst_1
      14: istore        5
      16: aload_0
      17: getfield      #5                  // Field numOfRetries:I
      20: istore        6
      22: iinc          6, -1
      25: aload_0
      26: aload_0
      27: getfield      #3                  // Field chunkPos:J
      30: aload_1
      31: iload_2
      32: iload_3
      33: aload_0
      34: getfield      #23                 // Field checksum:[B
      37: invokevirtual #24                 // Method readChunk:(J[BII[B)I
      40: istore        4
      42: iload         4
      44: ifle          74
      47: aload_0
      48: invokevirtual #25                 // Method needChecksum:()Z
      51: ifeq          62
      54: aload_0
      55: aload_1
      56: iload_2
      57: iload         4
      59: invokespecial #26                 // Method verifySums:([BII)V
      62: aload_0
      63: dup
      64: getfield      #3                  // Field chunkPos:J
      67: iload         4
      69: i2l
      70: ladd
      71: putfield      #3                  // Field chunkPos:J
      74: iconst_0
      75: istore        5
      77: goto          173
      80: astore        7
      82: getstatic     #28                 // Field LOG:Lorg/slf4j/Logger;
      85: new           #29                 // class java/lang/StringBuilder
      88: dup
      89: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
      92: ldc           #31                 // String Found checksum error: b[
      94: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      97: iload_2
      98: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     101: ldc           #34                 // String ,
     103: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     106: iload_2
     107: iload         4
     109: iadd
     110: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     113: ldc           #35                 // String ]=
     115: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     118: aload_1
     119: iload_2
     120: iload_2
     121: iload         4
     123: iadd
     124: invokestatic  #36                 // Method org/apache/hadoop/util/StringUtils.byteToHexString:([BII)Ljava/lang/String;
     127: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     130: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     133: aload         7
     135: invokeinterface #38,  3           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Throwable;)V
     140: iload         6
     142: ifne          148
     145: aload         7
     147: athrow
     148: aload_0
     149: aload_0
     150: getfield      #3                  // Field chunkPos:J
     153: invokevirtual #39                 // Method seekToNewSource:(J)Z
     156: ifeq          170
     159: aload_0
     160: aload_0
     161: getfield      #3                  // Field chunkPos:J
     164: invokevirtual #40                 // Method seek:(J)V
     167: goto          173
     170: aload         7
     172: athrow
     173: iload         5
     175: ifne          22
     178: iload         4
     180: ireturn
    Exception table:
       from    to  target type
          25    77    80   Class org/apache/hadoop/fs/ChecksumException

  private void verifySums(byte[], int, int) throws org.apache.hadoop.fs.ChecksumException;
    Code:
       0: iload_3
       1: istore        4
       3: iconst_0
       4: istore        5
       6: aload_0
       7: getfield      #41                 // Field checksumInts:Ljava/nio/IntBuffer;
      10: invokevirtual #42                 // Method java/nio/IntBuffer.rewind:()Ljava/nio/Buffer;
      13: pop
      14: aload_0
      15: getfield      #41                 // Field checksumInts:Ljava/nio/IntBuffer;
      18: iload_3
      19: iconst_1
      20: isub
      21: aload_0
      22: getfield      #19                 // Field maxChunkSize:I
      25: idiv
      26: iconst_1
      27: iadd
      28: invokevirtual #43                 // Method java/nio/IntBuffer.limit:(I)Ljava/nio/Buffer;
      31: pop
      32: iload         4
      34: ifle          190
      37: aload_0
      38: getfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      41: aload_1
      42: iload_2
      43: iload         5
      45: iadd
      46: iload         4
      48: aload_0
      49: getfield      #19                 // Field maxChunkSize:I
      52: invokestatic  #21                 // Method java/lang/Math.min:(II)I
      55: invokeinterface #44,  4           // InterfaceMethod java/util/zip/Checksum.update:([BII)V
      60: aload_0
      61: getfield      #41                 // Field checksumInts:Ljava/nio/IntBuffer;
      64: invokevirtual #45                 // Method java/nio/IntBuffer.get:()I
      67: istore        6
      69: aload_0
      70: getfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      73: invokeinterface #46,  1           // InterfaceMethod java/util/zip/Checksum.getValue:()J
      78: l2i
      79: istore        7
      81: aload_0
      82: getfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      85: invokeinterface #47,  1           // InterfaceMethod java/util/zip/Checksum.reset:()V
      90: iload         6
      92: iload         7
      94: if_icmpeq     169
      97: aload_0
      98: getfield      #3                  // Field chunkPos:J
     101: iload         5
     103: i2l
     104: ladd
     105: lstore        8
     107: new           #27                 // class org/apache/hadoop/fs/ChecksumException
     110: dup
     111: new           #29                 // class java/lang/StringBuilder
     114: dup
     115: invokespecial #30                 // Method java/lang/StringBuilder."<init>":()V
     118: ldc           #48                 // String Checksum error:
     120: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     123: aload_0
     124: getfield      #4                  // Field file:Lorg/apache/hadoop/fs/Path;
     127: invokevirtual #49                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     130: ldc           #50                 // String  at
     132: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     135: lload         8
     137: invokevirtual #51                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
     140: ldc           #52                 // String  exp:
     142: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     145: iload         6
     147: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     150: ldc           #53                 // String  got:
     152: invokevirtual #32                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     155: iload         7
     157: invokevirtual #33                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     160: invokevirtual #37                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     163: lload         8
     165: invokespecial #54                 // Method org/apache/hadoop/fs/ChecksumException."<init>":(Ljava/lang/String;J)V
     168: athrow
     169: iload         4
     171: aload_0
     172: getfield      #19                 // Field maxChunkSize:I
     175: isub
     176: istore        4
     178: iload         5
     180: aload_0
     181: getfield      #19                 // Field maxChunkSize:I
     184: iadd
     185: istore        5
     187: goto          32
     190: return

  public static long checksum2long(byte[]);
    Code:
       0: lconst_0
       1: lstore_1
       2: iconst_0
       3: istore_3
       4: iload_3
       5: aload_0
       6: arraylength
       7: if_icmpge     37
      10: lload_1
      11: ldc2_w        #55                 // long 255l
      14: aload_0
      15: iload_3
      16: baload
      17: i2l
      18: land
      19: aload_0
      20: arraylength
      21: iload_3
      22: isub
      23: iconst_1
      24: isub
      25: bipush        8
      27: imul
      28: lshl
      29: lor
      30: lstore_1
      31: iinc          3, 1
      34: goto          4
      37: lload_1
      38: lreturn

  public synchronized long getPos() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field chunkPos:J
       4: lconst_0
       5: aload_0
       6: getfield      #10                 // Field count:I
       9: aload_0
      10: getfield      #9                  // Field pos:I
      13: isub
      14: i2l
      15: invokestatic  #57                 // Method java/lang/Math.max:(JJ)J
      18: lsub
      19: lreturn

  public synchronized int available() throws java.io.IOException;
    Code:
       0: iconst_0
       1: aload_0
       2: getfield      #10                 // Field count:I
       5: aload_0
       6: getfield      #9                  // Field pos:I
       9: isub
      10: invokestatic  #58                 // Method java/lang/Math.max:(II)I
      13: ireturn

  public synchronized long skip(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifgt          8
       6: lconst_0
       7: lreturn
       8: aload_0
       9: aload_0
      10: invokevirtual #59                 // Method getPos:()J
      13: lload_1
      14: ladd
      15: invokevirtual #40                 // Method seek:(J)V
      18: lload_1
      19: lreturn

  public synchronized void seek(long) throws java.io.IOException;
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: ifge          16
       6: new           #60                 // class java/io/EOFException
       9: dup
      10: ldc           #62                 // String Cannot seek to a negative offset
      12: invokespecial #63                 // Method java/io/EOFException."<init>":(Ljava/lang/String;)V
      15: athrow
      16: aload_0
      17: getfield      #3                  // Field chunkPos:J
      20: aload_0
      21: getfield      #10                 // Field count:I
      24: i2l
      25: lsub
      26: lstore_3
      27: lload_1
      28: lload_3
      29: lcmp
      30: iflt          51
      33: lload_1
      34: aload_0
      35: getfield      #3                  // Field chunkPos:J
      38: lcmp
      39: ifge          51
      42: aload_0
      43: lload_1
      44: lload_3
      45: lsub
      46: l2i
      47: putfield      #9                  // Field pos:I
      50: return
      51: aload_0
      52: invokespecial #64                 // Method resetState:()V
      55: aload_0
      56: aload_0
      57: lload_1
      58: invokevirtual #65                 // Method getChunkPosition:(J)J
      61: putfield      #3                  // Field chunkPos:J
      64: lload_1
      65: aload_0
      66: getfield      #3                  // Field chunkPos:J
      69: lsub
      70: l2i
      71: istore        5
      73: iload         5
      75: ifle          90
      78: aload_0
      79: iload         5
      81: newarray       byte
      83: iconst_0
      84: iload         5
      86: invokestatic  #66                 // Method readFully:(Ljava/io/InputStream;[BII)I
      89: pop
      90: return

  protected static int readFully(java.io.InputStream, byte[], int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: aload_0
       4: aload_1
       5: iload_2
       6: iload         4
       8: iadd
       9: iload_3
      10: iload         4
      12: isub
      13: invokevirtual #67                 // Method java/io/InputStream.read:([BII)I
      16: istore        5
      18: iload         5
      20: ifgt          36
      23: iload         4
      25: ifne          33
      28: iload         5
      30: goto          35
      33: iload         4
      35: ireturn
      36: iload         4
      38: iload         5
      40: iadd
      41: istore        4
      43: iload         4
      45: iload_3
      46: if_icmplt     52
      49: iload         4
      51: ireturn
      52: goto          3

  protected final synchronized void set(boolean, java.util.zip.Checksum, int, int);
    Code:
       0: getstatic     #16                 // Field $assertionsDisabled:Z
       3: ifne          28
       6: iload_1
       7: ifeq          28
      10: aload_2
      11: ifnull        28
      14: iload         4
      16: iconst_4
      17: if_icmpeq     28
      20: new           #17                 // class java/lang/AssertionError
      23: dup
      24: invokespecial #18                 // Method java/lang/AssertionError."<init>":()V
      27: athrow
      28: aload_0
      29: iload_3
      30: putfield      #19                 // Field maxChunkSize:I
      33: aload_0
      34: iload_1
      35: putfield      #2                  // Field verifyChecksum:Z
      38: aload_0
      39: aload_2
      40: putfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      43: aload_0
      44: iload_3
      45: newarray       byte
      47: putfield      #12                 // Field buf:[B
      50: aload_0
      51: bipush        32
      53: iload         4
      55: imul
      56: newarray       byte
      58: putfield      #23                 // Field checksum:[B
      61: aload_0
      62: aload_0
      63: getfield      #23                 // Field checksum:[B
      66: invokestatic  #69                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      69: invokevirtual #70                 // Method java/nio/ByteBuffer.asIntBuffer:()Ljava/nio/IntBuffer;
      72: putfield      #41                 // Field checksumInts:Ljava/nio/IntBuffer;
      75: aload_0
      76: iconst_0
      77: putfield      #10                 // Field count:I
      80: aload_0
      81: iconst_0
      82: putfield      #9                  // Field pos:I
      85: return

  public final boolean markSupported();
    Code:
       0: iconst_0
       1: ireturn

  public final void mark(int);
    Code:
       0: return

  public final void reset() throws java.io.IOException;
    Code:
       0: new           #71                 // class java/io/IOException
       3: dup
       4: ldc           #72                 // String mark/reset not supported
       6: invokespecial #73                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
       9: athrow

  private void resetState();
    Code:
       0: aload_0
       1: iconst_0
       2: putfield      #10                 // Field count:I
       5: aload_0
       6: iconst_0
       7: putfield      #9                  // Field pos:I
      10: aload_0
      11: getfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      14: ifnull        26
      17: aload_0
      18: getfield      #8                  // Field sum:Ljava/util/zip/Checksum;
      21: invokeinterface #47,  1           // InterfaceMethod java/util/zip/Checksum.reset:()V
      26: return

  static {};
    Code:
       0: ldc           #68                 // class org/apache/hadoop/fs/FSInputChecker
       2: invokevirtual #74                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #16                 // Field $assertionsDisabled:Z
      16: ldc           #68                 // class org/apache/hadoop/fs/FSInputChecker
      18: invokestatic  #75                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
      21: putstatic     #28                 // Field LOG:Lorg/slf4j/Logger;
      24: return
}
