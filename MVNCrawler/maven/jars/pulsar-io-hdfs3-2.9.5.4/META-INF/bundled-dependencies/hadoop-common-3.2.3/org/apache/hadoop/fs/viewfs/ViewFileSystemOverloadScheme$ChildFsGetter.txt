Compiled from "ViewFileSystemOverloadScheme.java"
class org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter extends org.apache.hadoop.fs.viewfs.FsGetter {
  private final java.lang.String rootScheme;

  org.apache.hadoop.fs.viewfs.ViewFileSystemOverloadScheme$ChildFsGetter(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/fs/viewfs/FsGetter."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field rootScheme:Ljava/lang/String;
       9: return

  public org.apache.hadoop.fs.FileSystem getNewInstance(java.net.URI, org.apache.hadoop.conf.Configuration) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #3                  // Method java/net/URI.getScheme:()Ljava/lang/String;
       4: aload_0
       5: getfield      #2                  // Field rootScheme:Ljava/lang/String;
       8: invokevirtual #4                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      11: ifeq          59
      14: getstatic     #5                  // Field org/apache/hadoop/fs/FileSystem.LOG:Lorg/apache/commons/logging/Log;
      17: invokeinterface #6,  1            // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      22: ifeq          52
      25: getstatic     #5                  // Field org/apache/hadoop/fs/FileSystem.LOG:Lorg/apache/commons/logging/Log;
      28: new           #7                  // class java/lang/StringBuilder
      31: dup
      32: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #9                  // String The file system initialized uri scheme is matching with the given target uri scheme. The target uri is:
      37: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_1
      41: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      44: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokeinterface #13,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      52: aload_0
      53: aload_1
      54: aload_2
      55: invokespecial #14                 // Method createFileSystem:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
      58: areturn
      59: aload_1
      60: aload_2
      61: invokestatic  #15                 // Method org/apache/hadoop/fs/FileSystem.newInstance:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
      64: areturn

  public org.apache.hadoop.fs.FileSystem get(java.net.URI, org.apache.hadoop.conf.Configuration) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #3                  // Method java/net/URI.getScheme:()Ljava/lang/String;
       4: aload_0
       5: getfield      #2                  // Field rootScheme:Ljava/lang/String;
       8: invokevirtual #4                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      11: ifeq          59
      14: getstatic     #5                  // Field org/apache/hadoop/fs/FileSystem.LOG:Lorg/apache/commons/logging/Log;
      17: invokeinterface #6,  1            // InterfaceMethod org/apache/commons/logging/Log.isDebugEnabled:()Z
      22: ifeq          52
      25: getstatic     #5                  // Field org/apache/hadoop/fs/FileSystem.LOG:Lorg/apache/commons/logging/Log;
      28: new           #7                  // class java/lang/StringBuilder
      31: dup
      32: invokespecial #8                  // Method java/lang/StringBuilder."<init>":()V
      35: ldc           #16                 // String The file system initialized uri scheme is matching with the given target uri scheme. So, the target file system instances will not be cached. To cache fs instances, please set fs.viewfs.enable.inner.cache to true. The target uri is:
      37: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      40: aload_1
      41: invokevirtual #11                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      44: invokevirtual #12                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      47: invokeinterface #13,  2           // InterfaceMethod org/apache/commons/logging/Log.debug:(Ljava/lang/Object;)V
      52: aload_0
      53: aload_1
      54: aload_2
      55: invokespecial #14                 // Method createFileSystem:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
      58: areturn
      59: aload_1
      60: aload_2
      61: invokestatic  #17                 // Method org/apache/hadoop/fs/FileSystem.get:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;
      64: areturn

  private org.apache.hadoop.fs.FileSystem createFileSystem(java.net.URI, org.apache.hadoop.conf.Configuration) throws java.io.IOException;
    Code:
       0: ldc           #19                 // String fs.viewfs.overload.scheme.target.%s.impl
       2: iconst_1
       3: anewarray     #20                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_1
       9: invokevirtual #3                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      12: aastore
      13: invokestatic  #21                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      16: astore_3
      17: aload_2
      18: aload_3
      19: aconst_null
      20: invokevirtual #22                 // Method org/apache/hadoop/conf/Configuration.getClass:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class;
      23: astore        4
      25: aload         4
      27: ifnonnull     63
      30: new           #23                 // class org/apache/hadoop/fs/UnsupportedFileSystemException
      33: dup
      34: ldc           #24                 // String %s=null: %s: %s
      36: iconst_3
      37: anewarray     #20                 // class java/lang/Object
      40: dup
      41: iconst_0
      42: aload_3
      43: aastore
      44: dup
      45: iconst_1
      46: ldc           #25                 // String No overload scheme fs configured
      48: aastore
      49: dup
      50: iconst_2
      51: aload_1
      52: invokevirtual #3                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      55: aastore
      56: invokestatic  #21                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      59: invokespecial #26                 // Method org/apache/hadoop/fs/UnsupportedFileSystemException."<init>":(Ljava/lang/String;)V
      62: athrow
      63: aload_0
      64: aload         4
      66: aload_1
      67: aload_2
      68: invokespecial #27                 // Method newInstance:(Ljava/lang/Class;Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;
      71: checkcast     #28                 // class org/apache/hadoop/fs/FileSystem
      74: astore        5
      76: aload         5
      78: aload_1
      79: aload_2
      80: invokevirtual #29                 // Method org/apache/hadoop/fs/FileSystem.initialize:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V
      83: aload         5
      85: areturn

  private <T> T newInstance(java.lang.Class<T>, java.net.URI, org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_1
       1: iconst_0
       2: anewarray     #30                 // class java/lang/Class
       5: invokevirtual #31                 // Method java/lang/Class.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;
       8: astore        5
      10: aload         5
      12: iconst_1
      13: invokevirtual #32                 // Method java/lang/reflect/Constructor.setAccessible:(Z)V
      16: aload         5
      18: iconst_0
      19: anewarray     #20                 // class java/lang/Object
      22: invokevirtual #33                 // Method java/lang/reflect/Constructor.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;
      25: astore        4
      27: goto          75
      30: astore        5
      32: aload         5
      34: invokevirtual #35                 // Method java/lang/reflect/InvocationTargetException.getCause:()Ljava/lang/Throwable;
      37: astore        6
      39: aload         6
      41: instanceof    #36                 // class java/lang/RuntimeException
      44: ifeq          53
      47: aload         6
      49: checkcast     #36                 // class java/lang/RuntimeException
      52: athrow
      53: new           #36                 // class java/lang/RuntimeException
      56: dup
      57: aload         6
      59: invokespecial #37                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      62: athrow
      63: astore        5
      65: new           #36                 // class java/lang/RuntimeException
      68: dup
      69: aload         5
      71: invokespecial #37                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      74: athrow
      75: aload         4
      77: areturn
    Exception table:
       from    to  target type
           0    27    30   Class java/lang/reflect/InvocationTargetException
           0    27    63   Class java/lang/Exception
}
