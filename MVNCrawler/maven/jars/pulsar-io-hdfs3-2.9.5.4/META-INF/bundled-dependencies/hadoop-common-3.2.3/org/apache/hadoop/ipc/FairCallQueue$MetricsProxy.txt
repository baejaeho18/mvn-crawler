Compiled from "FairCallQueue.java"
final class org.apache.hadoop.ipc.FairCallQueue$MetricsProxy implements org.apache.hadoop.ipc.FairCallQueueMXBean,org.apache.hadoop.metrics2.MetricsSource {
  private static final java.util.HashMap<java.lang.String, org.apache.hadoop.ipc.FairCallQueue$MetricsProxy> INSTANCES;

  private java.lang.ref.WeakReference<org.apache.hadoop.ipc.FairCallQueue<? extends org.apache.hadoop.ipc.Schedulable>> delegate;

  private int revisionNumber;

  private java.lang.String namespace;

  private org.apache.hadoop.ipc.FairCallQueue$MetricsProxy(java.lang.String);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field revisionNumber:I
       9: aload_0
      10: aload_1
      11: putfield      #3                  // Field namespace:Ljava/lang/String;
      14: aload_1
      15: ldc           #4                  // String FairCallQueue
      17: aload_0
      18: invokestatic  #5                  // Method org/apache/hadoop/metrics2/util/MBeans.register:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljavax/management/ObjectName;
      21: pop
      22: new           #6                  // class java/lang/StringBuilder
      25: dup
      26: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      29: aload_1
      30: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: ldc           #9                  // String .FairCallQueue
      35: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      38: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      41: astore_2
      42: invokestatic  #11                 // Method org/apache/hadoop/metrics2/lib/DefaultMetricsSystem.instance:()Lorg/apache/hadoop/metrics2/MetricsSystem;
      45: aload_2
      46: aload_2
      47: aload_0
      48: invokevirtual #12                 // Method org/apache/hadoop/metrics2/MetricsSystem.register:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      51: pop
      52: return

  public static synchronized org.apache.hadoop.ipc.FairCallQueue$MetricsProxy getInstance(java.lang.String);
    Code:
       0: getstatic     #13                 // Field INSTANCES:Ljava/util/HashMap;
       3: aload_0
       4: invokevirtual #14                 // Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       7: checkcast     #15                 // class org/apache/hadoop/ipc/FairCallQueue$MetricsProxy
      10: astore_1
      11: aload_1
      12: ifnonnull     33
      15: new           #15                 // class org/apache/hadoop/ipc/FairCallQueue$MetricsProxy
      18: dup
      19: aload_0
      20: invokespecial #16                 // Method "<init>":(Ljava/lang/String;)V
      23: astore_1
      24: getstatic     #13                 // Field INSTANCES:Ljava/util/HashMap;
      27: aload_0
      28: aload_1
      29: invokevirtual #17                 // Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      32: pop
      33: aload_1
      34: areturn

  public void setDelegate(org.apache.hadoop.ipc.FairCallQueue<? extends org.apache.hadoop.ipc.Schedulable>);
    Code:
       0: aload_0
       1: new           #18                 // class java/lang/ref/WeakReference
       4: dup
       5: aload_1
       6: invokespecial #19                 // Method java/lang/ref/WeakReference."<init>":(Ljava/lang/Object;)V
       9: putfield      #20                 // Field delegate:Ljava/lang/ref/WeakReference;
      12: aload_0
      13: dup
      14: getfield      #2                  // Field revisionNumber:I
      17: iconst_1
      18: iadd
      19: putfield      #2                  // Field revisionNumber:I
      22: return

  private org.apache.hadoop.ipc.FairCallQueue<? extends org.apache.hadoop.ipc.Schedulable> getCallQueue();
    Code:
       0: aload_0
       1: getfield      #20                 // Field delegate:Ljava/lang/ref/WeakReference;
       4: astore_1
       5: aload_1
       6: ifnonnull     11
       9: aconst_null
      10: areturn
      11: aload_1
      12: invokevirtual #21                 // Method java/lang/ref/WeakReference.get:()Ljava/lang/Object;
      15: checkcast     #22                 // class org/apache/hadoop/ipc/FairCallQueue
      18: areturn

  public int[] getQueueSizes();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method getCallQueue:()Lorg/apache/hadoop/ipc/FairCallQueue;
       4: astore_1
       5: aload_1
       6: ifnonnull     13
       9: iconst_0
      10: newarray       int
      12: areturn
      13: aload_1
      14: invokevirtual #24                 // Method org/apache/hadoop/ipc/FairCallQueue.getQueueSizes:()[I
      17: areturn

  public long[] getOverflowedCalls();
    Code:
       0: aload_0
       1: invokespecial #23                 // Method getCallQueue:()Lorg/apache/hadoop/ipc/FairCallQueue;
       4: astore_1
       5: aload_1
       6: ifnonnull     13
       9: iconst_0
      10: newarray       long
      12: areturn
      13: aload_1
      14: invokevirtual #25                 // Method org/apache/hadoop/ipc/FairCallQueue.getOverflowedCalls:()[J
      17: areturn

  public int getRevision();
    Code:
       0: aload_0
       1: getfield      #2                  // Field revisionNumber:I
       4: ireturn

  public void getMetrics(org.apache.hadoop.metrics2.MetricsCollector, boolean);
    Code:
       0: aload_1
       1: ldc           #4                  // String FairCallQueue
       3: invokeinterface #26,  2           // InterfaceMethod org/apache/hadoop/metrics2/MetricsCollector.addRecord:(Ljava/lang/String;)Lorg/apache/hadoop/metrics2/MetricsRecordBuilder;
       8: ldc           #27                 // String rpc
      10: invokevirtual #28                 // Method org/apache/hadoop/metrics2/MetricsRecordBuilder.setContext:(Ljava/lang/String;)Lorg/apache/hadoop/metrics2/MetricsRecordBuilder;
      13: ldc           #29                 // String namespace
      15: ldc           #30                 // String Namespace
      17: invokestatic  #31                 // Method org/apache/hadoop/metrics2/lib/Interns.info:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/metrics2/MetricsInfo;
      20: aload_0
      21: getfield      #3                  // Field namespace:Ljava/lang/String;
      24: invokevirtual #32                 // Method org/apache/hadoop/metrics2/MetricsRecordBuilder.tag:(Lorg/apache/hadoop/metrics2/MetricsInfo;Ljava/lang/String;)Lorg/apache/hadoop/metrics2/MetricsRecordBuilder;
      27: astore_3
      28: aload_0
      29: invokevirtual #33                 // Method getQueueSizes:()[I
      32: astore        4
      34: aload_0
      35: invokevirtual #34                 // Method getOverflowedCalls:()[J
      38: astore        5
      40: iconst_0
      41: istore        6
      43: iload         6
      45: aload         4
      47: arraylength
      48: if_icmpge     127
      51: aload_3
      52: new           #6                  // class java/lang/StringBuilder
      55: dup
      56: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      59: ldc           #35                 // String FairCallQueueSize_p
      61: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      64: iload         6
      66: invokevirtual #36                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      69: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      72: ldc           #37                 // String FCQ Queue Size
      74: invokestatic  #31                 // Method org/apache/hadoop/metrics2/lib/Interns.info:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/metrics2/MetricsInfo;
      77: aload         4
      79: iload         6
      81: iaload
      82: invokevirtual #38                 // Method org/apache/hadoop/metrics2/MetricsRecordBuilder.addGauge:(Lorg/apache/hadoop/metrics2/MetricsInfo;I)Lorg/apache/hadoop/metrics2/MetricsRecordBuilder;
      85: pop
      86: aload_3
      87: new           #6                  // class java/lang/StringBuilder
      90: dup
      91: invokespecial #7                  // Method java/lang/StringBuilder."<init>":()V
      94: ldc           #39                 // String FairCallQueueOverflowedCalls_p
      96: invokevirtual #8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      99: iload         6
     101: invokevirtual #36                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
     104: invokevirtual #10                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     107: ldc           #40                 // String FCQ Overflowed Calls
     109: invokestatic  #31                 // Method org/apache/hadoop/metrics2/lib/Interns.info:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/metrics2/MetricsInfo;
     112: aload         5
     114: iload         6
     116: laload
     117: invokevirtual #41                 // Method org/apache/hadoop/metrics2/MetricsRecordBuilder.addCounter:(Lorg/apache/hadoop/metrics2/MetricsInfo;J)Lorg/apache/hadoop/metrics2/MetricsRecordBuilder;
     120: pop
     121: iinc          6, 1
     124: goto          43
     127: return

  static {};
    Code:
       0: new           #42                 // class java/util/HashMap
       3: dup
       4: invokespecial #43                 // Method java/util/HashMap."<init>":()V
       7: putstatic     #13                 // Field INSTANCES:Ljava/util/HashMap;
      10: return
}
