Compiled from "FilterFileSystem.java"
public class org.apache.hadoop.fs.FilterFileSystem extends org.apache.hadoop.fs.FileSystem {
  protected org.apache.hadoop.fs.FileSystem fs;

  protected java.lang.String swapScheme;

  public org.apache.hadoop.fs.FilterFileSystem();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/fs/FileSystem."<init>":()V
       4: return

  public org.apache.hadoop.fs.FilterFileSystem(org.apache.hadoop.fs.FileSystem);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/hadoop/fs/FileSystem."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       9: aload_0
      10: aload_1
      11: getfield      #3                  // Field org/apache/hadoop/fs/FileSystem.statistics:Lorg/apache/hadoop/fs/FileSystem$Statistics;
      14: putfield      #4                  // Field statistics:Lorg/apache/hadoop/fs/FileSystem$Statistics;
      17: return

  public org.apache.hadoop.fs.FileSystem getRawFileSystem();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: areturn

  public void initialize(java.net.URI, org.apache.hadoop.conf.Configuration) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method org/apache/hadoop/fs/FileSystem.initialize:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V
       6: aload_0
       7: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      10: invokevirtual #6                  // Method org/apache/hadoop/fs/FileSystem.getConf:()Lorg/apache/hadoop/conf/Configuration;
      13: ifnonnull     25
      16: aload_0
      17: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      20: aload_1
      21: aload_2
      22: invokevirtual #5                  // Method org/apache/hadoop/fs/FileSystem.initialize:(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V
      25: aload_1
      26: invokevirtual #7                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      29: astore_3
      30: aload_3
      31: aload_0
      32: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      35: invokevirtual #8                  // Method org/apache/hadoop/fs/FileSystem.getUri:()Ljava/net/URI;
      38: invokevirtual #7                  // Method java/net/URI.getScheme:()Ljava/lang/String;
      41: invokevirtual #9                  // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      44: ifne          52
      47: aload_0
      48: aload_3
      49: putfield      #10                 // Field swapScheme:Ljava/lang/String;
      52: return

  public java.net.URI getUri();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #8                  // Method org/apache/hadoop/fs/FileSystem.getUri:()Ljava/net/URI;
       7: areturn

  protected java.net.URI getCanonicalUri();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #11                 // Method org/apache/hadoop/fs/FileSystem.getCanonicalUri:()Ljava/net/URI;
       7: areturn

  protected java.net.URI canonicalizeUri(java.net.URI);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #12                 // Method org/apache/hadoop/fs/FileSystem.canonicalizeUri:(Ljava/net/URI;)Ljava/net/URI;
       8: areturn

  public org.apache.hadoop.fs.Path makeQualified(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #13                 // Method org/apache/hadoop/fs/FileSystem.makeQualified:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: astore_2
       9: aload_0
      10: getfield      #10                 // Field swapScheme:Ljava/lang/String;
      13: ifnull        56
      16: new           #14                 // class org/apache/hadoop/fs/Path
      19: dup
      20: new           #15                 // class java/net/URI
      23: dup
      24: aload_0
      25: getfield      #10                 // Field swapScheme:Ljava/lang/String;
      28: aload_2
      29: invokevirtual #16                 // Method org/apache/hadoop/fs/Path.toUri:()Ljava/net/URI;
      32: invokevirtual #17                 // Method java/net/URI.getSchemeSpecificPart:()Ljava/lang/String;
      35: aconst_null
      36: invokespecial #18                 // Method java/net/URI."<init>":(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
      39: invokespecial #19                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/net/URI;)V
      42: astore_2
      43: goto          56
      46: astore_3
      47: new           #21                 // class java/lang/IllegalArgumentException
      50: dup
      51: aload_3
      52: invokespecial #22                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/Throwable;)V
      55: athrow
      56: aload_2
      57: areturn
    Exception table:
       from    to  target type
          16    43    46   Class java/net/URISyntaxException

  protected void checkPath(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #23                 // Method org/apache/hadoop/fs/FileSystem.checkPath:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.fs.BlockLocation[] getFileBlockLocations(org.apache.hadoop.fs.FileStatus, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: lload_2
       6: lload         4
       8: invokevirtual #24                 // Method org/apache/hadoop/fs/FileSystem.getFileBlockLocations:(Lorg/apache/hadoop/fs/FileStatus;JJ)[Lorg/apache/hadoop/fs/BlockLocation;
      11: areturn

  public org.apache.hadoop.fs.Path resolvePath(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #25                 // Method org/apache/hadoop/fs/FileSystem.resolvePath:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: iload_2
       6: invokevirtual #26                 // Method org/apache/hadoop/fs/FileSystem.open:(Lorg/apache/hadoop/fs/Path;I)Lorg/apache/hadoop/fs/FSDataInputStream;
       9: areturn

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.PathHandle, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: iload_2
       6: invokevirtual #27                 // Method org/apache/hadoop/fs/FileSystem.open:(Lorg/apache/hadoop/fs/PathHandle;I)Lorg/apache/hadoop/fs/FSDataInputStream;
       9: areturn

  protected org.apache.hadoop.fs.PathHandle createPathHandle(org.apache.hadoop.fs.FileStatus, org.apache.hadoop.fs.Options$HandleOpt...);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #28                 // Method org/apache/hadoop/fs/FileSystem.getPathHandle:(Lorg/apache/hadoop/fs/FileStatus;[Lorg/apache/hadoop/fs/Options$HandleOpt;)Lorg/apache/hadoop/fs/PathHandle;
       9: areturn

  public org.apache.hadoop.fs.FSDataOutputStream append(org.apache.hadoop.fs.Path, int, org.apache.hadoop.util.Progressable) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: iload_2
       6: aload_3
       7: invokevirtual #29                 // Method org/apache/hadoop/fs/FileSystem.append:(Lorg/apache/hadoop/fs/Path;ILorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
      10: areturn

  public void concat(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #30                 // Method org/apache/hadoop/fs/FileSystem.concat:(Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Path;)V
       9: return

  public org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, boolean, int, short, long, org.apache.hadoop.util.Progressable) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: iload_3
       7: iload         4
       9: iload         5
      11: lload         6
      13: aload         8
      15: invokevirtual #31                 // Method org/apache/hadoop/fs/FileSystem.create:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;ZISJLorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
      18: areturn

  public org.apache.hadoop.fs.FSDataOutputStream create(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.fs.Options$ChecksumOpt) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: iload         4
       9: iload         5
      11: lload         6
      13: aload         8
      15: aload         9
      17: invokevirtual #32                 // Method org/apache/hadoop/fs/FileSystem.create:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Ljava/util/EnumSet;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;)Lorg/apache/hadoop/fs/FSDataOutputStream;
      20: areturn

  protected org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.LocatedFileStatus> listLocatedStatus(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.PathFilter) throws java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #33                 // Method org/apache/hadoop/fs/FileSystem.listLocatedStatus:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/PathFilter;)Lorg/apache/hadoop/fs/RemoteIterator;
       9: areturn

  public org.apache.hadoop.fs.FSDataOutputStream createNonRecursive(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, int, short, long, org.apache.hadoop.util.Progressable) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: iload         4
       9: iload         5
      11: lload         6
      13: aload         8
      15: invokevirtual #34                 // Method org/apache/hadoop/fs/FileSystem.createNonRecursive:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Ljava/util/EnumSet;ISJLorg/apache/hadoop/util/Progressable;)Lorg/apache/hadoop/fs/FSDataOutputStream;
      18: areturn

  public boolean setReplication(org.apache.hadoop.fs.Path, short) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: iload_2
       6: invokevirtual #35                 // Method org/apache/hadoop/fs/FileSystem.setReplication:(Lorg/apache/hadoop/fs/Path;S)Z
       9: ireturn

  public boolean rename(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #36                 // Method org/apache/hadoop/fs/FileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Z
       9: ireturn

  protected void rename(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Options$Rename...) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #37                 // Method org/apache/hadoop/fs/FileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      10: return

  public boolean truncate(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: lload_2
       6: invokevirtual #38                 // Method org/apache/hadoop/fs/FileSystem.truncate:(Lorg/apache/hadoop/fs/Path;J)Z
       9: ireturn

  public boolean delete(org.apache.hadoop.fs.Path, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: iload_2
       6: invokevirtual #39                 // Method org/apache/hadoop/fs/FileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
       9: ireturn

  public org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #40                 // Method org/apache/hadoop/fs/FileSystem.listStatus:(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
       8: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.Path> listCorruptFileBlocks(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #41                 // Method org/apache/hadoop/fs/FileSystem.listCorruptFileBlocks:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.LocatedFileStatus> listLocatedStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #42                 // Method org/apache/hadoop/fs/FileSystem.listLocatedStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.FileStatus> listStatusIterator(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #43                 // Method org/apache/hadoop/fs/FileSystem.listStatusIterator:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: areturn

  public org.apache.hadoop.fs.Path getHomeDirectory();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #44                 // Method org/apache/hadoop/fs/FileSystem.getHomeDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  public void setWorkingDirectory(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #45                 // Method org/apache/hadoop/fs/FileSystem.setWorkingDirectory:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.fs.Path getWorkingDirectory();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #46                 // Method org/apache/hadoop/fs/FileSystem.getWorkingDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  protected org.apache.hadoop.fs.Path getInitialWorkingDirectory();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #47                 // Method org/apache/hadoop/fs/FileSystem.getInitialWorkingDirectory:()Lorg/apache/hadoop/fs/Path;
       7: areturn

  public org.apache.hadoop.fs.FsStatus getStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #48                 // Method org/apache/hadoop/fs/FileSystem.getStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsStatus;
       8: areturn

  public boolean mkdirs(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #49                 // Method org/apache/hadoop/fs/FileSystem.mkdirs:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)Z
       9: ireturn

  public boolean mkdirs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #50                 // Method org/apache/hadoop/fs/FileSystem.mkdirs:(Lorg/apache/hadoop/fs/Path;)Z
       8: ireturn

  public void copyFromLocalFile(boolean, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #51                 // Method org/apache/hadoop/fs/FileSystem.copyFromLocalFile:(ZLorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
      10: return

  public void copyFromLocalFile(boolean, boolean, org.apache.hadoop.fs.Path[], org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: iload_2
       6: aload_3
       7: aload         4
       9: invokevirtual #52                 // Method org/apache/hadoop/fs/FileSystem.copyFromLocalFile:(ZZ[Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
      12: return

  public void copyFromLocalFile(boolean, boolean, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: iload_2
       6: aload_3
       7: aload         4
       9: invokevirtual #53                 // Method org/apache/hadoop/fs/FileSystem.copyFromLocalFile:(ZZLorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
      12: return

  public void copyToLocalFile(boolean, org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #54                 // Method org/apache/hadoop/fs/FileSystem.copyToLocalFile:(ZLorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
      10: return

  public org.apache.hadoop.fs.Path startLocalOutput(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #55                 // Method org/apache/hadoop/fs/FileSystem.startLocalOutput:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       9: areturn

  public void completeLocalOutput(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #56                 // Method org/apache/hadoop/fs/FileSystem.completeLocalOutput:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
       9: return

  public long getUsed() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #57                 // Method org/apache/hadoop/fs/FileSystem.getUsed:()J
       7: lreturn

  public long getUsed(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #58                 // Method org/apache/hadoop/fs/FileSystem.getUsed:(Lorg/apache/hadoop/fs/Path;)J
       8: lreturn

  public long getDefaultBlockSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #59                 // Method org/apache/hadoop/fs/FileSystem.getDefaultBlockSize:()J
       7: lreturn

  public short getDefaultReplication();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #60                 // Method org/apache/hadoop/fs/FileSystem.getDefaultReplication:()S
       7: ireturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #61                 // Method org/apache/hadoop/fs/FileSystem.getServerDefaults:()Lorg/apache/hadoop/fs/FsServerDefaults;
       7: areturn

  public long getDefaultBlockSize(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #62                 // Method org/apache/hadoop/fs/FileSystem.getDefaultBlockSize:(Lorg/apache/hadoop/fs/Path;)J
       8: lreturn

  public short getDefaultReplication(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #63                 // Method org/apache/hadoop/fs/FileSystem.getDefaultReplication:(Lorg/apache/hadoop/fs/Path;)S
       8: ireturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #64                 // Method org/apache/hadoop/fs/FileSystem.getServerDefaults:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsServerDefaults;
       8: areturn

  public org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #65                 // Method org/apache/hadoop/fs/FileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
       8: areturn

  public void msync() throws java.io.IOException, java.lang.UnsupportedOperationException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #66                 // Method org/apache/hadoop/fs/FileSystem.msync:()V
       7: return

  public void access(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsAction) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #67                 // Method org/apache/hadoop/fs/FileSystem.access:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsAction;)V
       9: return

  public void createSymlink(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean) throws org.apache.hadoop.security.AccessControlException, org.apache.hadoop.fs.FileAlreadyExistsException, java.io.FileNotFoundException, org.apache.hadoop.fs.ParentNotDirectoryException, org.apache.hadoop.fs.UnsupportedFileSystemException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: iload_3
       7: invokevirtual #68                 // Method org/apache/hadoop/fs/FileSystem.createSymlink:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;Z)V
      10: return

  public org.apache.hadoop.fs.FileStatus getFileLinkStatus(org.apache.hadoop.fs.Path) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnsupportedFileSystemException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #69                 // Method org/apache/hadoop/fs/FileSystem.getFileLinkStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
       8: areturn

  public boolean supportsSymlinks();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #70                 // Method org/apache/hadoop/fs/FileSystem.supportsSymlinks:()Z
       7: ireturn

  public org.apache.hadoop.fs.Path getLinkTarget(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #71                 // Method org/apache/hadoop/fs/FileSystem.getLinkTarget:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  protected org.apache.hadoop.fs.Path resolveLink(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #72                 // Method org/apache/hadoop/fs/FileSystem.resolveLink:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public org.apache.hadoop.fs.FileChecksum getFileChecksum(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #73                 // Method org/apache/hadoop/fs/FileSystem.getFileChecksum:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileChecksum;
       8: areturn

  public org.apache.hadoop.fs.FileChecksum getFileChecksum(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: lload_2
       6: invokevirtual #74                 // Method org/apache/hadoop/fs/FileSystem.getFileChecksum:(Lorg/apache/hadoop/fs/Path;J)Lorg/apache/hadoop/fs/FileChecksum;
       9: areturn

  public void setVerifyChecksum(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: invokevirtual #75                 // Method org/apache/hadoop/fs/FileSystem.setVerifyChecksum:(Z)V
       8: return

  public void setWriteChecksum(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: invokevirtual #76                 // Method org/apache/hadoop/fs/FileSystem.setWriteChecksum:(Z)V
       8: return

  public org.apache.hadoop.conf.Configuration getConf();
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #6                  // Method org/apache/hadoop/fs/FileSystem.getConf:()Lorg/apache/hadoop/conf/Configuration;
       7: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #77                 // Method org/apache/hadoop/fs/FileSystem.close:()V
       4: aload_0
       5: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       8: invokevirtual #77                 // Method org/apache/hadoop/fs/FileSystem.close:()V
      11: return

  public void setOwner(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #78                 // Method org/apache/hadoop/fs/FileSystem.setOwner:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;Ljava/lang/String;)V
      10: return

  public void setTimes(org.apache.hadoop.fs.Path, long, long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: lload_2
       6: lload         4
       8: invokevirtual #79                 // Method org/apache/hadoop/fs/FileSystem.setTimes:(Lorg/apache/hadoop/fs/Path;JJ)V
      11: return

  public void setPermission(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #80                 // Method org/apache/hadoop/fs/FileSystem.setPermission:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)V
       9: return

  protected org.apache.hadoop.fs.FSDataOutputStream primitiveCreate(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.fs.Options$ChecksumOpt) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: iload         4
       9: iload         5
      11: lload         6
      13: aload         8
      15: aload         9
      17: invokevirtual #81                 // Method org/apache/hadoop/fs/FileSystem.primitiveCreate:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Ljava/util/EnumSet;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;)Lorg/apache/hadoop/fs/FSDataOutputStream;
      20: areturn

  protected boolean primitiveMkdir(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #82                 // Method org/apache/hadoop/fs/FileSystem.primitiveMkdir:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;)Z
       9: ireturn

  public org.apache.hadoop.fs.FileSystem[] getChildFileSystems();
    Code:
       0: iconst_1
       1: anewarray     #83                 // class org/apache/hadoop/fs/FileSystem
       4: dup
       5: iconst_0
       6: aload_0
       7: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
      10: aastore
      11: areturn

  public org.apache.hadoop.fs.Path createSnapshot(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #84                 // Method org/apache/hadoop/fs/FileSystem.createSnapshot:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)Lorg/apache/hadoop/fs/Path;
       9: areturn

  public void renameSnapshot(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #85                 // Method org/apache/hadoop/fs/FileSystem.renameSnapshot:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;Ljava/lang/String;)V
      10: return

  public void deleteSnapshot(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #86                 // Method org/apache/hadoop/fs/FileSystem.deleteSnapshot:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void modifyAclEntries(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #87                 // Method org/apache/hadoop/fs/FileSystem.modifyAclEntries:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)V
       9: return

  public void removeAclEntries(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #88                 // Method org/apache/hadoop/fs/FileSystem.removeAclEntries:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)V
       9: return

  public void removeDefaultAcl(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #89                 // Method org/apache/hadoop/fs/FileSystem.removeDefaultAcl:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void removeAcl(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #90                 // Method org/apache/hadoop/fs/FileSystem.removeAcl:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void setAcl(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #91                 // Method org/apache/hadoop/fs/FileSystem.setAcl:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)V
       9: return

  public org.apache.hadoop.fs.permission.AclStatus getAclStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #92                 // Method org/apache/hadoop/fs/FileSystem.getAclStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/permission/AclStatus;
       8: areturn

  public void setXAttr(org.apache.hadoop.fs.Path, java.lang.String, byte[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: invokevirtual #93                 // Method org/apache/hadoop/fs/FileSystem.setXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;[B)V
      10: return

  public void setXAttr(org.apache.hadoop.fs.Path, java.lang.String, byte[], java.util.EnumSet<org.apache.hadoop.fs.XAttrSetFlag>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokevirtual #94                 // Method org/apache/hadoop/fs/FileSystem.setXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;[BLjava/util/EnumSet;)V
      12: return

  public byte[] getXAttr(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #95                 // Method org/apache/hadoop/fs/FileSystem.getXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)[B
       9: areturn

  public java.util.Map<java.lang.String, byte[]> getXAttrs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #96                 // Method org/apache/hadoop/fs/FileSystem.getXAttrs:(Lorg/apache/hadoop/fs/Path;)Ljava/util/Map;
       8: areturn

  public java.util.Map<java.lang.String, byte[]> getXAttrs(org.apache.hadoop.fs.Path, java.util.List<java.lang.String>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #97                 // Method org/apache/hadoop/fs/FileSystem.getXAttrs:(Lorg/apache/hadoop/fs/Path;Ljava/util/List;)Ljava/util/Map;
       9: areturn

  public java.util.List<java.lang.String> listXAttrs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #98                 // Method org/apache/hadoop/fs/FileSystem.listXAttrs:(Lorg/apache/hadoop/fs/Path;)Ljava/util/List;
       8: areturn

  public void removeXAttr(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #99                 // Method org/apache/hadoop/fs/FileSystem.removeXAttr:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void satisfyStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #100                // Method org/apache/hadoop/fs/FileSystem.satisfyStoragePolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public void setStoragePolicy(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #101                // Method org/apache/hadoop/fs/FileSystem.setStoragePolicy:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
       9: return

  public void unsetStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #102                // Method org/apache/hadoop/fs/FileSystem.unsetStoragePolicy:(Lorg/apache/hadoop/fs/Path;)V
       8: return

  public org.apache.hadoop.fs.BlockStoragePolicySpi getStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #103                // Method org/apache/hadoop/fs/FileSystem.getStoragePolicy:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/BlockStoragePolicySpi;
       8: areturn

  public java.util.Collection<? extends org.apache.hadoop.fs.BlockStoragePolicySpi> getAllStoragePolicies() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: invokevirtual #104                // Method org/apache/hadoop/fs/FileSystem.getAllStoragePolicies:()Ljava/util/Collection;
       7: areturn

  public org.apache.hadoop.fs.Path getTrashRoot(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #105                // Method org/apache/hadoop/fs/FileSystem.getTrashRoot:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
       8: areturn

  public java.util.Collection<org.apache.hadoop.fs.FileStatus> getTrashRoots(boolean);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: iload_1
       5: invokevirtual #106                // Method org/apache/hadoop/fs/FileSystem.getTrashRoots:(Z)Ljava/util/Collection;
       8: areturn

  public org.apache.hadoop.fs.FSDataOutputStreamBuilder createFile(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #107                // Method org/apache/hadoop/fs/FileSystem.createFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
       8: areturn

  public org.apache.hadoop.fs.FSDataOutputStreamBuilder appendFile(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: invokevirtual #108                // Method org/apache/hadoop/fs/FileSystem.appendFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
       8: areturn

  public boolean hasPathCapability(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field fs:Lorg/apache/hadoop/fs/FileSystem;
       4: aload_1
       5: aload_2
       6: invokevirtual #109                // Method org/apache/hadoop/fs/FileSystem.hasPathCapability:(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)Z
       9: ireturn
}
