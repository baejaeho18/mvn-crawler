Compiled from "SequentialNumber.java"
public abstract class org.apache.hadoop.util.SequentialNumber implements org.apache.hadoop.util.IdGenerator {
  private final java.util.concurrent.atomic.AtomicLong currentValue;

  protected org.apache.hadoop.util.SequentialNumber(long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/atomic/AtomicLong
       8: dup
       9: lload_1
      10: invokespecial #3                  // Method java/util/concurrent/atomic/AtomicLong."<init>":(J)V
      13: putfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
      16: return

  public long getCurrentValue();
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lreturn

  public void setCurrentValue(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
       4: lload_1
       5: invokevirtual #6                  // Method java/util/concurrent/atomic/AtomicLong.set:(J)V
       8: return

  public boolean setIfGreater(long);
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lstore_3
       8: lload_1
       9: lload_3
      10: lcmp
      11: ifgt          16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
      20: lload_3
      21: lload_1
      22: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      25: ifeq          30
      28: iconst_1
      29: ireturn
      30: goto          0

  public long nextValue();
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #8                  // Method java/util/concurrent/atomic/AtomicLong.incrementAndGet:()J
       7: lreturn

  public void skipTo(long) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokevirtual #9                  // Method getCurrentValue:()J
       4: lstore_3
       5: lload_1
       6: lload_3
       7: lcmp
       8: ifge          47
      11: new           #10                 // class java/lang/IllegalStateException
      14: dup
      15: new           #11                 // class java/lang/StringBuilder
      18: dup
      19: invokespecial #12                 // Method java/lang/StringBuilder."<init>":()V
      22: ldc           #13                 // String Cannot skip to less than the current value (=
      24: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: lload_3
      28: invokevirtual #15                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      31: ldc           #16                 // String ), where newValue=
      33: invokevirtual #14                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: lload_1
      37: invokevirtual #15                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      40: invokevirtual #17                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      43: invokespecial #18                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      46: athrow
      47: aload_0
      48: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
      51: lload_3
      52: lload_1
      53: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicLong.compareAndSet:(JJ)Z
      56: ifeq          60
      59: return
      60: goto          0

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: ifnull        15
       4: aload_0
       5: invokevirtual #19                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
       8: aload_1
       9: invokevirtual #19                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      12: if_acmpeq     17
      15: iconst_0
      16: ireturn
      17: aload_1
      18: checkcast     #20                 // class org/apache/hadoop/util/SequentialNumber
      21: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
      24: astore_2
      25: aload_0
      26: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
      29: aload_2
      30: invokevirtual #21                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
      33: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: getfield      #4                  // Field currentValue:Ljava/util/concurrent/atomic/AtomicLong;
       4: invokevirtual #5                  // Method java/util/concurrent/atomic/AtomicLong.get:()J
       7: lstore_1
       8: lload_1
       9: l2i
      10: lload_1
      11: bipush        32
      13: lushr
      14: l2i
      15: ixor
      16: ireturn
}
