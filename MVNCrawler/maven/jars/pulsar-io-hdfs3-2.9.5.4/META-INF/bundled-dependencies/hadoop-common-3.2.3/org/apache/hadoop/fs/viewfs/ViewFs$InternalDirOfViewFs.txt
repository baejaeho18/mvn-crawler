Compiled from "ViewFs.java"
class org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs extends org.apache.hadoop.fs.AbstractFileSystem {
  final org.apache.hadoop.fs.viewfs.InodeTree$INodeDir<org.apache.hadoop.fs.AbstractFileSystem> theInternalDir;

  final long creationTime;

  final org.apache.hadoop.security.UserGroupInformation ugi;

  final java.net.URI myUri;

  private org.apache.hadoop.fs.viewfs.InodeTree<org.apache.hadoop.fs.AbstractFileSystem> fsState;

  private org.apache.hadoop.conf.Configuration conf;

  public org.apache.hadoop.fs.viewfs.ViewFs$InternalDirOfViewFs(org.apache.hadoop.fs.viewfs.InodeTree$INodeDir<org.apache.hadoop.fs.AbstractFileSystem>, long, org.apache.hadoop.security.UserGroupInformation, java.net.URI, org.apache.hadoop.fs.viewfs.InodeTree, org.apache.hadoop.conf.Configuration) throws java.net.URISyntaxException;
    Code:
       0: aload_0
       1: getstatic     #1                  // Field org/apache/hadoop/fs/FsConstants.VIEWFS_URI:Ljava/net/URI;
       4: ldc           #3                  // String viewfs
       6: iconst_0
       7: iconst_m1
       8: invokespecial #4                  // Method org/apache/hadoop/fs/AbstractFileSystem."<init>":(Ljava/net/URI;Ljava/lang/String;ZI)V
      11: aload_0
      12: aload_1
      13: putfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      16: aload_0
      17: lload_2
      18: putfield      #6                  // Field creationTime:J
      21: aload_0
      22: aload         4
      24: putfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
      27: aload_0
      28: aload         5
      30: putfield      #8                  // Field myUri:Ljava/net/URI;
      33: aload_0
      34: aload         6
      36: putfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
      39: aload_0
      40: aload         7
      42: putfield      #10                 // Field conf:Lorg/apache/hadoop/conf/Configuration;
      45: return

  private static void checkPathIsSlash(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getstatic     #11                 // Field org/apache/hadoop/fs/viewfs/InodeTree.SlashPath:Lorg/apache/hadoop/fs/Path;
       4: if_acmpeq     17
       7: new           #12                 // class java/io/IOException
      10: dup
      11: ldc           #13                 // String Internal implementation error: expected file name to be /
      13: invokespecial #14                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: return

  public org.apache.hadoop.fs.FSDataOutputStream createInternal(org.apache.hadoop.fs.Path, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, org.apache.hadoop.fs.permission.FsPermission, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.fs.Options$ChecksumOpt, boolean) throws org.apache.hadoop.security.AccessControlException, org.apache.hadoop.fs.FileAlreadyExistsException, java.io.FileNotFoundException, org.apache.hadoop.fs.ParentNotDirectoryException, org.apache.hadoop.fs.UnsupportedFileSystemException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_1
       1: ldc           #15                 // String File cannot be null.
       3: invokestatic  #16                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: getstatic     #11                 // Field org/apache/hadoop/fs/viewfs/InodeTree.SlashPath:Lorg/apache/hadoop/fs/Path;
      10: aload_1
      11: invokevirtual #17                 // Method org/apache/hadoop/fs/Path.equals:(Ljava/lang/Object;)Z
      14: ifeq          50
      17: new           #18                 // class org/apache/hadoop/fs/FileAlreadyExistsException
      20: dup
      21: new           #19                 // class java/lang/StringBuilder
      24: dup
      25: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      28: ldc           #21                 // String / is not a file. The directory / already exist at:
      30: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      33: aload_0
      34: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      37: getfield      #23                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.fullPath:Ljava/lang/String;
      40: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      43: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      46: invokespecial #25                 // Method org/apache/hadoop/fs/FileAlreadyExistsException."<init>":(Ljava/lang/String;)V
      49: athrow
      50: aload_0
      51: getfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
      54: invokevirtual #26                 // Method org/apache/hadoop/fs/viewfs/InodeTree.getRootFallbackLink:()Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
      57: ifnull        250
      60: aload_0
      61: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      64: invokevirtual #27                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.getChildren:()Ljava/util/Map;
      67: aload_1
      68: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
      71: invokeinterface #29,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      76: ifeq          127
      79: new           #18                 // class org/apache/hadoop/fs/FileAlreadyExistsException
      82: dup
      83: new           #19                 // class java/lang/StringBuilder
      86: dup
      87: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      90: ldc           #30                 // String A mount path(file/dir) already exist with the requested path:
      92: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: aload_0
      96: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      99: invokevirtual #27                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.getChildren:()Ljava/util/Map;
     102: aload_1
     103: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
     106: invokeinterface #31,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     111: checkcast     #32                 // class org/apache/hadoop/fs/viewfs/InodeTree$INode
     114: getfield      #33                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INode.fullPath:Ljava/lang/String;
     117: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     120: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     123: invokespecial #25                 // Method org/apache/hadoop/fs/FileAlreadyExistsException."<init>":(Ljava/lang/String;)V
     126: athrow
     127: aload_0
     128: getfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
     131: invokevirtual #26                 // Method org/apache/hadoop/fs/viewfs/InodeTree.getRootFallbackLink:()Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
     134: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
     137: checkcast     #35                 // class org/apache/hadoop/fs/AbstractFileSystem
     140: astore        11
     142: new           #36                 // class org/apache/hadoop/fs/Path
     145: dup
     146: aload_0
     147: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
     150: getfield      #23                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.fullPath:Ljava/lang/String;
     153: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     156: invokestatic  #38                 // Method org/apache/hadoop/fs/Path.getPathWithoutSchemeAndAuthority:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
     159: astore        12
     161: aload_1
     162: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
     165: astore        13
     167: new           #36                 // class org/apache/hadoop/fs/Path
     170: dup
     171: aload         12
     173: aload         13
     175: invokespecial #39                 // Method org/apache/hadoop/fs/Path."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
     178: astore        14
     180: aload         11
     182: aload         14
     184: aload_2
     185: aload_3
     186: iload         4
     188: iload         5
     190: lload         6
     192: aload         8
     194: aload         9
     196: iconst_1
     197: invokevirtual #40                 // Method org/apache/hadoop/fs/AbstractFileSystem.createInternal:(Lorg/apache/hadoop/fs/Path;Ljava/util/EnumSet;Lorg/apache/hadoop/fs/permission/FsPermission;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;Z)Lorg/apache/hadoop/fs/FSDataOutputStream;
     200: areturn
     201: astore        15
     203: new           #19                 // class java/lang/StringBuilder
     206: dup
     207: ldc           #41                 // String Failed to create file:
     209: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
     212: aload         14
     214: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     217: ldc           #44                 // String  at fallback :
     219: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     222: aload         11
     224: invokevirtual #45                 // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
     227: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     230: astore        16
     232: getstatic     #46                 // Field org/apache/hadoop/fs/viewfs/ViewFs.LOG:Lorg/slf4j/Logger;
     235: aload         16
     237: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     240: aload         15
     242: invokeinterface #47,  3           // InterfaceMethod org/slf4j/Logger.error:(Ljava/lang/String;Ljava/lang/Throwable;)V
     247: aload         15
     249: athrow
     250: ldc           #48                 // String create
     252: aload_1
     253: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
     256: athrow
    Exception table:
       from    to  target type
         180   200   201   Class java/io/IOException

  public boolean delete(org.apache.hadoop.fs.Path, boolean) throws org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #51                 // String delete
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public org.apache.hadoop.fs.BlockLocation[] getFileBlockLocations(org.apache.hadoop.fs.Path, long, long) throws java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: new           #52                 // class java/io/FileNotFoundException
       7: dup
       8: ldc           #53                 // String Path points to dir not a file
      10: invokespecial #54                 // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      13: athrow

  public org.apache.hadoop.fs.FileChecksum getFileChecksum(org.apache.hadoop.fs.Path) throws java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: new           #52                 // class java/io/FileNotFoundException
       7: dup
       8: ldc           #53                 // String Path points to dir not a file
      10: invokespecial #54                 // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      13: athrow

  public org.apache.hadoop.fs.FileStatus getFileStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: new           #55                 // class org/apache/hadoop/fs/FileStatus
       7: dup
       8: lconst_0
       9: iconst_1
      10: iconst_0
      11: lconst_0
      12: aload_0
      13: getfield      #6                  // Field creationTime:J
      16: aload_0
      17: getfield      #6                  // Field creationTime:J
      20: getstatic     #56                 // Field org/apache/hadoop/fs/viewfs/Constants.PERMISSION_555:Lorg/apache/hadoop/fs/permission/FsPermission;
      23: aload_0
      24: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
      27: invokevirtual #57                 // Method org/apache/hadoop/security/UserGroupInformation.getShortUserName:()Ljava/lang/String;
      30: aload_0
      31: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
      34: invokevirtual #58                 // Method org/apache/hadoop/security/UserGroupInformation.getPrimaryGroupName:()Ljava/lang/String;
      37: new           #36                 // class org/apache/hadoop/fs/Path
      40: dup
      41: aload_0
      42: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      45: getfield      #23                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.fullPath:Ljava/lang/String;
      48: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      51: aload_0
      52: getfield      #8                  // Field myUri:Ljava/net/URI;
      55: aconst_null
      56: invokevirtual #59                 // Method org/apache/hadoop/fs/Path.makeQualified:(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      59: invokespecial #60                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)V
      62: areturn

  public org.apache.hadoop.fs.FileStatus getFileLinkStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
       4: invokevirtual #27                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.getChildren:()Ljava/util/Map;
       7: aload_1
       8: invokevirtual #61                 // Method org/apache/hadoop/fs/Path.toUri:()Ljava/net/URI;
      11: invokevirtual #62                 // Method java/net/URI.toString:()Ljava/lang/String;
      14: iconst_1
      15: invokevirtual #63                 // Method java/lang/String.substring:(I)Ljava/lang/String;
      18: invokeinterface #31,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      23: checkcast     #32                 // class org/apache/hadoop/fs/viewfs/InodeTree$INode
      26: astore_2
      27: aload_2
      28: ifnonnull     58
      31: new           #52                 // class java/io/FileNotFoundException
      34: dup
      35: new           #19                 // class java/lang/StringBuilder
      38: dup
      39: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
      42: ldc           #64                 // String viewFs internal mount table - missing entry:
      44: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      47: aload_1
      48: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
      51: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      54: invokespecial #54                 // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      57: athrow
      58: aload_2
      59: invokevirtual #65                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INode.isLink:()Z
      62: ifeq          254
      65: aload_2
      66: checkcast     #66                 // class org/apache/hadoop/fs/viewfs/InodeTree$INodeLink
      69: astore        4
      71: aload         4
      73: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
      76: checkcast     #35                 // class org/apache/hadoop/fs/AbstractFileSystem
      79: invokevirtual #45                 // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
      82: invokevirtual #67                 // Method java/net/URI.getPath:()Ljava/lang/String;
      85: astore        5
      87: aload         4
      89: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
      92: checkcast     #68                 // class org/apache/hadoop/fs/viewfs/ChRootedFs
      95: invokevirtual #69                 // Method org/apache/hadoop/fs/viewfs/ChRootedFs.getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      98: new           #36                 // class org/apache/hadoop/fs/Path
     101: dup
     102: aload         5
     104: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     107: invokevirtual #70                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
     110: astore        6
     112: new           #55                 // class org/apache/hadoop/fs/FileStatus
     115: dup
     116: aload         6
     118: invokevirtual #71                 // Method org/apache/hadoop/fs/FileStatus.getLen:()J
     121: iconst_0
     122: aload         6
     124: invokevirtual #72                 // Method org/apache/hadoop/fs/FileStatus.getReplication:()S
     127: aload         6
     129: invokevirtual #73                 // Method org/apache/hadoop/fs/FileStatus.getBlockSize:()J
     132: aload         6
     134: invokevirtual #74                 // Method org/apache/hadoop/fs/FileStatus.getModificationTime:()J
     137: aload         6
     139: invokevirtual #75                 // Method org/apache/hadoop/fs/FileStatus.getAccessTime:()J
     142: aload         6
     144: invokevirtual #76                 // Method org/apache/hadoop/fs/FileStatus.getPermission:()Lorg/apache/hadoop/fs/permission/FsPermission;
     147: aload         6
     149: invokevirtual #77                 // Method org/apache/hadoop/fs/FileStatus.getOwner:()Ljava/lang/String;
     152: aload         6
     154: invokevirtual #78                 // Method org/apache/hadoop/fs/FileStatus.getGroup:()Ljava/lang/String;
     157: aload         4
     159: invokevirtual #79                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetLink:()Lorg/apache/hadoop/fs/Path;
     162: new           #36                 // class org/apache/hadoop/fs/Path
     165: dup
     166: aload_2
     167: getfield      #33                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INode.fullPath:Ljava/lang/String;
     170: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     173: aload_0
     174: getfield      #8                  // Field myUri:Ljava/net/URI;
     177: aconst_null
     178: invokevirtual #59                 // Method org/apache/hadoop/fs/Path.makeQualified:(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
     181: invokespecial #80                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
     184: astore_3
     185: goto          251
     188: astore        5
     190: new           #55                 // class org/apache/hadoop/fs/FileStatus
     193: dup
     194: lconst_0
     195: iconst_0
     196: iconst_0
     197: lconst_0
     198: aload_0
     199: getfield      #6                  // Field creationTime:J
     202: aload_0
     203: getfield      #6                  // Field creationTime:J
     206: getstatic     #56                 // Field org/apache/hadoop/fs/viewfs/Constants.PERMISSION_555:Lorg/apache/hadoop/fs/permission/FsPermission;
     209: aload_0
     210: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     213: invokevirtual #57                 // Method org/apache/hadoop/security/UserGroupInformation.getShortUserName:()Ljava/lang/String;
     216: aload_0
     217: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     220: invokevirtual #58                 // Method org/apache/hadoop/security/UserGroupInformation.getPrimaryGroupName:()Ljava/lang/String;
     223: aload         4
     225: invokevirtual #79                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetLink:()Lorg/apache/hadoop/fs/Path;
     228: new           #36                 // class org/apache/hadoop/fs/Path
     231: dup
     232: aload_2
     233: getfield      #33                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INode.fullPath:Ljava/lang/String;
     236: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     239: aload_0
     240: getfield      #8                  // Field myUri:Ljava/net/URI;
     243: aconst_null
     244: invokevirtual #59                 // Method org/apache/hadoop/fs/Path.makeQualified:(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
     247: invokespecial #80                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
     250: astore_3
     251: goto          310
     254: new           #55                 // class org/apache/hadoop/fs/FileStatus
     257: dup
     258: lconst_0
     259: iconst_1
     260: iconst_0
     261: lconst_0
     262: aload_0
     263: getfield      #6                  // Field creationTime:J
     266: aload_0
     267: getfield      #6                  // Field creationTime:J
     270: getstatic     #56                 // Field org/apache/hadoop/fs/viewfs/Constants.PERMISSION_555:Lorg/apache/hadoop/fs/permission/FsPermission;
     273: aload_0
     274: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     277: invokevirtual #57                 // Method org/apache/hadoop/security/UserGroupInformation.getShortUserName:()Ljava/lang/String;
     280: aload_0
     281: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     284: invokevirtual #58                 // Method org/apache/hadoop/security/UserGroupInformation.getPrimaryGroupName:()Ljava/lang/String;
     287: new           #36                 // class org/apache/hadoop/fs/Path
     290: dup
     291: aload_2
     292: getfield      #33                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INode.fullPath:Ljava/lang/String;
     295: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     298: aload_0
     299: getfield      #8                  // Field myUri:Ljava/net/URI;
     302: aconst_null
     303: invokevirtual #59                 // Method org/apache/hadoop/fs/Path.makeQualified:(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
     306: invokespecial #60                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)V
     309: astore_3
     310: aload_3
     311: areturn
    Exception table:
       from    to  target type
          71   185   188   Class java/io/FileNotFoundException

  public org.apache.hadoop.fs.FsStatus getFsStatus();
    Code:
       0: new           #81                 // class org/apache/hadoop/fs/FsStatus
       3: dup
       4: lconst_0
       5: lconst_0
       6: lconst_0
       7: invokespecial #82                 // Method org/apache/hadoop/fs/FsStatus."<init>":(JJJ)V
      10: areturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults() throws java.io.IOException;
    Code:
       0: invokestatic  #83                 // Method org/apache/hadoop/fs/local/LocalConfigKeys.getServerDefaults:()Lorg/apache/hadoop/fs/FsServerDefaults;
       3: areturn

  public org.apache.hadoop.fs.FsServerDefaults getServerDefaults(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: invokestatic  #83                 // Method org/apache/hadoop/fs/local/LocalConfigKeys.getServerDefaults:()Lorg/apache/hadoop/fs/FsServerDefaults;
       3: areturn

  public int getUriDefaultPort();
    Code:
       0: iconst_m1
       1: ireturn

  public org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: aload_0
       5: invokespecial #84                 // Method listStatusForFallbackLink:()[Lorg/apache/hadoop/fs/FileStatus;
       8: astore_2
       9: new           #85                 // class java/util/HashSet
      12: dup
      13: invokespecial #86                 // Method java/util/HashSet."<init>":()V
      16: astore_3
      17: new           #85                 // class java/util/HashSet
      20: dup
      21: invokespecial #86                 // Method java/util/HashSet."<init>":()V
      24: astore        4
      26: iconst_0
      27: istore        5
      29: aload_0
      30: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      33: invokevirtual #27                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.getChildren:()Ljava/util/Map;
      36: invokeinterface #87,  1           // InterfaceMethod java/util/Map.entrySet:()Ljava/util/Set;
      41: invokeinterface #88,  1           // InterfaceMethod java/util/Set.iterator:()Ljava/util/Iterator;
      46: astore        6
      48: aload         6
      50: invokeinterface #89,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      55: ifeq          409
      58: aload         6
      60: invokeinterface #90,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      65: checkcast     #91                 // class java/util/Map$Entry
      68: astore        7
      70: aload         7
      72: invokeinterface #92,  1           // InterfaceMethod java/util/Map$Entry.getValue:()Ljava/lang/Object;
      77: checkcast     #32                 // class org/apache/hadoop/fs/viewfs/InodeTree$INode
      80: astore        8
      82: new           #36                 // class org/apache/hadoop/fs/Path
      85: dup
      86: aload         8
      88: getfield      #33                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INode.fullPath:Ljava/lang/String;
      91: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      94: aload_0
      95: getfield      #8                  // Field myUri:Ljava/net/URI;
      98: aconst_null
      99: invokevirtual #59                 // Method org/apache/hadoop/fs/Path.makeQualified:(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
     102: astore        9
     104: aload         8
     106: invokevirtual #65                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INode.isLink:()Z
     109: ifeq          360
     112: aload         8
     114: checkcast     #66                 // class org/apache/hadoop/fs/viewfs/InodeTree$INodeLink
     117: astore        10
     119: invokestatic  #93                 // Method org/apache/hadoop/fs/viewfs/ViewFs.access$000:()Z
     122: ifeq          178
     125: aload_3
     126: new           #55                 // class org/apache/hadoop/fs/FileStatus
     129: dup
     130: lconst_0
     131: iconst_0
     132: iconst_0
     133: lconst_0
     134: aload_0
     135: getfield      #6                  // Field creationTime:J
     138: aload_0
     139: getfield      #6                  // Field creationTime:J
     142: getstatic     #56                 // Field org/apache/hadoop/fs/viewfs/Constants.PERMISSION_555:Lorg/apache/hadoop/fs/permission/FsPermission;
     145: aload_0
     146: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     149: invokevirtual #57                 // Method org/apache/hadoop/security/UserGroupInformation.getShortUserName:()Ljava/lang/String;
     152: aload_0
     153: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     156: invokevirtual #58                 // Method org/apache/hadoop/security/UserGroupInformation.getPrimaryGroupName:()Ljava/lang/String;
     159: aload         10
     161: invokevirtual #79                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetLink:()Lorg/apache/hadoop/fs/Path;
     164: aload         9
     166: invokespecial #80                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
     169: invokeinterface #94,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     174: pop
     175: goto          48
     178: aload         10
     180: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
     183: checkcast     #35                 // class org/apache/hadoop/fs/AbstractFileSystem
     186: invokevirtual #45                 // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
     189: invokevirtual #67                 // Method java/net/URI.getPath:()Ljava/lang/String;
     192: astore        11
     194: ldc           #95                 // String
     196: aload         11
     198: invokevirtual #96                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     201: ifeq          208
     204: ldc           #97                 // String /
     206: astore        11
     208: aload         10
     210: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
     213: checkcast     #68                 // class org/apache/hadoop/fs/viewfs/ChRootedFs
     216: invokevirtual #69                 // Method org/apache/hadoop/fs/viewfs/ChRootedFs.getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
     219: new           #36                 // class org/apache/hadoop/fs/Path
     222: dup
     223: aload         11
     225: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     228: invokevirtual #70                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
     231: astore        12
     233: aload_3
     234: new           #55                 // class org/apache/hadoop/fs/FileStatus
     237: dup
     238: aload         12
     240: invokevirtual #71                 // Method org/apache/hadoop/fs/FileStatus.getLen:()J
     243: aload         12
     245: invokevirtual #98                 // Method org/apache/hadoop/fs/FileStatus.isDirectory:()Z
     248: aload         12
     250: invokevirtual #72                 // Method org/apache/hadoop/fs/FileStatus.getReplication:()S
     253: aload         12
     255: invokevirtual #73                 // Method org/apache/hadoop/fs/FileStatus.getBlockSize:()J
     258: aload         12
     260: invokevirtual #74                 // Method org/apache/hadoop/fs/FileStatus.getModificationTime:()J
     263: aload         12
     265: invokevirtual #75                 // Method org/apache/hadoop/fs/FileStatus.getAccessTime:()J
     268: aload         12
     270: invokevirtual #76                 // Method org/apache/hadoop/fs/FileStatus.getPermission:()Lorg/apache/hadoop/fs/permission/FsPermission;
     273: aload         12
     275: invokevirtual #77                 // Method org/apache/hadoop/fs/FileStatus.getOwner:()Ljava/lang/String;
     278: aload         12
     280: invokevirtual #78                 // Method org/apache/hadoop/fs/FileStatus.getGroup:()Ljava/lang/String;
     283: aconst_null
     284: aload         9
     286: invokespecial #80                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;)V
     289: invokeinterface #94,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     294: pop
     295: goto          357
     298: astore        12
     300: getstatic     #46                 // Field org/apache/hadoop/fs/viewfs/ViewFs.LOG:Lorg/slf4j/Logger;
     303: new           #19                 // class java/lang/StringBuilder
     306: dup
     307: invokespecial #20                 // Method java/lang/StringBuilder."<init>":()V
     310: ldc           #99                 // String Cannot get one of the children\'s(
     312: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     315: aload         9
     317: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     320: ldc           #100                // String )  target path(
     322: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     325: aload         10
     327: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
     330: checkcast     #35                 // class org/apache/hadoop/fs/AbstractFileSystem
     333: invokevirtual #45                 // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
     336: invokevirtual #43                 // Method java/lang/StringBuilder.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;
     339: ldc           #101                // String ) file status.
     341: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     344: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     347: aload         12
     349: invokeinterface #102,  3          // InterfaceMethod org/slf4j/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
     354: aload         12
     356: athrow
     357: goto          406
     360: aload         4
     362: new           #55                 // class org/apache/hadoop/fs/FileStatus
     365: dup
     366: lconst_0
     367: iconst_1
     368: iconst_0
     369: lconst_0
     370: aload_0
     371: getfield      #6                  // Field creationTime:J
     374: aload_0
     375: getfield      #6                  // Field creationTime:J
     378: getstatic     #56                 // Field org/apache/hadoop/fs/viewfs/Constants.PERMISSION_555:Lorg/apache/hadoop/fs/permission/FsPermission;
     381: aload_0
     382: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     385: invokevirtual #57                 // Method org/apache/hadoop/security/UserGroupInformation.getShortUserName:()Ljava/lang/String;
     388: aload_0
     389: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
     392: invokevirtual #58                 // Method org/apache/hadoop/security/UserGroupInformation.getPrimaryGroupName:()Ljava/lang/String;
     395: aload         9
     397: invokespecial #60                 // Method org/apache/hadoop/fs/FileStatus."<init>":(JZIJJJLorg/apache/hadoop/fs/permission/FsPermission;Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)V
     400: invokeinterface #94,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
     405: pop
     406: goto          48
     409: aload         4
     411: aload         4
     413: invokeinterface #103,  1          // InterfaceMethod java/util/Set.size:()I
     418: anewarray     #55                 // class org/apache/hadoop/fs/FileStatus
     421: invokeinterface #104,  2          // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     426: checkcast     #105                // class "[Lorg/apache/hadoop/fs/FileStatus;"
     429: astore        6
     431: aload_2
     432: arraylength
     433: ifle          445
     436: aload_0
     437: aload_2
     438: aload         6
     440: invokespecial #106                // Method merge:([Lorg/apache/hadoop/fs/FileStatus;[Lorg/apache/hadoop/fs/FileStatus;)[Lorg/apache/hadoop/fs/FileStatus;
     443: astore        6
     445: aload_0
     446: aload_3
     447: aload_3
     448: invokeinterface #103,  1          // InterfaceMethod java/util/Set.size:()I
     453: anewarray     #55                 // class org/apache/hadoop/fs/FileStatus
     456: invokeinterface #104,  2          // InterfaceMethod java/util/Set.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     461: checkcast     #105                // class "[Lorg/apache/hadoop/fs/FileStatus;"
     464: aload         6
     466: invokespecial #106                // Method merge:([Lorg/apache/hadoop/fs/FileStatus;[Lorg/apache/hadoop/fs/FileStatus;)[Lorg/apache/hadoop/fs/FileStatus;
     469: areturn
    Exception table:
       from    to  target type
         208   295   298   Class java/io/FileNotFoundException

  private org.apache.hadoop.fs.FileStatus[] merge(org.apache.hadoop.fs.FileStatus[], org.apache.hadoop.fs.FileStatus[]);
    Code:
       0: new           #107                // class java/util/ArrayList
       3: dup
       4: invokespecial #108                // Method java/util/ArrayList."<init>":()V
       7: astore_3
       8: new           #85                 // class java/util/HashSet
      11: dup
      12: invokespecial #86                 // Method java/util/HashSet."<init>":()V
      15: astore        4
      17: aload_1
      18: astore        5
      20: aload         5
      22: arraylength
      23: istore        6
      25: iconst_0
      26: istore        7
      28: iload         7
      30: iload         6
      32: if_icmpge     71
      35: aload         5
      37: iload         7
      39: aaload
      40: astore        8
      42: aload_3
      43: aload         8
      45: invokevirtual #109                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      48: pop
      49: aload         4
      51: aload         8
      53: invokevirtual #110                // Method org/apache/hadoop/fs/FileStatus.getPath:()Lorg/apache/hadoop/fs/Path;
      56: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
      59: invokeinterface #94,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      64: pop
      65: iinc          7, 1
      68: goto          28
      71: aload_2
      72: astore        5
      74: aload         5
      76: arraylength
      77: istore        6
      79: iconst_0
      80: istore        7
      82: iload         7
      84: iload         6
      86: if_icmpge     127
      89: aload         5
      91: iload         7
      93: aaload
      94: astore        8
      96: aload         4
      98: aload         8
     100: invokevirtual #110                // Method org/apache/hadoop/fs/FileStatus.getPath:()Lorg/apache/hadoop/fs/Path;
     103: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
     106: invokeinterface #111,  2          // InterfaceMethod java/util/Set.contains:(Ljava/lang/Object;)Z
     111: ifne          121
     114: aload_3
     115: aload         8
     117: invokevirtual #109                // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
     120: pop
     121: iinc          7, 1
     124: goto          82
     127: aload_3
     128: aload_3
     129: invokevirtual #112                // Method java/util/ArrayList.size:()I
     132: anewarray     #55                 // class org/apache/hadoop/fs/FileStatus
     135: invokevirtual #113                // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
     138: checkcast     #105                // class "[Lorg/apache/hadoop/fs/FileStatus;"
     141: areturn

  private org.apache.hadoop.fs.FileStatus[] listStatusForFallbackLink() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
       4: invokevirtual #26                 // Method org/apache/hadoop/fs/viewfs/InodeTree.getRootFallbackLink:()Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
       7: ifnull        148
      10: aload_0
      11: getfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
      14: invokevirtual #26                 // Method org/apache/hadoop/fs/viewfs/InodeTree.getRootFallbackLink:()Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
      17: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
      20: checkcast     #35                 // class org/apache/hadoop/fs/AbstractFileSystem
      23: astore_1
      24: new           #36                 // class org/apache/hadoop/fs/Path
      27: dup
      28: aload_0
      29: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      32: getfield      #23                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.fullPath:Ljava/lang/String;
      35: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      38: invokestatic  #38                 // Method org/apache/hadoop/fs/Path.getPathWithoutSchemeAndAuthority:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      41: astore_2
      42: aload_0
      43: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      46: invokevirtual #114                // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.isRoot:()Z
      49: ifne          70
      52: aload_1
      53: aload_0
      54: getfield      #10                 // Field conf:Lorg/apache/hadoop/conf/Configuration;
      57: invokestatic  #115                // Method org/apache/hadoop/fs/FileContext.getFileContext:(Lorg/apache/hadoop/fs/AbstractFileSystem;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileContext;
      60: invokevirtual #116                // Method org/apache/hadoop/fs/FileContext.util:()Lorg/apache/hadoop/fs/FileContext$Util;
      63: aload_2
      64: invokevirtual #117                // Method org/apache/hadoop/fs/FileContext$Util.exists:(Lorg/apache/hadoop/fs/Path;)Z
      67: ifeq          148
      70: aload_1
      71: aload_2
      72: invokevirtual #118                // Method org/apache/hadoop/fs/AbstractFileSystem.listStatus:(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
      75: astore_3
      76: aload_3
      77: astore        4
      79: aload         4
      81: arraylength
      82: istore        5
      84: iconst_0
      85: istore        6
      87: iload         6
      89: iload         5
      91: if_icmpge     146
      94: aload         4
      96: iload         6
      98: aaload
      99: astore        7
     101: new           #36                 // class org/apache/hadoop/fs/Path
     104: dup
     105: aload_2
     106: aload         7
     108: invokevirtual #110                // Method org/apache/hadoop/fs/FileStatus.getPath:()Lorg/apache/hadoop/fs/Path;
     111: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
     114: invokespecial #39                 // Method org/apache/hadoop/fs/Path."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
     117: astore        8
     119: aload         7
     121: new           #36                 // class org/apache/hadoop/fs/Path
     124: dup
     125: aload_0
     126: getfield      #8                  // Field myUri:Ljava/net/URI;
     129: invokevirtual #62                 // Method java/net/URI.toString:()Ljava/lang/String;
     132: aload         8
     134: invokespecial #119                // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)V
     137: invokevirtual #120                // Method org/apache/hadoop/fs/FileStatus.setPath:(Lorg/apache/hadoop/fs/Path;)V
     140: iinc          6, 1
     143: goto          87
     146: aload_3
     147: areturn
     148: iconst_0
     149: anewarray     #55                 // class org/apache/hadoop/fs/FileStatus
     152: areturn

  public void mkdir(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
       4: invokevirtual #114                // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.isRoot:()Z
       7: ifeq          24
      10: aload_1
      11: ifnonnull     24
      14: new           #18                 // class org/apache/hadoop/fs/FileAlreadyExistsException
      17: dup
      18: ldc           #121                // String / already exits
      20: invokespecial #25                 // Method org/apache/hadoop/fs/FileAlreadyExistsException."<init>":(Ljava/lang/String;)V
      23: athrow
      24: aload_0
      25: getfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
      28: invokevirtual #26                 // Method org/apache/hadoop/fs/viewfs/InodeTree.getRootFallbackLink:()Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
      31: ifnull        168
      34: aload_0
      35: getfield      #9                  // Field fsState:Lorg/apache/hadoop/fs/viewfs/InodeTree;
      38: invokevirtual #26                 // Method org/apache/hadoop/fs/viewfs/InodeTree.getRootFallbackLink:()Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeLink;
      41: invokevirtual #34                 // Method org/apache/hadoop/fs/viewfs/InodeTree$INodeLink.getTargetFileSystem:()Ljava/lang/Object;
      44: checkcast     #35                 // class org/apache/hadoop/fs/AbstractFileSystem
      47: astore        4
      49: new           #36                 // class org/apache/hadoop/fs/Path
      52: dup
      53: aload_0
      54: getfield      #5                  // Field theInternalDir:Lorg/apache/hadoop/fs/viewfs/InodeTree$INodeDir;
      57: getfield      #23                 // Field org/apache/hadoop/fs/viewfs/InodeTree$INodeDir.fullPath:Ljava/lang/String;
      60: invokespecial #37                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      63: invokestatic  #38                 // Method org/apache/hadoop/fs/Path.getPathWithoutSchemeAndAuthority:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      66: astore        5
      68: getstatic     #11                 // Field org/apache/hadoop/fs/viewfs/InodeTree.SlashPath:Lorg/apache/hadoop/fs/Path;
      71: aload_1
      72: invokevirtual #17                 // Method org/apache/hadoop/fs/Path.equals:(Ljava/lang/Object;)Z
      75: ifeq          87
      78: getstatic     #11                 // Field org/apache/hadoop/fs/viewfs/InodeTree.SlashPath:Lorg/apache/hadoop/fs/Path;
      81: invokevirtual #122                // Method org/apache/hadoop/fs/Path.toString:()Ljava/lang/String;
      84: goto          91
      87: aload_1
      88: invokevirtual #28                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
      91: astore        6
      93: new           #36                 // class org/apache/hadoop/fs/Path
      96: dup
      97: aload         5
      99: aload         6
     101: invokespecial #39                 // Method org/apache/hadoop/fs/Path."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
     104: astore        7
     106: aload         4
     108: aload         7
     110: aload_2
     111: iconst_1
     112: invokevirtual #123                // Method org/apache/hadoop/fs/AbstractFileSystem.mkdir:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/permission/FsPermission;Z)V
     115: return
     116: astore        8
     118: getstatic     #46                 // Field org/apache/hadoop/fs/viewfs/ViewFs.LOG:Lorg/slf4j/Logger;
     121: invokeinterface #124,  1          // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
     126: ifeq          165
     129: new           #19                 // class java/lang/StringBuilder
     132: dup
     133: ldc           #125                // String Failed to create {}
     135: invokespecial #42                 // Method java/lang/StringBuilder."<init>":(Ljava/lang/String;)V
     138: ldc           #126                // String  at fallback fs : {}
     140: invokevirtual #22                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     143: astore        9
     145: getstatic     #46                 // Field org/apache/hadoop/fs/viewfs/ViewFs.LOG:Lorg/slf4j/Logger;
     148: aload         9
     150: invokevirtual #24                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     153: aload         7
     155: aload         4
     157: invokevirtual #45                 // Method org/apache/hadoop/fs/AbstractFileSystem.getUri:()Ljava/net/URI;
     160: invokeinterface #127,  4          // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     165: aload         8
     167: athrow
     168: ldc           #128                // String mkdir
     170: aload_1
     171: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
     174: athrow
    Exception table:
       from    to  target type
         106   115   116   Class java/io/IOException

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path, int) throws java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: new           #52                 // class java/io/FileNotFoundException
       7: dup
       8: ldc           #53                 // String Path points to dir not a file
      10: invokespecial #54                 // Method java/io/FileNotFoundException."<init>":(Ljava/lang/String;)V
      13: athrow

  public boolean truncate(org.apache.hadoop.fs.Path, long) throws java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #129                // String truncate
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void renameInternal(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: aload_2
       5: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       8: ldc           #130                // String rename
      10: aload_1
      11: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      14: athrow

  public boolean supportsSymlinks();
    Code:
       0: iconst_1
       1: ireturn

  public void createSymlink(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean) throws org.apache.hadoop.security.AccessControlException;
    Code:
       0: ldc           #131                // String createSymlink
       2: aload_2
       3: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
       6: athrow

  public org.apache.hadoop.fs.Path getLinkTarget(org.apache.hadoop.fs.Path) throws java.io.FileNotFoundException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #132                // Method getFileLinkStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
       5: invokevirtual #133                // Method org/apache/hadoop/fs/FileStatus.getSymlink:()Lorg/apache/hadoop/fs/Path;
       8: areturn

  public void setOwner(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #134                // String setOwner
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void setPermission(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.permission.FsPermission) throws org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #135                // String setPermission
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public boolean setReplication(org.apache.hadoop.fs.Path, short) throws org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #136                // String setReplication
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void setTimes(org.apache.hadoop.fs.Path, long, long) throws org.apache.hadoop.security.AccessControlException, java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #137                // String setTimes
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void setVerifyChecksum(boolean) throws org.apache.hadoop.security.AccessControlException;
    Code:
       0: ldc           #138                // String setVerifyChecksum
       2: ldc           #95                 // String
       4: invokestatic  #139                // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/hadoop/security/AccessControlException;
       7: athrow

  public void modifyAclEntries(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #140                // String modifyAclEntries
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void removeAclEntries(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #141                // String removeAclEntries
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void removeDefaultAcl(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #142                // String removeDefaultAcl
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void removeAcl(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #143                // String removeAcl
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void setAcl(org.apache.hadoop.fs.Path, java.util.List<org.apache.hadoop.fs.permission.AclEntry>) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #144                // String setAcl
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public org.apache.hadoop.fs.permission.AclStatus getAclStatus(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: new           #145                // class org/apache/hadoop/fs/permission/AclStatus$Builder
       7: dup
       8: invokespecial #146                // Method org/apache/hadoop/fs/permission/AclStatus$Builder."<init>":()V
      11: aload_0
      12: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
      15: invokevirtual #57                 // Method org/apache/hadoop/security/UserGroupInformation.getShortUserName:()Ljava/lang/String;
      18: invokevirtual #147                // Method org/apache/hadoop/fs/permission/AclStatus$Builder.owner:(Ljava/lang/String;)Lorg/apache/hadoop/fs/permission/AclStatus$Builder;
      21: aload_0
      22: getfield      #7                  // Field ugi:Lorg/apache/hadoop/security/UserGroupInformation;
      25: invokevirtual #58                 // Method org/apache/hadoop/security/UserGroupInformation.getPrimaryGroupName:()Ljava/lang/String;
      28: invokevirtual #148                // Method org/apache/hadoop/fs/permission/AclStatus$Builder.group:(Ljava/lang/String;)Lorg/apache/hadoop/fs/permission/AclStatus$Builder;
      31: getstatic     #56                 // Field org/apache/hadoop/fs/viewfs/Constants.PERMISSION_555:Lorg/apache/hadoop/fs/permission/FsPermission;
      34: invokestatic  #149                // Method org/apache/hadoop/fs/permission/AclUtil.getMinimalAcl:(Lorg/apache/hadoop/fs/permission/FsPermission;)Ljava/util/List;
      37: invokevirtual #150                // Method org/apache/hadoop/fs/permission/AclStatus$Builder.addEntries:(Ljava/lang/Iterable;)Lorg/apache/hadoop/fs/permission/AclStatus$Builder;
      40: iconst_0
      41: invokevirtual #151                // Method org/apache/hadoop/fs/permission/AclStatus$Builder.stickyBit:(Z)Lorg/apache/hadoop/fs/permission/AclStatus$Builder;
      44: invokevirtual #152                // Method org/apache/hadoop/fs/permission/AclStatus$Builder.build:()Lorg/apache/hadoop/fs/permission/AclStatus;
      47: areturn

  public void setXAttr(org.apache.hadoop.fs.Path, java.lang.String, byte[], java.util.EnumSet<org.apache.hadoop.fs.XAttrSetFlag>) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #153                // String setXAttr
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public byte[] getXAttr(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: new           #154                // class org/apache/hadoop/fs/viewfs/NotInMountpointException
       3: dup
       4: aload_1
       5: ldc           #155                // String getXAttr
       7: invokespecial #156                // Method org/apache/hadoop/fs/viewfs/NotInMountpointException."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      10: athrow

  public java.util.Map<java.lang.String, byte[]> getXAttrs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: new           #154                // class org/apache/hadoop/fs/viewfs/NotInMountpointException
       3: dup
       4: aload_1
       5: ldc           #157                // String getXAttrs
       7: invokespecial #156                // Method org/apache/hadoop/fs/viewfs/NotInMountpointException."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      10: athrow

  public java.util.Map<java.lang.String, byte[]> getXAttrs(org.apache.hadoop.fs.Path, java.util.List<java.lang.String>) throws java.io.IOException;
    Code:
       0: new           #154                // class org/apache/hadoop/fs/viewfs/NotInMountpointException
       3: dup
       4: aload_1
       5: ldc           #157                // String getXAttrs
       7: invokespecial #156                // Method org/apache/hadoop/fs/viewfs/NotInMountpointException."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      10: athrow

  public java.util.List<java.lang.String> listXAttrs(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: new           #154                // class org/apache/hadoop/fs/viewfs/NotInMountpointException
       3: dup
       4: aload_1
       5: ldc           #158                // String listXAttrs
       7: invokespecial #156                // Method org/apache/hadoop/fs/viewfs/NotInMountpointException."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      10: athrow

  public void removeXAttr(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #159                // String removeXAttr
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public org.apache.hadoop.fs.Path createSnapshot(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #160                // String createSnapshot
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void renameSnapshot(org.apache.hadoop.fs.Path, java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #161                // String renameSnapshot
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void deleteSnapshot(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokestatic  #50                 // Method checkPathIsSlash:(Lorg/apache/hadoop/fs/Path;)V
       4: ldc           #162                // String deleteSnapshot
       6: aload_1
       7: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
      10: athrow

  public void satisfyStoragePolicy(org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: ldc           #163                // String satisfyStoragePolicy
       2: aload_1
       3: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
       6: athrow

  public void setStoragePolicy(org.apache.hadoop.fs.Path, java.lang.String) throws java.io.IOException;
    Code:
       0: ldc           #164                // String setStoragePolicy
       2: aload_1
       3: invokestatic  #49                 // Method org/apache/hadoop/fs/viewfs/ViewFs.readOnlyMountTable:(Ljava/lang/String;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/security/AccessControlException;
       6: athrow
}
