Compiled from "RetryPolicies.java"
public class org.apache.hadoop.io.retry.RetryPolicies {
  public static final org.slf4j.Logger LOG;

  public static final org.apache.hadoop.io.retry.RetryPolicy TRY_ONCE_THEN_FAIL;

  public static final org.apache.hadoop.io.retry.RetryPolicy RETRY_FOREVER;

  public org.apache.hadoop.io.retry.RetryPolicies();
    Code:
       0: aload_0
       1: invokespecial #6                  // Method java/lang/Object."<init>":()V
       4: return

  public static final org.apache.hadoop.io.retry.RetryPolicy retryForeverWithFixedSleep(long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #7                  // class org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumCountWithFixedSleep
       3: dup
       4: ldc           #9                  // int 2147483647
       6: lload_0
       7: aload_2
       8: invokespecial #10                 // Method org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumCountWithFixedSleep."<init>":(IJLjava/util/concurrent/TimeUnit;)V
      11: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy retryUpToMaximumCountWithFixedSleep(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #7                  // class org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumCountWithFixedSleep
       3: dup
       4: iload_0
       5: lload_1
       6: aload_3
       7: invokespecial #10                 // Method org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumCountWithFixedSleep."<init>":(IJLjava/util/concurrent/TimeUnit;)V
      10: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy retryUpToMaximumTimeWithFixedSleep(long, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #11                 // class org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumTimeWithFixedSleep
       3: dup
       4: lload_0
       5: lload_2
       6: aload         4
       8: invokespecial #12                 // Method org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumTimeWithFixedSleep."<init>":(JJLjava/util/concurrent/TimeUnit;)V
      11: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy retryUpToMaximumCountWithProportionalSleep(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #13                 // class org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumCountWithProportionalSleep
       3: dup
       4: iload_0
       5: lload_1
       6: aload_3
       7: invokespecial #14                 // Method org/apache/hadoop/io/retry/RetryPolicies$RetryUpToMaximumCountWithProportionalSleep."<init>":(IJLjava/util/concurrent/TimeUnit;)V
      10: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy exponentialBackoffRetry(int, long, java.util.concurrent.TimeUnit);
    Code:
       0: new           #15                 // class org/apache/hadoop/io/retry/RetryPolicies$ExponentialBackoffRetry
       3: dup
       4: iload_0
       5: lload_1
       6: aload_3
       7: invokespecial #16                 // Method org/apache/hadoop/io/retry/RetryPolicies$ExponentialBackoffRetry."<init>":(IJLjava/util/concurrent/TimeUnit;)V
      10: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy retryByException(org.apache.hadoop.io.retry.RetryPolicy, java.util.Map<java.lang.Class<? extends java.lang.Exception>, org.apache.hadoop.io.retry.RetryPolicy>);
    Code:
       0: new           #17                 // class org/apache/hadoop/io/retry/RetryPolicies$ExceptionDependentRetry
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #18                 // Method org/apache/hadoop/io/retry/RetryPolicies$ExceptionDependentRetry."<init>":(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V
       9: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy retryByRemoteException(org.apache.hadoop.io.retry.RetryPolicy, java.util.Map<java.lang.Class<? extends java.lang.Exception>, org.apache.hadoop.io.retry.RetryPolicy>);
    Code:
       0: new           #19                 // class org/apache/hadoop/io/retry/RetryPolicies$RemoteExceptionDependentRetry
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #20                 // Method org/apache/hadoop/io/retry/RetryPolicies$RemoteExceptionDependentRetry."<init>":(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V
       9: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy retryOtherThanRemoteException(org.apache.hadoop.io.retry.RetryPolicy, java.util.Map<java.lang.Class<? extends java.lang.Exception>, org.apache.hadoop.io.retry.RetryPolicy>);
    Code:
       0: new           #21                 // class org/apache/hadoop/io/retry/RetryPolicies$OtherThanRemoteExceptionDependentRetry
       3: dup
       4: aload_0
       5: aload_1
       6: invokespecial #22                 // Method org/apache/hadoop/io/retry/RetryPolicies$OtherThanRemoteExceptionDependentRetry."<init>":(Lorg/apache/hadoop/io/retry/RetryPolicy;Ljava/util/Map;)V
       9: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy failoverOnNetworkException(int);
    Code:
       0: getstatic     #23                 // Field TRY_ONCE_THEN_FAIL:Lorg/apache/hadoop/io/retry/RetryPolicy;
       3: iload_0
       4: invokestatic  #24                 // Method failoverOnNetworkException:(Lorg/apache/hadoop/io/retry/RetryPolicy;I)Lorg/apache/hadoop/io/retry/RetryPolicy;
       7: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy, int);
    Code:
       0: aload_0
       1: iload_1
       2: lconst_0
       3: lconst_0
       4: invokestatic  #25                 // Method failoverOnNetworkException:(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)Lorg/apache/hadoop/io/retry/RetryPolicy;
       7: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy, int, long, long);
    Code:
       0: new           #26                 // class org/apache/hadoop/io/retry/RetryPolicies$FailoverOnNetworkExceptionRetry
       3: dup
       4: aload_0
       5: iload_1
       6: lload_2
       7: lload         4
       9: invokespecial #27                 // Method org/apache/hadoop/io/retry/RetryPolicies$FailoverOnNetworkExceptionRetry."<init>":(Lorg/apache/hadoop/io/retry/RetryPolicy;IJJ)V
      12: areturn

  public static final org.apache.hadoop.io.retry.RetryPolicy failoverOnNetworkException(org.apache.hadoop.io.retry.RetryPolicy, int, int, long, long);
    Code:
       0: new           #26                 // class org/apache/hadoop/io/retry/RetryPolicies$FailoverOnNetworkExceptionRetry
       3: dup
       4: aload_0
       5: iload_1
       6: iload_2
       7: lload_3
       8: lload         5
      10: invokespecial #28                 // Method org/apache/hadoop/io/retry/RetryPolicies$FailoverOnNetworkExceptionRetry."<init>":(Lorg/apache/hadoop/io/retry/RetryPolicy;IIJJ)V
      13: areturn

  private static long calculateExponentialTime(long, int, long);
    Code:
       0: lload_0
       1: lconst_1
       2: iload_2
       3: lshl
       4: lmul
       5: lload_3
       6: invokestatic  #29                 // Method java/lang/Math.min:(JJ)J
       9: lstore        5
      11: lload         5
      13: l2d
      14: invokestatic  #30                 // Method java/util/concurrent/ThreadLocalRandom.current:()Ljava/util/concurrent/ThreadLocalRandom;
      17: invokevirtual #31                 // Method java/util/concurrent/ThreadLocalRandom.nextDouble:()D
      20: ldc2_w        #32                 // double 0.5d
      23: dadd
      24: dmul
      25: d2l
      26: lreturn

  private static long calculateExponentialTime(long, int);
    Code:
       0: lload_0
       1: iload_2
       2: ldc2_w        #35                 // long 9223372036854775807l
       5: invokestatic  #4                  // Method calculateExponentialTime:(JIJ)J
       8: lreturn

  private static boolean shouldFailoverOnException(java.lang.Exception);
    Code:
       0: aload_0
       1: instanceof    #37                 // class org/apache/hadoop/ipc/RemoteException
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: checkcast     #37                 // class org/apache/hadoop/ipc/RemoteException
      13: iconst_2
      14: anewarray     #38                 // class java/lang/Class
      17: dup
      18: iconst_0
      19: ldc           #39                 // class org/apache/hadoop/ipc/StandbyException
      21: aastore
      22: dup
      23: iconst_1
      24: ldc           #40                 // class org/apache/hadoop/ipc/ObserverRetryOnActiveException
      26: aastore
      27: invokevirtual #41                 // Method org/apache/hadoop/ipc/RemoteException.unwrapRemoteException:([Ljava/lang/Class;)Ljava/io/IOException;
      30: astore_1
      31: aload_1
      32: instanceof    #39                 // class org/apache/hadoop/ipc/StandbyException
      35: ireturn

  private static boolean isSaslFailure(java.lang.Exception);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: instanceof    #42                 // class javax/security/sasl/SaslException
       6: ifeq          11
       9: iconst_1
      10: ireturn
      11: aload_1
      12: invokevirtual #43                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      15: astore_1
      16: aload_1
      17: ifnonnull     2
      20: iconst_0
      21: ireturn

  static org.apache.hadoop.ipc.RetriableException getWrappedRetriableException(java.lang.Exception);
    Code:
       0: aload_0
       1: instanceof    #37                 // class org/apache/hadoop/ipc/RemoteException
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_0
      10: checkcast     #37                 // class org/apache/hadoop/ipc/RemoteException
      13: iconst_1
      14: anewarray     #38                 // class java/lang/Class
      17: dup
      18: iconst_0
      19: ldc           #44                 // class org/apache/hadoop/ipc/RetriableException
      21: aastore
      22: invokevirtual #41                 // Method org/apache/hadoop/ipc/RemoteException.unwrapRemoteException:([Ljava/lang/Class;)Ljava/io/IOException;
      25: astore_1
      26: aload_1
      27: instanceof    #44                 // class org/apache/hadoop/ipc/RetriableException
      30: ifeq          40
      33: aload_1
      34: checkcast     #44                 // class org/apache/hadoop/ipc/RetriableException
      37: goto          41
      40: aconst_null
      41: areturn

  private static boolean hasWrappedAccessControlException(java.lang.Exception);
    Code:
       0: aload_0
       1: astore_1
       2: aload_1
       3: instanceof    #45                 // class org/apache/hadoop/security/AccessControlException
       6: ifne          24
       9: aload_1
      10: invokevirtual #43                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      13: ifnull        24
      16: aload_1
      17: invokevirtual #43                 // Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
      20: astore_1
      21: goto          2
      24: aload_1
      25: instanceof    #45                 // class org/apache/hadoop/security/AccessControlException
      28: ireturn

  static long access$000(long, int);
    Code:
       0: lload_0
       1: iload_2
       2: invokestatic  #5                  // Method calculateExponentialTime:(JI)J
       5: lreturn

  static long access$100(long, int, long);
    Code:
       0: lload_0
       1: iload_2
       2: lload_3
       3: invokestatic  #4                  // Method calculateExponentialTime:(JIJ)J
       6: lreturn

  static boolean access$200(java.lang.Exception);
    Code:
       0: aload_0
       1: invokestatic  #3                  // Method isSaslFailure:(Ljava/lang/Exception;)Z
       4: ireturn

  static boolean access$300(java.lang.Exception);
    Code:
       0: aload_0
       1: invokestatic  #2                  // Method shouldFailoverOnException:(Ljava/lang/Exception;)Z
       4: ireturn

  static boolean access$400(java.lang.Exception);
    Code:
       0: aload_0
       1: invokestatic  #1                  // Method hasWrappedAccessControlException:(Ljava/lang/Exception;)Z
       4: ireturn

  static {};
    Code:
       0: ldc           #46                 // class org/apache/hadoop/io/retry/RetryPolicies
       2: invokestatic  #47                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #48                 // Field LOG:Lorg/slf4j/Logger;
       8: new           #49                 // class org/apache/hadoop/io/retry/RetryPolicies$TryOnceThenFail
      11: dup
      12: invokespecial #50                 // Method org/apache/hadoop/io/retry/RetryPolicies$TryOnceThenFail."<init>":()V
      15: putstatic     #23                 // Field TRY_ONCE_THEN_FAIL:Lorg/apache/hadoop/io/retry/RetryPolicy;
      18: new           #51                 // class org/apache/hadoop/io/retry/RetryPolicies$RetryForever
      21: dup
      22: invokespecial #52                 // Method org/apache/hadoop/io/retry/RetryPolicies$RetryForever."<init>":()V
      25: putstatic     #53                 // Field RETRY_FOREVER:Lorg/apache/hadoop/io/retry/RetryPolicy;
      28: return
}
