Compiled from "KeyProviderCryptoExtension.java"
class org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension implements org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$CryptoExtension {
  private final org.apache.hadoop.crypto.key.KeyProvider keyProvider;

  private static final java.lang.ThreadLocal<java.security.SecureRandom> RANDOM;

  private org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension(org.apache.hadoop.crypto.key.KeyProvider);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       9: return

  public org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion generateEncryptedKey(java.lang.String) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_0
       1: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       4: aload_1
       5: invokevirtual #5                  // Method org/apache/hadoop/crypto/key/KeyProvider.getCurrentKey:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
       8: astore_2
       9: aload_2
      10: ldc           #6                  // String No KeyVersion exists for key \'%s\'
      12: aload_1
      13: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      16: pop
      17: aload_0
      18: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
      21: invokevirtual #8                  // Method org/apache/hadoop/crypto/key/KeyProvider.getConf:()Lorg/apache/hadoop/conf/Configuration;
      24: invokestatic  #9                  // Method org/apache/hadoop/crypto/CryptoCodec.getInstance:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/crypto/CryptoCodec;
      27: astore_3
      28: aload_2
      29: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
      32: arraylength
      33: newarray       byte
      35: astore        4
      37: aload_3
      38: aload         4
      40: invokevirtual #11                 // Method org/apache/hadoop/crypto/CryptoCodec.generateSecureRandom:([B)V
      43: aload_3
      44: invokevirtual #12                 // Method org/apache/hadoop/crypto/CryptoCodec.getCipherSuite:()Lorg/apache/hadoop/crypto/CipherSuite;
      47: invokevirtual #13                 // Method org/apache/hadoop/crypto/CipherSuite.getAlgorithmBlockSize:()I
      50: newarray       byte
      52: astore        5
      54: aload_3
      55: aload         5
      57: invokevirtual #11                 // Method org/apache/hadoop/crypto/CryptoCodec.generateSecureRandom:([B)V
      60: aload_3
      61: invokevirtual #14                 // Method org/apache/hadoop/crypto/CryptoCodec.createEncryptor:()Lorg/apache/hadoop/crypto/Encryptor;
      64: astore        6
      66: aload_0
      67: aload         6
      69: aload_2
      70: aload         4
      72: aload         5
      74: invokespecial #15                 // Method generateEncryptedKey:(Lorg/apache/hadoop/crypto/Encryptor;Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;[B[B)Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;
      77: astore        7
      79: aload_3
      80: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
      83: aload         7
      85: areturn
      86: astore        8
      88: aload_3
      89: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
      92: aload         8
      94: athrow
    Exception table:
       from    to  target type
          28    79    86   any
          86    88    86   any

  private org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion generateEncryptedKey(org.apache.hadoop.crypto.Encryptor, org.apache.hadoop.crypto.key.KeyProvider$KeyVersion, byte[], byte[]) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload         4
       2: invokestatic  #17                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.deriveIV:([B)[B
       5: astore        5
       7: aload_1
       8: aload_2
       9: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
      12: aload         5
      14: invokeinterface #18,  3           // InterfaceMethod org/apache/hadoop/crypto/Encryptor.init:([B[B)V
      19: aload_3
      20: arraylength
      21: istore        6
      23: iload         6
      25: invokestatic  #19                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      28: astore        7
      30: iload         6
      32: invokestatic  #19                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      35: astore        8
      37: aload         7
      39: aload_3
      40: invokevirtual #20                 // Method java/nio/ByteBuffer.put:([B)Ljava/nio/ByteBuffer;
      43: pop
      44: aload         7
      46: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      49: pop
      50: aload_1
      51: aload         7
      53: aload         8
      55: invokeinterface #22,  3           // InterfaceMethod org/apache/hadoop/crypto/Encryptor.encrypt:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
      60: aload         8
      62: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      65: pop
      66: iload         6
      68: newarray       byte
      70: astore        9
      72: aload         8
      74: aload         9
      76: invokevirtual #23                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
      79: pop
      80: new           #24                 // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion
      83: dup
      84: aload_2
      85: invokevirtual #25                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getName:()Ljava/lang/String;
      88: aload_2
      89: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
      92: aload         4
      94: new           #27                 // class org/apache/hadoop/crypto/key/KeyProvider$KeyVersion
      97: dup
      98: aload_2
      99: invokevirtual #25                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getName:()Ljava/lang/String;
     102: ldc           #28                 // String EEK
     104: aload         9
     106: invokespecial #29                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion."<init>":(Ljava/lang/String;Ljava/lang/String;[B)V
     109: invokespecial #30                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion."<init>":(Ljava/lang/String;Ljava/lang/String;[BLorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;)V
     112: areturn

  public org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion reencryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_1
       1: invokevirtual #31                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptionKeyName:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       9: aload_2
      10: invokevirtual #5                  // Method org/apache/hadoop/crypto/key/KeyProvider.getCurrentKey:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      13: astore_3
      14: aload_3
      15: ldc           #32                 // String KeyVersion name \'%s\' does not exist
      17: aload_2
      18: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      21: pop
      22: aload_1
      23: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      26: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
      29: ldc           #28                 // String EEK
      31: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      34: ldc           #35                 // String encryptedKey version name must be \'%s\', but found \'%s\'
      36: ldc           #28                 // String EEK
      38: aload_1
      39: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      42: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
      45: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      48: aload_1
      49: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      52: aload_3
      53: invokevirtual #37                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.equals:(Ljava/lang/Object;)Z
      56: ifeq          61
      59: aload_1
      60: areturn
      61: aload_0
      62: aload_1
      63: invokevirtual #38                 // Method decryptEncryptedKey:(Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      66: astore        4
      68: aload_0
      69: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
      72: invokevirtual #8                  // Method org/apache/hadoop/crypto/key/KeyProvider.getConf:()Lorg/apache/hadoop/conf/Configuration;
      75: invokestatic  #9                  // Method org/apache/hadoop/crypto/CryptoCodec.getInstance:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/crypto/CryptoCodec;
      78: astore        5
      80: aload         5
      82: invokevirtual #14                 // Method org/apache/hadoop/crypto/CryptoCodec.createEncryptor:()Lorg/apache/hadoop/crypto/Encryptor;
      85: astore        6
      87: aload_0
      88: aload         6
      90: aload_3
      91: aload         4
      93: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
      96: aload_1
      97: invokevirtual #39                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyIv:()[B
     100: invokespecial #15                 // Method generateEncryptedKey:(Lorg/apache/hadoop/crypto/Encryptor;Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;[B[B)Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;
     103: astore        7
     105: aload         5
     107: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     110: aload         7
     112: areturn
     113: astore        8
     115: aload         5
     117: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     120: aload         8
     122: athrow
    Exception table:
       from    to  target type
          80   105   113   any
         113   115   113   any

  public void reencryptEncryptedKeys(java.util.List<org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion>) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_1
       1: ldc           #40                 // String Input list is null
       3: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aconst_null
       8: astore_2
       9: aconst_null
      10: astore_3
      11: aconst_null
      12: astore        4
      14: aload_0
      15: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
      18: invokevirtual #8                  // Method org/apache/hadoop/crypto/key/KeyProvider.getConf:()Lorg/apache/hadoop/conf/Configuration;
      21: invokestatic  #9                  // Method org/apache/hadoop/crypto/CryptoCodec.getInstance:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/crypto/CryptoCodec;
      24: astore        5
      26: aconst_null
      27: astore        6
      29: aload         5
      31: invokevirtual #42                 // Method org/apache/hadoop/crypto/CryptoCodec.createDecryptor:()Lorg/apache/hadoop/crypto/Decryptor;
      34: astore_3
      35: aload         5
      37: invokevirtual #14                 // Method org/apache/hadoop/crypto/CryptoCodec.createEncryptor:()Lorg/apache/hadoop/crypto/Encryptor;
      40: astore        4
      42: aload_1
      43: invokeinterface #43,  1           // InterfaceMethod java/util/List.listIterator:()Ljava/util/ListIterator;
      48: astore        7
      50: aload         7
      52: invokeinterface #44,  1           // InterfaceMethod java/util/ListIterator.hasNext:()Z
      57: ifeq          258
      60: aload         7
      62: invokeinterface #45,  1           // InterfaceMethod java/util/ListIterator.next:()Ljava/lang/Object;
      67: checkcast     #24                 // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion
      70: astore        8
      72: aload         8
      74: ldc           #46                 // String EncryptedKeyVersion is null
      76: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      79: pop
      80: aload         8
      82: invokevirtual #31                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptionKeyName:()Ljava/lang/String;
      85: astore        9
      87: aload         9
      89: ldc           #47                 // String Key name is null
      91: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      94: pop
      95: aload         8
      97: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
     100: ldc           #46                 // String EncryptedKeyVersion is null
     102: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     105: pop
     106: aload         8
     108: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
     111: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
     114: ldc           #28                 // String EEK
     116: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     119: ldc           #35                 // String encryptedKey version name must be \'%s\', but found \'%s\'
     121: ldc           #28                 // String EEK
     123: aload         8
     125: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
     128: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
     131: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     134: aload_2
     135: ifnonnull     160
     138: aload_0
     139: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
     142: aload         9
     144: invokevirtual #5                  // Method org/apache/hadoop/crypto/key/KeyProvider.getCurrentKey:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
     147: astore_2
     148: aload_2
     149: ldc           #48                 // String Key name \'%s\' does not exist
     151: aload         9
     153: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
     156: pop
     157: goto          180
     160: aload_2
     161: invokevirtual #25                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getName:()Ljava/lang/String;
     164: aload         9
     166: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
     169: ldc           #49                 // String All keys must have the same key name. Expected \'%s\' but found \'%s\'
     171: aload_2
     172: invokevirtual #25                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getName:()Ljava/lang/String;
     175: aload         9
     177: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     180: aload         8
     182: invokevirtual #50                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptionKeyVersionName:()Ljava/lang/String;
     185: astore        10
     187: aload_0
     188: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
     191: aload         10
     193: invokevirtual #51                 // Method org/apache/hadoop/crypto/key/KeyProvider.getKeyVersion:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
     196: astore        11
     198: aload         11
     200: ldc           #32                 // String KeyVersion name \'%s\' does not exist
     202: aload         10
     204: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
     207: pop
     208: aload         11
     210: aload_2
     211: invokevirtual #37                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.equals:(Ljava/lang/Object;)Z
     214: ifeq          220
     217: goto          50
     220: aload_0
     221: aload_3
     222: aload         11
     224: aload         8
     226: invokespecial #52                 // Method decryptEncryptedKey:(Lorg/apache/hadoop/crypto/Decryptor;Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
     229: astore        12
     231: aload         7
     233: aload_0
     234: aload         4
     236: aload_2
     237: aload         12
     239: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
     242: aload         8
     244: invokevirtual #39                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyIv:()[B
     247: invokespecial #15                 // Method generateEncryptedKey:(Lorg/apache/hadoop/crypto/Encryptor;Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;[B[B)Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;
     250: invokeinterface #53,  2           // InterfaceMethod java/util/ListIterator.set:(Ljava/lang/Object;)V
     255: goto          50
     258: aload         5
     260: ifnull        345
     263: aload         6
     265: ifnull        288
     268: aload         5
     270: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     273: goto          345
     276: astore        7
     278: aload         6
     280: aload         7
     282: invokevirtual #55                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     285: goto          345
     288: aload         5
     290: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     293: goto          345
     296: astore        7
     298: aload         7
     300: astore        6
     302: aload         7
     304: athrow
     305: astore        13
     307: aload         5
     309: ifnull        342
     312: aload         6
     314: ifnull        337
     317: aload         5
     319: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     322: goto          342
     325: astore        14
     327: aload         6
     329: aload         14
     331: invokevirtual #55                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     334: goto          342
     337: aload         5
     339: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     342: aload         13
     344: athrow
     345: return
    Exception table:
       from    to  target type
         268   273   276   Class java/lang/Throwable
          29   258   296   Class java/lang/Throwable
          29   258   305   any
         317   322   325   Class java/lang/Throwable
         296   307   305   any

  private org.apache.hadoop.crypto.key.KeyProvider$KeyVersion decryptEncryptedKey(org.apache.hadoop.crypto.Decryptor, org.apache.hadoop.crypto.key.KeyProvider$KeyVersion, org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_3
       1: invokevirtual #39                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyIv:()[B
       4: invokestatic  #17                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.deriveIV:([B)[B
       7: astore        4
       9: aload_1
      10: aload_2
      11: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
      14: aload         4
      16: invokeinterface #56,  3           // InterfaceMethod org/apache/hadoop/crypto/Decryptor.init:([B[B)V
      21: aload_3
      22: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      25: astore        5
      27: aload         5
      29: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
      32: arraylength
      33: istore        6
      35: iload         6
      37: invokestatic  #19                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      40: astore        7
      42: iload         6
      44: invokestatic  #19                 // Method java/nio/ByteBuffer.allocateDirect:(I)Ljava/nio/ByteBuffer;
      47: astore        8
      49: aload         7
      51: aload         5
      53: invokevirtual #10                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getMaterial:()[B
      56: invokevirtual #20                 // Method java/nio/ByteBuffer.put:([B)Ljava/nio/ByteBuffer;
      59: pop
      60: aload         7
      62: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      65: pop
      66: aload_1
      67: aload         7
      69: aload         8
      71: invokeinterface #57,  3           // InterfaceMethod org/apache/hadoop/crypto/Decryptor.decrypt:(Ljava/nio/ByteBuffer;Ljava/nio/ByteBuffer;)V
      76: aload         8
      78: invokevirtual #21                 // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      81: pop
      82: iload         6
      84: newarray       byte
      86: astore        9
      88: aload         8
      90: aload         9
      92: invokevirtual #23                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
      95: pop
      96: new           #27                 // class org/apache/hadoop/crypto/key/KeyProvider$KeyVersion
      99: dup
     100: aload_2
     101: invokevirtual #25                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getName:()Ljava/lang/String;
     104: ldc           #58                 // String EK
     106: aload         9
     108: invokespecial #29                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion."<init>":(Ljava/lang/String;Ljava/lang/String;[B)V
     111: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion decryptEncryptedKey(org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$EncryptedKeyVersion) throws java.io.IOException, java.security.GeneralSecurityException;
    Code:
       0: aload_1
       1: invokevirtual #50                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptionKeyVersionName:()Ljava/lang/String;
       4: astore_2
       5: aload_0
       6: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
       9: aload_2
      10: invokevirtual #51                 // Method org/apache/hadoop/crypto/key/KeyProvider.getKeyVersion:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      13: astore_3
      14: aload_3
      15: ldc           #32                 // String KeyVersion name \'%s\' does not exist
      17: aload_2
      18: invokestatic  #7                  // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;
      21: pop
      22: aload_1
      23: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      26: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
      29: ldc           #28                 // String EEK
      31: invokevirtual #34                 // Method java/lang/String.equals:(Ljava/lang/Object;)Z
      34: ldc           #35                 // String encryptedKey version name must be \'%s\', but found \'%s\'
      36: ldc           #28                 // String EEK
      38: aload_1
      39: invokevirtual #33                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion.getEncryptedKeyVersion:()Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      42: invokevirtual #26                 // Method org/apache/hadoop/crypto/key/KeyProvider$KeyVersion.getVersionName:()Ljava/lang/String;
      45: invokestatic  #36                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      48: aload_0
      49: getfield      #4                  // Field keyProvider:Lorg/apache/hadoop/crypto/key/KeyProvider;
      52: invokevirtual #8                  // Method org/apache/hadoop/crypto/key/KeyProvider.getConf:()Lorg/apache/hadoop/conf/Configuration;
      55: invokestatic  #9                  // Method org/apache/hadoop/crypto/CryptoCodec.getInstance:(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/crypto/CryptoCodec;
      58: astore        4
      60: aconst_null
      61: astore        5
      63: aload         4
      65: invokevirtual #42                 // Method org/apache/hadoop/crypto/CryptoCodec.createDecryptor:()Lorg/apache/hadoop/crypto/Decryptor;
      68: astore        6
      70: aload_0
      71: aload         6
      73: aload_3
      74: aload_1
      75: invokespecial #52                 // Method decryptEncryptedKey:(Lorg/apache/hadoop/crypto/Decryptor;Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;Lorg/apache/hadoop/crypto/key/KeyProviderCryptoExtension$EncryptedKeyVersion;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      78: astore        7
      80: aload         4
      82: ifnull        115
      85: aload         5
      87: ifnull        110
      90: aload         4
      92: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
      95: goto          115
      98: astore        8
     100: aload         5
     102: aload         8
     104: invokevirtual #55                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     107: goto          115
     110: aload         4
     112: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     115: aload         7
     117: areturn
     118: astore        6
     120: aload         6
     122: astore        5
     124: aload         6
     126: athrow
     127: astore        9
     129: aload         4
     131: ifnull        164
     134: aload         5
     136: ifnull        159
     139: aload         4
     141: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     144: goto          164
     147: astore        10
     149: aload         5
     151: aload         10
     153: invokevirtual #55                 // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     156: goto          164
     159: aload         4
     161: invokevirtual #16                 // Method org/apache/hadoop/crypto/CryptoCodec.close:()V
     164: aload         9
     166: athrow
    Exception table:
       from    to  target type
          90    95    98   Class java/lang/Throwable
          63    80   118   Class java/lang/Throwable
          63    80   127   any
         139   144   147   Class java/lang/Throwable
         118   129   127   any

  public void warmUpEncryptedKeys(java.lang.String...) throws java.io.IOException;
    Code:
       0: return

  public void drain(java.lang.String);
    Code:
       0: return

  org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$DefaultCryptoExtension(org.apache.hadoop.crypto.key.KeyProvider, org.apache.hadoop.crypto.key.KeyProviderCryptoExtension$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method "<init>":(Lorg/apache/hadoop/crypto/key/KeyProvider;)V
       5: return

  static {};
    Code:
       0: new           #59                 // class org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$DefaultCryptoExtension$1
       3: dup
       4: invokespecial #60                 // Method org/apache/hadoop/crypto/key/KeyProviderCryptoExtension$DefaultCryptoExtension$1."<init>":()V
       7: putstatic     #61                 // Field RANDOM:Ljava/lang/ThreadLocal;
      10: return
}
