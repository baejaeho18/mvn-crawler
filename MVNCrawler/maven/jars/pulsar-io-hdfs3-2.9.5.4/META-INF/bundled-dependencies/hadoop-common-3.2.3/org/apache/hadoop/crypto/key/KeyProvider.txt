Compiled from "KeyProvider.java"
public abstract class org.apache.hadoop.crypto.key.KeyProvider implements java.io.Closeable {
  public static final java.lang.String DEFAULT_CIPHER_NAME;

  public static final java.lang.String DEFAULT_CIPHER;

  public static final java.lang.String DEFAULT_BITLENGTH_NAME;

  public static final int DEFAULT_BITLENGTH;

  public static final java.lang.String JCEKS_KEY_SERIALFILTER_DEFAULT;

  public static final java.lang.String JCEKS_KEY_SERIAL_FILTER;

  private final org.apache.hadoop.conf.Configuration conf;

  public org.apache.hadoop.crypto.key.KeyProvider(org.apache.hadoop.conf.Configuration);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #3                  // class org/apache/hadoop/conf/Configuration
       8: dup
       9: aload_1
      10: invokespecial #4                  // Method org/apache/hadoop/conf/Configuration."<init>":(Lorg/apache/hadoop/conf/Configuration;)V
      13: putfield      #5                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
      16: ldc           #7                  // String jceks.key.serialFilter
      18: invokestatic  #8                  // Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
      21: ifnonnull     40
      24: aload_1
      25: ldc           #9                  // String hadoop.security.crypto.jceks.key.serialfilter
      27: ldc           #10                 // String java.lang.Enum;java.security.KeyRep;java.security.KeyRep$Type;javax.crypto.spec.SecretKeySpec;org.apache.hadoop.crypto.key.JavaKeyStoreProvider$KeyMetadata;!*
      29: invokevirtual #11                 // Method org/apache/hadoop/conf/Configuration.get:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      32: astore_2
      33: ldc           #7                  // String jceks.key.serialFilter
      35: aload_2
      36: invokestatic  #12                 // Method java/lang/System.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
      39: pop
      40: return

  public org.apache.hadoop.conf.Configuration getConf();
    Code:
       0: aload_0
       1: getfield      #5                  // Field conf:Lorg/apache/hadoop/conf/Configuration;
       4: areturn

  public static org.apache.hadoop.crypto.key.KeyProvider$Options options(org.apache.hadoop.conf.Configuration);
    Code:
       0: new           #13                 // class org/apache/hadoop/crypto/key/KeyProvider$Options
       3: dup
       4: aload_0
       5: invokespecial #14                 // Method org/apache/hadoop/crypto/key/KeyProvider$Options."<init>":(Lorg/apache/hadoop/conf/Configuration;)V
       8: areturn

  public boolean isTransient();
    Code:
       0: iconst_0
       1: ireturn

  public abstract org.apache.hadoop.crypto.key.KeyProvider$KeyVersion getKeyVersion(java.lang.String) throws java.io.IOException;

  public abstract java.util.List<java.lang.String> getKeys() throws java.io.IOException;

  public org.apache.hadoop.crypto.key.KeyProvider$Metadata[] getKeysMetadata(java.lang.String...) throws java.io.IOException;
    Code:
       0: aload_1
       1: arraylength
       2: anewarray     #15                 // class org/apache/hadoop/crypto/key/KeyProvider$Metadata
       5: astore_2
       6: iconst_0
       7: istore_3
       8: iload_3
       9: aload_1
      10: arraylength
      11: if_icmpge     30
      14: aload_2
      15: iload_3
      16: aload_0
      17: aload_1
      18: iload_3
      19: aaload
      20: invokevirtual #16                 // Method getMetadata:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$Metadata;
      23: aastore
      24: iinc          3, 1
      27: goto          8
      30: aload_2
      31: areturn

  public abstract java.util.List<org.apache.hadoop.crypto.key.KeyProvider$KeyVersion> getKeyVersions(java.lang.String) throws java.io.IOException;

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion getCurrentKey(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method getMetadata:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$Metadata;
       5: astore_2
       6: aload_2
       7: ifnonnull     12
      10: aconst_null
      11: areturn
      12: aload_0
      13: aload_1
      14: aload_2
      15: invokevirtual #17                 // Method org/apache/hadoop/crypto/key/KeyProvider$Metadata.getVersions:()I
      18: iconst_1
      19: isub
      20: invokestatic  #18                 // Method buildVersionName:(Ljava/lang/String;I)Ljava/lang/String;
      23: invokevirtual #19                 // Method getKeyVersion:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      26: areturn

  public abstract org.apache.hadoop.crypto.key.KeyProvider$Metadata getMetadata(java.lang.String) throws java.io.IOException;

  public abstract org.apache.hadoop.crypto.key.KeyProvider$KeyVersion createKey(java.lang.String, byte[], org.apache.hadoop.crypto.key.KeyProvider$Options) throws java.io.IOException;

  private java.lang.String getAlgorithm(java.lang.String);
    Code:
       0: aload_1
       1: bipush        47
       3: invokevirtual #20                 // Method java/lang/String.indexOf:(I)I
       6: istore_2
       7: iload_2
       8: iconst_m1
       9: if_icmpne     14
      12: aload_1
      13: areturn
      14: aload_1
      15: iconst_0
      16: iload_2
      17: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      20: areturn

  protected byte[] generateKey(int, java.lang.String) throws java.security.NoSuchAlgorithmException;
    Code:
       0: aload_0
       1: aload_2
       2: invokespecial #22                 // Method getAlgorithm:(Ljava/lang/String;)Ljava/lang/String;
       5: astore_2
       6: aload_2
       7: invokestatic  #23                 // Method javax/crypto/KeyGenerator.getInstance:(Ljava/lang/String;)Ljavax/crypto/KeyGenerator;
      10: astore_3
      11: aload_3
      12: iload_1
      13: invokevirtual #24                 // Method javax/crypto/KeyGenerator.init:(I)V
      16: aload_3
      17: invokevirtual #25                 // Method javax/crypto/KeyGenerator.generateKey:()Ljavax/crypto/SecretKey;
      20: invokeinterface #26,  1           // InterfaceMethod javax/crypto/SecretKey.getEncoded:()[B
      25: astore        4
      27: aload         4
      29: areturn

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion createKey(java.lang.String, org.apache.hadoop.crypto.key.KeyProvider$Options) throws java.security.NoSuchAlgorithmException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_2
       2: invokevirtual #27                 // Method org/apache/hadoop/crypto/key/KeyProvider$Options.getBitLength:()I
       5: aload_2
       6: invokevirtual #28                 // Method org/apache/hadoop/crypto/key/KeyProvider$Options.getCipher:()Ljava/lang/String;
       9: invokevirtual #29                 // Method generateKey:(ILjava/lang/String;)[B
      12: astore_3
      13: aload_0
      14: aload_1
      15: aload_3
      16: aload_2
      17: invokevirtual #30                 // Method createKey:(Ljava/lang/String;[BLorg/apache/hadoop/crypto/key/KeyProvider$Options;)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      20: areturn

  public abstract void deleteKey(java.lang.String) throws java.io.IOException;

  public abstract org.apache.hadoop.crypto.key.KeyProvider$KeyVersion rollNewVersion(java.lang.String, byte[]) throws java.io.IOException;

  public void close() throws java.io.IOException;
    Code:
       0: return

  public org.apache.hadoop.crypto.key.KeyProvider$KeyVersion rollNewVersion(java.lang.String) throws java.security.NoSuchAlgorithmException, java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #16                 // Method getMetadata:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$Metadata;
       5: astore_2
       6: aload_2
       7: ifnonnull     37
      10: new           #31                 // class java/io/IOException
      13: dup
      14: new           #32                 // class java/lang/StringBuilder
      17: dup
      18: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      21: ldc           #34                 // String Can\'t find Metadata for key
      23: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      26: aload_1
      27: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      30: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      33: invokespecial #37                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      36: athrow
      37: aload_0
      38: aload_2
      39: invokevirtual #38                 // Method org/apache/hadoop/crypto/key/KeyProvider$Metadata.getBitLength:()I
      42: aload_2
      43: invokevirtual #39                 // Method org/apache/hadoop/crypto/key/KeyProvider$Metadata.getCipher:()Ljava/lang/String;
      46: invokevirtual #29                 // Method generateKey:(ILjava/lang/String;)[B
      49: astore_3
      50: aload_0
      51: aload_1
      52: aload_3
      53: invokevirtual #40                 // Method rollNewVersion:(Ljava/lang/String;[B)Lorg/apache/hadoop/crypto/key/KeyProvider$KeyVersion;
      56: areturn

  public void invalidateCache(java.lang.String) throws java.io.IOException;
    Code:
       0: return

  public abstract void flush() throws java.io.IOException;

  public static java.lang.String getBaseName(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: bipush        64
       3: invokevirtual #41                 // Method java/lang/String.lastIndexOf:(I)I
       6: istore_1
       7: iload_1
       8: iconst_m1
       9: if_icmpne     39
      12: new           #31                 // class java/io/IOException
      15: dup
      16: new           #32                 // class java/lang/StringBuilder
      19: dup
      20: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      23: ldc           #42                 // String No version in key path
      25: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      28: aload_0
      29: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #37                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      38: athrow
      39: aload_0
      40: iconst_0
      41: iload_1
      42: invokevirtual #21                 // Method java/lang/String.substring:(II)Ljava/lang/String;
      45: areturn

  protected static java.lang.String buildVersionName(java.lang.String, int);
    Code:
       0: new           #32                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
       7: aload_0
       8: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      11: ldc           #43                 // String @
      13: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      16: iload_1
      17: invokevirtual #44                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      20: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      23: areturn

  public static org.apache.hadoop.crypto.key.KeyProvider findProvider(java.util.List<org.apache.hadoop.crypto.key.KeyProvider>, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokeinterface #45,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       6: astore_2
       7: aload_2
       8: invokeinterface #46,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      13: ifeq          39
      16: aload_2
      17: invokeinterface #47,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      22: checkcast     #6                  // class org/apache/hadoop/crypto/key/KeyProvider
      25: astore_3
      26: aload_3
      27: aload_1
      28: invokevirtual #16                 // Method getMetadata:(Ljava/lang/String;)Lorg/apache/hadoop/crypto/key/KeyProvider$Metadata;
      31: ifnull        36
      34: aload_3
      35: areturn
      36: goto          7
      39: new           #31                 // class java/io/IOException
      42: dup
      43: new           #32                 // class java/lang/StringBuilder
      46: dup
      47: invokespecial #33                 // Method java/lang/StringBuilder."<init>":()V
      50: ldc           #48                 // String Can\'t find KeyProvider for key
      52: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      55: aload_1
      56: invokevirtual #35                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      59: invokevirtual #36                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      62: invokespecial #37                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      65: athrow

  public boolean needsPassword() throws java.io.IOException;
    Code:
       0: iconst_0
       1: ireturn

  public java.lang.String noPasswordWarning();
    Code:
       0: aconst_null
       1: areturn

  public java.lang.String noPasswordError();
    Code:
       0: aconst_null
       1: areturn
}
