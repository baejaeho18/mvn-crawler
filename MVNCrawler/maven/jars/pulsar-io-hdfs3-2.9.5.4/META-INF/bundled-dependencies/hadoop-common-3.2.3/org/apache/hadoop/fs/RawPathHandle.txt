Compiled from "RawPathHandle.java"
public final class org.apache.hadoop.fs.RawPathHandle implements org.apache.hadoop.fs.PathHandle {
  private static final long serialVersionUID;

  public static final int MAX_SIZE;

  private transient java.nio.ByteBuffer fd;

  public org.apache.hadoop.fs.RawPathHandle(java.nio.ByteBuffer);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aconst_null
       6: aload_1
       7: if_acmpne     17
      10: iconst_0
      11: invokestatic  #2                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      14: goto          21
      17: aload_1
      18: invokevirtual #3                  // Method java/nio/ByteBuffer.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;
      21: putfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      24: return

  public org.apache.hadoop.fs.RawPathHandle(org.apache.hadoop.fs.PathHandle);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aconst_null
       5: aload_1
       6: if_acmpne     16
       9: iconst_0
      10: invokestatic  #2                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      13: goto          22
      16: aload_1
      17: invokeinterface #5,  1            // InterfaceMethod org/apache/hadoop/fs/PathHandle.bytes:()Ljava/nio/ByteBuffer;
      22: astore_2
      23: aload_0
      24: aload_2
      25: invokevirtual #6                  // Method java/nio/ByteBuffer.remaining:()I
      28: invokestatic  #2                  // Method java/nio/ByteBuffer.allocate:(I)Ljava/nio/ByteBuffer;
      31: putfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      34: aload_0
      35: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      38: aload_2
      39: invokevirtual #7                  // Method java/nio/ByteBuffer.put:(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;
      42: pop
      43: aload_0
      44: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      47: invokevirtual #8                  // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      50: pop
      51: return

  public java.nio.ByteBuffer bytes();
    Code:
       0: aload_0
       1: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
       4: invokevirtual #3                  // Method java/nio/ByteBuffer.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;
       7: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #9                  // class org/apache/hadoop/fs/PathHandle
       4: ifne          9
       7: iconst_0
       8: ireturn
       9: aload_1
      10: checkcast     #9                  // class org/apache/hadoop/fs/PathHandle
      13: astore_2
      14: aload_0
      15: invokevirtual #10                 // Method bytes:()Ljava/nio/ByteBuffer;
      18: aload_2
      19: invokeinterface #5,  1            // InterfaceMethod org/apache/hadoop/fs/PathHandle.bytes:()Ljava/nio/ByteBuffer;
      24: invokevirtual #11                 // Method java/nio/ByteBuffer.equals:(Ljava/lang/Object;)Z
      27: ireturn

  public int hashCode();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method bytes:()Ljava/nio/ByteBuffer;
       4: invokevirtual #12                 // Method java/nio/ByteBuffer.hashCode:()I
       7: ireturn

  public java.lang.String toString();
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method bytes:()Ljava/nio/ByteBuffer;
       4: invokevirtual #13                 // Method java/nio/ByteBuffer.toString:()Ljava/lang/String;
       7: areturn

  private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #14                 // Method java/io/ObjectOutputStream.defaultWriteObject:()V
       4: aload_1
       5: aload_0
       6: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
       9: invokevirtual #6                  // Method java/nio/ByteBuffer.remaining:()I
      12: invokevirtual #15                 // Method java/io/ObjectOutputStream.writeInt:(I)V
      15: aload_0
      16: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      19: invokevirtual #16                 // Method java/nio/ByteBuffer.hasArray:()Z
      22: ifeq          53
      25: aload_1
      26: aload_0
      27: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      30: invokevirtual #17                 // Method java/nio/ByteBuffer.array:()[B
      33: aload_0
      34: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      37: invokevirtual #18                 // Method java/nio/ByteBuffer.position:()I
      40: aload_0
      41: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      44: invokevirtual #6                  // Method java/nio/ByteBuffer.remaining:()I
      47: invokevirtual #19                 // Method java/io/ObjectOutputStream.write:([BII)V
      50: goto          80
      53: aload_0
      54: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      57: invokevirtual #6                  // Method java/nio/ByteBuffer.remaining:()I
      60: newarray       byte
      62: astore_2
      63: aload_0
      64: getfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      67: invokevirtual #20                 // Method java/nio/ByteBuffer.slice:()Ljava/nio/ByteBuffer;
      70: aload_2
      71: invokevirtual #21                 // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
      74: pop
      75: aload_1
      76: aload_2
      77: invokevirtual #22                 // Method java/io/ObjectOutputStream.write:([B)V
      80: return

  private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException;
    Code:
       0: aload_1
       1: invokevirtual #23                 // Method java/io/ObjectInputStream.defaultReadObject:()V
       4: aload_1
       5: invokevirtual #24                 // Method java/io/ObjectInputStream.readInt:()I
       8: istore_2
       9: iload_2
      10: iflt          19
      13: iload_2
      14: ldc           #26                 // int 1048576
      16: if_icmple     46
      19: new           #27                 // class java/io/IOException
      22: dup
      23: new           #28                 // class java/lang/StringBuilder
      26: dup
      27: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
      30: ldc           #30                 // String Illegal buffer length
      32: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      35: iload_2
      36: invokevirtual #32                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      39: invokevirtual #33                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      42: invokespecial #34                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      45: athrow
      46: iload_2
      47: newarray       byte
      49: astore_3
      50: aload_1
      51: aload_3
      52: invokevirtual #35                 // Method java/io/ObjectInputStream.readFully:([B)V
      55: aload_0
      56: aload_3
      57: invokestatic  #36                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      60: putfield      #4                  // Field fd:Ljava/nio/ByteBuffer;
      63: return

  private void readObjectNoData() throws java.io.ObjectStreamException;
    Code:
       0: new           #37                 // class java/io/InvalidObjectException
       3: dup
       4: ldc           #38                 // String Stream data required
       6: invokespecial #39                 // Method java/io/InvalidObjectException."<init>":(Ljava/lang/String;)V
       9: athrow
}
