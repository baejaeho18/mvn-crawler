Compiled from "FSOutputSummer.java"
public abstract class org.apache.hadoop.fs.FSOutputSummer extends java.io.OutputStream {
  private final org.apache.hadoop.util.DataChecksum sum;

  private byte[] buf;

  private byte[] checksum;

  private int count;

  private static final int BUFFER_NUM_CHUNKS;

  protected org.apache.hadoop.fs.FSOutputSummer(org.apache.hadoop.util.DataChecksum);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/OutputStream."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
       9: aload_0
      10: aload_1
      11: invokevirtual #3                  // Method org/apache/hadoop/util/DataChecksum.getBytesPerChecksum:()I
      14: bipush        9
      16: imul
      17: newarray       byte
      19: putfield      #5                  // Field buf:[B
      22: aload_0
      23: aload_0
      24: invokevirtual #6                  // Method getChecksumSize:()I
      27: bipush        9
      29: imul
      30: newarray       byte
      32: putfield      #7                  // Field checksum:[B
      35: aload_0
      36: iconst_0
      37: putfield      #8                  // Field count:I
      40: return

  protected abstract void writeChunk(byte[], int, int, byte[], int, int) throws java.io.IOException;

  protected abstract void checkClosed() throws java.io.IOException;

  public synchronized void write(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #5                  // Field buf:[B
       4: aload_0
       5: dup
       6: getfield      #8                  // Field count:I
       9: dup_x1
      10: iconst_1
      11: iadd
      12: putfield      #8                  // Field count:I
      15: iload_1
      16: i2b
      17: bastore
      18: aload_0
      19: getfield      #8                  // Field count:I
      22: aload_0
      23: getfield      #5                  // Field buf:[B
      26: arraylength
      27: if_icmpne     34
      30: aload_0
      31: invokevirtual #9                  // Method flushBuffer:()V
      34: return

  public synchronized void write(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #10                 // Method checkClosed:()V
       4: iload_2
       5: iflt          20
       8: iload_3
       9: iflt          20
      12: iload_2
      13: aload_1
      14: arraylength
      15: iload_3
      16: isub
      17: if_icmple     28
      20: new           #11                 // class java/lang/ArrayIndexOutOfBoundsException
      23: dup
      24: invokespecial #12                 // Method java/lang/ArrayIndexOutOfBoundsException."<init>":()V
      27: athrow
      28: iconst_0
      29: istore        4
      31: iload         4
      33: iload_3
      34: if_icmpge     58
      37: iload         4
      39: aload_0
      40: aload_1
      41: iload_2
      42: iload         4
      44: iadd
      45: iload_3
      46: iload         4
      48: isub
      49: invokespecial #13                 // Method write1:([BII)I
      52: iadd
      53: istore        4
      55: goto          31
      58: return

  private int write1(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field count:I
       4: ifne          34
       7: iload_3
       8: aload_0
       9: getfield      #5                  // Field buf:[B
      12: arraylength
      13: if_icmplt     34
      16: aload_0
      17: getfield      #5                  // Field buf:[B
      20: arraylength
      21: istore        4
      23: aload_0
      24: aload_1
      25: iload_2
      26: iload         4
      28: invokespecial #14                 // Method writeChecksumChunks:([BII)V
      31: iload         4
      33: ireturn
      34: aload_0
      35: getfield      #5                  // Field buf:[B
      38: arraylength
      39: aload_0
      40: getfield      #8                  // Field count:I
      43: isub
      44: istore        4
      46: iload_3
      47: iload         4
      49: if_icmpge     56
      52: iload_3
      53: goto          58
      56: iload         4
      58: istore        4
      60: aload_1
      61: iload_2
      62: aload_0
      63: getfield      #5                  // Field buf:[B
      66: aload_0
      67: getfield      #8                  // Field count:I
      70: iload         4
      72: invokestatic  #15                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      75: aload_0
      76: dup
      77: getfield      #8                  // Field count:I
      80: iload         4
      82: iadd
      83: putfield      #8                  // Field count:I
      86: aload_0
      87: getfield      #8                  // Field count:I
      90: aload_0
      91: getfield      #5                  // Field buf:[B
      94: arraylength
      95: if_icmpne     102
      98: aload_0
      99: invokevirtual #9                  // Method flushBuffer:()V
     102: iload         4
     104: ireturn

  protected synchronized void flushBuffer() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_1
       3: invokevirtual #16                 // Method flushBuffer:(ZZ)I
       6: pop
       7: return

  protected synchronized int flushBuffer(boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #8                  // Field count:I
       4: istore_3
       5: iload_3
       6: aload_0
       7: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      10: invokevirtual #3                  // Method org/apache/hadoop/util/DataChecksum.getBytesPerChecksum:()I
      13: irem
      14: istore        4
      16: iload_2
      17: ifeq          24
      20: iload_3
      21: goto          28
      24: iload_3
      25: iload         4
      27: isub
      28: istore        5
      30: iload         5
      32: ifeq          90
      35: aload_0
      36: aload_0
      37: getfield      #5                  // Field buf:[B
      40: iconst_0
      41: iload         5
      43: invokespecial #14                 // Method writeChecksumChunks:([BII)V
      46: iload_2
      47: ifeq          54
      50: iload_1
      51: ifeq          85
      54: aload_0
      55: iload         4
      57: putfield      #8                  // Field count:I
      60: aload_0
      61: getfield      #5                  // Field buf:[B
      64: iload_3
      65: aload_0
      66: getfield      #8                  // Field count:I
      69: isub
      70: aload_0
      71: getfield      #5                  // Field buf:[B
      74: iconst_0
      75: aload_0
      76: getfield      #8                  // Field count:I
      79: invokestatic  #15                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      82: goto          90
      85: aload_0
      86: iconst_0
      87: putfield      #8                  // Field count:I
      90: aload_0
      91: getfield      #8                  // Field count:I
      94: iload_3
      95: iload         5
      97: isub
      98: isub
      99: ireturn

  public void flush() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_0
       2: iconst_0
       3: invokevirtual #16                 // Method flushBuffer:(ZZ)I
       6: pop
       7: return

  protected synchronized int getBufferedDataSize();
    Code:
       0: aload_0
       1: getfield      #8                  // Field count:I
       4: ireturn

  protected int getChecksumSize();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
       4: invokevirtual #17                 // Method org/apache/hadoop/util/DataChecksum.getChecksumSize:()I
       7: ireturn

  protected org.apache.hadoop.util.DataChecksum getDataChecksum();
    Code:
       0: aload_0
       1: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
       4: areturn

  protected org.apache.htrace.core.TraceScope createWriteTraceScope();
    Code:
       0: aconst_null
       1: areturn

  private void writeChecksumChunks(byte[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
       4: aload_1
       5: iload_2
       6: iload_3
       7: aload_0
       8: getfield      #7                  // Field checksum:[B
      11: iconst_0
      12: invokevirtual #18                 // Method org/apache/hadoop/util/DataChecksum.calculateChunkedSums:([BII[BI)V
      15: aload_0
      16: invokevirtual #19                 // Method createWriteTraceScope:()Lorg/apache/htrace/core/TraceScope;
      19: astore        4
      21: iconst_0
      22: istore        5
      24: iload         5
      26: iload_3
      27: if_icmpge     99
      30: aload_0
      31: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      34: invokevirtual #3                  // Method org/apache/hadoop/util/DataChecksum.getBytesPerChecksum:()I
      37: iload_3
      38: iload         5
      40: isub
      41: invokestatic  #20                 // Method java/lang/Math.min:(II)I
      44: istore        6
      46: iload         5
      48: aload_0
      49: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      52: invokevirtual #3                  // Method org/apache/hadoop/util/DataChecksum.getBytesPerChecksum:()I
      55: idiv
      56: aload_0
      57: invokevirtual #6                  // Method getChecksumSize:()I
      60: imul
      61: istore        7
      63: aload_0
      64: aload_1
      65: iload_2
      66: iload         5
      68: iadd
      69: iload         6
      71: aload_0
      72: getfield      #7                  // Field checksum:[B
      75: iload         7
      77: aload_0
      78: invokevirtual #6                  // Method getChecksumSize:()I
      81: invokevirtual #21                 // Method writeChunk:([BII[BII)V
      84: iload         5
      86: aload_0
      87: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      90: invokevirtual #3                  // Method org/apache/hadoop/util/DataChecksum.getBytesPerChecksum:()I
      93: iadd
      94: istore        5
      96: goto          24
      99: aload         4
     101: ifnull        127
     104: aload         4
     106: invokevirtual #22                 // Method org/apache/htrace/core/TraceScope.close:()V
     109: goto          127
     112: astore        8
     114: aload         4
     116: ifnull        124
     119: aload         4
     121: invokevirtual #22                 // Method org/apache/htrace/core/TraceScope.close:()V
     124: aload         8
     126: athrow
     127: return
    Exception table:
       from    to  target type
          21    99   112   any
         112   114   112   any

  public static byte[] convertToByteStream(java.util.zip.Checksum, int);
    Code:
       0: aload_0
       1: invokeinterface #23,  1           // InterfaceMethod java/util/zip/Checksum.getValue:()J
       6: l2i
       7: iload_1
       8: newarray       byte
      10: invokestatic  #24                 // Method int2byte:(I[B)[B
      13: areturn

  static byte[] int2byte(int, byte[]);
    Code:
       0: aload_1
       1: arraylength
       2: ifeq          54
       5: aload_1
       6: iconst_0
       7: iload_0
       8: bipush        24
      10: iushr
      11: sipush        255
      14: iand
      15: i2b
      16: bastore
      17: aload_1
      18: iconst_1
      19: iload_0
      20: bipush        16
      22: iushr
      23: sipush        255
      26: iand
      27: i2b
      28: bastore
      29: aload_1
      30: iconst_2
      31: iload_0
      32: bipush        8
      34: iushr
      35: sipush        255
      38: iand
      39: i2b
      40: bastore
      41: aload_1
      42: iconst_3
      43: iload_0
      44: iconst_0
      45: iushr
      46: sipush        255
      49: iand
      50: i2b
      51: bastore
      52: aload_1
      53: areturn
      54: aload_1
      55: areturn

  protected synchronized void setChecksumBufSize(int);
    Code:
       0: aload_0
       1: iload_1
       2: newarray       byte
       4: putfield      #5                  // Field buf:[B
       7: aload_0
       8: aload_0
       9: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
      12: iload_1
      13: invokevirtual #25                 // Method org/apache/hadoop/util/DataChecksum.getChecksumSize:(I)I
      16: newarray       byte
      18: putfield      #7                  // Field checksum:[B
      21: aload_0
      22: iconst_0
      23: putfield      #8                  // Field count:I
      26: return

  protected synchronized void resetChecksumBufSize();
    Code:
       0: aload_0
       1: aload_0
       2: getfield      #2                  // Field sum:Lorg/apache/hadoop/util/DataChecksum;
       5: invokevirtual #3                  // Method org/apache/hadoop/util/DataChecksum.getBytesPerChecksum:()I
       8: bipush        9
      10: imul
      11: invokevirtual #26                 // Method setChecksumBufSize:(I)V
      14: return
}
