Compiled from "ChecksumFs.java"
public abstract class org.apache.hadoop.fs.ChecksumFs extends org.apache.hadoop.fs.FilterFs {
  private static final byte[] CHECKSUM_VERSION;

  private int defaultBytesPerChecksum;

  private boolean verifyChecksum;

  public static double getApproxChkSumLength(long);
    Code:
       0: ldc           #5                  // float 0.01f
       2: lload_0
       3: l2f
       4: fmul
       5: f2d
       6: dreturn

  public org.apache.hadoop.fs.ChecksumFs(org.apache.hadoop.fs.AbstractFileSystem) throws java.io.IOException, java.net.URISyntaxException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #6                  // Method org/apache/hadoop/fs/FilterFs."<init>":(Lorg/apache/hadoop/fs/AbstractFileSystem;)V
       5: aload_0
       6: sipush        512
       9: putfield      #7                  // Field defaultBytesPerChecksum:I
      12: aload_0
      13: iconst_1
      14: putfield      #2                  // Field verifyChecksum:Z
      17: aload_0
      18: aload_0
      19: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      22: new           #9                  // class org/apache/hadoop/fs/Path
      25: dup
      26: ldc           #10                 // String /
      28: invokespecial #11                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
      31: invokevirtual #12                 // Method org/apache/hadoop/fs/AbstractFileSystem.getServerDefaults:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsServerDefaults;
      34: invokevirtual #13                 // Method org/apache/hadoop/fs/FsServerDefaults.getBytesPerChecksum:()I
      37: putfield      #7                  // Field defaultBytesPerChecksum:I
      40: return

  public void setVerifyChecksum(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #2                  // Field verifyChecksum:Z
       5: return

  public org.apache.hadoop.fs.AbstractFileSystem getRawFs();
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: areturn

  public org.apache.hadoop.fs.Path getChecksumFile(org.apache.hadoop.fs.Path);
    Code:
       0: new           #9                  // class org/apache/hadoop/fs/Path
       3: dup
       4: aload_1
       5: invokevirtual #14                 // Method org/apache/hadoop/fs/Path.getParent:()Lorg/apache/hadoop/fs/Path;
       8: new           #15                 // class java/lang/StringBuilder
      11: dup
      12: invokespecial #16                 // Method java/lang/StringBuilder."<init>":()V
      15: ldc           #17                 // String .
      17: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      20: aload_1
      21: invokevirtual #19                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
      24: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      27: ldc           #20                 // String .crc
      29: invokevirtual #18                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      32: invokevirtual #21                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      35: invokespecial #22                 // Method org/apache/hadoop/fs/Path."<init>":(Lorg/apache/hadoop/fs/Path;Ljava/lang/String;)V
      38: areturn

  public static boolean isChecksumFile(org.apache.hadoop.fs.Path);
    Code:
       0: aload_0
       1: invokevirtual #19                 // Method org/apache/hadoop/fs/Path.getName:()Ljava/lang/String;
       4: astore_1
       5: aload_1
       6: ldc           #17                 // String .
       8: invokevirtual #23                 // Method java/lang/String.startsWith:(Ljava/lang/String;)Z
      11: ifeq          27
      14: aload_1
      15: ldc           #20                 // String .crc
      17: invokevirtual #24                 // Method java/lang/String.endsWith:(Ljava/lang/String;)Z
      20: ifeq          27
      23: iconst_1
      24: goto          28
      27: iconst_0
      28: ireturn

  public long getChecksumFileLength(org.apache.hadoop.fs.Path, long);
    Code:
       0: lload_2
       1: aload_0
       2: invokevirtual #25                 // Method getBytesPerSum:()I
       5: invokestatic  #26                 // Method getChecksumLength:(JI)J
       8: lreturn

  public int getBytesPerSum();
    Code:
       0: aload_0
       1: getfield      #7                  // Field defaultBytesPerChecksum:I
       4: ireturn

  private int getSumBufferSize(int, int, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_3
       5: invokevirtual #12                 // Method org/apache/hadoop/fs/AbstractFileSystem.getServerDefaults:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FsServerDefaults;
       8: invokevirtual #27                 // Method org/apache/hadoop/fs/FsServerDefaults.getFileBufferSize:()I
      11: istore        4
      13: iload_2
      14: iload_1
      15: idiv
      16: istore        5
      18: iload_1
      19: iload         5
      21: iload         4
      23: invokestatic  #28                 // Method java/lang/Math.max:(II)I
      26: invokestatic  #28                 // Method java/lang/Math.max:(II)I
      29: ireturn

  public boolean truncate(org.apache.hadoop.fs.Path, long) throws java.io.IOException;
    Code:
       0: new           #29                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #30                 // String Truncate is not supported by ChecksumFs
       6: invokespecial #31                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public org.apache.hadoop.fs.FSDataInputStream open(org.apache.hadoop.fs.Path, int) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: new           #32                 // class org/apache/hadoop/fs/FSDataInputStream
       3: dup
       4: new           #33                 // class org/apache/hadoop/fs/ChecksumFs$ChecksumFSInputChecker
       7: dup
       8: aload_0
       9: aload_1
      10: iload_2
      11: invokespecial #34                 // Method org/apache/hadoop/fs/ChecksumFs$ChecksumFSInputChecker."<init>":(Lorg/apache/hadoop/fs/ChecksumFs;Lorg/apache/hadoop/fs/Path;I)V
      14: invokespecial #35                 // Method org/apache/hadoop/fs/FSDataInputStream."<init>":(Ljava/io/InputStream;)V
      17: areturn

  public static long getChecksumLength(long, int);
    Code:
       0: lload_0
       1: iload_2
       2: i2l
       3: ladd
       4: lconst_1
       5: lsub
       6: iload_2
       7: i2l
       8: ldiv
       9: ldc2_w        #36                 // long 4l
      12: lmul
      13: getstatic     #3                  // Field CHECKSUM_VERSION:[B
      16: arraylength
      17: i2l
      18: ladd
      19: ldc2_w        #36                 // long 4l
      22: ladd
      23: lreturn

  public org.apache.hadoop.fs.FSDataOutputStream createInternal(org.apache.hadoop.fs.Path, java.util.EnumSet<org.apache.hadoop.fs.CreateFlag>, org.apache.hadoop.fs.permission.FsPermission, int, short, long, org.apache.hadoop.util.Progressable, org.apache.hadoop.fs.Options$ChecksumOpt, boolean) throws java.io.IOException;
    Code:
       0: new           #38                 // class org/apache/hadoop/fs/FSDataOutputStream
       3: dup
       4: new           #1                  // class org/apache/hadoop/fs/ChecksumFs$ChecksumFSOutputSummer
       7: dup
       8: aload_0
       9: aload_1
      10: aload_2
      11: aload_3
      12: iload         4
      14: iload         5
      16: lload         6
      18: aload         8
      20: aload         9
      22: iload         10
      24: invokespecial #39                 // Method org/apache/hadoop/fs/ChecksumFs$ChecksumFSOutputSummer."<init>":(Lorg/apache/hadoop/fs/ChecksumFs;Lorg/apache/hadoop/fs/Path;Ljava/util/EnumSet;Lorg/apache/hadoop/fs/permission/FsPermission;ISJLorg/apache/hadoop/util/Progressable;Lorg/apache/hadoop/fs/Options$ChecksumOpt;Z)V
      27: aconst_null
      28: invokespecial #40                 // Method org/apache/hadoop/fs/FSDataOutputStream."<init>":(Ljava/io/OutputStream;Lorg/apache/hadoop/fs/FileSystem$Statistics;)V
      31: astore        11
      33: aload         11
      35: areturn

  private boolean exists(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #41                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
       8: ifnull        15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ireturn
      17: astore_2
      18: iconst_0
      19: ireturn
    Exception table:
       from    to  target type
           0    16    17   Class java/io/FileNotFoundException

  private boolean isDirectory(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #41                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
       8: invokevirtual #43                 // Method org/apache/hadoop/fs/FileStatus.isDirectory:()Z
      11: ireturn
      12: astore_2
      13: iconst_0
      14: ireturn
    Exception table:
       from    to  target type
           0    11    12   Class java/io/FileNotFoundException

  public boolean setReplication(org.apache.hadoop.fs.Path, short) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: iload_2
       6: invokevirtual #44                 // Method org/apache/hadoop/fs/AbstractFileSystem.setReplication:(Lorg/apache/hadoop/fs/Path;S)Z
       9: istore_3
      10: iload_3
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_0
      17: aload_1
      18: invokevirtual #45                 // Method getChecksumFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      21: astore        4
      23: aload_0
      24: aload         4
      26: invokespecial #46                 // Method exists:(Lorg/apache/hadoop/fs/Path;)Z
      29: ifeq          43
      32: aload_0
      33: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      36: aload         4
      38: iload_2
      39: invokevirtual #44                 // Method org/apache/hadoop/fs/AbstractFileSystem.setReplication:(Lorg/apache/hadoop/fs/Path;S)Z
      42: pop
      43: iconst_1
      44: ireturn

  public void renameInternal(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #47                 // Method isDirectory:(Lorg/apache/hadoop/fs/Path;)Z
       5: ifeq          24
       8: aload_0
       9: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      12: aload_1
      13: aload_2
      14: iconst_0
      15: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      18: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      21: goto          92
      24: aload_0
      25: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      28: aload_1
      29: aload_2
      30: iconst_0
      31: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      34: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      37: aload_0
      38: aload_1
      39: invokevirtual #45                 // Method getChecksumFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      42: astore_3
      43: aload_0
      44: aload_3
      45: invokespecial #46                 // Method exists:(Lorg/apache/hadoop/fs/Path;)Z
      48: ifeq          92
      51: aload_0
      52: aload_2
      53: invokespecial #47                 // Method isDirectory:(Lorg/apache/hadoop/fs/Path;)Z
      56: ifeq          75
      59: aload_0
      60: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      63: aload_3
      64: aload_2
      65: iconst_0
      66: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      69: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      72: goto          92
      75: aload_0
      76: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      79: aload_3
      80: aload_0
      81: aload_2
      82: invokevirtual #45                 // Method getChecksumFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      85: iconst_0
      86: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      89: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      92: return

  public void renameInternal(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.Path, boolean) throws org.apache.hadoop.security.AccessControlException, org.apache.hadoop.fs.FileAlreadyExistsException, java.io.FileNotFoundException, org.apache.hadoop.fs.ParentNotDirectoryException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: getstatic     #50                 // Field org/apache/hadoop/fs/Options$Rename.NONE:Lorg/apache/hadoop/fs/Options$Rename;
       3: astore        4
       5: iload_3
       6: ifeq          14
       9: getstatic     #51                 // Field org/apache/hadoop/fs/Options$Rename.OVERWRITE:Lorg/apache/hadoop/fs/Options$Rename;
      12: astore        4
      14: aload_0
      15: aload_1
      16: invokespecial #47                 // Method isDirectory:(Lorg/apache/hadoop/fs/Path;)Z
      19: ifeq          43
      22: aload_0
      23: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      26: aload_1
      27: aload_2
      28: iconst_1
      29: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      32: dup
      33: iconst_0
      34: aload         4
      36: aastore
      37: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      40: goto          130
      43: aload_0
      44: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      47: aload_1
      48: aload_2
      49: iconst_1
      50: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      53: dup
      54: iconst_0
      55: aload         4
      57: aastore
      58: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
      61: aload_0
      62: aload_1
      63: invokevirtual #45                 // Method getChecksumFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      66: astore        5
      68: aload_0
      69: aload         5
      71: invokespecial #46                 // Method exists:(Lorg/apache/hadoop/fs/Path;)Z
      74: ifeq          130
      77: aload_0
      78: aload_2
      79: invokespecial #47                 // Method isDirectory:(Lorg/apache/hadoop/fs/Path;)Z
      82: ifeq          107
      85: aload_0
      86: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      89: aload         5
      91: aload_2
      92: iconst_1
      93: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
      96: dup
      97: iconst_0
      98: aload         4
     100: aastore
     101: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
     104: goto          130
     107: aload_0
     108: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
     111: aload         5
     113: aload_0
     114: aload_2
     115: invokevirtual #45                 // Method getChecksumFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
     118: iconst_1
     119: anewarray     #48                 // class org/apache/hadoop/fs/Options$Rename
     122: dup
     123: iconst_0
     124: aload         4
     126: aastore
     127: invokevirtual #49                 // Method org/apache/hadoop/fs/AbstractFileSystem.rename:(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/fs/Path;[Lorg/apache/hadoop/fs/Options$Rename;)V
     130: return

  public boolean delete(org.apache.hadoop.fs.Path, boolean) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: aconst_null
       1: astore_3
       2: aload_0
       3: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       6: aload_1
       7: invokevirtual #41                 // Method org/apache/hadoop/fs/AbstractFileSystem.getFileStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FileStatus;
      10: astore_3
      11: goto          18
      14: astore        4
      16: iconst_0
      17: ireturn
      18: aload_3
      19: invokevirtual #43                 // Method org/apache/hadoop/fs/FileStatus.isDirectory:()Z
      22: ifeq          35
      25: aload_0
      26: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      29: aload_1
      30: iload_2
      31: invokevirtual #52                 // Method org/apache/hadoop/fs/AbstractFileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      34: ireturn
      35: aload_0
      36: aload_1
      37: invokevirtual #45                 // Method getChecksumFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path;
      40: astore        4
      42: aload_0
      43: aload         4
      45: invokespecial #46                 // Method exists:(Lorg/apache/hadoop/fs/Path;)Z
      48: ifeq          62
      51: aload_0
      52: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      55: aload         4
      57: iconst_1
      58: invokevirtual #52                 // Method org/apache/hadoop/fs/AbstractFileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      61: pop
      62: aload_0
      63: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      66: aload_1
      67: iconst_1
      68: invokevirtual #52                 // Method org/apache/hadoop/fs/AbstractFileSystem.delete:(Lorg/apache/hadoop/fs/Path;Z)Z
      71: ireturn
    Exception table:
       from    to  target type
           2    11    14   Class java/io/FileNotFoundException

  public boolean reportChecksumFailure(org.apache.hadoop.fs.Path, org.apache.hadoop.fs.FSDataInputStream, long, org.apache.hadoop.fs.FSDataInputStream, long);
    Code:
       0: iconst_0
       1: ireturn

  public org.apache.hadoop.fs.FileStatus[] listStatus(org.apache.hadoop.fs.Path) throws java.io.IOException, org.apache.hadoop.fs.UnresolvedLinkException;
    Code:
       0: new           #53                 // class java/util/ArrayList
       3: dup
       4: invokespecial #54                 // Method java/util/ArrayList."<init>":()V
       7: astore_2
       8: aload_0
       9: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
      12: aload_1
      13: invokevirtual #55                 // Method org/apache/hadoop/fs/AbstractFileSystem.listStatus:(Lorg/apache/hadoop/fs/Path;)[Lorg/apache/hadoop/fs/FileStatus;
      16: astore_3
      17: aload_3
      18: ifnull        59
      21: iconst_0
      22: istore        4
      24: iload         4
      26: aload_3
      27: arraylength
      28: if_icmpge     59
      31: aload_3
      32: iload         4
      34: aaload
      35: invokevirtual #56                 // Method org/apache/hadoop/fs/FileStatus.getPath:()Lorg/apache/hadoop/fs/Path;
      38: invokestatic  #57                 // Method isChecksumFile:(Lorg/apache/hadoop/fs/Path;)Z
      41: ifne          53
      44: aload_2
      45: aload_3
      46: iload         4
      48: aaload
      49: invokevirtual #58                 // Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
      52: pop
      53: iinc          4, 1
      56: goto          24
      59: aload_2
      60: aload_2
      61: invokevirtual #59                 // Method java/util/ArrayList.size:()I
      64: anewarray     #60                 // class org/apache/hadoop/fs/FileStatus
      67: invokevirtual #61                 // Method java/util/ArrayList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      70: checkcast     #62                 // class "[Lorg/apache/hadoop/fs/FileStatus;"
      73: areturn

  public org.apache.hadoop.fs.RemoteIterator<org.apache.hadoop.fs.LocatedFileStatus> listLocatedStatus(org.apache.hadoop.fs.Path) throws org.apache.hadoop.security.AccessControlException, java.io.FileNotFoundException, org.apache.hadoop.fs.UnresolvedLinkException, java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #8                  // Method getMyFs:()Lorg/apache/hadoop/fs/AbstractFileSystem;
       4: aload_1
       5: invokevirtual #63                 // Method org/apache/hadoop/fs/AbstractFileSystem.listLocatedStatus:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/RemoteIterator;
       8: astore_2
       9: new           #64                 // class org/apache/hadoop/fs/ChecksumFs$1
      12: dup
      13: aload_0
      14: aload_2
      15: invokespecial #65                 // Method org/apache/hadoop/fs/ChecksumFs$1."<init>":(Lorg/apache/hadoop/fs/ChecksumFs;Lorg/apache/hadoop/fs/RemoteIterator;)V
      18: areturn

  static int access$000(org.apache.hadoop.fs.ChecksumFs, int, int, org.apache.hadoop.fs.Path) throws java.io.IOException;
    Code:
       0: aload_0
       1: iload_1
       2: iload_2
       3: aload_3
       4: invokespecial #4                  // Method getSumBufferSize:(IILorg/apache/hadoop/fs/Path;)I
       7: ireturn

  static byte[] access$100();
    Code:
       0: getstatic     #3                  // Field CHECKSUM_VERSION:[B
       3: areturn

  static boolean access$200(org.apache.hadoop.fs.ChecksumFs);
    Code:
       0: aload_0
       1: getfield      #2                  // Field verifyChecksum:Z
       4: ireturn

  static {};
    Code:
       0: iconst_4
       1: newarray       byte
       3: dup
       4: iconst_0
       5: bipush        99
       7: bastore
       8: dup
       9: iconst_1
      10: bipush        114
      12: bastore
      13: dup
      14: iconst_2
      15: bipush        99
      17: bastore
      18: dup
      19: iconst_3
      20: iconst_0
      21: bastore
      22: putstatic     #3                  // Field CHECKSUM_VERSION:[B
      25: return
}
