Compiled from "SnappyInputStream.java"
public class org.xerial.snappy.SnappyInputStream extends java.io.InputStream {
  private boolean finishedReading;

  protected final java.io.InputStream in;

  private byte[] compressed;

  private byte[] uncompressed;

  private int uncompressedCursor;

  private int uncompressedLimit;

  private byte[] header;

  public org.xerial.snappy.SnappyInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/io/InputStream."<init>":()V
       4: aload_0
       5: iconst_0
       6: putfield      #2                  // Field finishedReading:Z
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field uncompressedCursor:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field uncompressedLimit:I
      19: aload_0
      20: invokestatic  #5                  // Method org/xerial/snappy/SnappyCodec.headerSize:()I
      23: newarray       byte
      25: putfield      #6                  // Field header:[B
      28: aload_0
      29: aload_1
      30: putfield      #7                  // Field in:Ljava/io/InputStream;
      33: aload_0
      34: invokevirtual #8                  // Method readHeader:()V
      37: return

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: aconst_null
       2: putfield      #9                  // Field compressed:[B
       5: aload_0
       6: aconst_null
       7: putfield      #10                 // Field uncompressed:[B
      10: aload_0
      11: getfield      #7                  // Field in:Ljava/io/InputStream;
      14: ifnull        24
      17: aload_0
      18: getfield      #7                  // Field in:Ljava/io/InputStream;
      21: invokevirtual #11                 // Method java/io/InputStream.close:()V
      24: return

  protected void readHeader() throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore_1
       2: iload_1
       3: aload_0
       4: getfield      #6                  // Field header:[B
       7: arraylength
       8: if_icmpge     46
      11: aload_0
      12: getfield      #7                  // Field in:Ljava/io/InputStream;
      15: aload_0
      16: getfield      #6                  // Field header:[B
      19: iload_1
      20: aload_0
      21: getfield      #6                  // Field header:[B
      24: arraylength
      25: iload_1
      26: isub
      27: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      30: istore_2
      31: iload_2
      32: iconst_m1
      33: if_icmpne     39
      36: goto          46
      39: iload_1
      40: iload_2
      41: iadd
      42: istore_1
      43: goto          2
      46: iload_1
      47: ifne          63
      50: new           #13                 // class org/xerial/snappy/SnappyIOException
      53: dup
      54: getstatic     #14                 // Field org/xerial/snappy/SnappyErrorCode.EMPTY_INPUT:Lorg/xerial/snappy/SnappyErrorCode;
      57: ldc           #15                 // String Cannot decompress empty stream
      59: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
      62: athrow
      63: iload_1
      64: aload_0
      65: getfield      #6                  // Field header:[B
      68: arraylength
      69: if_icmplt     82
      72: aload_0
      73: getfield      #6                  // Field header:[B
      76: invokestatic  #17                 // Method org/xerial/snappy/SnappyCodec.hasMagicHeaderPrefix:([B)Z
      79: ifne          92
      82: aload_0
      83: aload_0
      84: getfield      #6                  // Field header:[B
      87: iload_1
      88: invokevirtual #18                 // Method readFully:([BI)V
      91: return
      92: return

  private static boolean isValidHeader(byte[]) throws java.io.IOException;
    Code:
       0: new           #19                 // class java/io/ByteArrayInputStream
       3: dup
       4: aload_0
       5: invokespecial #20                 // Method java/io/ByteArrayInputStream."<init>":([B)V
       8: invokestatic  #21                 // Method org/xerial/snappy/SnappyCodec.readHeader:(Ljava/io/InputStream;)Lorg/xerial/snappy/SnappyCodec;
      11: astore_1
      12: aload_1
      13: invokevirtual #22                 // Method org/xerial/snappy/SnappyCodec.isValidMagicHeader:()Z
      16: ifeq          66
      19: aload_1
      20: getfield      #23                 // Field org/xerial/snappy/SnappyCodec.version:I
      23: iconst_1
      24: if_icmpge     64
      27: new           #13                 // class org/xerial/snappy/SnappyIOException
      30: dup
      31: getstatic     #25                 // Field org/xerial/snappy/SnappyErrorCode.INCOMPATIBLE_VERSION:Lorg/xerial/snappy/SnappyErrorCode;
      34: ldc           #26                 // String Compressed with an incompatible codec version %d. At least version %d is required
      36: iconst_2
      37: anewarray     #27                 // class java/lang/Object
      40: dup
      41: iconst_0
      42: aload_1
      43: getfield      #23                 // Field org/xerial/snappy/SnappyCodec.version:I
      46: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      49: aastore
      50: dup
      51: iconst_1
      52: iconst_1
      53: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      56: aastore
      57: invokestatic  #29                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      60: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
      63: athrow
      64: iconst_1
      65: ireturn
      66: iconst_0
      67: ireturn

  protected void readFully(byte[], int) throws java.io.IOException;
    Code:
       0: iload_2
       1: ifne          10
       4: aload_0
       5: iconst_1
       6: putfield      #2                  // Field finishedReading:Z
       9: return
      10: aload_0
      11: sipush        8192
      14: iload_2
      15: invokestatic  #30                 // Method java/lang/Math.max:(II)I
      18: newarray       byte
      20: putfield      #9                  // Field compressed:[B
      23: aload_1
      24: iconst_0
      25: aload_0
      26: getfield      #9                  // Field compressed:[B
      29: iconst_0
      30: iload_2
      31: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      34: iload_2
      35: istore_3
      36: iconst_0
      37: istore        4
      39: aload_0
      40: getfield      #7                  // Field in:Ljava/io/InputStream;
      43: aload_0
      44: getfield      #9                  // Field compressed:[B
      47: iload_3
      48: aload_0
      49: getfield      #9                  // Field compressed:[B
      52: arraylength
      53: iload_3
      54: isub
      55: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      58: dup
      59: istore        4
      61: iconst_m1
      62: if_icmpeq     115
      65: iload_3
      66: iload         4
      68: iadd
      69: istore_3
      70: iload_3
      71: aload_0
      72: getfield      #9                  // Field compressed:[B
      75: arraylength
      76: if_icmplt     39
      79: aload_0
      80: getfield      #9                  // Field compressed:[B
      83: arraylength
      84: iconst_2
      85: imul
      86: newarray       byte
      88: astore        5
      90: aload_0
      91: getfield      #9                  // Field compressed:[B
      94: iconst_0
      95: aload         5
      97: iconst_0
      98: aload_0
      99: getfield      #9                  // Field compressed:[B
     102: arraylength
     103: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
     106: aload_0
     107: aload         5
     109: putfield      #9                  // Field compressed:[B
     112: goto          39
     115: aload_0
     116: iconst_1
     117: putfield      #2                  // Field finishedReading:Z
     120: aload_0
     121: getfield      #9                  // Field compressed:[B
     124: iconst_0
     125: iload_3
     126: invokestatic  #32                 // Method org/xerial/snappy/Snappy.uncompressedLength:([BII)I
     129: istore        4
     131: aload_0
     132: iload         4
     134: newarray       byte
     136: putfield      #10                 // Field uncompressed:[B
     139: aload_0
     140: getfield      #9                  // Field compressed:[B
     143: iconst_0
     144: iload_3
     145: aload_0
     146: getfield      #10                 // Field uncompressed:[B
     149: iconst_0
     150: invokestatic  #33                 // Method org/xerial/snappy/Snappy.uncompress:([BII[BI)I
     153: pop
     154: aload_0
     155: iconst_0
     156: putfield      #3                  // Field uncompressedCursor:I
     159: aload_0
     160: iload         4
     162: putfield      #4                  // Field uncompressedLimit:I
     165: return

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: iload_3
       6: if_icmpge     99
       9: aload_0
      10: getfield      #3                  // Field uncompressedCursor:I
      13: aload_0
      14: getfield      #4                  // Field uncompressedLimit:I
      17: if_icmplt     42
      20: aload_0
      21: invokevirtual #34                 // Method hasNextChunk:()Z
      24: ifeq          30
      27: goto          3
      30: iload         4
      32: ifne          39
      35: iconst_m1
      36: goto          41
      39: iload         4
      41: ireturn
      42: aload_0
      43: getfield      #4                  // Field uncompressedLimit:I
      46: aload_0
      47: getfield      #3                  // Field uncompressedCursor:I
      50: isub
      51: iload_3
      52: iload         4
      54: isub
      55: invokestatic  #35                 // Method java/lang/Math.min:(II)I
      58: istore        5
      60: aload_0
      61: getfield      #10                 // Field uncompressed:[B
      64: aload_0
      65: getfield      #3                  // Field uncompressedCursor:I
      68: aload_1
      69: iload_2
      70: iload         4
      72: iadd
      73: iload         5
      75: invokestatic  #31                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      78: iload         4
      80: iload         5
      82: iadd
      83: istore        4
      85: aload_0
      86: dup
      87: getfield      #3                  // Field uncompressedCursor:I
      90: iload         5
      92: iadd
      93: putfield      #3                  // Field uncompressedCursor:I
      96: goto          3
      99: iload         4
     101: ireturn

  public int rawRead(java.lang.Object, int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: iload_3
       6: if_icmpge     99
       9: aload_0
      10: getfield      #3                  // Field uncompressedCursor:I
      13: aload_0
      14: getfield      #4                  // Field uncompressedLimit:I
      17: if_icmplt     42
      20: aload_0
      21: invokevirtual #34                 // Method hasNextChunk:()Z
      24: ifeq          30
      27: goto          3
      30: iload         4
      32: ifne          39
      35: iconst_m1
      36: goto          41
      39: iload         4
      41: ireturn
      42: aload_0
      43: getfield      #4                  // Field uncompressedLimit:I
      46: aload_0
      47: getfield      #3                  // Field uncompressedCursor:I
      50: isub
      51: iload_3
      52: iload         4
      54: isub
      55: invokestatic  #35                 // Method java/lang/Math.min:(II)I
      58: istore        5
      60: aload_0
      61: getfield      #10                 // Field uncompressed:[B
      64: aload_0
      65: getfield      #3                  // Field uncompressedCursor:I
      68: iload         5
      70: aload_1
      71: iload_2
      72: iload         4
      74: iadd
      75: invokestatic  #36                 // Method org/xerial/snappy/Snappy.arrayCopy:(Ljava/lang/Object;IILjava/lang/Object;I)V
      78: iload         4
      80: iload         5
      82: iadd
      83: istore        4
      85: aload_0
      86: dup
      87: getfield      #3                  // Field uncompressedCursor:I
      90: iload         5
      92: iadd
      93: putfield      #3                  // Field uncompressedCursor:I
      96: goto          3
      99: iload         4
     101: ireturn

  public int read(long[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: bipush        8
       5: imul
       6: iload_3
       7: bipush        8
       9: imul
      10: invokevirtual #37                 // Method rawRead:(Ljava/lang/Object;II)I
      13: ireturn

  public int read(long[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #38                 // Method read:([JII)I
       8: ireturn

  public int read(double[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: bipush        8
       5: imul
       6: iload_3
       7: bipush        8
       9: imul
      10: invokevirtual #37                 // Method rawRead:(Ljava/lang/Object;II)I
      13: ireturn

  public int read(double[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #39                 // Method read:([DII)I
       8: ireturn

  public int read(int[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #40                 // Method read:([III)I
       8: ireturn

  public int read(int[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_4
       4: imul
       5: iload_3
       6: iconst_4
       7: imul
       8: invokevirtual #37                 // Method rawRead:(Ljava/lang/Object;II)I
      11: ireturn

  public int read(float[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_4
       4: imul
       5: iload_3
       6: iconst_4
       7: imul
       8: invokevirtual #37                 // Method rawRead:(Ljava/lang/Object;II)I
      11: ireturn

  public int read(float[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #41                 // Method read:([FII)I
       8: ireturn

  public int read(short[], int, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_2
       4: imul
       5: iload_3
       6: iconst_2
       7: imul
       8: invokevirtual #37                 // Method rawRead:(Ljava/lang/Object;II)I
      11: ireturn

  public int read(short[]) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: aload_1
       4: arraylength
       5: invokevirtual #42                 // Method read:([SII)I
       8: ireturn

  private int readNext(byte[], int, int) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        4
       3: iload         4
       5: iload_3
       6: if_icmpge     51
       9: aload_0
      10: getfield      #7                  // Field in:Ljava/io/InputStream;
      13: aload_1
      14: iload         4
      16: iload_2
      17: iadd
      18: iload_3
      19: iload         4
      21: isub
      22: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
      25: istore        5
      27: iload         5
      29: iconst_m1
      30: if_icmpne     41
      33: aload_0
      34: iconst_1
      35: putfield      #2                  // Field finishedReading:Z
      38: iload         4
      40: ireturn
      41: iload         4
      43: iload         5
      45: iadd
      46: istore        4
      48: goto          3
      51: iload         4
      53: ireturn

  protected boolean hasNextChunk() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #2                  // Field finishedReading:Z
       4: ifeq          9
       7: iconst_0
       8: ireturn
       9: aload_0
      10: iconst_0
      11: putfield      #3                  // Field uncompressedCursor:I
      14: aload_0
      15: iconst_0
      16: putfield      #4                  // Field uncompressedLimit:I
      19: aload_0
      20: aload_0
      21: getfield      #6                  // Field header:[B
      24: iconst_0
      25: iconst_4
      26: invokespecial #43                 // Method readNext:([BII)I
      29: istore_1
      30: iload_1
      31: iconst_4
      32: if_icmpge     37
      35: iconst_0
      36: ireturn
      37: aload_0
      38: getfield      #6                  // Field header:[B
      41: iconst_0
      42: invokestatic  #44                 // Method org/xerial/snappy/SnappyOutputStream.readInt:([BI)I
      45: istore_2
      46: iload_2
      47: getstatic     #45                 // Field org/xerial/snappy/SnappyCodec.MAGIC_HEADER_HEAD:I
      50: if_icmpne     112
      53: invokestatic  #5                  // Method org/xerial/snappy/SnappyCodec.headerSize:()I
      56: iconst_4
      57: isub
      58: istore_3
      59: aload_0
      60: aload_0
      61: getfield      #6                  // Field header:[B
      64: iconst_4
      65: iload_3
      66: invokespecial #43                 // Method readNext:([BII)I
      69: istore_1
      70: iload_1
      71: iload_3
      72: if_icmpge     95
      75: new           #13                 // class org/xerial/snappy/SnappyIOException
      78: dup
      79: getstatic     #46                 // Field org/xerial/snappy/SnappyErrorCode.FAILED_TO_UNCOMPRESS:Lorg/xerial/snappy/SnappyErrorCode;
      82: ldc           #47                 // String Insufficient header size in a concatenated block
      84: iconst_0
      85: anewarray     #27                 // class java/lang/Object
      88: invokestatic  #29                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      91: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
      94: athrow
      95: aload_0
      96: getfield      #6                  // Field header:[B
      99: invokestatic  #48                 // Method isValidHeader:([B)Z
     102: ifeq          110
     105: aload_0
     106: invokevirtual #34                 // Method hasNextChunk:()Z
     109: ireturn
     110: iconst_0
     111: ireturn
     112: aload_0
     113: getfield      #9                  // Field compressed:[B
     116: ifnull        128
     119: iload_2
     120: aload_0
     121: getfield      #9                  // Field compressed:[B
     124: arraylength
     125: if_icmple     135
     128: aload_0
     129: iload_2
     130: newarray       byte
     132: putfield      #9                  // Field compressed:[B
     135: iconst_0
     136: istore_1
     137: iload_1
     138: iload_2
     139: if_icmpge     173
     142: aload_0
     143: getfield      #7                  // Field in:Ljava/io/InputStream;
     146: aload_0
     147: getfield      #9                  // Field compressed:[B
     150: iload_1
     151: iload_2
     152: iload_1
     153: isub
     154: invokevirtual #12                 // Method java/io/InputStream.read:([BII)I
     157: istore_3
     158: iload_3
     159: iconst_m1
     160: if_icmpne     166
     163: goto          173
     166: iload_1
     167: iload_3
     168: iadd
     169: istore_1
     170: goto          137
     173: iload_1
     174: iload_2
     175: if_icmpge     188
     178: new           #49                 // class java/io/IOException
     181: dup
     182: ldc           #50                 // String failed to read chunk
     184: invokespecial #51                 // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     187: athrow
     188: aload_0
     189: getfield      #9                  // Field compressed:[B
     192: iconst_0
     193: iload_2
     194: invokestatic  #32                 // Method org/xerial/snappy/Snappy.uncompressedLength:([BII)I
     197: istore_3
     198: aload_0
     199: getfield      #10                 // Field uncompressed:[B
     202: ifnull        214
     205: iload_3
     206: aload_0
     207: getfield      #10                 // Field uncompressed:[B
     210: arraylength
     211: if_icmple     221
     214: aload_0
     215: iload_3
     216: newarray       byte
     218: putfield      #10                 // Field uncompressed:[B
     221: aload_0
     222: getfield      #9                  // Field compressed:[B
     225: iconst_0
     226: iload_2
     227: aload_0
     228: getfield      #10                 // Field uncompressed:[B
     231: iconst_0
     232: invokestatic  #33                 // Method org/xerial/snappy/Snappy.uncompress:([BII[BI)I
     235: istore        4
     237: iload_3
     238: iload         4
     240: if_icmpeq     278
     243: new           #13                 // class org/xerial/snappy/SnappyIOException
     246: dup
     247: getstatic     #52                 // Field org/xerial/snappy/SnappyErrorCode.INVALID_CHUNK_SIZE:Lorg/xerial/snappy/SnappyErrorCode;
     250: ldc           #53                 // String expected %,d bytes, but decompressed chunk has %,d bytes
     252: iconst_2
     253: anewarray     #27                 // class java/lang/Object
     256: dup
     257: iconst_0
     258: iload_3
     259: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     262: aastore
     263: dup
     264: iconst_1
     265: iload         4
     267: invokestatic  #28                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     270: aastore
     271: invokestatic  #29                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
     274: invokespecial #16                 // Method org/xerial/snappy/SnappyIOException."<init>":(Lorg/xerial/snappy/SnappyErrorCode;Ljava/lang/String;)V
     277: athrow
     278: aload_0
     279: iload         4
     281: putfield      #4                  // Field uncompressedLimit:I
     284: iconst_1
     285: ireturn

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field uncompressedCursor:I
       4: aload_0
       5: getfield      #4                  // Field uncompressedLimit:I
       8: if_icmpge     32
      11: aload_0
      12: getfield      #10                 // Field uncompressed:[B
      15: aload_0
      16: dup
      17: getfield      #3                  // Field uncompressedCursor:I
      20: dup_x1
      21: iconst_1
      22: iadd
      23: putfield      #3                  // Field uncompressedCursor:I
      26: baload
      27: sipush        255
      30: iand
      31: ireturn
      32: aload_0
      33: invokevirtual #34                 // Method hasNextChunk:()Z
      36: ifeq          44
      39: aload_0
      40: invokevirtual #54                 // Method read:()I
      43: ireturn
      44: iconst_m1
      45: ireturn

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field uncompressedCursor:I
       4: aload_0
       5: getfield      #4                  // Field uncompressedLimit:I
       8: if_icmpge     21
      11: aload_0
      12: getfield      #4                  // Field uncompressedLimit:I
      15: aload_0
      16: getfield      #3                  // Field uncompressedCursor:I
      19: isub
      20: ireturn
      21: aload_0
      22: invokevirtual #34                 // Method hasNextChunk:()Z
      25: ifeq          38
      28: aload_0
      29: getfield      #4                  // Field uncompressedLimit:I
      32: aload_0
      33: getfield      #3                  // Field uncompressedCursor:I
      36: isub
      37: ireturn
      38: iconst_0
      39: ireturn
}
