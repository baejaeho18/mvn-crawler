Compiled from "SnappyCodec.java"
public class org.xerial.snappy.SnappyCodec {
  static final byte[] MAGIC_HEADER;

  public static final int MAGIC_LEN;

  public static final int HEADER_SIZE;

  public static final int MAGIC_HEADER_HEAD;

  public static final int DEFAULT_VERSION;

  public static final int MINIMUM_COMPATIBLE_VERSION;

  public static final org.xerial.snappy.SnappyCodec currentHeader;

  public final byte[] magic;

  public final int version;

  public final int compatibleVersion;

  private final byte[] headerArray;

  static final boolean $assertionsDisabled;

  private org.xerial.snappy.SnappyCodec(byte[], int, int);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #2                  // Field magic:[B
       9: aload_0
      10: iload_2
      11: putfield      #3                  // Field version:I
      14: aload_0
      15: iload_3
      16: putfield      #4                  // Field compatibleVersion:I
      19: new           #5                  // class java/io/ByteArrayOutputStream
      22: dup
      23: getstatic     #6                  // Field HEADER_SIZE:I
      26: invokespecial #7                  // Method java/io/ByteArrayOutputStream."<init>":(I)V
      29: astore        4
      31: new           #8                  // class java/io/DataOutputStream
      34: dup
      35: aload         4
      37: invokespecial #9                  // Method java/io/DataOutputStream."<init>":(Ljava/io/OutputStream;)V
      40: astore        5
      42: aload         5
      44: aload_1
      45: iconst_0
      46: getstatic     #10                 // Field MAGIC_LEN:I
      49: invokevirtual #11                 // Method java/io/DataOutputStream.write:([BII)V
      52: aload         5
      54: iload_2
      55: invokevirtual #12                 // Method java/io/DataOutputStream.writeInt:(I)V
      58: aload         5
      60: iload_3
      61: invokevirtual #12                 // Method java/io/DataOutputStream.writeInt:(I)V
      64: aload         5
      66: invokevirtual #13                 // Method java/io/DataOutputStream.close:()V
      69: goto          84
      72: astore        6
      74: new           #15                 // class java/lang/RuntimeException
      77: dup
      78: aload         6
      80: invokespecial #16                 // Method java/lang/RuntimeException."<init>":(Ljava/lang/Throwable;)V
      83: athrow
      84: aload_0
      85: aload         4
      87: invokevirtual #17                 // Method java/io/ByteArrayOutputStream.toByteArray:()[B
      90: putfield      #18                 // Field headerArray:[B
      93: return
    Exception table:
       from    to  target type
          42    69    72   Class java/io/IOException

  public static byte[] getMagicHeader();
    Code:
       0: getstatic     #19                 // Field MAGIC_HEADER:[B
       3: invokevirtual #20                 // Method "[B".clone:()Ljava/lang/Object;
       6: checkcast     #21                 // class "[B"
       9: areturn

  public java.lang.String toString();
    Code:
       0: ldc           #22                 // String version:%d, compatible version:%d
       2: iconst_2
       3: anewarray     #23                 // class java/lang/Object
       6: dup
       7: iconst_0
       8: aload_0
       9: getfield      #3                  // Field version:I
      12: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      15: aastore
      16: dup
      17: iconst_1
      18: aload_0
      19: getfield      #4                  // Field compatibleVersion:I
      22: invokestatic  #24                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: aastore
      26: invokestatic  #25                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      29: areturn

  public static int headerSize();
    Code:
       0: getstatic     #6                  // Field HEADER_SIZE:I
       3: ireturn

  public int writeHeader(byte[], int);
    Code:
       0: aload_0
       1: getfield      #18                 // Field headerArray:[B
       4: iconst_0
       5: aload_1
       6: iload_2
       7: aload_0
       8: getfield      #18                 // Field headerArray:[B
      11: arraylength
      12: invokestatic  #26                 // Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
      15: aload_0
      16: getfield      #18                 // Field headerArray:[B
      19: arraylength
      20: ireturn

  public int writeHeader(java.io.OutputStream) throws java.io.IOException;
    Code:
       0: aload_1
       1: aload_0
       2: getfield      #18                 // Field headerArray:[B
       5: iconst_0
       6: aload_0
       7: getfield      #18                 // Field headerArray:[B
      10: arraylength
      11: invokevirtual #27                 // Method java/io/OutputStream.write:([BII)V
      14: aload_0
      15: getfield      #18                 // Field headerArray:[B
      18: arraylength
      19: ireturn

  public boolean isValidMagicHeader();
    Code:
       0: getstatic     #19                 // Field MAGIC_HEADER:[B
       3: aload_0
       4: getfield      #2                  // Field magic:[B
       7: invokestatic  #28                 // Method java/util/Arrays.equals:([B[B)Z
      10: ireturn

  public static boolean hasMagicHeaderPrefix(byte[]);
    Code:
       0: getstatic     #10                 // Field MAGIC_LEN:I
       3: aload_0
       4: arraylength
       5: invokestatic  #29                 // Method java/lang/Math.min:(II)I
       8: istore_1
       9: iconst_0
      10: istore_2
      11: iload_2
      12: iload_1
      13: if_icmpge     35
      16: aload_0
      17: iload_2
      18: baload
      19: getstatic     #19                 // Field MAGIC_HEADER:[B
      22: iload_2
      23: baload
      24: if_icmpeq     29
      27: iconst_0
      28: ireturn
      29: iinc          2, 1
      32: goto          11
      35: iconst_1
      36: ireturn

  public static org.xerial.snappy.SnappyCodec readHeader(java.io.InputStream) throws java.io.IOException;
    Code:
       0: new           #30                 // class java/io/DataInputStream
       3: dup
       4: aload_0
       5: invokespecial #31                 // Method java/io/DataInputStream."<init>":(Ljava/io/InputStream;)V
       8: astore_1
       9: getstatic     #10                 // Field MAGIC_LEN:I
      12: newarray       byte
      14: astore_2
      15: aload_1
      16: aload_2
      17: iconst_0
      18: getstatic     #10                 // Field MAGIC_LEN:I
      21: invokevirtual #32                 // Method java/io/DataInputStream.readFully:([BII)V
      24: aload_1
      25: invokevirtual #33                 // Method java/io/DataInputStream.readInt:()I
      28: istore_3
      29: aload_1
      30: invokevirtual #33                 // Method java/io/DataInputStream.readInt:()I
      33: istore        4
      35: new           #34                 // class org/xerial/snappy/SnappyCodec
      38: dup
      39: aload_2
      40: iload_3
      41: iload         4
      43: invokespecial #35                 // Method "<init>":([BII)V
      46: areturn

  static {};
    Code:
       0: ldc           #34                 // class org/xerial/snappy/SnappyCodec
       2: invokevirtual #36                 // Method java/lang/Class.desiredAssertionStatus:()Z
       5: ifne          12
       8: iconst_1
       9: goto          13
      12: iconst_0
      13: putstatic     #37                 // Field $assertionsDisabled:Z
      16: bipush        8
      18: newarray       byte
      20: dup
      21: iconst_0
      22: bipush        -126
      24: bastore
      25: dup
      26: iconst_1
      27: bipush        83
      29: bastore
      30: dup
      31: iconst_2
      32: bipush        78
      34: bastore
      35: dup
      36: iconst_3
      37: bipush        65
      39: bastore
      40: dup
      41: iconst_4
      42: bipush        80
      44: bastore
      45: dup
      46: iconst_5
      47: bipush        80
      49: bastore
      50: dup
      51: bipush        6
      53: bipush        89
      55: bastore
      56: dup
      57: bipush        7
      59: iconst_0
      60: bastore
      61: putstatic     #19                 // Field MAGIC_HEADER:[B
      64: getstatic     #19                 // Field MAGIC_HEADER:[B
      67: arraylength
      68: putstatic     #10                 // Field MAGIC_LEN:I
      71: getstatic     #10                 // Field MAGIC_LEN:I
      74: bipush        8
      76: iadd
      77: putstatic     #6                  // Field HEADER_SIZE:I
      80: getstatic     #19                 // Field MAGIC_HEADER:[B
      83: iconst_0
      84: invokestatic  #38                 // Method org/xerial/snappy/SnappyOutputStream.readInt:([BI)I
      87: putstatic     #39                 // Field MAGIC_HEADER_HEAD:I
      90: getstatic     #37                 // Field $assertionsDisabled:Z
      93: ifne          110
      96: getstatic     #39                 // Field MAGIC_HEADER_HEAD:I
      99: iflt          110
     102: new           #40                 // class java/lang/AssertionError
     105: dup
     106: invokespecial #41                 // Method java/lang/AssertionError."<init>":()V
     109: athrow
     110: new           #34                 // class org/xerial/snappy/SnappyCodec
     113: dup
     114: getstatic     #19                 // Field MAGIC_HEADER:[B
     117: iconst_1
     118: iconst_1
     119: invokespecial #35                 // Method "<init>":([BII)V
     122: putstatic     #42                 // Field currentHeader:Lorg/xerial/snappy/SnappyCodec;
     125: return
}
