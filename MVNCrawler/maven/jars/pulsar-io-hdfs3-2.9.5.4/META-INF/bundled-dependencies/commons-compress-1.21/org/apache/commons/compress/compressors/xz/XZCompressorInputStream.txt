Compiled from "XZCompressorInputStream.java"
public class org.apache.commons.compress.compressors.xz.XZCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream implements org.apache.commons.compress.utils.InputStreamStatistics {
  private final org.apache.commons.compress.utils.CountingInputStream countingStream;

  private final java.io.InputStream in;

  public static boolean matches(byte[], int);
    Code:
       0: iload_1
       1: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B
       4: arraylength
       5: if_icmpge     10
       8: iconst_0
       9: ireturn
      10: iconst_0
      11: istore_2
      12: iload_2
      13: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B
      16: arraylength
      17: if_icmpge     39
      20: aload_0
      21: iload_2
      22: baload
      23: getstatic     #1                  // Field org/tukaani/xz/XZ.HEADER_MAGIC:[B
      26: iload_2
      27: baload
      28: if_icmpeq     33
      31: iconst_0
      32: ireturn
      33: iinc          2, 1
      36: goto          12
      39: iconst_1
      40: ireturn

  public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iconst_0
       3: invokespecial #2                  // Method "<init>":(Ljava/io/InputStream;Z)V
       6: return

  public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_m1
       4: invokespecial #3                  // Method "<init>":(Ljava/io/InputStream;ZI)V
       7: return

  public org.apache.commons.compress.compressors.xz.XZCompressorInputStream(java.io.InputStream, boolean, int) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #4                  // Method org/apache/commons/compress/compressors/CompressorInputStream."<init>":()V
       4: aload_0
       5: new           #5                  // class org/apache/commons/compress/utils/CountingInputStream
       8: dup
       9: aload_1
      10: invokespecial #6                  // Method org/apache/commons/compress/utils/CountingInputStream."<init>":(Ljava/io/InputStream;)V
      13: putfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;
      16: iload_2
      17: ifeq          39
      20: aload_0
      21: new           #8                  // class org/tukaani/xz/XZInputStream
      24: dup
      25: aload_0
      26: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;
      29: iload_3
      30: invokespecial #9                  // Method org/tukaani/xz/XZInputStream."<init>":(Ljava/io/InputStream;I)V
      33: putfield      #10                 // Field in:Ljava/io/InputStream;
      36: goto          55
      39: aload_0
      40: new           #11                 // class org/tukaani/xz/SingleXZInputStream
      43: dup
      44: aload_0
      45: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;
      48: iload_3
      49: invokespecial #12                 // Method org/tukaani/xz/SingleXZInputStream."<init>":(Ljava/io/InputStream;I)V
      52: putfield      #10                 // Field in:Ljava/io/InputStream;
      55: return

  public int read() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #13                 // Method java/io/InputStream.read:()I
       7: istore_1
       8: aload_0
       9: iload_1
      10: iconst_m1
      11: if_icmpne     18
      14: iconst_m1
      15: goto          19
      18: iconst_1
      19: invokevirtual #14                 // Method count:(I)V
      22: iload_1
      23: ireturn
      24: astore_1
      25: new           #16                 // class org/apache/commons/compress/MemoryLimitException
      28: dup
      29: aload_1
      30: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I
      33: i2l
      34: aload_1
      35: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I
      38: aload_1
      39: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException."<init>":(JILjava/lang/Exception;)V
      42: athrow
    Exception table:
       from    to  target type
           0    23    24   Class org/tukaani/xz/MemoryLimitException

  public int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: aload_0
       7: getfield      #10                 // Field in:Ljava/io/InputStream;
      10: aload_1
      11: iload_2
      12: iload_3
      13: invokevirtual #20                 // Method java/io/InputStream.read:([BII)I
      16: istore        4
      18: aload_0
      19: iload         4
      21: invokevirtual #14                 // Method count:(I)V
      24: iload         4
      26: ireturn
      27: astore        4
      29: new           #16                 // class org/apache/commons/compress/MemoryLimitException
      32: dup
      33: aload         4
      35: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I
      38: i2l
      39: aload         4
      41: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I
      44: aload         4
      46: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException."<init>":(JILjava/lang/Exception;)V
      49: athrow
    Exception table:
       from    to  target type
           6    26    27   Class org/tukaani/xz/MemoryLimitException

  public long skip(long) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field in:Ljava/io/InputStream;
       4: lload_1
       5: invokestatic  #21                 // Method org/apache/commons/compress/utils/IOUtils.skip:(Ljava/io/InputStream;J)J
       8: lreturn
       9: astore_3
      10: new           #16                 // class org/apache/commons/compress/MemoryLimitException
      13: dup
      14: aload_3
      15: invokevirtual #17                 // Method org/tukaani/xz/MemoryLimitException.getMemoryNeeded:()I
      18: i2l
      19: aload_3
      20: invokevirtual #18                 // Method org/tukaani/xz/MemoryLimitException.getMemoryLimit:()I
      23: aload_3
      24: invokespecial #19                 // Method org/apache/commons/compress/MemoryLimitException."<init>":(JILjava/lang/Exception;)V
      27: athrow
    Exception table:
       from    to  target type
           0     8     9   Class org/tukaani/xz/MemoryLimitException

  public int available() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #22                 // Method java/io/InputStream.available:()I
       7: ireturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #10                 // Field in:Ljava/io/InputStream;
       4: invokevirtual #23                 // Method java/io/InputStream.close:()V
       7: return

  public long getCompressedCount();
    Code:
       0: aload_0
       1: getfield      #7                  // Field countingStream:Lorg/apache/commons/compress/utils/CountingInputStream;
       4: invokevirtual #24                 // Method org/apache/commons/compress/utils/CountingInputStream.getBytesRead:()J
       7: lreturn
}
