Compiled from "HuffmanDecoder.java"
class org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState extends org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$DecoderState {
  private org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState();
    Code:
       0: aload_0
       1: aconst_null
       2: invokespecial #2                  // Method org/apache/commons/compress/compressors/deflate64/HuffmanDecoder$DecoderState."<init>":(Lorg/apache/commons/compress/compressors/deflate64/HuffmanDecoder$1;)V
       5: return

  org.apache.commons.compress.compressors.deflate64.HuffmanState state();
    Code:
       0: getstatic     #3                  // Field org/apache/commons/compress/compressors/deflate64/HuffmanState.INITIAL:Lorg/apache/commons/compress/compressors/deflate64/HuffmanState;
       3: areturn

  int read(byte[], int, int) throws java.io.IOException;
    Code:
       0: iload_3
       1: ifne          6
       4: iconst_0
       5: ireturn
       6: new           #4                  // class java/lang/IllegalStateException
       9: dup
      10: ldc           #5                  // String Cannot read in this state
      12: invokespecial #6                  // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      15: athrow

  boolean hasData();
    Code:
       0: iconst_0
       1: ireturn

  int available();
    Code:
       0: iconst_0
       1: ireturn

  org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$InitialState(org.apache.commons.compress.compressors.deflate64.HuffmanDecoder$1);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method "<init>":()V
       4: return
}
