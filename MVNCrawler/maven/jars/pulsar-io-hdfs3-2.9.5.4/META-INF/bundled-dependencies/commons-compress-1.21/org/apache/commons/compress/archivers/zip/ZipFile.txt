Compiled from "ZipFile.java"
public class org.apache.commons.compress.archivers.zip.ZipFile implements java.io.Closeable {
  private static final int HASH_SIZE;

  static final int NIBLET_MASK;

  static final int BYTE_SHIFT;

  private static final int POS_0;

  private static final int POS_1;

  private static final int POS_2;

  private static final int POS_3;

  private static final byte[] ONE_ZERO_BYTE;

  private final java.util.List<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> entries;

  private final java.util.Map<java.lang.String, java.util.LinkedList<org.apache.commons.compress.archivers.zip.ZipArchiveEntry>> nameMap;

  private final java.lang.String encoding;

  private final org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding;

  private final java.lang.String archiveName;

  private final java.nio.channels.SeekableByteChannel archive;

  private final boolean useUnicodeExtraFields;

  private volatile boolean closed;

  private final boolean isSplitZipArchive;

  private final byte[] dwordBuf;

  private final byte[] wordBuf;

  private final byte[] cfhBuf;

  private final byte[] shortBuf;

  private final java.nio.ByteBuffer dwordBbuf;

  private final java.nio.ByteBuffer wordBbuf;

  private final java.nio.ByteBuffer cfhBbuf;

  private final java.nio.ByteBuffer shortBbuf;

  private long centralDirectoryStartDiskNumber;

  private long centralDirectoryStartRelativeOffset;

  private long centralDirectoryStartOffset;

  private static final int CFH_LEN;

  private static final long CFH_SIG;

  static final int MIN_EOCD_SIZE;

  private static final int MAX_EOCD_SIZE;

  private static final int CFD_LOCATOR_OFFSET;

  private static final int CFD_DISK_OFFSET;

  private static final int CFD_LOCATOR_RELATIVE_OFFSET;

  private static final int ZIP64_EOCDL_LENGTH;

  private static final int ZIP64_EOCDL_LOCATOR_OFFSET;

  private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET;

  private static final int ZIP64_EOCD_CFD_DISK_OFFSET;

  private static final int ZIP64_EOCD_CFD_LOCATOR_RELATIVE_OFFSET;

  private static final long LFH_OFFSET_FOR_FILENAME_LENGTH;

  private final java.util.Comparator<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> offsetComparator;

  public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #5                  // String UTF8
       4: invokespecial #6                  // Method "<init>":(Ljava/io/File;Ljava/lang/String;)V
       7: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #7                  // class java/io/File
       4: dup
       5: aload_1
       6: invokespecial #8                  // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: ldc           #5                  // String UTF8
      11: invokespecial #6                  // Method "<init>":(Ljava/io/File;Ljava/lang/String;)V
      14: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.lang.String, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #7                  // class java/io/File
       4: dup
       5: aload_1
       6: invokespecial #8                  // Method java/io/File."<init>":(Ljava/lang/String;)V
       9: aload_2
      10: iconst_1
      11: invokespecial #9                  // Method "<init>":(Ljava/io/File;Ljava/lang/String;Z)V
      14: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iconst_1
       4: invokespecial #9                  // Method "<init>":(Ljava/io/File;Ljava/lang/String;Z)V
       7: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File, java.lang.String, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: iload_3
       4: iconst_0
       5: invokespecial #10                 // Method "<init>":(Ljava/io/File;Ljava/lang/String;ZZ)V
       8: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.io.File, java.lang.String, boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #11                 // Method java/io/File.toPath:()Ljava/nio/file/Path;
       5: getstatic     #12                 // Field java/nio/file/StandardOpenOption.READ:Ljava/nio/file/StandardOpenOption;
       8: invokestatic  #13                 // Method java/util/EnumSet.of:(Ljava/lang/Enum;)Ljava/util/EnumSet;
      11: iconst_0
      12: anewarray     #14                 // class java/nio/file/attribute/FileAttribute
      15: invokestatic  #15                 // Method java/nio/file/Files.newByteChannel:(Ljava/nio/file/Path;Ljava/util/Set;[Ljava/nio/file/attribute/FileAttribute;)Ljava/nio/channels/SeekableByteChannel;
      18: aload_1
      19: invokevirtual #16                 // Method java/io/File.getAbsolutePath:()Ljava/lang/String;
      22: aload_2
      23: iload_3
      24: iconst_1
      25: iload         4
      27: invokespecial #17                 // Method "<init>":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V
      30: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #18                 // String unknown archive
       4: ldc           #5                  // String UTF8
       6: iconst_1
       7: invokespecial #19                 // Method "<init>":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V
      10: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel, java.lang.String) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: ldc           #18                 // String unknown archive
       4: aload_2
       5: iconst_1
       6: invokespecial #19                 // Method "<init>":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;Z)V
       9: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iconst_0
       7: iconst_0
       8: invokespecial #17                 // Method "<init>":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V
      11: return

  public org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: aload_3
       4: iload         4
       6: iconst_0
       7: iload         5
       9: invokespecial #17                 // Method "<init>":(Ljava/nio/channels/SeekableByteChannel;Ljava/lang/String;Ljava/lang/String;ZZZ)V
      12: return

  private org.apache.commons.compress.archivers.zip.ZipFile(java.nio.channels.SeekableByteChannel, java.lang.String, java.lang.String, boolean, boolean, boolean) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #20                 // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #21                 // class java/util/LinkedList
       8: dup
       9: invokespecial #22                 // Method java/util/LinkedList."<init>":()V
      12: putfield      #23                 // Field entries:Ljava/util/List;
      15: aload_0
      16: new           #24                 // class java/util/HashMap
      19: dup
      20: sipush        509
      23: invokespecial #25                 // Method java/util/HashMap."<init>":(I)V
      26: putfield      #26                 // Field nameMap:Ljava/util/Map;
      29: aload_0
      30: iconst_1
      31: putfield      #27                 // Field closed:Z
      34: aload_0
      35: bipush        8
      37: newarray       byte
      39: putfield      #28                 // Field dwordBuf:[B
      42: aload_0
      43: iconst_4
      44: newarray       byte
      46: putfield      #29                 // Field wordBuf:[B
      49: aload_0
      50: bipush        42
      52: newarray       byte
      54: putfield      #30                 // Field cfhBuf:[B
      57: aload_0
      58: iconst_2
      59: newarray       byte
      61: putfield      #31                 // Field shortBuf:[B
      64: aload_0
      65: aload_0
      66: getfield      #28                 // Field dwordBuf:[B
      69: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      72: putfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
      75: aload_0
      76: aload_0
      77: getfield      #29                 // Field wordBuf:[B
      80: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      83: putfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      86: aload_0
      87: aload_0
      88: getfield      #30                 // Field cfhBuf:[B
      91: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
      94: putfield      #35                 // Field cfhBbuf:Ljava/nio/ByteBuffer;
      97: aload_0
      98: aload_0
      99: getfield      #31                 // Field shortBuf:[B
     102: invokestatic  #32                 // Method java/nio/ByteBuffer.wrap:([B)Ljava/nio/ByteBuffer;
     105: putfield      #36                 // Field shortBbuf:Ljava/nio/ByteBuffer;
     108: aload_0
     109: invokedynamic #37,  0             // InvokeDynamic #0:applyAsLong:()Ljava/util/function/ToLongFunction;
     114: invokestatic  #38                 // InterfaceMethod java/util/Comparator.comparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;
     117: invokedynamic #39,  0             // InvokeDynamic #1:applyAsLong:()Ljava/util/function/ToLongFunction;
     122: invokeinterface #40,  2           // InterfaceMethod java/util/Comparator.thenComparingLong:(Ljava/util/function/ToLongFunction;)Ljava/util/Comparator;
     127: putfield      #41                 // Field offsetComparator:Ljava/util/Comparator;
     130: aload_0
     131: aload_1
     132: instanceof    #42                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel
     135: putfield      #43                 // Field isSplitZipArchive:Z
     138: aload_0
     139: aload_2
     140: putfield      #44                 // Field archiveName:Ljava/lang/String;
     143: aload_0
     144: aload_3
     145: putfield      #45                 // Field encoding:Ljava/lang/String;
     148: aload_0
     149: aload_3
     150: invokestatic  #46                 // Method org/apache/commons/compress/archivers/zip/ZipEncodingHelper.getZipEncoding:(Ljava/lang/String;)Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
     153: putfield      #47                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
     156: aload_0
     157: iload         4
     159: putfield      #48                 // Field useUnicodeExtraFields:Z
     162: aload_0
     163: aload_1
     164: putfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     167: iconst_0
     168: istore        7
     170: aload_0
     171: invokespecial #49                 // Method populateFromCentralDirectory:()Ljava/util/Map;
     174: astore        8
     176: iload         6
     178: ifne          187
     181: aload_0
     182: aload         8
     184: invokespecial #50                 // Method resolveLocalFileHeaderData:(Ljava/util/Map;)V
     187: aload_0
     188: invokespecial #51                 // Method fillNameMap:()V
     191: iconst_1
     192: istore        7
     194: aload_0
     195: iload         7
     197: ifne          204
     200: iconst_1
     201: goto          205
     204: iconst_0
     205: putfield      #27                 // Field closed:Z
     208: iload         7
     210: ifne          295
     213: iload         5
     215: ifeq          295
     218: aload_0
     219: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     222: invokestatic  #52                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
     225: goto          295
     228: astore        8
     230: new           #53                 // class java/io/IOException
     233: dup
     234: new           #54                 // class java/lang/StringBuilder
     237: dup
     238: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
     241: ldc           #56                 // String Error on ZipFile
     243: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     246: aload_2
     247: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     250: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     253: aload         8
     255: invokespecial #59                 // Method java/io/IOException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     258: athrow
     259: astore        9
     261: aload_0
     262: iload         7
     264: ifne          271
     267: iconst_1
     268: goto          272
     271: iconst_0
     272: putfield      #27                 // Field closed:Z
     275: iload         7
     277: ifne          292
     280: iload         5
     282: ifeq          292
     285: aload_0
     286: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     289: invokestatic  #52                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
     292: aload         9
     294: athrow
     295: return
    Exception table:
       from    to  target type
         170   194   228   Class java/io/IOException
         170   194   259   any
         228   261   259   any

  public java.lang.String getEncoding();
    Code:
       0: aload_0
       1: getfield      #45                 // Field encoding:Ljava/lang/String;
       4: areturn

  public void close() throws java.io.IOException;
    Code:
       0: aload_0
       1: iconst_1
       2: putfield      #27                 // Field closed:Z
       5: aload_0
       6: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
       9: invokeinterface #60,  1           // InterfaceMethod java/nio/channels/SeekableByteChannel.close:()V
      14: return

  public static void closeQuietly(org.apache.commons.compress.archivers.zip.ZipFile);
    Code:
       0: aload_0
       1: invokestatic  #52                 // Method org/apache/commons/compress/utils/IOUtils.closeQuietly:(Ljava/io/Closeable;)V
       4: return

  public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntries();
    Code:
       0: aload_0
       1: getfield      #23                 // Field entries:Ljava/util/List;
       4: invokestatic  #61                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;
       7: areturn

  public java.util.Enumeration<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder();
    Code:
       0: aload_0
       1: getfield      #23                 // Field entries:Ljava/util/List;
       4: getstatic     #62                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;
       7: invokeinterface #63,  2           // InterfaceMethod java/util/List.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      12: checkcast     #64                 // class "[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
      15: astore_1
      16: aload_1
      17: aload_0
      18: getfield      #41                 // Field offsetComparator:Ljava/util/Comparator;
      21: invokestatic  #65                 // Method java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V
      24: aload_1
      25: invokestatic  #66                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      28: invokestatic  #61                 // Method java/util/Collections.enumeration:(Ljava/util/Collection;)Ljava/util/Enumeration;
      31: areturn

  public org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #26                 // Field nameMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #21                 // class java/util/LinkedList
      13: astore_2
      14: aload_2
      15: ifnull        28
      18: aload_2
      19: invokevirtual #68                 // Method java/util/LinkedList.getFirst:()Ljava/lang/Object;
      22: checkcast     #69                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry
      25: goto          29
      28: aconst_null
      29: areturn

  public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntries(java.lang.String);
    Code:
       0: aload_0
       1: getfield      #26                 // Field nameMap:Ljava/util/Map;
       4: aload_1
       5: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #70                 // class java/util/List
      13: astore_2
      14: aload_2
      15: ifnull        22
      18: aload_2
      19: goto          25
      22: invokestatic  #71                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      25: areturn

  public java.lang.Iterable<org.apache.commons.compress.archivers.zip.ZipArchiveEntry> getEntriesInPhysicalOrder(java.lang.String);
    Code:
       0: getstatic     #62                 // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry.EMPTY_ZIP_ARCHIVE_ENTRY_ARRAY:[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;
       3: astore_2
       4: aload_0
       5: getfield      #26                 // Field nameMap:Ljava/util/Map;
       8: aload_1
       9: invokeinterface #72,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
      14: ifeq          46
      17: aload_0
      18: getfield      #26                 // Field nameMap:Ljava/util/Map;
      21: aload_1
      22: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #21                 // class java/util/LinkedList
      30: aload_2
      31: invokevirtual #73                 // Method java/util/LinkedList.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
      34: checkcast     #64                 // class "[Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;"
      37: astore_2
      38: aload_2
      39: aload_0
      40: getfield      #41                 // Field offsetComparator:Ljava/util/Comparator;
      43: invokestatic  #65                 // Method java/util/Arrays.sort:([Ljava/lang/Object;Ljava/util/Comparator;)V
      46: aload_2
      47: invokestatic  #66                 // Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
      50: areturn

  public boolean canReadEntryData(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);
    Code:
       0: aload_1
       1: invokestatic  #74                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.canHandleEntryData:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z
       4: ireturn

  public java.io.InputStream getRawInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry);
    Code:
       0: aload_1
       1: instanceof    #75                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J
      13: lstore_2
      14: lload_2
      15: ldc2_w        #78                 // long -1l
      18: lcmp
      19: ifne          24
      22: aconst_null
      23: areturn
      24: aload_0
      25: lload_2
      26: aload_1
      27: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J
      30: invokespecial #81                 // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;
      33: areturn

  public void copyRawEntries(org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream, org.apache.commons.compress.archivers.zip.ZipArchiveEntryPredicate) throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #82                 // Method getEntriesInPhysicalOrder:()Ljava/util/Enumeration;
       4: astore_3
       5: aload_3
       6: invokeinterface #83,  1           // InterfaceMethod java/util/Enumeration.hasMoreElements:()Z
      11: ifeq          51
      14: aload_3
      15: invokeinterface #84,  1           // InterfaceMethod java/util/Enumeration.nextElement:()Ljava/lang/Object;
      20: checkcast     #69                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry
      23: astore        4
      25: aload_2
      26: aload         4
      28: invokeinterface #85,  2           // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.test:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z
      33: ifeq          48
      36: aload_1
      37: aload         4
      39: aload_0
      40: aload         4
      42: invokevirtual #86                 // Method getRawInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;
      45: invokevirtual #87                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.addRawArchiveEntry:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;Ljava/io/InputStream;)V
      48: goto          5
      51: return

  public java.io.InputStream getInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;
    Code:
       0: aload_1
       1: instanceof    #75                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry
       4: ifne          9
       7: aconst_null
       8: areturn
       9: aload_1
      10: invokestatic  #88                 // Method org/apache/commons/compress/archivers/zip/ZipUtil.checkRequestedFeatures:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
      13: aload_0
      14: aload_1
      15: invokespecial #89                 // Method getDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)J
      18: lstore_2
      19: new           #90                 // class java/io/BufferedInputStream
      22: dup
      23: aload_0
      24: lload_2
      25: aload_1
      26: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J
      29: invokespecial #81                 // Method createBoundedInputStream:(JJ)Lorg/apache/commons/compress/utils/BoundedArchiveInputStream;
      32: invokespecial #91                 // Method java/io/BufferedInputStream."<init>":(Ljava/io/InputStream;)V
      35: astore        4
      37: getstatic     #92                 // Field org/apache/commons/compress/archivers/zip/ZipFile$2.$SwitchMap$org$apache$commons$compress$archivers$zip$ZipMethod:[I
      40: aload_1
      41: invokevirtual #93                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
      44: invokestatic  #94                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;
      47: invokevirtual #95                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.ordinal:()I
      50: iaload
      51: tableswitch   { // 1 to 19
                     1: 140
                     2: 150
                     3: 160
                     4: 198
                     5: 240
                     6: 250
                     7: 260
                     8: 260
                     9: 260
                    10: 260
                    11: 260
                    12: 260
                    13: 260
                    14: 260
                    15: 260
                    16: 260
                    17: 260
                    18: 260
                    19: 260
               default: 260
          }
     140: new           #96                 // class org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream
     143: dup
     144: aload         4
     146: invokespecial #97                 // Method org/apache/commons/compress/archivers/zip/ZipFile$StoredStatisticsStream."<init>":(Ljava/io/InputStream;)V
     149: areturn
     150: new           #98                 // class org/apache/commons/compress/archivers/zip/UnshrinkingInputStream
     153: dup
     154: aload         4
     156: invokespecial #99                 // Method org/apache/commons/compress/archivers/zip/UnshrinkingInputStream."<init>":(Ljava/io/InputStream;)V
     159: areturn
     160: new           #100                // class org/apache/commons/compress/archivers/zip/ExplodingInputStream
     163: dup
     164: aload_1
     165: invokevirtual #101                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;
     168: invokevirtual #102                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getSlidingDictionarySize:()I
     171: aload_1
     172: invokevirtual #101                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getGeneralPurposeBit:()Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;
     175: invokevirtual #103                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.getNumberOfShannonFanoTrees:()I
     178: aload         4
     180: invokespecial #104                // Method org/apache/commons/compress/archivers/zip/ExplodingInputStream."<init>":(IILjava/io/InputStream;)V
     183: areturn
     184: astore        5
     186: new           #53                 // class java/io/IOException
     189: dup
     190: ldc           #106                // String bad IMPLODE data
     192: aload         5
     194: invokespecial #59                 // Method java/io/IOException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     197: athrow
     198: new           #107                // class java/util/zip/Inflater
     201: dup
     202: iconst_1
     203: invokespecial #108                // Method java/util/zip/Inflater."<init>":(Z)V
     206: astore        5
     208: new           #109                // class org/apache/commons/compress/archivers/zip/ZipFile$1
     211: dup
     212: aload_0
     213: new           #110                // class java/io/SequenceInputStream
     216: dup
     217: aload         4
     219: new           #111                // class java/io/ByteArrayInputStream
     222: dup
     223: getstatic     #112                // Field ONE_ZERO_BYTE:[B
     226: invokespecial #113                // Method java/io/ByteArrayInputStream."<init>":([B)V
     229: invokespecial #114                // Method java/io/SequenceInputStream."<init>":(Ljava/io/InputStream;Ljava/io/InputStream;)V
     232: aload         5
     234: aload         5
     236: invokespecial #115                // Method org/apache/commons/compress/archivers/zip/ZipFile$1."<init>":(Lorg/apache/commons/compress/archivers/zip/ZipFile;Ljava/io/InputStream;Ljava/util/zip/Inflater;Ljava/util/zip/Inflater;)V
     239: areturn
     240: new           #116                // class org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream
     243: dup
     244: aload         4
     246: invokespecial #117                // Method org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream."<init>":(Ljava/io/InputStream;)V
     249: areturn
     250: new           #118                // class org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream
     253: dup
     254: aload         4
     256: invokespecial #119                // Method org/apache/commons/compress/compressors/deflate64/Deflate64CompressorInputStream."<init>":(Ljava/io/InputStream;)V
     259: areturn
     260: new           #120                // class org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException
     263: dup
     264: aload_1
     265: invokevirtual #93                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getMethod:()I
     268: invokestatic  #94                 // Method org/apache/commons/compress/archivers/zip/ZipMethod.getMethodByCode:(I)Lorg/apache/commons/compress/archivers/zip/ZipMethod;
     271: aload_1
     272: invokespecial #121                // Method org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException."<init>":(Lorg/apache/commons/compress/archivers/zip/ZipMethod;Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
     275: athrow
    Exception table:
       from    to  target type
         160   183   184   Class java/lang/IllegalArgumentException

  public java.lang.String getUnixSymlink(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;
    Code:
       0: aload_1
       1: ifnull        110
       4: aload_1
       5: invokevirtual #122                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.isUnixSymlink:()Z
       8: ifeq          110
      11: aload_0
      12: aload_1
      13: invokevirtual #123                // Method getInputStream:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Ljava/io/InputStream;
      16: astore_2
      17: aconst_null
      18: astore_3
      19: aload_0
      20: getfield      #47                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
      23: aload_2
      24: invokestatic  #124                // Method org/apache/commons/compress/utils/IOUtils.toByteArray:(Ljava/io/InputStream;)[B
      27: invokeinterface #125,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;
      32: astore        4
      34: aload_2
      35: ifnull        64
      38: aload_3
      39: ifnull        60
      42: aload_2
      43: invokevirtual #126                // Method java/io/InputStream.close:()V
      46: goto          64
      49: astore        5
      51: aload_3
      52: aload         5
      54: invokevirtual #128                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
      57: goto          64
      60: aload_2
      61: invokevirtual #126                // Method java/io/InputStream.close:()V
      64: aload         4
      66: areturn
      67: astore        4
      69: aload         4
      71: astore_3
      72: aload         4
      74: athrow
      75: astore        6
      77: aload_2
      78: ifnull        107
      81: aload_3
      82: ifnull        103
      85: aload_2
      86: invokevirtual #126                // Method java/io/InputStream.close:()V
      89: goto          107
      92: astore        7
      94: aload_3
      95: aload         7
      97: invokevirtual #128                // Method java/lang/Throwable.addSuppressed:(Ljava/lang/Throwable;)V
     100: goto          107
     103: aload_2
     104: invokevirtual #126                // Method java/io/InputStream.close:()V
     107: aload         6
     109: athrow
     110: aconst_null
     111: areturn
    Exception table:
       from    to  target type
          42    46    49   Class java/lang/Throwable
          19    34    67   Class java/lang/Throwable
          19    34    75   any
          85    89    92   Class java/lang/Throwable
          67    77    75   any

  protected void finalize() throws java.lang.Throwable;
    Code:
       0: aload_0
       1: getfield      #27                 // Field closed:Z
       4: ifne          39
       7: getstatic     #129                // Field java/lang/System.err:Ljava/io/PrintStream;
      10: new           #54                 // class java/lang/StringBuilder
      13: dup
      14: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
      17: ldc           #130                // String Cleaning up unclosed ZipFile for archive
      19: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: aload_0
      23: getfield      #44                 // Field archiveName:Ljava/lang/String;
      26: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      29: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      32: invokevirtual #131                // Method java/io/PrintStream.println:(Ljava/lang/String;)V
      35: aload_0
      36: invokevirtual #132                // Method close:()V
      39: aload_0
      40: invokespecial #133                // Method java/lang/Object.finalize:()V
      43: goto          53
      46: astore_1
      47: aload_0
      48: invokespecial #133                // Method java/lang/Object.finalize:()V
      51: aload_1
      52: athrow
      53: return
    Exception table:
       from    to  target type
           0    39    46   any

  private java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment> populateFromCentralDirectory() throws java.io.IOException;
    Code:
       0: new           #24                 // class java/util/HashMap
       3: dup
       4: invokespecial #134                // Method java/util/HashMap."<init>":()V
       7: astore_1
       8: aload_0
       9: invokespecial #135                // Method positionAtCentralDirectory:()V
      12: aload_0
      13: aload_0
      14: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      17: invokeinterface #136,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J
      22: putfield      #137                // Field centralDirectoryStartOffset:J
      25: aload_0
      26: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      29: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      32: pop
      33: aload_0
      34: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      37: aload_0
      38: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      41: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      44: aload_0
      45: getfield      #29                 // Field wordBuf:[B
      48: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
      51: lstore_2
      52: lload_2
      53: getstatic     #141                // Field CFH_SIG:J
      56: lcmp
      57: ifeq          77
      60: aload_0
      61: invokespecial #142                // Method startsWithLocalFileHeader:()Z
      64: ifeq          77
      67: new           #53                 // class java/io/IOException
      70: dup
      71: ldc           #143                // String Central directory is empty, can\'t expand corrupt archive.
      73: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      76: athrow
      77: lload_2
      78: getstatic     #141                // Field CFH_SIG:J
      81: lcmp
      82: ifne          120
      85: aload_0
      86: aload_1
      87: invokespecial #145                // Method readCentralDirectoryEntry:(Ljava/util/Map;)V
      90: aload_0
      91: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      94: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      97: pop
      98: aload_0
      99: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     102: aload_0
     103: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     106: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     109: aload_0
     110: getfield      #29                 // Field wordBuf:[B
     113: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
     116: lstore_2
     117: goto          77
     120: aload_1
     121: areturn

  private void readCentralDirectoryEntry(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #35                 // Field cfhBbuf:Ljava/nio/ByteBuffer;
       4: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
       7: pop
       8: aload_0
       9: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      12: aload_0
      13: getfield      #35                 // Field cfhBbuf:Ljava/nio/ByteBuffer;
      16: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      19: iconst_0
      20: istore_2
      21: new           #75                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry
      24: dup
      25: invokespecial #146                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry."<init>":()V
      28: astore_3
      29: aload_0
      30: getfield      #30                 // Field cfhBuf:[B
      33: iload_2
      34: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
      37: istore        4
      39: iinc          2, 2
      42: aload_3
      43: iload         4
      45: invokevirtual #148                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionMadeBy:(I)V
      48: aload_3
      49: iload         4
      51: bipush        8
      53: ishr
      54: bipush        15
      56: iand
      57: invokevirtual #149                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setPlatform:(I)V
      60: aload_3
      61: aload_0
      62: getfield      #30                 // Field cfhBuf:[B
      65: iload_2
      66: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
      69: invokevirtual #150                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setVersionRequired:(I)V
      72: iinc          2, 2
      75: aload_0
      76: getfield      #30                 // Field cfhBuf:[B
      79: iload_2
      80: invokestatic  #151                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.parse:([BI)Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;
      83: astore        5
      85: aload         5
      87: invokevirtual #152                // Method org/apache/commons/compress/archivers/zip/GeneralPurposeBit.usesUTF8ForNames:()Z
      90: istore        6
      92: iload         6
      94: ifeq          103
      97: getstatic     #153                // Field org/apache/commons/compress/archivers/zip/ZipEncodingHelper.UTF8_ZIP_ENCODING:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
     100: goto          107
     103: aload_0
     104: getfield      #47                 // Field zipEncoding:Lorg/apache/commons/compress/archivers/zip/ZipEncoding;
     107: astore        7
     109: iload         6
     111: ifeq          121
     114: aload_3
     115: getstatic     #154                // Field org/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource.NAME_WITH_EFS_FLAG:Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;
     118: invokevirtual #155                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setNameSource:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry$NameSource;)V
     121: aload_3
     122: aload         5
     124: invokevirtual #156                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setGeneralPurposeBit:(Lorg/apache/commons/compress/archivers/zip/GeneralPurposeBit;)V
     127: aload_3
     128: aload_0
     129: getfield      #30                 // Field cfhBuf:[B
     132: iload_2
     133: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     136: invokevirtual #157                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setRawFlag:(I)V
     139: iinc          2, 2
     142: aload_3
     143: aload_0
     144: getfield      #30                 // Field cfhBuf:[B
     147: iload_2
     148: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     151: invokevirtual #158                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setMethod:(I)V
     154: iinc          2, 2
     157: aload_0
     158: getfield      #30                 // Field cfhBuf:[B
     161: iload_2
     162: invokestatic  #159                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J
     165: invokestatic  #160                // Method org/apache/commons/compress/archivers/zip/ZipUtil.dosToJavaTime:(J)J
     168: lstore        8
     170: aload_3
     171: lload         8
     173: invokevirtual #161                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setTime:(J)V
     176: iinc          2, 4
     179: aload_3
     180: aload_0
     181: getfield      #30                 // Field cfhBuf:[B
     184: iload_2
     185: invokestatic  #159                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J
     188: invokevirtual #162                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCrc:(J)V
     191: iinc          2, 4
     194: aload_0
     195: getfield      #30                 // Field cfhBuf:[B
     198: iload_2
     199: invokestatic  #159                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J
     202: lstore        10
     204: lload         10
     206: lconst_0
     207: lcmp
     208: ifge          221
     211: new           #53                 // class java/io/IOException
     214: dup
     215: ldc           #163                // String broken archive, entry with negative compressed size
     217: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     220: athrow
     221: aload_3
     222: lload         10
     224: invokevirtual #164                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCompressedSize:(J)V
     227: iinc          2, 4
     230: aload_0
     231: getfield      #30                 // Field cfhBuf:[B
     234: iload_2
     235: invokestatic  #159                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J
     238: lstore        10
     240: lload         10
     242: lconst_0
     243: lcmp
     244: ifge          257
     247: new           #53                 // class java/io/IOException
     250: dup
     251: ldc           #165                // String broken archive, entry with negative size
     253: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     256: athrow
     257: aload_3
     258: lload         10
     260: invokevirtual #166                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setSize:(J)V
     263: iinc          2, 4
     266: aload_0
     267: getfield      #30                 // Field cfhBuf:[B
     270: iload_2
     271: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     274: istore        12
     276: iinc          2, 2
     279: iload         12
     281: ifge          294
     284: new           #53                 // class java/io/IOException
     287: dup
     288: ldc           #167                // String broken archive, entry with negative fileNameLen
     290: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     293: athrow
     294: aload_0
     295: getfield      #30                 // Field cfhBuf:[B
     298: iload_2
     299: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     302: istore        13
     304: iinc          2, 2
     307: iload         13
     309: ifge          322
     312: new           #53                 // class java/io/IOException
     315: dup
     316: ldc           #168                // String broken archive, entry with negative extraLen
     318: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     321: athrow
     322: aload_0
     323: getfield      #30                 // Field cfhBuf:[B
     326: iload_2
     327: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     330: istore        14
     332: iinc          2, 2
     335: iload         14
     337: ifge          350
     340: new           #53                 // class java/io/IOException
     343: dup
     344: ldc           #169                // String broken archive, entry with negative commentLen
     346: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     349: athrow
     350: aload_3
     351: aload_0
     352: getfield      #30                 // Field cfhBuf:[B
     355: iload_2
     356: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     359: i2l
     360: invokevirtual #170                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setDiskNumberStart:(J)V
     363: iinc          2, 2
     366: aload_3
     367: aload_0
     368: getfield      #30                 // Field cfhBuf:[B
     371: iload_2
     372: invokestatic  #147                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([BI)I
     375: invokevirtual #171                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setInternalAttributes:(I)V
     378: iinc          2, 2
     381: aload_3
     382: aload_0
     383: getfield      #30                 // Field cfhBuf:[B
     386: iload_2
     387: invokestatic  #159                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J
     390: invokevirtual #172                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExternalAttributes:(J)V
     393: iinc          2, 4
     396: aload_0
     397: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     400: iload         12
     402: invokestatic  #173                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B
     405: astore        15
     407: aload         15
     409: arraylength
     410: iload         12
     412: if_icmpge     423
     415: new           #174                // class java/io/EOFException
     418: dup
     419: invokespecial #175                // Method java/io/EOFException."<init>":()V
     422: athrow
     423: aload_3
     424: aload         7
     426: aload         15
     428: invokeinterface #125,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;
     433: aload         15
     435: invokevirtual #176                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setName:(Ljava/lang/String;[B)V
     438: aload_3
     439: aload_0
     440: getfield      #30                 // Field cfhBuf:[B
     443: iload_2
     444: invokestatic  #159                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([BI)J
     447: invokevirtual #177                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setLocalHeaderOffset:(J)V
     450: aload_0
     451: getfield      #23                 // Field entries:Ljava/util/List;
     454: aload_3
     455: invokeinterface #178,  2          // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
     460: pop
     461: aload_0
     462: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     465: iload         13
     467: invokestatic  #173                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B
     470: astore        16
     472: aload         16
     474: arraylength
     475: iload         13
     477: if_icmpge     488
     480: new           #174                // class java/io/EOFException
     483: dup
     484: invokespecial #175                // Method java/io/EOFException."<init>":()V
     487: athrow
     488: aload_3
     489: aload         16
     491: invokevirtual #179                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setCentralDirectoryExtra:([B)V
     494: goto          541
     497: astore        17
     499: new           #181                // class java/util/zip/ZipException
     502: dup
     503: new           #54                 // class java/lang/StringBuilder
     506: dup
     507: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
     510: ldc           #182                // String Invalid extra data in entry
     512: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     515: aload_3
     516: invokevirtual #183                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;
     519: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     522: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     525: invokespecial #184                // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
     528: astore        18
     530: aload         18
     532: aload         17
     534: invokevirtual #185                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     537: pop
     538: aload         18
     540: athrow
     541: aload_0
     542: aload_3
     543: invokespecial #186                // Method setSizesAndOffsetFromZip64Extra:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
     546: aload_0
     547: aload_3
     548: invokespecial #187                // Method sanityCheckLFHOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)V
     551: aload_0
     552: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     555: iload         14
     557: invokestatic  #173                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B
     560: astore        17
     562: aload         17
     564: arraylength
     565: iload         14
     567: if_icmpge     578
     570: new           #174                // class java/io/EOFException
     573: dup
     574: invokespecial #175                // Method java/io/EOFException."<init>":()V
     577: athrow
     578: aload_3
     579: aload         7
     581: aload         17
     583: invokeinterface #125,  2          // InterfaceMethod org/apache/commons/compress/archivers/zip/ZipEncoding.decode:([B)Ljava/lang/String;
     588: invokevirtual #188                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setComment:(Ljava/lang/String;)V
     591: iload         6
     593: ifne          623
     596: aload_0
     597: getfield      #48                 // Field useUnicodeExtraFields:Z
     600: ifeq          623
     603: aload_1
     604: aload_3
     605: new           #189                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment
     608: dup
     609: aload         15
     611: aload         17
     613: aconst_null
     614: invokespecial #190                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment."<init>":([B[BLorg/apache/commons/compress/archivers/zip/ZipFile$1;)V
     617: invokeinterface #191,  3          // InterfaceMethod java/util/Map.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
     622: pop
     623: aload_3
     624: iconst_1
     625: invokevirtual #192                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setStreamContiguous:(Z)V
     628: return
    Exception table:
       from    to  target type
         488   494   497   Class java/lang/RuntimeException

  private void sanityCheckLFHOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J
       4: lconst_0
       5: lcmp
       6: ifge          19
       9: new           #53                 // class java/io/IOException
      12: dup
      13: ldc           #194                // String broken archive, entry with negative disk number
      15: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      18: athrow
      19: aload_1
      20: invokevirtual #195                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J
      23: lconst_0
      24: lcmp
      25: ifge          38
      28: new           #53                 // class java/io/IOException
      31: dup
      32: ldc           #196                // String broken archive, entry with negative local file header offset
      34: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      37: athrow
      38: aload_0
      39: getfield      #43                 // Field isSplitZipArchive:Z
      42: ifeq          151
      45: aload_1
      46: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J
      49: aload_0
      50: getfield      #197                // Field centralDirectoryStartDiskNumber:J
      53: lcmp
      54: ifle          92
      57: new           #53                 // class java/io/IOException
      60: dup
      61: new           #54                 // class java/lang/StringBuilder
      64: dup
      65: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
      68: ldc           #198                // String local file header for
      70: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      73: aload_1
      74: invokevirtual #199                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;
      77: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: ldc           #200                // String  starts on a later disk than central directory
      82: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      88: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
      91: athrow
      92: aload_1
      93: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J
      96: aload_0
      97: getfield      #197                // Field centralDirectoryStartDiskNumber:J
     100: lcmp
     101: ifne          198
     104: aload_1
     105: invokevirtual #195                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J
     108: aload_0
     109: getfield      #201                // Field centralDirectoryStartRelativeOffset:J
     112: lcmp
     113: ifle          198
     116: new           #53                 // class java/io/IOException
     119: dup
     120: new           #54                 // class java/lang/StringBuilder
     123: dup
     124: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
     127: ldc           #198                // String local file header for
     129: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     132: aload_1
     133: invokevirtual #199                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;
     136: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     139: ldc           #202                // String  starts after central directory
     141: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     144: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     147: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     150: athrow
     151: aload_1
     152: invokevirtual #195                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J
     155: aload_0
     156: getfield      #137                // Field centralDirectoryStartOffset:J
     159: lcmp
     160: ifle          198
     163: new           #53                 // class java/io/IOException
     166: dup
     167: new           #54                 // class java/lang/StringBuilder
     170: dup
     171: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
     174: ldc           #198                // String local file header for
     176: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     179: aload_1
     180: invokevirtual #199                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;
     183: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     186: ldc           #202                // String  starts after central directory
     188: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     191: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     194: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     197: athrow
     198: return

  private void setSizesAndOffsetFromZip64Extra(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;
    Code:
       0: aload_1
       1: getstatic     #203                // Field org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.HEADER_ID:Lorg/apache/commons/compress/archivers/zip/ZipShort;
       4: invokevirtual #204                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getExtraField:(Lorg/apache/commons/compress/archivers/zip/ZipShort;)Lorg/apache/commons/compress/archivers/zip/ZipExtraField;
       7: astore_2
       8: aload_2
       9: ifnull        29
      12: aload_2
      13: instanceof    #205                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField
      16: ifne          29
      19: new           #181                // class java/util/zip/ZipException
      22: dup
      23: ldc           #206                // String archive contains unparseable zip64 extra field
      25: invokespecial #184                // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
      28: athrow
      29: aload_2
      30: checkcast     #205                // class org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField
      33: astore_3
      34: aload_3
      35: ifnull        274
      38: aload_1
      39: invokevirtual #207                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J
      42: ldc2_w        #208                // long 4294967295l
      45: lcmp
      46: ifne          53
      49: iconst_1
      50: goto          54
      53: iconst_0
      54: istore        4
      56: aload_1
      57: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J
      60: ldc2_w        #208                // long 4294967295l
      63: lcmp
      64: ifne          71
      67: iconst_1
      68: goto          72
      71: iconst_0
      72: istore        5
      74: aload_1
      75: invokevirtual #195                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J
      78: ldc2_w        #208                // long 4294967295l
      81: lcmp
      82: ifne          89
      85: iconst_1
      86: goto          90
      89: iconst_0
      90: istore        6
      92: aload_1
      93: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J
      96: ldc2_w        #210                // long 65535l
      99: lcmp
     100: ifne          107
     103: iconst_1
     104: goto          108
     107: iconst_0
     108: istore        7
     110: aload_3
     111: iload         4
     113: iload         5
     115: iload         6
     117: iload         7
     119: invokevirtual #212                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.reparseCentralDirectoryData:(ZZZZ)V
     122: iload         4
     124: ifeq          162
     127: aload_3
     128: invokevirtual #213                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;
     131: invokevirtual #214                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J
     134: lstore        8
     136: lload         8
     138: lconst_0
     139: lcmp
     140: ifge          153
     143: new           #53                 // class java/io/IOException
     146: dup
     147: ldc           #165                // String broken archive, entry with negative size
     149: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     152: athrow
     153: aload_1
     154: lload         8
     156: invokevirtual #215                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setSize:(J)V
     159: goto          182
     162: iload         5
     164: ifeq          182
     167: aload_3
     168: new           #216                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger
     171: dup
     172: aload_1
     173: invokevirtual #207                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getSize:()J
     176: invokespecial #217                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger."<init>":(J)V
     179: invokevirtual #218                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V
     182: iload         5
     184: ifeq          222
     187: aload_3
     188: invokevirtual #219                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getCompressedSize:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;
     191: invokevirtual #214                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J
     194: lstore        8
     196: lload         8
     198: lconst_0
     199: lcmp
     200: ifge          213
     203: new           #53                 // class java/io/IOException
     206: dup
     207: ldc           #163                // String broken archive, entry with negative compressed size
     209: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     212: athrow
     213: aload_1
     214: lload         8
     216: invokevirtual #220                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setCompressedSize:(J)V
     219: goto          242
     222: iload         4
     224: ifeq          242
     227: aload_3
     228: new           #216                // class org/apache/commons/compress/archivers/zip/ZipEightByteInteger
     231: dup
     232: aload_1
     233: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J
     236: invokespecial #217                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger."<init>":(J)V
     239: invokevirtual #221                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.setCompressedSize:(Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;)V
     242: iload         6
     244: ifeq          258
     247: aload_1
     248: aload_3
     249: invokevirtual #222                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getRelativeHeaderOffset:()Lorg/apache/commons/compress/archivers/zip/ZipEightByteInteger;
     252: invokevirtual #214                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:()J
     255: invokevirtual #223                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setLocalHeaderOffset:(J)V
     258: iload         7
     260: ifeq          274
     263: aload_1
     264: aload_3
     265: invokevirtual #224                // Method org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.getDiskStartNumber:()Lorg/apache/commons/compress/archivers/zip/ZipLong;
     268: invokevirtual #225                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:()J
     271: invokevirtual #226                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDiskNumberStart:(J)V
     274: return

  private void positionAtCentralDirectory() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokespecial #227                // Method positionAtEndOfCentralDirectoryRecord:()V
       4: iconst_0
       5: istore_1
       6: aload_0
       7: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      10: invokeinterface #136,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J
      15: ldc2_w        #228                // long 20l
      18: lcmp
      19: ifle          26
      22: iconst_1
      23: goto          27
      26: iconst_0
      27: istore_2
      28: iload_2
      29: ifeq          85
      32: aload_0
      33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      36: aload_0
      37: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      40: invokeinterface #136,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J
      45: ldc2_w        #228                // long 20l
      48: lsub
      49: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      54: pop
      55: aload_0
      56: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      59: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      62: pop
      63: aload_0
      64: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      67: aload_0
      68: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      71: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      74: getstatic     #231                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_LOC_SIG:[B
      77: aload_0
      78: getfield      #29                 // Field wordBuf:[B
      81: invokestatic  #232                // Method java/util/Arrays.equals:([B[B)Z
      84: istore_1
      85: iload_1
      86: ifne          106
      89: iload_2
      90: ifeq          99
      93: aload_0
      94: bipush        16
      96: invokespecial #233                // Method skipBytes:(I)V
      99: aload_0
     100: invokespecial #234                // Method positionAtCentralDirectory32:()V
     103: goto          110
     106: aload_0
     107: invokespecial #235                // Method positionAtCentralDirectory64:()V
     110: return

  private void positionAtCentralDirectory64() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #43                 // Field isSplitZipArchive:Z
       4: ifeq          77
       7: aload_0
       8: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      11: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      14: pop
      15: aload_0
      16: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      19: aload_0
      20: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      23: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      26: aload_0
      27: getfield      #29                 // Field wordBuf:[B
      30: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
      33: lstore_1
      34: aload_0
      35: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
      38: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      41: pop
      42: aload_0
      43: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      46: aload_0
      47: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
      50: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      53: aload_0
      54: getfield      #28                 // Field dwordBuf:[B
      57: invokestatic  #236                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J
      60: lstore_3
      61: aload_0
      62: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      65: checkcast     #42                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel
      68: lload_1
      69: lload_3
      70: invokevirtual #237                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;
      73: pop
      74: goto          118
      77: aload_0
      78: iconst_4
      79: invokespecial #233                // Method skipBytes:(I)V
      82: aload_0
      83: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
      86: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      89: pop
      90: aload_0
      91: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      94: aload_0
      95: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
      98: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     101: aload_0
     102: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     105: aload_0
     106: getfield      #28                 // Field dwordBuf:[B
     109: invokestatic  #236                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J
     112: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
     117: pop
     118: aload_0
     119: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     122: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     125: pop
     126: aload_0
     127: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     130: aload_0
     131: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     134: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     137: aload_0
     138: getfield      #29                 // Field wordBuf:[B
     141: getstatic     #238                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.ZIP64_EOCD_SIG:[B
     144: invokestatic  #232                // Method java/util/Arrays.equals:([B[B)Z
     147: ifne          160
     150: new           #181                // class java/util/zip/ZipException
     153: dup
     154: ldc           #239                // String Archive\'s ZIP64 end of central directory locator is corrupt.
     156: invokespecial #184                // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
     159: athrow
     160: aload_0
     161: getfield      #43                 // Field isSplitZipArchive:Z
     164: ifeq          261
     167: aload_0
     168: bipush        16
     170: invokespecial #233                // Method skipBytes:(I)V
     173: aload_0
     174: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     177: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     180: pop
     181: aload_0
     182: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     185: aload_0
     186: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     189: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     192: aload_0
     193: aload_0
     194: getfield      #29                 // Field wordBuf:[B
     197: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
     200: putfield      #197                // Field centralDirectoryStartDiskNumber:J
     203: aload_0
     204: bipush        24
     206: invokespecial #233                // Method skipBytes:(I)V
     209: aload_0
     210: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
     213: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     216: pop
     217: aload_0
     218: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     221: aload_0
     222: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
     225: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     228: aload_0
     229: aload_0
     230: getfield      #28                 // Field dwordBuf:[B
     233: invokestatic  #236                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J
     236: putfield      #201                // Field centralDirectoryStartRelativeOffset:J
     239: aload_0
     240: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     243: checkcast     #42                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel
     246: aload_0
     247: getfield      #197                // Field centralDirectoryStartDiskNumber:J
     250: aload_0
     251: getfield      #201                // Field centralDirectoryStartRelativeOffset:J
     254: invokevirtual #237                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;
     257: pop
     258: goto          316
     261: aload_0
     262: bipush        44
     264: invokespecial #233                // Method skipBytes:(I)V
     267: aload_0
     268: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
     271: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     274: pop
     275: aload_0
     276: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     279: aload_0
     280: getfield      #33                 // Field dwordBbuf:Ljava/nio/ByteBuffer;
     283: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     286: aload_0
     287: lconst_0
     288: putfield      #197                // Field centralDirectoryStartDiskNumber:J
     291: aload_0
     292: aload_0
     293: getfield      #28                 // Field dwordBuf:[B
     296: invokestatic  #236                // Method org/apache/commons/compress/archivers/zip/ZipEightByteInteger.getLongValue:([B)J
     299: putfield      #201                // Field centralDirectoryStartRelativeOffset:J
     302: aload_0
     303: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     306: aload_0
     307: getfield      #201                // Field centralDirectoryStartRelativeOffset:J
     310: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
     315: pop
     316: return

  private void positionAtCentralDirectory32() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #43                 // Field isSplitZipArchive:Z
       4: ifeq          102
       7: aload_0
       8: bipush        6
      10: invokespecial #233                // Method skipBytes:(I)V
      13: aload_0
      14: getfield      #36                 // Field shortBbuf:Ljava/nio/ByteBuffer;
      17: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      20: pop
      21: aload_0
      22: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      25: aload_0
      26: getfield      #36                 // Field shortBbuf:Ljava/nio/ByteBuffer;
      29: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      32: aload_0
      33: aload_0
      34: getfield      #31                 // Field shortBuf:[B
      37: invokestatic  #240                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I
      40: i2l
      41: putfield      #197                // Field centralDirectoryStartDiskNumber:J
      44: aload_0
      45: bipush        8
      47: invokespecial #233                // Method skipBytes:(I)V
      50: aload_0
      51: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      54: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      57: pop
      58: aload_0
      59: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      62: aload_0
      63: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      66: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      69: aload_0
      70: aload_0
      71: getfield      #29                 // Field wordBuf:[B
      74: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
      77: putfield      #201                // Field centralDirectoryStartRelativeOffset:J
      80: aload_0
      81: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      84: checkcast     #42                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel
      87: aload_0
      88: getfield      #197                // Field centralDirectoryStartDiskNumber:J
      91: aload_0
      92: getfield      #201                // Field centralDirectoryStartRelativeOffset:J
      95: invokevirtual #237                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;
      98: pop
      99: goto          157
     102: aload_0
     103: bipush        16
     105: invokespecial #233                // Method skipBytes:(I)V
     108: aload_0
     109: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     112: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
     115: pop
     116: aload_0
     117: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     120: aload_0
     121: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     124: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
     127: aload_0
     128: lconst_0
     129: putfield      #197                // Field centralDirectoryStartDiskNumber:J
     132: aload_0
     133: aload_0
     134: getfield      #29                 // Field wordBuf:[B
     137: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
     140: putfield      #201                // Field centralDirectoryStartRelativeOffset:J
     143: aload_0
     144: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     147: aload_0
     148: getfield      #201                // Field centralDirectoryStartRelativeOffset:J
     151: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
     156: pop
     157: return

  private void positionAtEndOfCentralDirectoryRecord() throws java.io.IOException;
    Code:
       0: aload_0
       1: ldc2_w        #241                // long 22l
       4: ldc2_w        #243                // long 65557l
       7: getstatic     #245                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.EOCD_SIG:[B
      10: invokespecial #246                // Method tryToLocateSignature:(JJ[B)Z
      13: istore_1
      14: iload_1
      15: ifne          28
      18: new           #181                // class java/util/zip/ZipException
      21: dup
      22: ldc           #247                // String Archive is not a ZIP archive
      24: invokespecial #184                // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
      27: athrow
      28: return

  private boolean tryToLocateSignature(long, long, byte[]) throws java.io.IOException;
    Code:
       0: iconst_0
       1: istore        6
       3: aload_0
       4: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
       7: invokeinterface #248,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J
      12: lload_1
      13: lsub
      14: lstore        7
      16: lconst_0
      17: aload_0
      18: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      21: invokeinterface #248,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J
      26: lload_3
      27: lsub
      28: invokestatic  #249                // Method java/lang/Math.max:(JJ)J
      31: lstore        9
      33: lload         7
      35: lconst_0
      36: lcmp
      37: iflt          182
      40: lload         7
      42: lload         9
      44: lcmp
      45: iflt          182
      48: aload_0
      49: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      52: lload         7
      54: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      59: pop
      60: aload_0
      61: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      64: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      67: pop
      68: aload_0
      69: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      72: aload_0
      73: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      76: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      79: aload_0
      80: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      83: invokevirtual #250                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      86: pop
      87: goto          95
      90: astore        11
      92: goto          182
      95: aload_0
      96: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      99: invokevirtual #251                // Method java/nio/ByteBuffer.get:()B
     102: istore        11
     104: iload         11
     106: aload         5
     108: iconst_0
     109: baload
     110: if_icmpne     173
     113: aload_0
     114: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     117: invokevirtual #251                // Method java/nio/ByteBuffer.get:()B
     120: istore        11
     122: iload         11
     124: aload         5
     126: iconst_1
     127: baload
     128: if_icmpne     173
     131: aload_0
     132: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     135: invokevirtual #251                // Method java/nio/ByteBuffer.get:()B
     138: istore        11
     140: iload         11
     142: aload         5
     144: iconst_2
     145: baload
     146: if_icmpne     173
     149: aload_0
     150: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     153: invokevirtual #251                // Method java/nio/ByteBuffer.get:()B
     156: istore        11
     158: iload         11
     160: aload         5
     162: iconst_3
     163: baload
     164: if_icmpne     173
     167: iconst_1
     168: istore        6
     170: goto          182
     173: lload         7
     175: lconst_1
     176: lsub
     177: lstore        7
     179: goto          40
     182: iload         6
     184: ifeq          199
     187: aload_0
     188: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
     191: lload         7
     193: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
     198: pop
     199: iload         6
     201: ireturn
    Exception table:
       from    to  target type
          60    87    90   Class java/io/EOFException

  private void skipBytes(int) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
       4: invokeinterface #136,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J
       9: lstore_2
      10: lload_2
      11: iload_1
      12: i2l
      13: ladd
      14: lstore        4
      16: lload         4
      18: aload_0
      19: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      22: invokeinterface #248,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.size:()J
      27: lcmp
      28: ifle          39
      31: new           #174                // class java/io/EOFException
      34: dup
      35: invokespecial #175                // Method java/io/EOFException."<init>":()V
      38: athrow
      39: aload_0
      40: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      43: lload         4
      45: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      50: pop
      51: return

  private void resolveLocalFileHeaderData(java.util.Map<org.apache.commons.compress.archivers.zip.ZipArchiveEntry, org.apache.commons.compress.archivers.zip.ZipFile$NameAndComment>) throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #23                 // Field entries:Ljava/util/List;
       4: invokeinterface #252,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_2
      10: aload_2
      11: invokeinterface #253,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          185
      19: aload_2
      20: invokeinterface #254,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #69                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry
      28: astore_3
      29: aload_3
      30: checkcast     #75                 // class org/apache/commons/compress/archivers/zip/ZipFile$Entry
      33: astore        4
      35: aload_0
      36: aload         4
      38: invokespecial #255                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I
      41: astore        5
      43: aload         5
      45: iconst_0
      46: iaload
      47: istore        6
      49: aload         5
      51: iconst_1
      52: iaload
      53: istore        7
      55: aload_0
      56: iload         6
      58: invokespecial #233                // Method skipBytes:(I)V
      61: aload_0
      62: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      65: iload         7
      67: invokestatic  #173                // Method org/apache/commons/compress/utils/IOUtils.readRange:(Ljava/nio/channels/ReadableByteChannel;I)[B
      70: astore        8
      72: aload         8
      74: arraylength
      75: iload         7
      77: if_icmpge     88
      80: new           #174                // class java/io/EOFException
      83: dup
      84: invokespecial #175                // Method java/io/EOFException."<init>":()V
      87: athrow
      88: aload         4
      90: aload         8
      92: invokevirtual #256                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.setExtra:([B)V
      95: goto          143
      98: astore        9
     100: new           #181                // class java/util/zip/ZipException
     103: dup
     104: new           #54                 // class java/lang/StringBuilder
     107: dup
     108: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
     111: ldc           #182                // String Invalid extra data in entry
     113: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     116: aload         4
     118: invokevirtual #183                // Method org/apache/commons/compress/archivers/zip/ZipFile$Entry.getName:()Ljava/lang/String;
     121: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     124: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     127: invokespecial #184                // Method java/util/zip/ZipException."<init>":(Ljava/lang/String;)V
     130: astore        10
     132: aload         10
     134: aload         9
     136: invokevirtual #185                // Method java/util/zip/ZipException.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;
     139: pop
     140: aload         10
     142: athrow
     143: aload_1
     144: aload         4
     146: invokeinterface #72,  2           // InterfaceMethod java/util/Map.containsKey:(Ljava/lang/Object;)Z
     151: ifeq          182
     154: aload_1
     155: aload         4
     157: invokeinterface #67,  2           // InterfaceMethod java/util/Map.get:(Ljava/lang/Object;)Ljava/lang/Object;
     162: checkcast     #189                // class org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment
     165: astore        9
     167: aload         4
     169: aload         9
     171: invokestatic  #257                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$100:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B
     174: aload         9
     176: invokestatic  #258                // Method org/apache/commons/compress/archivers/zip/ZipFile$NameAndComment.access$200:(Lorg/apache/commons/compress/archivers/zip/ZipFile$NameAndComment;)[B
     179: invokestatic  #259                // Method org/apache/commons/compress/archivers/zip/ZipUtil.setNameAndCommentFromExtraFields:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;[B[B)V
     182: goto          10
     185: return
    Exception table:
       from    to  target type
          88    95    98   Class java/lang/RuntimeException

  private void fillNameMap();
    Code:
       0: aload_0
       1: getfield      #23                 // Field entries:Ljava/util/List;
       4: invokeinterface #252,  1          // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
       9: astore_1
      10: aload_1
      11: invokeinterface #253,  1          // InterfaceMethod java/util/Iterator.hasNext:()Z
      16: ifeq          63
      19: aload_1
      20: invokeinterface #254,  1          // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      25: checkcast     #69                 // class org/apache/commons/compress/archivers/zip/ZipArchiveEntry
      28: astore_2
      29: aload_2
      30: invokevirtual #199                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;
      33: astore_3
      34: aload_0
      35: getfield      #26                 // Field nameMap:Ljava/util/Map;
      38: aload_3
      39: invokedynamic #260,  0            // InvokeDynamic #2:apply:()Ljava/util/function/Function;
      44: invokeinterface #261,  3          // InterfaceMethod java/util/Map.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      49: checkcast     #21                 // class java/util/LinkedList
      52: astore        4
      54: aload         4
      56: aload_2
      57: invokevirtual #262                // Method java/util/LinkedList.addLast:(Ljava/lang/Object;)V
      60: goto          10
      63: return

  private int[] setDataOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #195                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getLocalHeaderOffset:()J
       4: lstore_2
       5: aload_0
       6: getfield      #43                 // Field isSplitZipArchive:Z
       9: ifeq          49
      12: aload_0
      13: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      16: checkcast     #42                 // class org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel
      19: aload_1
      20: invokevirtual #193                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDiskNumberStart:()J
      23: lload_2
      24: ldc2_w        #263                // long 26l
      27: ladd
      28: invokevirtual #237                // Method org/apache/commons/compress/archivers/zip/ZipSplitReadOnlySeekableByteChannel.position:(JJ)Ljava/nio/channels/SeekableByteChannel;
      31: pop
      32: aload_0
      33: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      36: invokeinterface #136,  1          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:()J
      41: ldc2_w        #263                // long 26l
      44: lsub
      45: lstore_2
      46: goto          64
      49: aload_0
      50: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      53: lload_2
      54: ldc2_w        #263                // long 26l
      57: ladd
      58: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      63: pop
      64: aload_0
      65: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      68: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      71: pop
      72: aload_0
      73: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      76: aload_0
      77: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      80: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      83: aload_0
      84: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      87: invokevirtual #250                // Method java/nio/ByteBuffer.flip:()Ljava/nio/Buffer;
      90: pop
      91: aload_0
      92: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      95: aload_0
      96: getfield      #31                 // Field shortBuf:[B
      99: invokevirtual #265                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     102: pop
     103: aload_0
     104: getfield      #31                 // Field shortBuf:[B
     107: invokestatic  #240                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I
     110: istore        4
     112: aload_0
     113: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
     116: aload_0
     117: getfield      #31                 // Field shortBuf:[B
     120: invokevirtual #265                // Method java/nio/ByteBuffer.get:([B)Ljava/nio/ByteBuffer;
     123: pop
     124: aload_0
     125: getfield      #31                 // Field shortBuf:[B
     128: invokestatic  #240                // Method org/apache/commons/compress/archivers/zip/ZipShort.getValue:([B)I
     131: istore        5
     133: aload_1
     134: lload_2
     135: ldc2_w        #263                // long 26l
     138: ladd
     139: ldc2_w        #266                // long 2l
     142: ladd
     143: ldc2_w        #266                // long 2l
     146: ladd
     147: iload         4
     149: i2l
     150: ladd
     151: iload         5
     153: i2l
     154: ladd
     155: invokevirtual #268                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.setDataOffset:(J)V
     158: aload_1
     159: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J
     162: aload_1
     163: invokevirtual #80                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getCompressedSize:()J
     166: ladd
     167: aload_0
     168: getfield      #137                // Field centralDirectoryStartOffset:J
     171: lcmp
     172: ifle          212
     175: new           #53                 // class java/io/IOException
     178: dup
     179: new           #54                 // class java/lang/StringBuilder
     182: dup
     183: invokespecial #55                 // Method java/lang/StringBuilder."<init>":()V
     186: ldc_w         #269                // String data for
     189: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     192: aload_1
     193: invokevirtual #199                // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getName:()Ljava/lang/String;
     196: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     199: ldc_w         #270                // String  overlaps with central directory.
     202: invokevirtual #57                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     205: invokevirtual #58                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     208: invokespecial #144                // Method java/io/IOException."<init>":(Ljava/lang/String;)V
     211: athrow
     212: iconst_2
     213: newarray       int
     215: dup
     216: iconst_0
     217: iload         4
     219: iastore
     220: dup
     221: iconst_1
     222: iload         5
     224: iastore
     225: areturn

  private long getDataOffset(org.apache.commons.compress.archivers.zip.ZipArchiveEntry) throws java.io.IOException;
    Code:
       0: aload_1
       1: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J
       4: lstore_2
       5: lload_2
       6: ldc2_w        #78                 // long -1l
       9: lcmp
      10: ifne          24
      13: aload_0
      14: aload_1
      15: invokespecial #255                // Method setDataOffset:(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)[I
      18: pop
      19: aload_1
      20: invokevirtual #76                 // Method org/apache/commons/compress/archivers/zip/ZipArchiveEntry.getDataOffset:()J
      23: lreturn
      24: lload_2
      25: lreturn

  private boolean startsWithLocalFileHeader() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
       4: lconst_0
       5: invokeinterface #230,  3          // InterfaceMethod java/nio/channels/SeekableByteChannel.position:(J)Ljava/nio/channels/SeekableByteChannel;
      10: pop
      11: aload_0
      12: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      15: invokevirtual #138                // Method java/nio/ByteBuffer.rewind:()Ljava/nio/Buffer;
      18: pop
      19: aload_0
      20: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      23: aload_0
      24: getfield      #34                 // Field wordBbuf:Ljava/nio/ByteBuffer;
      27: invokestatic  #139                // Method org/apache/commons/compress/utils/IOUtils.readFully:(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/ByteBuffer;)V
      30: aload_0
      31: getfield      #29                 // Field wordBuf:[B
      34: getstatic     #271                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.LFH_SIG:[B
      37: invokestatic  #232                // Method java/util/Arrays.equals:([B[B)Z
      40: ireturn

  private org.apache.commons.compress.utils.BoundedArchiveInputStream createBoundedInputStream(long, long);
    Code:
       0: lload_1
       1: lconst_0
       2: lcmp
       3: iflt          20
       6: lload_3
       7: lconst_0
       8: lcmp
       9: iflt          20
      12: lload_1
      13: lload_3
      14: ladd
      15: lload_1
      16: lcmp
      17: ifge          31
      20: new           #105                // class java/lang/IllegalArgumentException
      23: dup
      24: ldc_w         #272                // String Corrupted archive, stream boundaries are out of range
      27: invokespecial #273                // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      30: athrow
      31: aload_0
      32: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      35: instanceof    #274                // class java/nio/channels/FileChannel
      38: ifeq          54
      41: new           #275                // class org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream
      44: dup
      45: aload_0
      46: lload_1
      47: lload_3
      48: invokespecial #276                // Method org/apache/commons/compress/archivers/zip/ZipFile$BoundedFileChannelInputStream."<init>":(Lorg/apache/commons/compress/archivers/zip/ZipFile;JJ)V
      51: goto          67
      54: new           #277                // class org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream
      57: dup
      58: lload_1
      59: lload_3
      60: aload_0
      61: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
      64: invokespecial #278                // Method org/apache/commons/compress/utils/BoundedSeekableByteChannelInputStream."<init>":(JJLjava/nio/channels/SeekableByteChannel;)V
      67: areturn

  private static java.util.LinkedList lambda$fillNameMap$0(java.lang.String);
    Code:
       0: new           #21                 // class java/util/LinkedList
       3: dup
       4: invokespecial #22                 // Method java/util/LinkedList."<init>":()V
       7: areturn

  static java.nio.channels.SeekableByteChannel access$300(org.apache.commons.compress.archivers.zip.ZipFile);
    Code:
       0: aload_0
       1: getfield      #3                  // Field archive:Ljava/nio/channels/SeekableByteChannel;
       4: areturn

  static {};
    Code:
       0: iconst_1
       1: newarray       byte
       3: putstatic     #112                // Field ONE_ZERO_BYTE:[B
       6: getstatic     #279                // Field org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.CFH_SIG:[B
       9: invokestatic  #140                // Method org/apache/commons/compress/archivers/zip/ZipLong.getValue:([B)J
      12: putstatic     #141                // Field CFH_SIG:J
      15: return
}
