Compiled from "LeakDetector.java"
public class org.eclipse.jetty.util.LeakDetector<T> extends org.eclipse.jetty.util.component.AbstractLifeCycle implements java.lang.Runnable {
  private static final org.eclipse.jetty.util.log.Logger LOG;

  private final java.lang.ref.ReferenceQueue<T> queue;

  private final java.util.concurrent.ConcurrentMap<java.lang.String, org.eclipse.jetty.util.LeakDetector<T>.LeakInfo> resources;

  private java.lang.Thread thread;

  public org.eclipse.jetty.util.LeakDetector();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method org/eclipse/jetty/util/component/AbstractLifeCycle."<init>":()V
       4: aload_0
       5: new           #3                  // class java/lang/ref/ReferenceQueue
       8: dup
       9: invokespecial #4                  // Method java/lang/ref/ReferenceQueue."<init>":()V
      12: putfield      #1                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      19: dup
      20: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      23: putfield      #7                  // Field resources:Ljava/util/concurrent/ConcurrentMap;
      26: return

  public boolean acquired(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method id:(Ljava/lang/Object;)Ljava/lang/String;
       5: astore_2
       6: aload_0
       7: getfield      #7                  // Field resources:Ljava/util/concurrent/ConcurrentMap;
      10: aload_2
      11: new           #9                  // class org/eclipse/jetty/util/LeakDetector$LeakInfo
      14: dup
      15: aload_0
      16: aload_1
      17: aload_2
      18: aconst_null
      19: invokespecial #10                 // Method org/eclipse/jetty/util/LeakDetector$LeakInfo."<init>":(Lorg/eclipse/jetty/util/LeakDetector;Ljava/lang/Object;Ljava/lang/String;Lorg/eclipse/jetty/util/LeakDetector$1;)V
      22: invokeinterface #11,  3           // InterfaceMethod java/util/concurrent/ConcurrentMap.putIfAbsent:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      27: checkcast     #9                  // class org/eclipse/jetty/util/LeakDetector$LeakInfo
      30: astore_3
      31: aload_3
      32: ifnonnull     39
      35: iconst_1
      36: goto          40
      39: iconst_0
      40: ireturn

  public boolean released(T);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method id:(Ljava/lang/Object;)Ljava/lang/String;
       5: astore_2
       6: aload_0
       7: getfield      #7                  // Field resources:Ljava/util/concurrent/ConcurrentMap;
      10: aload_2
      11: invokeinterface #12,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      16: checkcast     #9                  // class org/eclipse/jetty/util/LeakDetector$LeakInfo
      19: astore_3
      20: aload_3
      21: ifnull        28
      24: iconst_1
      25: goto          29
      28: iconst_0
      29: ireturn

  public java.lang.String id(T);
    Code:
       0: aload_1
       1: invokestatic  #13                 // Method java/lang/System.identityHashCode:(Ljava/lang/Object;)I
       4: invokestatic  #14                 // Method java/lang/String.valueOf:(I)Ljava/lang/String;
       7: areturn

  protected void doStart() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #15                 // Method org/eclipse/jetty/util/component/AbstractLifeCycle.doStart:()V
       4: aload_0
       5: new           #16                 // class java/lang/Thread
       8: dup
       9: aload_0
      10: aload_0
      11: invokevirtual #17                 // Method java/lang/Object.getClass:()Ljava/lang/Class;
      14: invokevirtual #18                 // Method java/lang/Class.getSimpleName:()Ljava/lang/String;
      17: invokespecial #19                 // Method java/lang/Thread."<init>":(Ljava/lang/Runnable;Ljava/lang/String;)V
      20: putfield      #20                 // Field thread:Ljava/lang/Thread;
      23: aload_0
      24: getfield      #20                 // Field thread:Ljava/lang/Thread;
      27: iconst_1
      28: invokevirtual #21                 // Method java/lang/Thread.setDaemon:(Z)V
      31: aload_0
      32: getfield      #20                 // Field thread:Ljava/lang/Thread;
      35: invokevirtual #22                 // Method java/lang/Thread.start:()V
      38: return

  protected void doStop() throws java.lang.Exception;
    Code:
       0: aload_0
       1: invokespecial #23                 // Method org/eclipse/jetty/util/component/AbstractLifeCycle.doStop:()V
       4: aload_0
       5: getfield      #20                 // Field thread:Ljava/lang/Thread;
       8: invokevirtual #24                 // Method java/lang/Thread.interrupt:()V
      11: return

  public void run();
    Code:
       0: aload_0
       1: invokevirtual #25                 // Method isRunning:()Z
       4: ifeq          71
       7: aload_0
       8: getfield      #1                  // Field queue:Ljava/lang/ref/ReferenceQueue;
      11: invokevirtual #26                 // Method java/lang/ref/ReferenceQueue.remove:()Ljava/lang/ref/Reference;
      14: checkcast     #9                  // class org/eclipse/jetty/util/LeakDetector$LeakInfo
      17: astore_1
      18: getstatic     #27                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
      21: invokeinterface #28,  1           // InterfaceMethod org/eclipse/jetty/util/log/Logger.isDebugEnabled:()Z
      26: ifeq          47
      29: getstatic     #27                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
      32: ldc           #29                 // String Resource GC\'ed: {}
      34: iconst_1
      35: anewarray     #30                 // class java/lang/Object
      38: dup
      39: iconst_0
      40: aload_1
      41: aastore
      42: invokeinterface #31,  3           // InterfaceMethod org/eclipse/jetty/util/log/Logger.debug:(Ljava/lang/String;[Ljava/lang/Object;)V
      47: aload_0
      48: getfield      #7                  // Field resources:Ljava/util/concurrent/ConcurrentMap;
      51: aload_1
      52: invokestatic  #32                 // Method org/eclipse/jetty/util/LeakDetector$LeakInfo.access$100:(Lorg/eclipse/jetty/util/LeakDetector$LeakInfo;)Ljava/lang/String;
      55: invokeinterface #12,  2           // InterfaceMethod java/util/concurrent/ConcurrentMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      60: ifnull        68
      63: aload_0
      64: aload_1
      65: invokevirtual #33                 // Method leaked:(Lorg/eclipse/jetty/util/LeakDetector$LeakInfo;)V
      68: goto          0
      71: goto          75
      74: astore_1
      75: return
    Exception table:
       from    to  target type
           0    71    74   Class java/lang/InterruptedException

  protected void leaked(org.eclipse.jetty.util.LeakDetector<T>.LeakInfo);
    Code:
       0: getstatic     #27                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
       3: new           #35                 // class java/lang/StringBuilder
       6: dup
       7: invokespecial #36                 // Method java/lang/StringBuilder."<init>":()V
      10: ldc           #37                 // String Resource leaked:
      12: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      15: aload_1
      16: invokestatic  #39                 // Method org/eclipse/jetty/util/LeakDetector$LeakInfo.access$200:(Lorg/eclipse/jetty/util/LeakDetector$LeakInfo;)Ljava/lang/String;
      19: invokevirtual #38                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      22: invokevirtual #40                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      25: aload_1
      26: invokestatic  #41                 // Method org/eclipse/jetty/util/LeakDetector$LeakInfo.access$300:(Lorg/eclipse/jetty/util/LeakDetector$LeakInfo;)Ljava/lang/Throwable;
      29: invokeinterface #42,  3           // InterfaceMethod org/eclipse/jetty/util/log/Logger.warn:(Ljava/lang/String;Ljava/lang/Throwable;)V
      34: return

  static java.lang.ref.ReferenceQueue access$400(org.eclipse.jetty.util.LeakDetector);
    Code:
       0: aload_0
       1: getfield      #1                  // Field queue:Ljava/lang/ref/ReferenceQueue;
       4: areturn

  static {};
    Code:
       0: ldc           #43                 // class org/eclipse/jetty/util/LeakDetector
       2: invokestatic  #44                 // Method org/eclipse/jetty/util/log/Log.getLogger:(Ljava/lang/Class;)Lorg/eclipse/jetty/util/log/Logger;
       5: putstatic     #27                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
       8: return
}
