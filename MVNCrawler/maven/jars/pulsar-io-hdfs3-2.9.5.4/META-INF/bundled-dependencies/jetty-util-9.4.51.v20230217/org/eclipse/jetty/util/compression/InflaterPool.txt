Compiled from "InflaterPool.java"
public class org.eclipse.jetty.util.compression.InflaterPool extends org.eclipse.jetty.util.compression.CompressionPool<java.util.zip.Inflater> {
  private final boolean nowrap;

  public org.eclipse.jetty.util.compression.InflaterPool(int, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokespecial #1                  // Method org/eclipse/jetty/util/compression/CompressionPool."<init>":(I)V
       5: aload_0
       6: iload_2
       7: putfield      #2                  // Field nowrap:Z
      10: return

  protected java.util.zip.Inflater newObject();
    Code:
       0: new           #3                  // class java/util/zip/Inflater
       3: dup
       4: aload_0
       5: getfield      #2                  // Field nowrap:Z
       8: invokespecial #4                  // Method java/util/zip/Inflater."<init>":(Z)V
      11: areturn

  protected void end(java.util.zip.Inflater);
    Code:
       0: aload_1
       1: invokevirtual #5                  // Method java/util/zip/Inflater.end:()V
       4: return

  protected void reset(java.util.zip.Inflater);
    Code:
       0: aload_1
       1: invokevirtual #6                  // Method java/util/zip/Inflater.reset:()V
       4: return

  public static org.eclipse.jetty.util.compression.InflaterPool ensurePool(org.eclipse.jetty.util.component.Container);
    Code:
       0: aload_0
       1: ldc           #7                  // class org/eclipse/jetty/util/compression/InflaterPool
       3: invokeinterface #8,  2            // InterfaceMethod org/eclipse/jetty/util/component/Container.getBean:(Ljava/lang/Class;)Ljava/lang/Object;
       8: checkcast     #7                  // class org/eclipse/jetty/util/compression/InflaterPool
      11: astore_1
      12: aload_1
      13: ifnull        18
      16: aload_1
      17: areturn
      18: iconst_m1
      19: istore_2
      20: aload_0
      21: ldc           #10                 // class org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool
      23: invokeinterface #8,  2            // InterfaceMethod org/eclipse/jetty/util/component/Container.getBean:(Ljava/lang/Class;)Ljava/lang/Object;
      28: checkcast     #10                 // class org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool
      31: astore_3
      32: aload_3
      33: ifnull        43
      36: aload_3
      37: invokeinterface #11,  1           // InterfaceMethod org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool.getMaxThreads:()I
      42: istore_2
      43: new           #7                  // class org/eclipse/jetty/util/compression/InflaterPool
      46: dup
      47: iload_2
      48: iconst_1
      49: invokespecial #12                 // Method "<init>":(IZ)V
      52: astore_1
      53: aload_0
      54: aload_1
      55: iconst_1
      56: invokeinterface #13,  3           // InterfaceMethod org/eclipse/jetty/util/component/Container.addBean:(Ljava/lang/Object;Z)Z
      61: pop
      62: aload_1
      63: areturn

  protected void reset(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #3                  // class java/util/zip/Inflater
       5: invokevirtual #14                 // Method reset:(Ljava/util/zip/Inflater;)V
       8: return

  protected void end(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #3                  // class java/util/zip/Inflater
       5: invokevirtual #15                 // Method end:(Ljava/util/zip/Inflater;)V
       8: return

  protected java.lang.Object newObject();
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method newObject:()Ljava/util/zip/Inflater;
       4: areturn
}
