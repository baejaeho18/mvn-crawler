Compiled from "ThreadPoolBudget.java"
public class org.eclipse.jetty.util.thread.ThreadPoolBudget {
  private static final org.eclipse.jetty.util.log.Logger LOG;

  private static final org.eclipse.jetty.util.thread.ThreadPoolBudget$Lease NOOP_LEASE;

  private final java.util.Set<org.eclipse.jetty.util.thread.ThreadPoolBudget$Leased> leases;

  private final java.util.concurrent.atomic.AtomicBoolean warned;

  private final org.eclipse.jetty.util.thread.ThreadPool$SizedThreadPool pool;

  private final int warnAt;

  public org.eclipse.jetty.util.thread.ThreadPoolBudget(org.eclipse.jetty.util.thread.ThreadPool$SizedThreadPool);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/CopyOnWriteArraySet
       8: dup
       9: invokespecial #5                  // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
      12: putfield      #2                  // Field leases:Ljava/util/Set;
      15: aload_0
      16: new           #6                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #1                  // Field warned:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: aload_1
      28: putfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
      31: aload_0
      32: iconst_m1
      33: putfield      #9                  // Field warnAt:I
      36: return

  public org.eclipse.jetty.util.thread.ThreadPoolBudget(org.eclipse.jetty.util.thread.ThreadPool$SizedThreadPool, int);
    Code:
       0: aload_0
       1: invokespecial #3                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #4                  // class java/util/concurrent/CopyOnWriteArraySet
       8: dup
       9: invokespecial #5                  // Method java/util/concurrent/CopyOnWriteArraySet."<init>":()V
      12: putfield      #2                  // Field leases:Ljava/util/Set;
      15: aload_0
      16: new           #6                  // class java/util/concurrent/atomic/AtomicBoolean
      19: dup
      20: invokespecial #7                  // Method java/util/concurrent/atomic/AtomicBoolean."<init>":()V
      23: putfield      #1                  // Field warned:Ljava/util/concurrent/atomic/AtomicBoolean;
      26: aload_0
      27: aload_1
      28: putfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
      31: aload_0
      32: iload_2
      33: putfield      #9                  // Field warnAt:I
      36: return

  public org.eclipse.jetty.util.thread.ThreadPool$SizedThreadPool getSizedThreadPool();
    Code:
       0: aload_0
       1: getfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
       4: areturn

  public int getLeasedThreads();
    Code:
       0: aload_0
       1: getfield      #2                  // Field leases:Ljava/util/Set;
       4: invokeinterface #10,  1           // InterfaceMethod java/util/Set.stream:()Ljava/util/stream/Stream;
       9: invokedynamic #11,  0             // InvokeDynamic #0:applyAsInt:()Ljava/util/function/ToIntFunction;
      14: invokeinterface #12,  2           // InterfaceMethod java/util/stream/Stream.mapToInt:(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;
      19: invokeinterface #13,  1           // InterfaceMethod java/util/stream/IntStream.sum:()I
      24: ireturn

  public void reset();
    Code:
       0: aload_0
       1: getfield      #2                  // Field leases:Ljava/util/Set;
       4: invokeinterface #14,  1           // InterfaceMethod java/util/Set.clear:()V
       9: aload_0
      10: getfield      #1                  // Field warned:Ljava/util/concurrent/atomic/AtomicBoolean;
      13: iconst_0
      14: invokevirtual #15                 // Method java/util/concurrent/atomic/AtomicBoolean.set:(Z)V
      17: return

  public org.eclipse.jetty.util.thread.ThreadPoolBudget$Lease leaseTo(java.lang.Object, int);
    Code:
       0: new           #16                 // class org/eclipse/jetty/util/thread/ThreadPoolBudget$Leased
       3: dup
       4: aload_0
       5: aload_1
       6: iload_2
       7: aconst_null
       8: invokespecial #17                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget$Leased."<init>":(Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;Ljava/lang/Object;ILorg/eclipse/jetty/util/thread/ThreadPoolBudget$1;)V
      11: astore_3
      12: aload_0
      13: getfield      #2                  // Field leases:Ljava/util/Set;
      16: aload_3
      17: invokeinterface #18,  2           // InterfaceMethod java/util/Set.add:(Ljava/lang/Object;)Z
      22: pop
      23: aload_0
      24: aload_0
      25: getfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
      28: invokeinterface #19,  1           // InterfaceMethod org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool.getMaxThreads:()I
      33: invokevirtual #20                 // Method check:(I)Z
      36: pop
      37: aload_3
      38: areturn
      39: astore        4
      41: aload_3
      42: invokevirtual #22                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget$Leased.close:()V
      45: aload         4
      47: athrow
    Exception table:
       from    to  target type
          23    38    39   Class java/lang/IllegalStateException

  public boolean check(int) throws java.lang.IllegalStateException;
    Code:
       0: aload_0
       1: invokevirtual #23                 // Method getLeasedThreads:()I
       4: istore_2
       5: iload_1
       6: iload_2
       7: isub
       8: istore_3
       9: iload_3
      10: ifgt          55
      13: aload_0
      14: invokespecial #24                 // Method printInfoOnLeases:()V
      17: new           #21                 // class java/lang/IllegalStateException
      20: dup
      21: ldc           #25                 // String Insufficient configured threads: required=%d < max=%d for %s
      23: iconst_3
      24: anewarray     #26                 // class java/lang/Object
      27: dup
      28: iconst_0
      29: iload_2
      30: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      33: aastore
      34: dup
      35: iconst_1
      36: iload_1
      37: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      40: aastore
      41: dup
      42: iconst_2
      43: aload_0
      44: getfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
      47: aastore
      48: invokestatic  #28                 // Method java/lang/String.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;
      51: invokespecial #29                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      54: athrow
      55: iload_3
      56: aload_0
      57: getfield      #9                  // Field warnAt:I
      60: if_icmpge     133
      63: aload_0
      64: getfield      #1                  // Field warned:Ljava/util/concurrent/atomic/AtomicBoolean;
      67: iconst_0
      68: iconst_1
      69: invokevirtual #30                 // Method java/util/concurrent/atomic/AtomicBoolean.compareAndSet:(ZZ)Z
      72: ifeq          131
      75: aload_0
      76: invokespecial #24                 // Method printInfoOnLeases:()V
      79: getstatic     #31                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
      82: ldc           #32                 // String Low configured threads: (max={} - required={})={} < warnAt={} for {}
      84: iconst_5
      85: anewarray     #26                 // class java/lang/Object
      88: dup
      89: iconst_0
      90: iload_1
      91: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      94: aastore
      95: dup
      96: iconst_1
      97: iload_2
      98: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     101: aastore
     102: dup
     103: iconst_2
     104: iload_3
     105: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     108: aastore
     109: dup
     110: iconst_3
     111: aload_0
     112: getfield      #9                  // Field warnAt:I
     115: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     118: aastore
     119: dup
     120: iconst_4
     121: aload_0
     122: getfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
     125: aastore
     126: invokeinterface #33,  3           // InterfaceMethod org/eclipse/jetty/util/log/Logger.info:(Ljava/lang/String;[Ljava/lang/Object;)V
     131: iconst_0
     132: ireturn
     133: iconst_1
     134: ireturn

  private void printInfoOnLeases();
    Code:
       0: aload_0
       1: getfield      #2                  // Field leases:Ljava/util/Set;
       4: aload_0
       5: invokedynamic #34,  0             // InvokeDynamic #1:accept:(Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;)Ljava/util/function/Consumer;
      10: invokeinterface #35,  2           // InterfaceMethod java/util/Set.forEach:(Ljava/util/function/Consumer;)V
      15: return

  public static org.eclipse.jetty.util.thread.ThreadPoolBudget$Lease leaseFrom(java.util.concurrent.Executor, java.lang.Object, int);
    Code:
       0: aload_0
       1: instanceof    #36                 // class org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool
       4: ifeq          28
       7: aload_0
       8: checkcast     #36                 // class org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool
      11: invokeinterface #37,  1           // InterfaceMethod org/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool.getThreadPoolBudget:()Lorg/eclipse/jetty/util/thread/ThreadPoolBudget;
      16: astore_3
      17: aload_3
      18: ifnull        28
      21: aload_3
      22: aload_1
      23: iload_2
      24: invokevirtual #38                 // Method leaseTo:(Ljava/lang/Object;I)Lorg/eclipse/jetty/util/thread/ThreadPoolBudget$Lease;
      27: areturn
      28: getstatic     #39                 // Field NOOP_LEASE:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget$Lease;
      31: areturn

  private void lambda$printInfoOnLeases$0(org.eclipse.jetty.util.thread.ThreadPoolBudget$Leased);
    Code:
       0: getstatic     #31                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
       3: ldc           #40                 // String {} requires {} threads from {}
       5: iconst_3
       6: anewarray     #26                 // class java/lang/Object
       9: dup
      10: iconst_0
      11: aload_1
      12: invokestatic  #41                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget$Leased.access$300:(Lorg/eclipse/jetty/util/thread/ThreadPoolBudget$Leased;)Ljava/lang/Object;
      15: aastore
      16: dup
      17: iconst_1
      18: aload_1
      19: invokevirtual #42                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget$Leased.getThreads:()I
      22: invokestatic  #27                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
      25: aastore
      26: dup
      27: iconst_2
      28: aload_0
      29: getfield      #8                  // Field pool:Lorg/eclipse/jetty/util/thread/ThreadPool$SizedThreadPool;
      32: aastore
      33: invokeinterface #33,  3           // InterfaceMethod org/eclipse/jetty/util/log/Logger.info:(Ljava/lang/String;[Ljava/lang/Object;)V
      38: return

  static java.util.Set access$000(org.eclipse.jetty.util.thread.ThreadPoolBudget);
    Code:
       0: aload_0
       1: getfield      #2                  // Field leases:Ljava/util/Set;
       4: areturn

  static java.util.concurrent.atomic.AtomicBoolean access$100(org.eclipse.jetty.util.thread.ThreadPoolBudget);
    Code:
       0: aload_0
       1: getfield      #1                  // Field warned:Ljava/util/concurrent/atomic/AtomicBoolean;
       4: areturn

  static {};
    Code:
       0: ldc           #43                 // class org/eclipse/jetty/util/thread/ThreadPoolBudget
       2: invokestatic  #44                 // Method org/eclipse/jetty/util/log/Log.getLogger:(Ljava/lang/Class;)Lorg/eclipse/jetty/util/log/Logger;
       5: putstatic     #31                 // Field LOG:Lorg/eclipse/jetty/util/log/Logger;
       8: new           #45                 // class org/eclipse/jetty/util/thread/ThreadPoolBudget$1
      11: dup
      12: invokespecial #46                 // Method org/eclipse/jetty/util/thread/ThreadPoolBudget$1."<init>":()V
      15: putstatic     #39                 // Field NOOP_LEASE:Lorg/eclipse/jetty/util/thread/ThreadPoolBudget$Lease;
      18: return
}
