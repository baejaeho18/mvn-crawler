Compiled from "AMRMClient.java"
public abstract class org.apache.hadoop.yarn.client.api.AMRMClient<T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> extends org.apache.hadoop.service.AbstractService {
  private static final org.slf4j.Logger LOG;

  private org.apache.hadoop.yarn.client.api.TimelineV2Client timelineV2Client;

  private org.apache.hadoop.yarn.client.api.NMTokenCache nmTokenCache;

  public static <T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> org.apache.hadoop.yarn.client.api.AMRMClient<T> createAMRMClient();
    Code:
       0: new           #1                  // class org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl
       3: dup
       4: invokespecial #2                  // Method org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl."<init>":()V
       7: astore_0
       8: aload_0
       9: areturn

  protected org.apache.hadoop.yarn.client.api.AMRMClient(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #3                  // Method org/apache/hadoop/service/AbstractService."<init>":(Ljava/lang/String;)V
       5: aload_0
       6: invokestatic  #4                  // Method org/apache/hadoop/yarn/client/api/NMTokenCache.getSingleton:()Lorg/apache/hadoop/yarn/client/api/NMTokenCache;
       9: putfield      #5                  // Field nmTokenCache:Lorg/apache/hadoop/yarn/client/api/NMTokenCache;
      12: return

  public void addSchedulingRequests(java.util.Collection<org.apache.hadoop.yarn.api.records.SchedulingRequest>);
    Code:
       0: return

  public abstract org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse registerApplicationMaster(java.lang.String, int, java.lang.String) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;

  public org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse registerApplicationMaster(java.lang.String, int, java.lang.String, java.util.Map<java.util.Set<java.lang.String>, org.apache.hadoop.yarn.api.resource.PlacementConstraint>) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;
    Code:
       0: new           #6                  // class org/apache/hadoop/yarn/exceptions/YarnException
       3: dup
       4: ldc           #7                  // String Not supported
       6: invokespecial #8                  // Method org/apache/hadoop/yarn/exceptions/YarnException."<init>":(Ljava/lang/String;)V
       9: athrow

  public abstract org.apache.hadoop.yarn.api.protocolrecords.AllocateResponse allocate(float) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;

  public abstract void unregisterApplicationMaster(org.apache.hadoop.yarn.api.records.FinalApplicationStatus, java.lang.String, java.lang.String) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;

  public abstract void addContainerRequest(T);

  public abstract void removeContainerRequest(T);

  public void requestContainerResourceChange(org.apache.hadoop.yarn.api.records.Container, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: ldc           #9                  // String Container cannot be null!!
       3: invokestatic  #10                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #11                 // String UpdateContainerRequest cannot be null!!
      10: invokestatic  #10                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: aload_1
      16: aload_1
      17: invokevirtual #12                 // Method org/apache/hadoop/yarn/api/records/Container.getVersion:()I
      20: aload_1
      21: invokevirtual #13                 // Method org/apache/hadoop/yarn/api/records/Container.getId:()Lorg/apache/hadoop/yarn/api/records/ContainerId;
      24: aload_2
      25: aload_1
      26: invokevirtual #14                 // Method org/apache/hadoop/yarn/api/records/Container.getResource:()Lorg/apache/hadoop/yarn/api/records/Resource;
      29: invokestatic  #15                 // Method org/apache/hadoop/yarn/util/resource/Resources.fitsIn:(Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/Resource;)Z
      32: ifeq          41
      35: getstatic     #16                 // Field org/apache/hadoop/yarn/api/records/ContainerUpdateType.DECREASE_RESOURCE:Lorg/apache/hadoop/yarn/api/records/ContainerUpdateType;
      38: goto          44
      41: getstatic     #17                 // Field org/apache/hadoop/yarn/api/records/ContainerUpdateType.INCREASE_RESOURCE:Lorg/apache/hadoop/yarn/api/records/ContainerUpdateType;
      44: aload_2
      45: aconst_null
      46: invokestatic  #18                 // Method org/apache/hadoop/yarn/api/records/UpdateContainerRequest.newInstance:(ILorg/apache/hadoop/yarn/api/records/ContainerId;Lorg/apache/hadoop/yarn/api/records/ContainerUpdateType;Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/ExecutionType;)Lorg/apache/hadoop/yarn/api/records/UpdateContainerRequest;
      49: invokevirtual #19                 // Method requestContainerUpdate:(Lorg/apache/hadoop/yarn/api/records/Container;Lorg/apache/hadoop/yarn/api/records/UpdateContainerRequest;)V
      52: return

  public abstract void requestContainerUpdate(org.apache.hadoop.yarn.api.records.Container, org.apache.hadoop.yarn.api.records.UpdateContainerRequest);

  public abstract void releaseAssignedContainer(org.apache.hadoop.yarn.api.records.ContainerId);

  public abstract org.apache.hadoop.yarn.api.records.Resource getAvailableResources();

  public abstract int getClusterNodeCount();

  public abstract java.util.List<? extends java.util.Collection<T>> getMatchingRequests(org.apache.hadoop.yarn.api.records.Priority, java.lang.String, org.apache.hadoop.yarn.api.records.Resource);

  public java.util.List<? extends java.util.Collection<T>> getMatchingRequests(org.apache.hadoop.yarn.api.records.Priority, java.lang.String, org.apache.hadoop.yarn.api.records.ExecutionType, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: new           #20                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #21                 // String The sub-class extending AMRMClient is expected to implement this !!
       6: invokespecial #22                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public java.util.List<? extends java.util.Collection<T>> getMatchingRequests(org.apache.hadoop.yarn.api.records.Priority, java.lang.String, org.apache.hadoop.yarn.api.records.ExecutionType, org.apache.hadoop.yarn.api.records.Resource, java.lang.String);
    Code:
       0: new           #20                 // class java/lang/UnsupportedOperationException
       3: dup
       4: ldc           #21                 // String The sub-class extending AMRMClient is expected to implement this !!
       6: invokespecial #22                 // Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
       9: athrow

  public abstract java.util.Collection<T> getMatchingRequests(long);

  public abstract void updateBlacklist(java.util.List<java.lang.String>, java.util.List<java.lang.String>);

  public void setNMTokenCache(org.apache.hadoop.yarn.client.api.NMTokenCache);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #5                  // Field nmTokenCache:Lorg/apache/hadoop/yarn/client/api/NMTokenCache;
       5: return

  public org.apache.hadoop.yarn.client.api.NMTokenCache getNMTokenCache();
    Code:
       0: aload_0
       1: getfield      #5                  // Field nmTokenCache:Lorg/apache/hadoop/yarn/client/api/NMTokenCache;
       4: areturn

  public void registerTimelineV2Client(org.apache.hadoop.yarn.client.api.TimelineV2Client);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #23                 // Field timelineV2Client:Lorg/apache/hadoop/yarn/client/api/TimelineV2Client;
       5: return

  public org.apache.hadoop.yarn.client.api.TimelineV2Client getRegisteredTimelineV2Client();
    Code:
       0: aload_0
       1: getfield      #23                 // Field timelineV2Client:Lorg/apache/hadoop/yarn/client/api/TimelineV2Client;
       4: areturn

  public void updateTrackingUrl(java.lang.String);
    Code:
       0: return

  public void waitFor(java.util.function.Supplier<java.lang.Boolean>) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: sipush        1000
       5: invokevirtual #24                 // Method waitFor:(Ljava/util/function/Supplier;I)V
       8: return

  public void waitFor(java.util.function.Supplier<java.lang.Boolean>, int) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_1
       4: invokevirtual #25                 // Method waitFor:(Ljava/util/function/Supplier;II)V
       7: return

  public void waitFor(java.util.function.Supplier<java.lang.Boolean>, int, int) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: ldc           #26                 // String check should not be null
       3: invokestatic  #10                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: iload_2
       8: iflt          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #27                 // String checkEveryMillis should be positive value
      18: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      21: iload_3
      22: iflt          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ldc           #29                 // String logInterval should be positive value
      32: invokestatic  #28                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      35: iload_3
      36: istore        4
      38: getstatic     #30                 // Field LOG:Lorg/slf4j/Logger;
      41: invokeinterface #31,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      46: ifeq          59
      49: getstatic     #30                 // Field LOG:Lorg/slf4j/Logger;
      52: ldc           #32                 // String Check the condition for main loop.
      54: invokeinterface #33,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      59: aload_1
      60: invokeinterface #34,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      65: checkcast     #35                 // class java/lang/Boolean
      68: invokevirtual #36                 // Method java/lang/Boolean.booleanValue:()Z
      71: istore        5
      73: iload         5
      75: ifeq          89
      78: getstatic     #30                 // Field LOG:Lorg/slf4j/Logger;
      81: ldc           #37                 // String Exits the main loop.
      83: invokeinterface #38,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      88: return
      89: iinc          4, -1
      92: iload         4
      94: ifgt          110
      97: getstatic     #30                 // Field LOG:Lorg/slf4j/Logger;
     100: ldc           #39                 // String Waiting in main loop.
     102: invokeinterface #38,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
     107: iload_3
     108: istore        4
     110: iload_2
     111: i2l
     112: invokestatic  #40                 // Method java/lang/Thread.sleep:(J)V
     115: goto          38

  static {};
    Code:
       0: ldc           #41                 // class org/apache/hadoop/yarn/client/api/AMRMClient
       2: invokestatic  #42                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #30                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
