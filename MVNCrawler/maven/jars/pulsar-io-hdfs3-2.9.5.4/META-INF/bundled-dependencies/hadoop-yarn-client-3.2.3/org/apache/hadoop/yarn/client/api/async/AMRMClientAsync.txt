Compiled from "AMRMClientAsync.java"
public abstract class org.apache.hadoop.yarn.client.api.async.AMRMClientAsync<T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> extends org.apache.hadoop.service.AbstractService {
  private static final org.slf4j.Logger LOG;

  protected final org.apache.hadoop.yarn.client.api.AMRMClient<T> client;

  protected final org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$CallbackHandler handler;

  protected final java.util.concurrent.atomic.AtomicInteger heartbeatIntervalMs;

  public static <T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> org.apache.hadoop.yarn.client.api.async.AMRMClientAsync<T> createAMRMClientAsync(int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$AbstractCallbackHandler);
    Code:
       0: new           #1                  // class org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl
       3: dup
       4: iload_0
       5: aload_1
       6: invokespecial #2                  // Method org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl."<init>":(ILorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$AbstractCallbackHandler;)V
       9: areturn

  public static <T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> org.apache.hadoop.yarn.client.api.async.AMRMClientAsync<T> createAMRMClientAsync(org.apache.hadoop.yarn.client.api.AMRMClient<T>, int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$AbstractCallbackHandler);
    Code:
       0: new           #1                  // class org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: invokespecial #3                  // Method org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl."<init>":(Lorg/apache/hadoop/yarn/client/api/AMRMClient;ILorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$AbstractCallbackHandler;)V
      10: areturn

  protected org.apache.hadoop.yarn.client.api.async.AMRMClientAsync(int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$AbstractCallbackHandler);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl
       4: dup
       5: invokespecial #5                  // Method org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl."<init>":()V
       8: iload_1
       9: aload_2
      10: invokespecial #6                  // Method "<init>":(Lorg/apache/hadoop/yarn/client/api/AMRMClient;ILorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$AbstractCallbackHandler;)V
      13: return

  protected org.apache.hadoop.yarn.client.api.async.AMRMClientAsync(org.apache.hadoop.yarn.client.api.AMRMClient<T>, int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$AbstractCallbackHandler);
    Code:
       0: aload_0
       1: ldc           #7                  // class org/apache/hadoop/yarn/client/api/async/AMRMClientAsync
       3: invokevirtual #8                  // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokespecial #9                  // Method org/apache/hadoop/service/AbstractService."<init>":(Ljava/lang/String;)V
       9: aload_0
      10: new           #10                 // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: invokespecial #11                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      17: putfield      #12                 // Field heartbeatIntervalMs:Ljava/util/concurrent/atomic/AtomicInteger;
      20: aload_0
      21: aload_1
      22: putfield      #13                 // Field client:Lorg/apache/hadoop/yarn/client/api/AMRMClient;
      25: aload_0
      26: getfield      #12                 // Field heartbeatIntervalMs:Ljava/util/concurrent/atomic/AtomicInteger;
      29: iload_2
      30: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      33: aload_0
      34: aload_3
      35: putfield      #15                 // Field handler:Lorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$CallbackHandler;
      38: return

  public static <T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> org.apache.hadoop.yarn.client.api.async.AMRMClientAsync<T> createAMRMClientAsync(int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$CallbackHandler);
    Code:
       0: new           #1                  // class org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl
       3: dup
       4: iload_0
       5: aload_1
       6: invokespecial #16                 // Method org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl."<init>":(ILorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$CallbackHandler;)V
       9: areturn

  public static <T extends org.apache.hadoop.yarn.client.api.AMRMClient$ContainerRequest> org.apache.hadoop.yarn.client.api.async.AMRMClientAsync<T> createAMRMClientAsync(org.apache.hadoop.yarn.client.api.AMRMClient<T>, int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$CallbackHandler);
    Code:
       0: new           #1                  // class org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl
       3: dup
       4: aload_0
       5: iload_1
       6: aload_2
       7: invokespecial #17                 // Method org/apache/hadoop/yarn/client/api/async/impl/AMRMClientAsyncImpl."<init>":(Lorg/apache/hadoop/yarn/client/api/AMRMClient;ILorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$CallbackHandler;)V
      10: areturn

  protected org.apache.hadoop.yarn.client.api.async.AMRMClientAsync(int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$CallbackHandler);
    Code:
       0: aload_0
       1: new           #4                  // class org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl
       4: dup
       5: invokespecial #5                  // Method org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl."<init>":()V
       8: iload_1
       9: aload_2
      10: invokespecial #18                 // Method "<init>":(Lorg/apache/hadoop/yarn/client/api/AMRMClient;ILorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$CallbackHandler;)V
      13: return

  protected org.apache.hadoop.yarn.client.api.async.AMRMClientAsync(org.apache.hadoop.yarn.client.api.AMRMClient<T>, int, org.apache.hadoop.yarn.client.api.async.AMRMClientAsync$CallbackHandler);
    Code:
       0: aload_0
       1: ldc           #7                  // class org/apache/hadoop/yarn/client/api/async/AMRMClientAsync
       3: invokevirtual #8                  // Method java/lang/Class.getName:()Ljava/lang/String;
       6: invokespecial #9                  // Method org/apache/hadoop/service/AbstractService."<init>":(Ljava/lang/String;)V
       9: aload_0
      10: new           #10                 // class java/util/concurrent/atomic/AtomicInteger
      13: dup
      14: invokespecial #11                 // Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
      17: putfield      #12                 // Field heartbeatIntervalMs:Ljava/util/concurrent/atomic/AtomicInteger;
      20: aload_0
      21: aload_1
      22: putfield      #13                 // Field client:Lorg/apache/hadoop/yarn/client/api/AMRMClient;
      25: aload_0
      26: getfield      #12                 // Field heartbeatIntervalMs:Ljava/util/concurrent/atomic/AtomicInteger;
      29: iload_2
      30: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
      33: aload_0
      34: aload_3
      35: putfield      #15                 // Field handler:Lorg/apache/hadoop/yarn/client/api/async/AMRMClientAsync$CallbackHandler;
      38: return

  public void setHeartbeatInterval(int);
    Code:
       0: aload_0
       1: getfield      #12                 // Field heartbeatIntervalMs:Ljava/util/concurrent/atomic/AtomicInteger;
       4: iload_1
       5: invokevirtual #14                 // Method java/util/concurrent/atomic/AtomicInteger.set:(I)V
       8: return

  public abstract java.util.List<? extends java.util.Collection<T>> getMatchingRequests(org.apache.hadoop.yarn.api.records.Priority, java.lang.String, org.apache.hadoop.yarn.api.records.Resource);

  public void addSchedulingRequests(java.util.Collection<org.apache.hadoop.yarn.api.records.SchedulingRequest>);
    Code:
       0: return

  public java.util.List<? extends java.util.Collection<T>> getMatchingRequests(org.apache.hadoop.yarn.api.records.Priority, java.lang.String, org.apache.hadoop.yarn.api.records.ExecutionType, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_0
       1: getfield      #13                 // Field client:Lorg/apache/hadoop/yarn/client/api/AMRMClient;
       4: aload_1
       5: aload_2
       6: aload_3
       7: aload         4
       9: invokevirtual #19                 // Method org/apache/hadoop/yarn/client/api/AMRMClient.getMatchingRequests:(Lorg/apache/hadoop/yarn/api/records/Priority;Ljava/lang/String;Lorg/apache/hadoop/yarn/api/records/ExecutionType;Lorg/apache/hadoop/yarn/api/records/Resource;)Ljava/util/List;
      12: areturn

  public java.util.Collection<T> getMatchingRequests(long);
    Code:
       0: aload_0
       1: getfield      #13                 // Field client:Lorg/apache/hadoop/yarn/client/api/AMRMClient;
       4: lload_1
       5: invokevirtual #20                 // Method org/apache/hadoop/yarn/client/api/AMRMClient.getMatchingRequests:(J)Ljava/util/Collection;
       8: areturn

  public abstract org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse registerApplicationMaster(java.lang.String, int, java.lang.String) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;

  public org.apache.hadoop.yarn.api.protocolrecords.RegisterApplicationMasterResponse registerApplicationMaster(java.lang.String, int, java.lang.String, java.util.Map<java.util.Set<java.lang.String>, org.apache.hadoop.yarn.api.resource.PlacementConstraint>) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;
    Code:
       0: new           #21                 // class org/apache/hadoop/yarn/exceptions/YarnException
       3: dup
       4: ldc           #22                 // String Not supported
       6: invokespecial #23                 // Method org/apache/hadoop/yarn/exceptions/YarnException."<init>":(Ljava/lang/String;)V
       9: athrow

  public abstract void unregisterApplicationMaster(org.apache.hadoop.yarn.api.records.FinalApplicationStatus, java.lang.String, java.lang.String) throws org.apache.hadoop.yarn.exceptions.YarnException, java.io.IOException;

  public abstract void addContainerRequest(T);

  public abstract void removeContainerRequest(T);

  public void requestContainerResourceChange(org.apache.hadoop.yarn.api.records.Container, org.apache.hadoop.yarn.api.records.Resource);
    Code:
       0: aload_1
       1: ldc           #24                 // String Container cannot be null!!
       3: invokestatic  #25                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: aload_2
       8: ldc           #26                 // String UpdateContainerRequest cannot be null!!
      10: invokestatic  #25                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
      13: pop
      14: aload_0
      15: aload_1
      16: aload_1
      17: invokevirtual #27                 // Method org/apache/hadoop/yarn/api/records/Container.getVersion:()I
      20: aload_1
      21: invokevirtual #28                 // Method org/apache/hadoop/yarn/api/records/Container.getId:()Lorg/apache/hadoop/yarn/api/records/ContainerId;
      24: aload_2
      25: aload_1
      26: invokevirtual #29                 // Method org/apache/hadoop/yarn/api/records/Container.getResource:()Lorg/apache/hadoop/yarn/api/records/Resource;
      29: invokestatic  #30                 // Method org/apache/hadoop/yarn/util/resource/Resources.fitsIn:(Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/Resource;)Z
      32: ifeq          41
      35: getstatic     #31                 // Field org/apache/hadoop/yarn/api/records/ContainerUpdateType.DECREASE_RESOURCE:Lorg/apache/hadoop/yarn/api/records/ContainerUpdateType;
      38: goto          44
      41: getstatic     #32                 // Field org/apache/hadoop/yarn/api/records/ContainerUpdateType.INCREASE_RESOURCE:Lorg/apache/hadoop/yarn/api/records/ContainerUpdateType;
      44: aload_2
      45: aconst_null
      46: invokestatic  #33                 // Method org/apache/hadoop/yarn/api/records/UpdateContainerRequest.newInstance:(ILorg/apache/hadoop/yarn/api/records/ContainerId;Lorg/apache/hadoop/yarn/api/records/ContainerUpdateType;Lorg/apache/hadoop/yarn/api/records/Resource;Lorg/apache/hadoop/yarn/api/records/ExecutionType;)Lorg/apache/hadoop/yarn/api/records/UpdateContainerRequest;
      49: invokevirtual #34                 // Method requestContainerUpdate:(Lorg/apache/hadoop/yarn/api/records/Container;Lorg/apache/hadoop/yarn/api/records/UpdateContainerRequest;)V
      52: return

  public abstract void requestContainerUpdate(org.apache.hadoop.yarn.api.records.Container, org.apache.hadoop.yarn.api.records.UpdateContainerRequest);

  public abstract void releaseAssignedContainer(org.apache.hadoop.yarn.api.records.ContainerId);

  public abstract org.apache.hadoop.yarn.api.records.Resource getAvailableResources();

  public abstract int getClusterNodeCount();

  public void registerTimelineV2Client(org.apache.hadoop.yarn.client.api.TimelineV2Client) throws org.apache.hadoop.yarn.exceptions.YarnException;
    Code:
       0: aload_0
       1: getfield      #13                 // Field client:Lorg/apache/hadoop/yarn/client/api/AMRMClient;
       4: aload_1
       5: invokevirtual #35                 // Method org/apache/hadoop/yarn/client/api/AMRMClient.registerTimelineV2Client:(Lorg/apache/hadoop/yarn/client/api/TimelineV2Client;)V
       8: return

  public org.apache.hadoop.yarn.client.api.TimelineV2Client getRegisteredTimelineV2Client();
    Code:
       0: aload_0
       1: getfield      #13                 // Field client:Lorg/apache/hadoop/yarn/client/api/AMRMClient;
       4: invokevirtual #36                 // Method org/apache/hadoop/yarn/client/api/AMRMClient.getRegisteredTimelineV2Client:()Lorg/apache/hadoop/yarn/client/api/TimelineV2Client;
       7: areturn

  public abstract void updateBlacklist(java.util.List<java.lang.String>, java.util.List<java.lang.String>);

  public void updateTrackingUrl(java.lang.String);
    Code:
       0: return

  public void waitFor(java.util.function.Supplier<java.lang.Boolean>) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: sipush        1000
       5: invokevirtual #37                 // Method waitFor:(Ljava/util/function/Supplier;I)V
       8: return

  public void waitFor(java.util.function.Supplier<java.lang.Boolean>, int) throws java.lang.InterruptedException;
    Code:
       0: aload_0
       1: aload_1
       2: iload_2
       3: iconst_1
       4: invokevirtual #38                 // Method waitFor:(Ljava/util/function/Supplier;II)V
       7: return

  public void waitFor(java.util.function.Supplier<java.lang.Boolean>, int, int) throws java.lang.InterruptedException;
    Code:
       0: aload_1
       1: ldc           #39                 // String check should not be null
       3: invokestatic  #25                 // Method com/google/common/base/Preconditions.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
       6: pop
       7: iload_2
       8: iflt          15
      11: iconst_1
      12: goto          16
      15: iconst_0
      16: ldc           #40                 // String checkEveryMillis should be positive value
      18: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      21: iload_3
      22: iflt          29
      25: iconst_1
      26: goto          30
      29: iconst_0
      30: ldc           #42                 // String logInterval should be positive value
      32: invokestatic  #41                 // Method com/google/common/base/Preconditions.checkArgument:(ZLjava/lang/Object;)V
      35: iload_3
      36: istore        4
      38: getstatic     #43                 // Field LOG:Lorg/slf4j/Logger;
      41: invokeinterface #44,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
      46: ifeq          59
      49: getstatic     #43                 // Field LOG:Lorg/slf4j/Logger;
      52: ldc           #45                 // String Check the condition for main loop.
      54: invokeinterface #46,  2           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;)V
      59: aload_1
      60: invokeinterface #47,  1           // InterfaceMethod java/util/function/Supplier.get:()Ljava/lang/Object;
      65: checkcast     #48                 // class java/lang/Boolean
      68: invokevirtual #49                 // Method java/lang/Boolean.booleanValue:()Z
      71: istore        5
      73: iload         5
      75: ifeq          89
      78: getstatic     #43                 // Field LOG:Lorg/slf4j/Logger;
      81: ldc           #50                 // String Exits the main loop.
      83: invokeinterface #51,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
      88: return
      89: iinc          4, -1
      92: iload         4
      94: ifgt          110
      97: getstatic     #43                 // Field LOG:Lorg/slf4j/Logger;
     100: ldc           #52                 // String Waiting in main loop.
     102: invokeinterface #51,  2           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;)V
     107: iload_3
     108: istore        4
     110: iload_2
     111: i2l
     112: invokestatic  #53                 // Method java/lang/Thread.sleep:(J)V
     115: goto          38

  static {};
    Code:
       0: ldc           #7                  // class org/apache/hadoop/yarn/client/api/async/AMRMClientAsync
       2: invokestatic  #54                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #43                 // Field LOG:Lorg/slf4j/Logger;
       8: return
}
