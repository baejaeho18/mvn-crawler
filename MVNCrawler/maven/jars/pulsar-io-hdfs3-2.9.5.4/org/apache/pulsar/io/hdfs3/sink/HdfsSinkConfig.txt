Compiled from "HdfsSinkConfig.java"
public class org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig extends org.apache.pulsar.io.hdfs3.AbstractHdfsConfig implements java.io.Serializable {
  private static final long serialVersionUID;

  private java.lang.String filenamePrefix;

  private java.lang.String fileExtension;

  private char separator;

  private long syncInterval;

  private int maxPendingRecords;

  public static org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig load(java.lang.String) throws java.io.IOException;
    Code:
       0: new           #1                  // class com/fasterxml/jackson/databind/ObjectMapper
       3: dup
       4: new           #2                  // class com/fasterxml/jackson/dataformat/yaml/YAMLFactory
       7: dup
       8: invokespecial #3                  // Method com/fasterxml/jackson/dataformat/yaml/YAMLFactory."<init>":()V
      11: invokespecial #4                  // Method com/fasterxml/jackson/databind/ObjectMapper."<init>":(Lcom/fasterxml/jackson/core/JsonFactory;)V
      14: astore_1
      15: aload_1
      16: new           #5                  // class java/io/File
      19: dup
      20: aload_0
      21: invokespecial #6                  // Method java/io/File."<init>":(Ljava/lang/String;)V
      24: ldc           #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
      26: invokevirtual #8                  // Method com/fasterxml/jackson/databind/ObjectMapper.readValue:(Ljava/io/File;Ljava/lang/Class;)Ljava/lang/Object;
      29: checkcast     #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
      32: areturn

  public static org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig load(java.util.Map<java.lang.String, java.lang.Object>) throws java.io.IOException;
    Code:
       0: new           #1                  // class com/fasterxml/jackson/databind/ObjectMapper
       3: dup
       4: invokespecial #9                  // Method com/fasterxml/jackson/databind/ObjectMapper."<init>":()V
       7: astore_1
       8: aload_1
       9: new           #1                  // class com/fasterxml/jackson/databind/ObjectMapper
      12: dup
      13: invokespecial #9                  // Method com/fasterxml/jackson/databind/ObjectMapper."<init>":()V
      16: aload_0
      17: invokevirtual #10                 // Method com/fasterxml/jackson/databind/ObjectMapper.writeValueAsString:(Ljava/lang/Object;)Ljava/lang/String;
      20: ldc           #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
      22: invokevirtual #11                 // Method com/fasterxml/jackson/databind/ObjectMapper.readValue:(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;
      25: checkcast     #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
      28: areturn

  public void validate();
    Code:
       0: aload_0
       1: invokespecial #12                 // Method org/apache/pulsar/io/hdfs3/AbstractHdfsConfig.validate:()V
       4: aload_0
       5: getfield      #13                 // Field fileExtension:Ljava/lang/String;
       8: invokestatic  #14                 // Method org/apache/commons/lang3/StringUtils.isEmpty:(Ljava/lang/CharSequence;)Z
      11: ifeq          21
      14: aload_0
      15: invokevirtual #15                 // Method getCompression:()Lorg/apache/pulsar/io/hdfs3/Compression;
      18: ifnull        31
      21: aload_0
      22: getfield      #16                 // Field filenamePrefix:Ljava/lang/String;
      25: invokestatic  #14                 // Method org/apache/commons/lang3/StringUtils.isEmpty:(Ljava/lang/CharSequence;)Z
      28: ifeq          41
      31: new           #17                 // class java/lang/IllegalArgumentException
      34: dup
      35: ldc           #18                 // String Required property not set.
      37: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: aload_0
      42: getfield      #20                 // Field syncInterval:J
      45: lconst_0
      46: lcmp
      47: ifge          60
      50: new           #17                 // class java/lang/IllegalArgumentException
      53: dup
      54: ldc           #21                 // String Sync Interval cannot be negative
      56: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      59: athrow
      60: aload_0
      61: getfield      #22                 // Field maxPendingRecords:I
      64: iconst_1
      65: if_icmpge     78
      68: new           #17                 // class java/lang/IllegalArgumentException
      71: dup
      72: ldc           #23                 // String Max Pending Records must be a positive integer
      74: invokespecial #19                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      77: athrow
      78: return

  public org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig();
    Code:
       0: aload_0
       1: invokespecial #24                 // Method org/apache/pulsar/io/hdfs3/AbstractHdfsConfig."<init>":()V
       4: aload_0
       5: ldc           #26                 // int 2147483647
       7: putfield      #22                 // Field maxPendingRecords:I
      10: return

  public java.lang.String getFilenamePrefix();
    Code:
       0: aload_0
       1: getfield      #16                 // Field filenamePrefix:Ljava/lang/String;
       4: areturn

  public java.lang.String getFileExtension();
    Code:
       0: aload_0
       1: getfield      #13                 // Field fileExtension:Ljava/lang/String;
       4: areturn

  public char getSeparator();
    Code:
       0: aload_0
       1: getfield      #27                 // Field separator:C
       4: ireturn

  public long getSyncInterval();
    Code:
       0: aload_0
       1: getfield      #20                 // Field syncInterval:J
       4: lreturn

  public int getMaxPendingRecords();
    Code:
       0: aload_0
       1: getfield      #22                 // Field maxPendingRecords:I
       4: ireturn

  public org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig setFilenamePrefix(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #16                 // Field filenamePrefix:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig setFileExtension(java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #13                 // Field fileExtension:Ljava/lang/String;
       5: aload_0
       6: areturn

  public org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig setSeparator(char);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #27                 // Field separator:C
       5: aload_0
       6: areturn

  public org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig setSyncInterval(long);
    Code:
       0: aload_0
       1: lload_1
       2: putfield      #20                 // Field syncInterval:J
       5: aload_0
       6: areturn

  public org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig setMaxPendingRecords(int);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #22                 // Field maxPendingRecords:I
       5: aload_0
       6: areturn

  public java.lang.String toString();
    Code:
       0: new           #28                 // class java/lang/StringBuilder
       3: dup
       4: invokespecial #29                 // Method java/lang/StringBuilder."<init>":()V
       7: ldc           #30                 // String HdfsSinkConfig(filenamePrefix=
       9: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      12: aload_0
      13: invokevirtual #32                 // Method getFilenamePrefix:()Ljava/lang/String;
      16: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      19: ldc           #33                 // String , fileExtension=
      21: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      24: aload_0
      25: invokevirtual #34                 // Method getFileExtension:()Ljava/lang/String;
      28: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      31: ldc           #35                 // String , separator=
      33: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      36: aload_0
      37: invokevirtual #36                 // Method getSeparator:()C
      40: invokevirtual #37                 // Method java/lang/StringBuilder.append:(C)Ljava/lang/StringBuilder;
      43: ldc           #38                 // String , syncInterval=
      45: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: aload_0
      49: invokevirtual #39                 // Method getSyncInterval:()J
      52: invokevirtual #40                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      55: ldc           #41                 // String , maxPendingRecords=
      57: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      60: aload_0
      61: invokevirtual #42                 // Method getMaxPendingRecords:()I
      64: invokevirtual #43                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
      67: ldc           #44                 // String )
      69: invokevirtual #31                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      72: invokevirtual #45                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      75: areturn

  public boolean equals(java.lang.Object);
    Code:
       0: aload_1
       1: aload_0
       2: if_acmpne     7
       5: iconst_1
       6: ireturn
       7: aload_1
       8: instanceof    #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
      11: ifne          16
      14: iconst_0
      15: ireturn
      16: aload_1
      17: checkcast     #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
      20: astore_2
      21: aload_2
      22: aload_0
      23: invokevirtual #46                 // Method canEqual:(Ljava/lang/Object;)Z
      26: ifne          31
      29: iconst_0
      30: ireturn
      31: aload_0
      32: invokevirtual #36                 // Method getSeparator:()C
      35: aload_2
      36: invokevirtual #36                 // Method getSeparator:()C
      39: if_icmpeq     44
      42: iconst_0
      43: ireturn
      44: aload_0
      45: invokevirtual #39                 // Method getSyncInterval:()J
      48: aload_2
      49: invokevirtual #39                 // Method getSyncInterval:()J
      52: lcmp
      53: ifeq          58
      56: iconst_0
      57: ireturn
      58: aload_0
      59: invokevirtual #42                 // Method getMaxPendingRecords:()I
      62: aload_2
      63: invokevirtual #42                 // Method getMaxPendingRecords:()I
      66: if_icmpeq     71
      69: iconst_0
      70: ireturn
      71: aload_0
      72: invokevirtual #32                 // Method getFilenamePrefix:()Ljava/lang/String;
      75: astore_3
      76: aload_2
      77: invokevirtual #32                 // Method getFilenamePrefix:()Ljava/lang/String;
      80: astore        4
      82: aload_3
      83: ifnonnull     94
      86: aload         4
      88: ifnull        105
      91: goto          103
      94: aload_3
      95: aload         4
      97: invokevirtual #47                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     100: ifne          105
     103: iconst_0
     104: ireturn
     105: aload_0
     106: invokevirtual #34                 // Method getFileExtension:()Ljava/lang/String;
     109: astore        5
     111: aload_2
     112: invokevirtual #34                 // Method getFileExtension:()Ljava/lang/String;
     115: astore        6
     117: aload         5
     119: ifnonnull     130
     122: aload         6
     124: ifnull        142
     127: goto          140
     130: aload         5
     132: aload         6
     134: invokevirtual #47                 // Method java/lang/Object.equals:(Ljava/lang/Object;)Z
     137: ifne          142
     140: iconst_0
     141: ireturn
     142: iconst_1
     143: ireturn

  protected boolean canEqual(java.lang.Object);
    Code:
       0: aload_1
       1: instanceof    #7                  // class org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig
       4: ireturn

  public int hashCode();
    Code:
       0: bipush        59
       2: istore_1
       3: iconst_1
       4: istore_2
       5: iload_2
       6: bipush        59
       8: imul
       9: aload_0
      10: invokevirtual #36                 // Method getSeparator:()C
      13: iadd
      14: istore_2
      15: aload_0
      16: invokevirtual #39                 // Method getSyncInterval:()J
      19: lstore_3
      20: iload_2
      21: bipush        59
      23: imul
      24: lload_3
      25: bipush        32
      27: lushr
      28: lload_3
      29: lxor
      30: l2i
      31: iadd
      32: istore_2
      33: iload_2
      34: bipush        59
      36: imul
      37: aload_0
      38: invokevirtual #42                 // Method getMaxPendingRecords:()I
      41: iadd
      42: istore_2
      43: aload_0
      44: invokevirtual #32                 // Method getFilenamePrefix:()Ljava/lang/String;
      47: astore        5
      49: iload_2
      50: bipush        59
      52: imul
      53: aload         5
      55: ifnonnull     63
      58: bipush        43
      60: goto          68
      63: aload         5
      65: invokevirtual #48                 // Method java/lang/Object.hashCode:()I
      68: iadd
      69: istore_2
      70: aload_0
      71: invokevirtual #34                 // Method getFileExtension:()Ljava/lang/String;
      74: astore        6
      76: iload_2
      77: bipush        59
      79: imul
      80: aload         6
      82: ifnonnull     90
      85: bipush        43
      87: goto          95
      90: aload         6
      92: invokevirtual #48                 // Method java/lang/Object.hashCode:()I
      95: iadd
      96: istore_2
      97: iload_2
      98: ireturn
}
