Compiled from "HdfsAbstractSink.java"
public abstract class org.apache.pulsar.io.hdfs3.sink.HdfsAbstractSink<K, V> extends org.apache.pulsar.io.hdfs3.AbstractHdfsConnector implements org.apache.pulsar.io.core.Sink<V> {
  protected org.apache.pulsar.io.hdfs3.sink.HdfsSinkConfig hdfsSinkConfig;

  protected java.util.concurrent.BlockingQueue<org.apache.pulsar.functions.api.Record<V>> unackedRecords;

  protected org.apache.pulsar.io.hdfs3.sink.HdfsSyncThread<V> syncThread;

  private org.apache.hadoop.fs.Path path;

  private org.apache.hadoop.fs.FSDataOutputStream hdfsStream;

  public org.apache.pulsar.io.hdfs3.sink.HdfsAbstractSink();
    Code:
       0: aload_0
       1: invokespecial #1                  // Method org/apache/pulsar/io/hdfs3/AbstractHdfsConnector."<init>":()V
       4: return

  public abstract org.apache.pulsar.io.core.KeyValue<K, V> extractKeyValue(org.apache.pulsar.functions.api.Record<V>);

  protected abstract void createWriter() throws java.io.IOException;

  public void open(java.util.Map<java.lang.String, java.lang.Object>, org.apache.pulsar.io.core.SinkContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #2                  // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.load:(Ljava/util/Map;)Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
       5: putfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
       8: aload_0
       9: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      12: invokevirtual #4                  // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.validate:()V
      15: aload_0
      16: aload_0
      17: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      20: putfield      #5                  // Field connectorConfig:Lorg/apache/pulsar/io/hdfs3/AbstractHdfsConfig;
      23: aload_0
      24: new           #6                  // class java/util/concurrent/LinkedBlockingQueue
      27: dup
      28: aload_0
      29: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      32: invokevirtual #7                  // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.getMaxPendingRecords:()I
      35: invokespecial #8                  // Method java/util/concurrent/LinkedBlockingQueue."<init>":(I)V
      38: putfield      #9                  // Field unackedRecords:Ljava/util/concurrent/BlockingQueue;
      41: aload_0
      42: invokevirtual #10                 // Method connectToHdfs:()V
      45: aload_0
      46: invokevirtual #11                 // Method createWriter:()V
      49: aload_0
      50: invokevirtual #12                 // Method launchSyncThread:()V
      53: return

  public void close() throws java.lang.Exception;
    Code:
       0: aload_0
       1: getfield      #13                 // Field syncThread:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSyncThread;
       4: invokevirtual #14                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSyncThread.halt:()V
       7: aload_0
       8: getfield      #13                 // Field syncThread:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSyncThread;
      11: lconst_0
      12: invokevirtual #15                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSyncThread.join:(J)V
      15: return

  protected final void connectToHdfs() throws java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #16                 // Field hdfsResources:Ljava/util/concurrent/atomic/AtomicReference;
       4: invokevirtual #17                 // Method java/util/concurrent/atomic/AtomicReference.get:()Ljava/lang/Object;
       7: checkcast     #18                 // class org/apache/pulsar/io/hdfs3/HdfsResources
      10: astore_1
      11: aload_1
      12: invokevirtual #19                 // Method org/apache/pulsar/io/hdfs3/HdfsResources.getConfiguration:()Lorg/apache/hadoop/conf/Configuration;
      15: ifnonnull     35
      18: aload_0
      19: aload_0
      20: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      23: invokevirtual #20                 // Method resetHDFSResources:(Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;)Lorg/apache/pulsar/io/hdfs3/HdfsResources;
      26: astore_1
      27: aload_0
      28: getfield      #16                 // Field hdfsResources:Ljava/util/concurrent/atomic/AtomicReference;
      31: aload_1
      32: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      35: goto          58
      38: astore_1
      39: aload_0
      40: getfield      #16                 // Field hdfsResources:Ljava/util/concurrent/atomic/AtomicReference;
      43: new           #18                 // class org/apache/pulsar/io/hdfs3/HdfsResources
      46: dup
      47: aconst_null
      48: aconst_null
      49: aconst_null
      50: invokespecial #23                 // Method org/apache/pulsar/io/hdfs3/HdfsResources."<init>":(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/security/UserGroupInformation;)V
      53: invokevirtual #21                 // Method java/util/concurrent/atomic/AtomicReference.set:(Ljava/lang/Object;)V
      56: aload_1
      57: athrow
      58: return
    Exception table:
       from    to  target type
           0    35    38   Class java/io/IOException

  protected final org.apache.hadoop.fs.FSDataOutputStreamBuilder getOutputStreamBuilder() throws java.io.IOException;
    Code:
       0: aload_0
       1: invokevirtual #24                 // Method getPath:()Lorg/apache/hadoop/fs/Path;
       4: astore_1
       5: aload_0
       6: aload_0
       7: invokevirtual #25                 // Method getConfiguration:()Lorg/apache/hadoop/conf/Configuration;
      10: aload_0
      11: invokevirtual #26                 // Method getUserGroupInformation:()Lorg/apache/hadoop/security/UserGroupInformation;
      14: invokevirtual #27                 // Method getFileSystemAsUser:(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/security/UserGroupInformation;)Lorg/apache/hadoop/fs/FileSystem;
      17: astore_2
      18: aload_2
      19: aload_1
      20: invokevirtual #28                 // Method org/apache/hadoop/fs/FileSystem.exists:(Lorg/apache/hadoop/fs/Path;)Z
      23: ifeq          34
      26: aload_2
      27: aload_1
      28: invokevirtual #29                 // Method org/apache/hadoop/fs/FileSystem.appendFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
      31: goto          39
      34: aload_2
      35: aload_1
      36: invokevirtual #30                 // Method org/apache/hadoop/fs/FileSystem.createFile:(Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
      39: astore_3
      40: aload_3
      41: invokevirtual #31                 // Method org/apache/hadoop/fs/FSDataOutputStreamBuilder.recursive:()Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
      44: new           #32                 // class org/apache/hadoop/fs/permission/FsPermission
      47: dup
      48: getstatic     #33                 // Field org/apache/hadoop/fs/permission/FsAction.ALL:Lorg/apache/hadoop/fs/permission/FsAction;
      51: getstatic     #33                 // Field org/apache/hadoop/fs/permission/FsAction.ALL:Lorg/apache/hadoop/fs/permission/FsAction;
      54: getstatic     #33                 // Field org/apache/hadoop/fs/permission/FsAction.ALL:Lorg/apache/hadoop/fs/permission/FsAction;
      57: invokespecial #34                 // Method org/apache/hadoop/fs/permission/FsPermission."<init>":(Lorg/apache/hadoop/fs/permission/FsAction;Lorg/apache/hadoop/fs/permission/FsAction;Lorg/apache/hadoop/fs/permission/FsAction;)V
      60: invokevirtual #35                 // Method org/apache/hadoop/fs/FSDataOutputStreamBuilder.permission:(Lorg/apache/hadoop/fs/permission/FsPermission;)Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
      63: areturn

  protected org.apache.hadoop.fs.FSDataOutputStream getHdfsStream() throws java.lang.IllegalArgumentException, java.io.IOException;
    Code:
       0: aload_0
       1: getfield      #36                 // Field hdfsStream:Lorg/apache/hadoop/fs/FSDataOutputStream;
       4: ifnonnull     18
       7: aload_0
       8: aload_0
       9: invokevirtual #37                 // Method getOutputStreamBuilder:()Lorg/apache/hadoop/fs/FSDataOutputStreamBuilder;
      12: invokevirtual #38                 // Method org/apache/hadoop/fs/FSDataOutputStreamBuilder.build:()Lorg/apache/hadoop/fs/FSDataOutputStream;
      15: putfield      #36                 // Field hdfsStream:Lorg/apache/hadoop/fs/FSDataOutputStream;
      18: aload_0
      19: getfield      #36                 // Field hdfsStream:Lorg/apache/hadoop/fs/FSDataOutputStream;
      22: areturn

  protected final org.apache.hadoop.fs.Path getPath();
    Code:
       0: aload_0
       1: getfield      #39                 // Field path:Lorg/apache/hadoop/fs/Path;
       4: ifnonnull     107
       7: ldc           #40                 // String
       9: astore_1
      10: aload_0
      11: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      14: invokevirtual #41                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.getFileExtension:()Ljava/lang/String;
      17: invokestatic  #42                 // Method org/apache/commons/lang3/StringUtils.isNotBlank:(Ljava/lang/CharSequence;)Z
      20: ifeq          34
      23: aload_0
      24: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      27: invokevirtual #41                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.getFileExtension:()Ljava/lang/String;
      30: astore_1
      31: goto          51
      34: aload_0
      35: invokevirtual #43                 // Method getCompressionCodec:()Lorg/apache/hadoop/io/compress/CompressionCodec;
      38: ifnull        51
      41: aload_0
      42: invokevirtual #43                 // Method getCompressionCodec:()Lorg/apache/hadoop/io/compress/CompressionCodec;
      45: invokeinterface #44,  1           // InterfaceMethod org/apache/hadoop/io/compress/CompressionCodec.getDefaultExtension:()Ljava/lang/String;
      50: astore_1
      51: aload_0
      52: new           #45                 // class org/apache/hadoop/fs/Path
      55: dup
      56: aload_0
      57: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      60: invokevirtual #46                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.getDirectory:()Ljava/lang/String;
      63: new           #47                 // class java/lang/StringBuilder
      66: dup
      67: invokespecial #48                 // Method java/lang/StringBuilder."<init>":()V
      70: aload_0
      71: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      74: invokevirtual #49                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.getFilenamePrefix:()Ljava/lang/String;
      77: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      80: ldc           #51                 // String -
      82: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      85: invokestatic  #52                 // Method java/lang/System.currentTimeMillis:()J
      88: invokevirtual #53                 // Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
      91: aload_1
      92: invokevirtual #50                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      95: invokevirtual #54                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      98: invokestatic  #55                 // Method org/apache/commons/io/FilenameUtils.concat:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
     101: invokespecial #56                 // Method org/apache/hadoop/fs/Path."<init>":(Ljava/lang/String;)V
     104: putfield      #39                 // Field path:Lorg/apache/hadoop/fs/Path;
     107: aload_0
     108: getfield      #39                 // Field path:Lorg/apache/hadoop/fs/Path;
     111: areturn

  protected final void launchSyncThread() throws java.io.IOException;
    Code:
       0: aload_0
       1: new           #57                 // class org/apache/pulsar/io/hdfs3/sink/HdfsSyncThread
       4: dup
       5: aload_0
       6: invokevirtual #58                 // Method getHdfsStream:()Lorg/apache/hadoop/fs/FSDataOutputStream;
       9: aload_0
      10: getfield      #9                  // Field unackedRecords:Ljava/util/concurrent/BlockingQueue;
      13: aload_0
      14: getfield      #3                  // Field hdfsSinkConfig:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig;
      17: invokevirtual #59                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSinkConfig.getSyncInterval:()J
      20: invokespecial #60                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSyncThread."<init>":(Lorg/apache/hadoop/fs/Syncable;Ljava/util/concurrent/BlockingQueue;J)V
      23: putfield      #13                 // Field syncThread:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSyncThread;
      26: aload_0
      27: getfield      #13                 // Field syncThread:Lorg/apache/pulsar/io/hdfs3/sink/HdfsSyncThread;
      30: invokevirtual #61                 // Method org/apache/pulsar/io/hdfs3/sink/HdfsSyncThread.start:()V
      33: return
}
