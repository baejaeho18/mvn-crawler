Compiled from "ResetMocksAfterEachTest.scala"
public interface org.mockito.integrations.scalatest.ResetMocksAfterEachTest extends org.scalatest.TestSuite,org.mockito.MockCreator {
  public abstract void org$mockito$integrations$scalatest$ResetMocksAfterEachTest$_setter_$org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$mocksToReset_$eq(scala.collection.mutable.Set);

  public abstract org.scalatest.Outcome org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$super$withFixture(org.scalatest.TestSuite$NoArgTest);

  public abstract java.lang.Object org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$super$mock(scala.reflect.ClassTag, scala.reflect.api.TypeTags$WeakTypeTag, org.mockito.stubbing.DefaultAnswer, org.scalactic.Prettifier);

  public abstract java.lang.Object org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$super$mock(org.mockito.stubbing.DefaultAnswer, scala.reflect.ClassTag, scala.reflect.api.TypeTags$WeakTypeTag, org.scalactic.Prettifier);

  public abstract java.lang.Object org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$super$mock(org.mockito.MockSettings, scala.reflect.ClassTag, scala.reflect.api.TypeTags$WeakTypeTag, org.scalactic.Prettifier);

  public abstract java.lang.Object org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$super$mock(java.lang.String, scala.reflect.ClassTag, scala.reflect.api.TypeTags$WeakTypeTag, org.mockito.stubbing.DefaultAnswer, org.scalactic.Prettifier);

  public abstract scala.collection.mutable.Set<java.lang.Object> org$mockito$integrations$scalatest$ResetMocksAfterEachTest$$mocksToReset();

  public abstract org.scalatest.Outcome withFixture(org.scalatest.TestSuite$NoArgTest);

  public abstract <T> T mock(scala.reflect.ClassTag<T>, scala.reflect.api.TypeTags$WeakTypeTag<T>, org.mockito.stubbing.DefaultAnswer, org.scalactic.Prettifier);

  public abstract <T> T mock(org.mockito.stubbing.DefaultAnswer, scala.reflect.ClassTag<T>, scala.reflect.api.TypeTags$WeakTypeTag<T>, org.scalactic.Prettifier);

  public abstract <T> T mock(org.mockito.MockSettings, scala.reflect.ClassTag<T>, scala.reflect.api.TypeTags$WeakTypeTag<T>, org.scalactic.Prettifier);

  public abstract <T> T mock(java.lang.String, scala.reflect.ClassTag<T>, scala.reflect.api.TypeTags$WeakTypeTag<T>, org.mockito.stubbing.DefaultAnswer, org.scalactic.Prettifier);
}
