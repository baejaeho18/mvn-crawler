Compiled from "JavaConversions.scala"
public final class dev.profunktor.redis4cats.JavaConversions$ implements scala.collection.convert.AsJavaExtensions,scala.collection.convert.AsScalaExtensions {
  public static final dev.profunktor.redis4cats.JavaConversions$ MODULE$;

  public static {};
    Code:
       0: new           #2                  // class dev/profunktor/redis4cats/JavaConversions$
       3: dup
       4: invokespecial #76                 // Method "<init>":()V
       7: putstatic     #78                 // Field MODULE$:Ldev/profunktor/redis4cats/JavaConversions$;
      10: getstatic     #78                 // Field MODULE$:Ldev/profunktor/redis4cats/JavaConversions$;
      13: invokestatic  #82                 // InterfaceMethod scala/collection/convert/AsJavaExtensions.$init$:(Lscala/collection/convert/AsJavaExtensions;)V
      16: getstatic     #78                 // Field MODULE$:Ldev/profunktor/redis4cats/JavaConversions$;
      19: invokestatic  #85                 // InterfaceMethod scala/collection/convert/AsScalaExtensions.$init$:(Lscala/collection/convert/AsScalaExtensions;)V
      22: return

  public <A> scala.collection.convert.AsScalaExtensions$IteratorHasAsScala<A> IteratorHasAsScala(java.util.Iterator<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #92                 // InterfaceMethod scala/collection/convert/AsScalaExtensions.IteratorHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Iterator;)Lscala/collection/convert/AsScalaExtensions$IteratorHasAsScala;
       5: areturn

  public <A> scala.collection.convert.AsScalaExtensions$EnumerationHasAsScala<A> EnumerationHasAsScala(java.util.Enumeration<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #101                // InterfaceMethod scala/collection/convert/AsScalaExtensions.EnumerationHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Enumeration;)Lscala/collection/convert/AsScalaExtensions$EnumerationHasAsScala;
       5: areturn

  public <A> scala.collection.convert.AsScalaExtensions$IterableHasAsScala<A> IterableHasAsScala(java.lang.Iterable<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #108                // InterfaceMethod scala/collection/convert/AsScalaExtensions.IterableHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/lang/Iterable;)Lscala/collection/convert/AsScalaExtensions$IterableHasAsScala;
       5: areturn

  public <A> scala.collection.convert.AsScalaExtensions$CollectionHasAsScala<A> CollectionHasAsScala(java.util.Collection<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #116                // InterfaceMethod scala/collection/convert/AsScalaExtensions.CollectionHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Collection;)Lscala/collection/convert/AsScalaExtensions$CollectionHasAsScala;
       5: areturn

  public <A> scala.collection.convert.AsScalaExtensions$ListHasAsScala<A> ListHasAsScala(java.util.List<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #124                // InterfaceMethod scala/collection/convert/AsScalaExtensions.ListHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/List;)Lscala/collection/convert/AsScalaExtensions$ListHasAsScala;
       5: areturn

  public <A> scala.collection.convert.AsScalaExtensions$SetHasAsScala<A> SetHasAsScala(java.util.Set<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #132                // InterfaceMethod scala/collection/convert/AsScalaExtensions.SetHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Set;)Lscala/collection/convert/AsScalaExtensions$SetHasAsScala;
       5: areturn

  public <K, V> scala.collection.convert.AsScalaExtensions$MapHasAsScala<K, V> MapHasAsScala(java.util.Map<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #140                // InterfaceMethod scala/collection/convert/AsScalaExtensions.MapHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Map;)Lscala/collection/convert/AsScalaExtensions$MapHasAsScala;
       5: areturn

  public <K, V> scala.collection.convert.AsScalaExtensions$ConcurrentMapHasAsScala<K, V> ConcurrentMapHasAsScala(java.util.concurrent.ConcurrentMap<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #147                // InterfaceMethod scala/collection/convert/AsScalaExtensions.ConcurrentMapHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/concurrent/ConcurrentMap;)Lscala/collection/convert/AsScalaExtensions$ConcurrentMapHasAsScala;
       5: areturn

  public <K, V> scala.collection.convert.AsScalaExtensions$DictionaryHasAsScala<K, V> DictionaryHasAsScala(java.util.Dictionary<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #155                // InterfaceMethod scala/collection/convert/AsScalaExtensions.DictionaryHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Dictionary;)Lscala/collection/convert/AsScalaExtensions$DictionaryHasAsScala;
       5: areturn

  public scala.collection.convert.AsScalaExtensions$PropertiesHasAsScala PropertiesHasAsScala(java.util.Properties);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #161                // InterfaceMethod scala/collection/convert/AsScalaExtensions.PropertiesHasAsScala$:(Lscala/collection/convert/AsScalaExtensions;Ljava/util/Properties;)Lscala/collection/convert/AsScalaExtensions$PropertiesHasAsScala;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$IteratorHasAsJava<A> IteratorHasAsJava(scala.collection.Iterator<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #168                // InterfaceMethod scala/collection/convert/AsJavaExtensions.IteratorHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/Iterator;)Lscala/collection/convert/AsJavaExtensions$IteratorHasAsJava;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$IterableHasAsJava<A> IterableHasAsJava(scala.collection.Iterable<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #175                // InterfaceMethod scala/collection/convert/AsJavaExtensions.IterableHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/Iterable;)Lscala/collection/convert/AsJavaExtensions$IterableHasAsJava;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$BufferHasAsJava<A> BufferHasAsJava(scala.collection.mutable.Buffer<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #183                // InterfaceMethod scala/collection/convert/AsJavaExtensions.BufferHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/mutable/Buffer;)Lscala/collection/convert/AsJavaExtensions$BufferHasAsJava;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$MutableSeqHasAsJava<A> MutableSeqHasAsJava(scala.collection.mutable.Seq<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #190                // InterfaceMethod scala/collection/convert/AsJavaExtensions.MutableSeqHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/mutable/Seq;)Lscala/collection/convert/AsJavaExtensions$MutableSeqHasAsJava;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$SeqHasAsJava<A> SeqHasAsJava(scala.collection.Seq<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #197                // InterfaceMethod scala/collection/convert/AsJavaExtensions.SeqHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/Seq;)Lscala/collection/convert/AsJavaExtensions$SeqHasAsJava;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$MutableSetHasAsJava<A> MutableSetHasAsJava(scala.collection.mutable.Set<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #204                // InterfaceMethod scala/collection/convert/AsJavaExtensions.MutableSetHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/mutable/Set;)Lscala/collection/convert/AsJavaExtensions$MutableSetHasAsJava;
       5: areturn

  public <A> scala.collection.convert.AsJavaExtensions$SetHasAsJava<A> SetHasAsJava(scala.collection.Set<A>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #211                // InterfaceMethod scala/collection/convert/AsJavaExtensions.SetHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/Set;)Lscala/collection/convert/AsJavaExtensions$SetHasAsJava;
       5: areturn

  public <K, V> scala.collection.convert.AsJavaExtensions$MutableMapHasAsJava<K, V> MutableMapHasAsJava(scala.collection.mutable.Map<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #218                // InterfaceMethod scala/collection/convert/AsJavaExtensions.MutableMapHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/mutable/Map;)Lscala/collection/convert/AsJavaExtensions$MutableMapHasAsJava;
       5: areturn

  public <K, V> scala.collection.convert.AsJavaExtensions$MapHasAsJava<K, V> MapHasAsJava(scala.collection.Map<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #225                // InterfaceMethod scala/collection/convert/AsJavaExtensions.MapHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/Map;)Lscala/collection/convert/AsJavaExtensions$MapHasAsJava;
       5: areturn

  public <K, V> scala.collection.convert.AsJavaExtensions$ConcurrentMapHasAsJava<K, V> ConcurrentMapHasAsJava(scala.collection.concurrent.Map<K, V>);
    Code:
       0: aload_0
       1: aload_1
       2: invokestatic  #232                // InterfaceMethod scala/collection/convert/AsJavaExtensions.ConcurrentMapHasAsJava$:(Lscala/collection/convert/AsJavaExtensions;Lscala/collection/concurrent/Map;)Lscala/collection/convert/AsJavaExtensions$ConcurrentMapHasAsJava;
       5: areturn

  private dev.profunktor.redis4cats.JavaConversions$();
    Code:
       0: aload_0
       1: invokespecial #234                // Method java/lang/Object."<init>":()V
       4: return
}
