Compiled from "GitChangeLogIT.kt"
public class net.nemerosa.ontrack.extension.git.service.GitChangeLogIT extends net.nemerosa.ontrack.extension.git.AbstractGitTestSupport {
  public net.nemerosa.ontrack.extension.git.service.GitChangeLogIT();
    Code:
       0: aload_0
       1: invokespecial #8                  // Method net/nemerosa/ontrack/extension/git/AbstractGitTestSupport."<init>":()V
       4: return

  public void Change log issues IDs();
    Code:
       0: aload_0
       1: getstatic     #18                 // Field "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log issues IDs$1".INSTANCE:Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log issues IDs$1;
       4: checkcast     #20                 // class kotlin/jvm/functions/Function1
       7: invokevirtual #24                 // Method createRepo:(Lkotlin/jvm/functions/Function1;)Lnet/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions;
      10: new           #26                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log issues IDs$2"
      13: dup
      14: aload_0
      15: invokespecial #29                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log issues IDs$2"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
      18: checkcast     #31                 // class kotlin/jvm/functions/Function2
      21: invokevirtual #37                 // Method net/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions.and:(Lkotlin/jvm/functions/Function2;)V
      24: return

  public void Change log based on commits();
    Code:
       0: aload_0
       1: new           #40                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on commits$1"
       4: dup
       5: aload_0
       6: invokespecial #41                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on commits$1"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
       9: checkcast     #20                 // class kotlin/jvm/functions/Function1
      12: invokevirtual #24                 // Method createRepo:(Lkotlin/jvm/functions/Function1;)Lnet/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions;
      15: new           #43                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on commits$2"
      18: dup
      19: aload_0
      20: invokespecial #44                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on commits$2"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
      23: checkcast     #31                 // class kotlin/jvm/functions/Function2
      26: invokevirtual #37                 // Method net/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions.and:(Lkotlin/jvm/functions/Function2;)V
      29: return

  public void Change log for PR based on commits();
    Code:
       0: aload_0
       1: new           #47                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log for PR based on commits$1"
       4: dup
       5: aload_0
       6: invokespecial #48                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log for PR based on commits$1"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
       9: checkcast     #20                 // class kotlin/jvm/functions/Function1
      12: invokevirtual #24                 // Method createRepo:(Lkotlin/jvm/functions/Function1;)Lnet/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions;
      15: new           #50                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log for PR based on commits$2"
      18: dup
      19: aload_0
      20: invokespecial #51                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log for PR based on commits$2"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
      23: checkcast     #31                 // class kotlin/jvm/functions/Function2
      26: invokevirtual #37                 // Method net/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions.and:(Lkotlin/jvm/functions/Function2;)V
      29: return

  public void Change log based on tags();
    Code:
       0: aload_0
       1: new           #54                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on tags$1"
       4: dup
       5: aload_0
       6: invokespecial #55                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on tags$1"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
       9: checkcast     #20                 // class kotlin/jvm/functions/Function1
      12: invokevirtual #24                 // Method createRepo:(Lkotlin/jvm/functions/Function1;)Lnet/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions;
      15: new           #57                 // class "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on tags$2"
      18: dup
      19: aload_0
      20: invokespecial #58                 // Method "net/nemerosa/ontrack/extension/git/service/GitChangeLogIT$Change log based on tags$2"."<init>":(Lnet/nemerosa/ontrack/extension/git/service/GitChangeLogIT;)V
      23: checkcast     #31                 // class kotlin/jvm/functions/Function2
      26: invokevirtual #37                 // Method net/nemerosa/ontrack/extension/git/AbstractGitTestSupport$RepoTestActions.and:(Lkotlin/jvm/functions/Function2;)V
      29: return

  public static final net.nemerosa.ontrack.extension.git.model.ConfiguredBuildGitCommitLink access$commitAsProperty(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT);
    Code:
       0: aload_0
       1: invokevirtual #64                 // Method commitAsProperty:()Lnet/nemerosa/ontrack/extension/git/model/ConfiguredBuildGitCommitLink;
       4: areturn

  public static final net.nemerosa.ontrack.extension.git.service.GitService access$getGitService(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT);
    Code:
       0: aload_0
       1: invokevirtual #71                 // Method getGitService:()Lnet/nemerosa/ontrack/extension/git/service/GitService;
       4: areturn

  public static final void access$gitCommitProperty(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT, net.nemerosa.ontrack.model.structure.Build, java.lang.String);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #77                 // Method gitCommitProperty:(Lnet/nemerosa/ontrack/model/structure/Build;Ljava/lang/String;)V
       6: return

  public static final net.nemerosa.ontrack.extension.git.model.ConfiguredBuildGitCommitLink access$buildNameAsCommit(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT, boolean);
    Code:
       0: aload_0
       1: iload_1
       2: invokevirtual #87                 // Method buildNameAsCommit:(Z)Lnet/nemerosa/ontrack/extension/git/model/ConfiguredBuildGitCommitLink;
       5: areturn

  public static final net.nemerosa.ontrack.it.AbstractServiceTestJUnit4Support$ConfigurableAccountCall access$asUserWithView(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT, net.nemerosa.ontrack.model.structure.ProjectEntity...);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #95                 // Method asUserWithView:([Lnet/nemerosa/ontrack/model/structure/ProjectEntity;)Lnet/nemerosa/ontrack/it/AbstractServiceTestJUnit4Support$ConfigurableAccountCall;
       5: areturn

  public static final net.nemerosa.ontrack.model.structure.StructureService access$getStructureService(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT);
    Code:
       0: aload_0
       1: invokevirtual #103                // Method getStructureService:()Lnet/nemerosa/ontrack/model/structure/StructureService;
       4: areturn

  public static final java.util.Map access$sequence(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT, net.nemerosa.ontrack.git.support.GitRepo, java.lang.Object...);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokevirtual #109                // Method sequence:(Lnet/nemerosa/ontrack/git/support/GitRepo;[Ljava/lang/Object;)Ljava/util/Map;
       6: areturn

  public static final net.nemerosa.ontrack.extension.git.model.ConfiguredBuildGitCommitLink access$tagBuildName(net.nemerosa.ontrack.extension.git.service.GitChangeLogIT);
    Code:
       0: aload_0
       1: invokevirtual #116                // Method tagBuildName:()Lnet/nemerosa/ontrack/extension/git/model/ConfiguredBuildGitCommitLink;
       4: areturn
}
