Compiled from "ConnectTTLHandler.java"
public class io.micronaut.http.client.netty.ConnectTTLHandler extends io.netty.channel.ChannelDuplexHandler {
  public static final io.netty.util.AttributeKey<java.lang.Boolean> RELEASE_CHANNEL;

  private final java.lang.Long connectionTtlMillis;

  private io.netty.util.concurrent.ScheduledFuture<?> channelKiller;

  public io.micronaut.http.client.netty.ConnectTTLHandler(java.lang.Long);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method io/netty/channel/ChannelDuplexHandler."<init>":()V
       4: aload_1
       5: invokevirtual #2                  // Method java/lang/Long.longValue:()J
       8: lconst_0
       9: lcmp
      10: ifgt          23
      13: new           #3                  // class java/lang/IllegalArgumentException
      16: dup
      17: ldc           #4                  // String connectTTL must be positive
      19: invokespecial #5                  // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      22: athrow
      23: aload_0
      24: aload_1
      25: putfield      #6                  // Field connectionTtlMillis:Ljava/lang/Long;
      28: return

  public void handlerAdded(io.netty.channel.ChannelHandlerContext) throws java.lang.Exception;
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #7                  // Method io/netty/channel/ChannelDuplexHandler.handlerAdded:(Lio/netty/channel/ChannelHandlerContext;)V
       5: aload_0
       6: aload_1
       7: invokeinterface #8,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      12: invokeinterface #9,  1            // InterfaceMethod io/netty/channel/Channel.eventLoop:()Lio/netty/channel/EventLoop;
      17: aload_0
      18: aload_1
      19: invokedynamic #10,  0             // InvokeDynamic #0:run:(Lio/micronaut/http/client/netty/ConnectTTLHandler;Lio/netty/channel/ChannelHandlerContext;)Ljava/lang/Runnable;
      24: aload_0
      25: getfield      #6                  // Field connectionTtlMillis:Ljava/lang/Long;
      28: invokevirtual #2                  // Method java/lang/Long.longValue:()J
      31: getstatic     #11                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      34: invokeinterface #12,  5           // InterfaceMethod io/netty/channel/EventLoop.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/netty/util/concurrent/ScheduledFuture;
      39: putfield      #13                 // Field channelKiller:Lio/netty/util/concurrent/ScheduledFuture;
      42: return

  public void handlerRemoved(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: getfield      #13                 // Field channelKiller:Lio/netty/util/concurrent/ScheduledFuture;
       4: iconst_0
       5: invokeinterface #14,  2           // InterfaceMethod io/netty/util/concurrent/ScheduledFuture.cancel:(Z)Z
      10: pop
      11: return

  private void closeChannel(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_1
       1: invokeinterface #8,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
       6: invokeinterface #15,  1           // InterfaceMethod io/netty/channel/Channel.isOpen:()Z
      11: ifeq          37
      14: aload_1
      15: invokeinterface #8,  1            // InterfaceMethod io/netty/channel/ChannelHandlerContext.channel:()Lio/netty/channel/Channel;
      20: getstatic     #16                 // Field RELEASE_CHANNEL:Lio/netty/util/AttributeKey;
      23: invokeinterface #17,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      28: iconst_1
      29: invokestatic  #18                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      32: invokeinterface #19,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      37: return

  private void lambda$handlerAdded$0(io.netty.channel.ChannelHandlerContext);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #20                 // Method closeChannel:(Lio/netty/channel/ChannelHandlerContext;)V
       5: return

  static {};
    Code:
       0: ldc           #21                 // String release_channel
       2: invokestatic  #22                 // Method io/netty/util/AttributeKey.newInstance:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
       5: putstatic     #16                 // Field RELEASE_CHANNEL:Lio/netty/util/AttributeKey;
       8: return
}
