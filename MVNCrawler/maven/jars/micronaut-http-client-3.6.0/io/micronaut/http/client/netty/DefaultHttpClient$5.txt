Compiled from "DefaultHttpClient.java"
class io.micronaut.http.client.netty.DefaultHttpClient$5 extends io.micronaut.http.client.netty.DefaultHttpClient$HttpClientInitializer {
  final java.net.URI val$uri;

  final io.micronaut.http.MutableHttpRequest val$request;

  final java.lang.String val$subprotocol;

  final io.micronaut.websocket.context.WebSocketBean val$finalWebSocketBean;

  final io.netty.handler.codec.http.websocketx.WebSocketVersion val$protocolVersion;

  final int val$maxFramePayloadLength;

  final reactor.core.publisher.FluxSink val$emitter;

  final io.micronaut.http.client.netty.DefaultHttpClient this$0;

  io.micronaut.http.client.netty.DefaultHttpClient$5(io.micronaut.http.client.netty.DefaultHttpClient, io.netty.handler.ssl.SslContext, java.lang.String, int, boolean, boolean, boolean, java.util.function.Consumer, java.net.URI, io.micronaut.http.MutableHttpRequest, java.lang.String, io.micronaut.websocket.context.WebSocketBean, io.netty.handler.codec.http.websocketx.WebSocketVersion, int, reactor.core.publisher.FluxSink);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
       5: aload_0
       6: aload         9
       8: putfield      #2                  // Field val$uri:Ljava/net/URI;
      11: aload_0
      12: aload         10
      14: putfield      #3                  // Field val$request:Lio/micronaut/http/MutableHttpRequest;
      17: aload_0
      18: aload         11
      20: putfield      #4                  // Field val$subprotocol:Ljava/lang/String;
      23: aload_0
      24: aload         12
      26: putfield      #5                  // Field val$finalWebSocketBean:Lio/micronaut/websocket/context/WebSocketBean;
      29: aload_0
      30: aload         13
      32: putfield      #6                  // Field val$protocolVersion:Lio/netty/handler/codec/http/websocketx/WebSocketVersion;
      35: aload_0
      36: iload         14
      38: putfield      #7                  // Field val$maxFramePayloadLength:I
      41: aload_0
      42: aload         15
      44: putfield      #8                  // Field val$emitter:Lreactor/core/publisher/FluxSink;
      47: aload_0
      48: aload_1
      49: aload_2
      50: aload_3
      51: iload         4
      53: iload         5
      55: iload         6
      57: iload         7
      59: aload         8
      61: invokespecial #9                  // Method io/micronaut/http/client/netty/DefaultHttpClient$HttpClientInitializer."<init>":(Lio/micronaut/http/client/netty/DefaultHttpClient;Lio/netty/handler/ssl/SslContext;Ljava/lang/String;IZZZLjava/util/function/Consumer;)V
      64: return

  protected void addFinalHandler(io.netty.channel.ChannelPipeline);
    Code:
       0: aload_1
       1: ldc           #11                 // String http-decoder
       3: invokeinterface #12,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
       8: pop
       9: aload_1
      10: ldc           #13                 // class io/netty/handler/timeout/ReadTimeoutHandler
      12: invokeinterface #14,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/Class;)Lio/netty/channel/ChannelHandler;
      17: checkcast     #13                 // class io/netty/handler/timeout/ReadTimeoutHandler
      20: astore_2
      21: aload_2
      22: ifnull        33
      25: aload_1
      26: aload_2
      27: invokeinterface #15,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.remove:(Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      32: pop
      33: aload_0
      34: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      37: invokestatic  #16                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$1100:(Lio/micronaut/http/client/netty/DefaultHttpClient;)Lio/micronaut/http/client/HttpClientConfiguration;
      40: invokevirtual #17                 // Method io/micronaut/http/client/HttpClientConfiguration.getReadIdleTimeout:()Ljava/util/Optional;
      43: astore_3
      44: aload_3
      45: invokevirtual #18                 // Method java/util/Optional.isPresent:()Z
      48: ifeq          102
      51: aload_3
      52: invokevirtual #19                 // Method java/util/Optional.get:()Ljava/lang/Object;
      55: checkcast     #20                 // class java/time/Duration
      58: astore        4
      60: aload         4
      62: invokevirtual #21                 // Method java/time/Duration.isNegative:()Z
      65: ifne          102
      68: aload_1
      69: ldc           #22                 // String idle-state
      71: new           #23                 // class io/netty/handler/timeout/IdleStateHandler
      74: dup
      75: aload         4
      77: invokevirtual #24                 // Method java/time/Duration.toMillis:()J
      80: aload         4
      82: invokevirtual #24                 // Method java/time/Duration.toMillis:()J
      85: aload         4
      87: invokevirtual #24                 // Method java/time/Duration.toMillis:()J
      90: getstatic     #25                 // Field java/util/concurrent/TimeUnit.MILLISECONDS:Ljava/util/concurrent/TimeUnit;
      93: invokespecial #26                 // Method io/netty/handler/timeout/IdleStateHandler."<init>":(JJJLjava/util/concurrent/TimeUnit;)V
      96: invokeinterface #27,  3           // InterfaceMethod io/netty/channel/ChannelPipeline.addLast:(Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
     101: pop
     102: aload_0
     103: getfield      #28                 // Field sslContext:Lio/netty/handler/ssl/SslContext;
     106: ifnonnull     114
     109: ldc           #29                 // String ws
     111: goto          116
     114: ldc           #30                 // String wss
     116: astore        5
     118: aload_0
     119: getfield      #2                  // Field val$uri:Ljava/net/URI;
     122: invokestatic  #31                 // InterfaceMethod io/micronaut/http/uri/UriBuilder.of:(Ljava/net/URI;)Lio/micronaut/http/uri/UriBuilder;
     125: aload         5
     127: invokeinterface #32,  2           // InterfaceMethod io/micronaut/http/uri/UriBuilder.scheme:(Ljava/lang/String;)Lio/micronaut/http/uri/UriBuilder;
     132: aload_0
     133: getfield      #33                 // Field host:Ljava/lang/String;
     136: invokeinterface #34,  2           // InterfaceMethod io/micronaut/http/uri/UriBuilder.host:(Ljava/lang/String;)Lio/micronaut/http/uri/UriBuilder;
     141: aload_0
     142: getfield      #35                 // Field port:I
     145: invokeinterface #36,  2           // InterfaceMethod io/micronaut/http/uri/UriBuilder.port:(I)Lio/micronaut/http/uri/UriBuilder;
     150: invokeinterface #37,  1           // InterfaceMethod io/micronaut/http/uri/UriBuilder.build:()Ljava/net/URI;
     155: astore        6
     157: aload_0
     158: getfield      #3                  // Field val$request:Lio/micronaut/http/MutableHttpRequest;
     161: invokeinterface #38,  1           // InterfaceMethod io/micronaut/http/MutableHttpRequest.getHeaders:()Lio/micronaut/http/MutableHttpHeaders;
     166: astore        7
     168: getstatic     #39                 // Field io/netty/handler/codec/http/EmptyHttpHeaders.INSTANCE:Lio/netty/handler/codec/http/EmptyHttpHeaders;
     171: astore        8
     173: aload         7
     175: instanceof    #40                 // class io/micronaut/http/netty/NettyHttpHeaders
     178: ifeq          191
     181: aload         7
     183: checkcast     #40                 // class io/micronaut/http/netty/NettyHttpHeaders
     186: invokevirtual #41                 // Method io/micronaut/http/netty/NettyHttpHeaders.getNettyHeaders:()Lio/netty/handler/codec/http/HttpHeaders;
     189: astore        8
     191: aload_0
     192: getfield      #4                  // Field val$subprotocol:Ljava/lang/String;
     195: invokestatic  #42                 // Method io/micronaut/core/util/StringUtils.isNotEmpty:(Ljava/lang/CharSequence;)Z
     198: ifeq          213
     201: aload         8
     203: ldc           #43                 // String Sec-WebSocket-Protocol
     205: aload_0
     206: getfield      #4                  // Field val$subprotocol:Ljava/lang/String;
     209: invokevirtual #44                 // Method io/netty/handler/codec/http/HttpHeaders.add:(Ljava/lang/String;Ljava/lang/Object;)Lio/netty/handler/codec/http/HttpHeaders;
     212: pop
     213: new           #45                 // class io/micronaut/http/client/netty/websocket/NettyWebSocketClientHandler
     216: dup
     217: aload_0
     218: getfield      #3                  // Field val$request:Lio/micronaut/http/MutableHttpRequest;
     221: aload_0
     222: getfield      #5                  // Field val$finalWebSocketBean:Lio/micronaut/websocket/context/WebSocketBean;
     225: aload         6
     227: aload_0
     228: getfield      #6                  // Field val$protocolVersion:Lio/netty/handler/codec/http/websocketx/WebSocketVersion;
     231: aload_0
     232: getfield      #4                  // Field val$subprotocol:Ljava/lang/String;
     235: iconst_1
     236: aload         8
     238: aload_0
     239: getfield      #7                  // Field val$maxFramePayloadLength:I
     242: invokestatic  #46                 // Method io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerFactory.newHandshaker:(Ljava/net/URI;Lio/netty/handler/codec/http/websocketx/WebSocketVersion;Ljava/lang/String;ZLio/netty/handler/codec/http/HttpHeaders;I)Lio/netty/handler/codec/http/websocketx/WebSocketClientHandshaker;
     245: aload_0
     246: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
     249: invokestatic  #47                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$3000:(Lio/micronaut/http/client/netty/DefaultHttpClient;)Lio/micronaut/http/bind/RequestBinderRegistry;
     252: aload_0
     253: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
     256: getfield      #48                 // Field io/micronaut/http/client/netty/DefaultHttpClient.mediaTypeCodecRegistry:Lio/micronaut/http/codec/MediaTypeCodecRegistry;
     259: aload_0
     260: getfield      #8                  // Field val$emitter:Lreactor/core/publisher/FluxSink;
     263: invokespecial #49                 // Method io/micronaut/http/client/netty/websocket/NettyWebSocketClientHandler."<init>":(Lio/micronaut/http/MutableHttpRequest;Lio/micronaut/websocket/context/WebSocketBean;Lio/netty/handler/codec/http/websocketx/WebSocketClientHandshaker;Lio/micronaut/http/bind/RequestBinderRegistry;Lio/micronaut/http/codec/MediaTypeCodecRegistry;Lreactor/core/publisher/FluxSink;)V
     266: astore        4
     268: aload_1
     269: iconst_1
     270: anewarray     #50                 // class io/netty/channel/ChannelHandler
     273: dup
     274: iconst_0
     275: getstatic     #51                 // Field io/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler.INSTANCE:Lio/netty/handler/codec/http/websocketx/extensions/compression/WebSocketClientCompressionHandler;
     278: aastore
     279: invokeinterface #52,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.addLast:([Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
     284: pop
     285: aload_1
     286: ldc           #53                 // String micronaut-websocket-client
     288: aload         4
     290: invokeinterface #27,  3           // InterfaceMethod io/netty/channel/ChannelPipeline.addLast:(Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
     295: pop
     296: goto          342
     299: astore        5
     301: aload_0
     302: getfield      #8                  // Field val$emitter:Lreactor/core/publisher/FluxSink;
     305: new           #55                 // class io/micronaut/websocket/exceptions/WebSocketSessionException
     308: dup
     309: new           #56                 // class java/lang/StringBuilder
     312: dup
     313: invokespecial #57                 // Method java/lang/StringBuilder."<init>":()V
     316: ldc           #58                 // String Error opening WebSocket client session:
     318: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     321: aload         5
     323: invokevirtual #60                 // Method java/lang/Throwable.getMessage:()Ljava/lang/String;
     326: invokevirtual #59                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     329: invokevirtual #61                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     332: aload         5
     334: invokespecial #62                 // Method io/micronaut/websocket/exceptions/WebSocketSessionException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
     337: invokeinterface #63,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
     342: return
    Exception table:
       from    to  target type
         102   296   299   Class java/lang/Throwable
}
