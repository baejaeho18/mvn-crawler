Compiled from "DefaultHttpClient.java"
class io.micronaut.http.client.netty.DefaultHttpClient$10 implements io.micronaut.http.filter.ClientFilterChain {
  final java.util.concurrent.atomic.AtomicInteger val$integer;

  final int val$len;

  final java.util.List val$filters;

  final java.util.concurrent.atomic.AtomicReference val$requestWrapper;

  final io.micronaut.http.client.netty.DefaultHttpClient this$0;

  io.micronaut.http.client.netty.DefaultHttpClient$10(io.micronaut.http.client.netty.DefaultHttpClient, java.util.concurrent.atomic.AtomicInteger, int, java.util.List, java.util.concurrent.atomic.AtomicReference);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$integer:Ljava/util/concurrent/atomic/AtomicInteger;
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field val$len:I
      15: aload_0
      16: aload         4
      18: putfield      #4                  // Field val$filters:Ljava/util/List;
      21: aload_0
      22: aload         5
      24: putfield      #5                  // Field val$requestWrapper:Ljava/util/concurrent/atomic/AtomicReference;
      27: aload_0
      28: invokespecial #6                  // Method java/lang/Object."<init>":()V
      31: return

  public org.reactivestreams.Publisher<? extends io.micronaut.http.HttpResponse<?>> proceed(io.micronaut.http.MutableHttpRequest<?>);
    Code:
       0: aload_0
       1: getfield      #2                  // Field val$integer:Ljava/util/concurrent/atomic/AtomicInteger;
       4: invokevirtual #7                  // Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
       7: istore_2
       8: iload_2
       9: aload_0
      10: getfield      #3                  // Field val$len:I
      13: if_icmple     26
      16: new           #8                  // class java/lang/IllegalStateException
      19: dup
      20: ldc           #9                  // String The FilterChain.proceed(..) method should be invoked exactly once per filter execution. The method has instead been invoked multiple times by an erroneous filter definition.
      22: invokespecial #10                 // Method java/lang/IllegalStateException."<init>":(Ljava/lang/String;)V
      25: athrow
      26: aload_0
      27: getfield      #4                  // Field val$filters:Ljava/util/List;
      30: iload_2
      31: invokeinterface #11,  2           // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
      36: checkcast     #12                 // class io/micronaut/http/filter/HttpClientFilter
      39: astore_3
      40: aload_3
      41: aload_0
      42: getfield      #5                  // Field val$requestWrapper:Ljava/util/concurrent/atomic/AtomicReference;
      45: aload_1
      46: invokevirtual #13                 // Method java/util/concurrent/atomic/AtomicReference.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;
      49: checkcast     #14                 // class io/micronaut/http/HttpRequest
      52: aload_0
      53: invokeinterface #15,  3           // InterfaceMethod io/micronaut/http/filter/HttpClientFilter.doFilter:(Lio/micronaut/http/HttpRequest;Lio/micronaut/http/filter/FilterChain;)Lorg/reactivestreams/Publisher;
      58: areturn
      59: astore        4
      61: aload         4
      63: invokestatic  #17                 // Method reactor/core/publisher/Flux.error:(Ljava/lang/Throwable;)Lreactor/core/publisher/Flux;
      66: areturn
    Exception table:
       from    to  target type
          40    58    59   Class java/lang/Throwable
}
