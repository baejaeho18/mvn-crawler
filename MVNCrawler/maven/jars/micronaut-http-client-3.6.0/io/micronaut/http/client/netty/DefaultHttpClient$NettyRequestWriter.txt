Compiled from "DefaultHttpClient.java"
public class io.micronaut.http.client.netty.DefaultHttpClient$NettyRequestWriter {
  private final io.netty.handler.codec.http.HttpRequest nettyRequest;

  private final io.netty.handler.codec.http.multipart.HttpPostRequestEncoder encoder;

  private final java.lang.String scheme;

  private final boolean closeChannelAfterWrite;

  final io.micronaut.http.client.netty.DefaultHttpClient this$0;

  io.micronaut.http.client.netty.DefaultHttpClient$NettyRequestWriter(io.micronaut.http.client.netty.DefaultHttpClient, java.lang.String, io.netty.handler.codec.http.HttpRequest, io.netty.handler.codec.http.multipart.HttpPostRequestEncoder, boolean);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
       5: aload_0
       6: invokespecial #2                  // Method java/lang/Object."<init>":()V
       9: aload_0
      10: aload_3
      11: putfield      #3                  // Field nettyRequest:Lio/netty/handler/codec/http/HttpRequest;
      14: aload_0
      15: aload         4
      17: putfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
      20: aload_0
      21: aload_2
      22: putfield      #5                  // Field scheme:Ljava/lang/String;
      25: aload_0
      26: iload         5
      28: putfield      #6                  // Field closeChannelAfterWrite:Z
      31: return

  protected void writeAndClose(io.netty.channel.Channel, io.netty.channel.pool.ChannelPool, reactor.core.publisher.FluxSink<?>);
    Code:
       0: aload_1
       1: invokeinterface #7,  1            // InterfaceMethod io/netty/channel/Channel.pipeline:()Lio/netty/channel/ChannelPipeline;
       6: astore        4
       8: aload_0
       9: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      12: invokestatic  #8                  // Method io/micronaut/http/client/netty/DefaultHttpClient.access$1500:(Lio/micronaut/http/client/netty/DefaultHttpClient;)Lio/micronaut/http/HttpVersion;
      15: getstatic     #9                  // Field io/micronaut/http/HttpVersion.HTTP_2_0:Lio/micronaut/http/HttpVersion;
      18: if_acmpne     167
      21: aload_0
      22: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      25: invokestatic  #10                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$900:(Lio/micronaut/http/client/netty/DefaultHttpClient;)Lio/netty/handler/ssl/SslContext;
      28: ifnull        45
      31: aload_0
      32: getfield      #5                  // Field scheme:Ljava/lang/String;
      35: invokestatic  #11                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$2000:(Ljava/lang/String;)Z
      38: ifeq          45
      41: iconst_1
      42: goto          46
      45: iconst_0
      46: istore        5
      48: iload         5
      50: ifeq          75
      53: aload_0
      54: getfield      #3                  // Field nettyRequest:Lio/netty/handler/codec/http/HttpRequest;
      57: invokeinterface #12,  1           // InterfaceMethod io/netty/handler/codec/http/HttpRequest.headers:()Lio/netty/handler/codec/http/HttpHeaders;
      62: getstatic     #13                 // Field io/micronaut/http/netty/AbstractNettyHttpRequest.HTTP2_SCHEME:Lio/netty/util/AsciiString;
      65: getstatic     #14                 // Field io/netty/handler/codec/http/HttpScheme.HTTPS:Lio/netty/handler/codec/http/HttpScheme;
      68: invokevirtual #15                 // Method io/netty/handler/codec/http/HttpHeaders.add:(Ljava/lang/CharSequence;Ljava/lang/Object;)Lio/netty/handler/codec/http/HttpHeaders;
      71: pop
      72: goto          94
      75: aload_0
      76: getfield      #3                  // Field nettyRequest:Lio/netty/handler/codec/http/HttpRequest;
      79: invokeinterface #12,  1           // InterfaceMethod io/netty/handler/codec/http/HttpRequest.headers:()Lio/netty/handler/codec/http/HttpHeaders;
      84: getstatic     #13                 // Field io/micronaut/http/netty/AbstractNettyHttpRequest.HTTP2_SCHEME:Lio/netty/util/AsciiString;
      87: getstatic     #16                 // Field io/netty/handler/codec/http/HttpScheme.HTTP:Lio/netty/handler/codec/http/HttpScheme;
      90: invokevirtual #15                 // Method io/netty/handler/codec/http/HttpHeaders.add:(Ljava/lang/CharSequence;Ljava/lang/Object;)Lio/netty/handler/codec/http/HttpHeaders;
      93: pop
      94: aload         4
      96: ldc           #18                 // String http2-upgrade-request
      98: invokeinterface #19,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
     103: checkcast     #20                 // class io/micronaut/http/client/netty/DefaultHttpClient$UpgradeRequestHandler
     106: astore        6
     108: aload         6
     110: ifnull        123
     113: aload         6
     115: invokevirtual #21                 // Method io/micronaut/http/client/netty/DefaultHttpClient$UpgradeRequestHandler.getSettingsHandler:()Lio/micronaut/http/client/netty/DefaultHttpClient$Http2SettingsHandler;
     118: astore        7
     120: goto          137
     123: aload         4
     125: ldc           #22                 // String http2-settings
     127: invokeinterface #19,  2           // InterfaceMethod io/netty/channel/ChannelPipeline.get:(Ljava/lang/String;)Lio/netty/channel/ChannelHandler;
     132: checkcast     #23                 // class io/micronaut/http/client/netty/DefaultHttpClient$Http2SettingsHandler
     135: astore        7
     137: aload         7
     139: ifnull        167
     142: aload_0
     143: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
     146: aload         7
     148: invokestatic  #24                 // Method io/micronaut/http/client/netty/DefaultHttpClient$Http2SettingsHandler.access$700:(Lio/micronaut/http/client/netty/DefaultHttpClient$Http2SettingsHandler;)Lio/netty/channel/ChannelPromise;
     151: aload_0
     152: aload_1
     153: aload_2
     154: aload_3
     155: aload         4
     157: invokedynamic #25,  0             // InvokeDynamic #0:operationComplete:(Lio/micronaut/http/client/netty/DefaultHttpClient$NettyRequestWriter;Lio/netty/channel/Channel;Lio/netty/channel/pool/ChannelPool;Lreactor/core/publisher/FluxSink;Lio/netty/channel/ChannelPipeline;)Lio/netty/util/concurrent/GenericFutureListener;
     162: invokestatic  #26                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$2100:(Lio/micronaut/http/client/netty/DefaultHttpClient;Lio/netty/util/concurrent/Future;Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
     165: pop
     166: return
     167: aload_0
     168: aload_1
     169: aload_2
     170: aload_3
     171: aload         4
     173: invokespecial #27                 // Method processRequestWrite:(Lio/netty/channel/Channel;Lio/netty/channel/pool/ChannelPool;Lreactor/core/publisher/FluxSink;Lio/netty/channel/ChannelPipeline;)V
     176: return

  private void processRequestWrite(io.netty.channel.Channel, io.netty.channel.pool.ChannelPool, reactor.core.publisher.FluxSink<?>, io.netty.channel.ChannelPipeline);
    Code:
       0: aload_0
       1: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
       4: ifnull        82
       7: aload_0
       8: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
      11: invokevirtual #28                 // Method io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.isChunked:()Z
      14: ifeq          82
      17: aload_1
      18: ldc           #29                 // String chunk-writer
      20: invokestatic  #30                 // Method io/netty/util/AttributeKey.valueOf:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
      23: invokeinterface #31,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      28: iconst_1
      29: invokestatic  #32                 // Method java/lang/Boolean.valueOf:(Z)Ljava/lang/Boolean;
      32: invokeinterface #33,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      37: aload         4
      39: ldc           #34                 // String http-streams-codec
      41: ldc           #29                 // String chunk-writer
      43: new           #35                 // class io/netty/handler/stream/ChunkedWriteHandler
      46: dup
      47: invokespecial #36                 // Method io/netty/handler/stream/ChunkedWriteHandler."<init>":()V
      50: invokeinterface #37,  4           // InterfaceMethod io/netty/channel/ChannelPipeline.addAfter:(Ljava/lang/String;Ljava/lang/String;Lio/netty/channel/ChannelHandler;)Lio/netty/channel/ChannelPipeline;
      55: pop
      56: aload_1
      57: aload_0
      58: getfield      #3                  // Field nettyRequest:Lio/netty/handler/codec/http/HttpRequest;
      61: invokeinterface #38,  2           // InterfaceMethod io/netty/channel/Channel.write:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      66: pop
      67: aload_1
      68: aload_0
      69: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
      72: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/Channel.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      77: astore        5
      79: goto          94
      82: aload_1
      83: aload_0
      84: getfield      #3                  // Field nettyRequest:Lio/netty/handler/codec/http/HttpRequest;
      87: invokeinterface #39,  2           // InterfaceMethod io/netty/channel/Channel.writeAndFlush:(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture;
      92: astore        5
      94: aload_2
      95: ifnull        110
      98: aload_0
      99: aload_1
     100: aload_3
     101: aload         5
     103: iconst_0
     104: invokespecial #40                 // Method closeChannelIfNecessary:(Lio/netty/channel/Channel;Lreactor/core/publisher/FluxSink;Lio/netty/channel/ChannelFuture;Z)V
     107: goto          122
     110: aload_0
     111: aload_1
     112: aload_3
     113: aload         5
     115: aload_0
     116: getfield      #6                  // Field closeChannelAfterWrite:Z
     119: invokespecial #40                 // Method closeChannelIfNecessary:(Lio/netty/channel/Channel;Lreactor/core/publisher/FluxSink;Lio/netty/channel/ChannelFuture;Z)V
     122: return

  private void closeChannelIfNecessary(io.netty.channel.Channel, reactor.core.publisher.FluxSink<?>, io.netty.channel.ChannelFuture, boolean);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
       4: aload_3
       5: aload_0
       6: aload_2
       7: aload_1
       8: iload         4
      10: invokedynamic #41,  0             // InvokeDynamic #1:operationComplete:(Lio/micronaut/http/client/netty/DefaultHttpClient$NettyRequestWriter;Lreactor/core/publisher/FluxSink;Lio/netty/channel/Channel;Z)Lio/netty/util/concurrent/GenericFutureListener;
      15: invokestatic  #26                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$2100:(Lio/micronaut/http/client/netty/DefaultHttpClient;Lio/netty/util/concurrent/Future;Lio/netty/util/concurrent/GenericFutureListener;)Lio/netty/util/concurrent/Future;
      18: pop
      19: return

  io.netty.handler.codec.http.HttpRequest getNettyRequest();
    Code:
       0: aload_0
       1: getfield      #3                  // Field nettyRequest:Lio/netty/handler/codec/http/HttpRequest;
       4: areturn

  private void lambda$closeChannelIfNecessary$1(reactor.core.publisher.FluxSink, io.netty.channel.Channel, boolean, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload         4
       2: invokeinterface #42,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
       7: ifne          35
      10: aload_1
      11: invokeinterface #43,  1           // InterfaceMethod reactor/core/publisher/FluxSink.isCancelled:()Z
      16: ifne          42
      19: aload_1
      20: aload         4
      22: invokeinterface #44,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
      27: invokeinterface #45,  2           // InterfaceMethod reactor/core/publisher/FluxSink.error:(Ljava/lang/Throwable;)V
      32: goto          42
      35: aload_2
      36: invokeinterface #46,  1           // InterfaceMethod io/netty/channel/Channel.read:()Lio/netty/channel/Channel;
      41: pop
      42: aload_0
      43: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
      46: ifnull        56
      49: aload_0
      50: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
      53: invokevirtual #47                 // Method io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.cleanFiles:()V
      56: aload_2
      57: ldc           #29                 // String chunk-writer
      59: invokestatic  #30                 // Method io/netty/util/AttributeKey.valueOf:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
      62: invokeinterface #31,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
      67: aconst_null
      68: invokeinterface #33,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
      73: iload_3
      74: ifeq          136
      77: aload_0
      78: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      81: aload_2
      82: invokevirtual #48                 // Method io/micronaut/http/client/netty/DefaultHttpClient.closeChannelAsync:(Lio/netty/channel/Channel;)V
      85: goto          136
      88: astore        5
      90: aload_0
      91: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
      94: ifnull        104
      97: aload_0
      98: getfield      #4                  // Field encoder:Lio/netty/handler/codec/http/multipart/HttpPostRequestEncoder;
     101: invokevirtual #47                 // Method io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.cleanFiles:()V
     104: aload_2
     105: ldc           #29                 // String chunk-writer
     107: invokestatic  #30                 // Method io/netty/util/AttributeKey.valueOf:(Ljava/lang/String;)Lio/netty/util/AttributeKey;
     110: invokeinterface #31,  2           // InterfaceMethod io/netty/channel/Channel.attr:(Lio/netty/util/AttributeKey;)Lio/netty/util/Attribute;
     115: aconst_null
     116: invokeinterface #33,  2           // InterfaceMethod io/netty/util/Attribute.set:(Ljava/lang/Object;)V
     121: iload_3
     122: ifeq          133
     125: aload_0
     126: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
     129: aload_2
     130: invokevirtual #48                 // Method io/micronaut/http/client/netty/DefaultHttpClient.closeChannelAsync:(Lio/netty/channel/Channel;)V
     133: aload         5
     135: athrow
     136: return
    Exception table:
       from    to  target type
           0    42    88   any
          88    90    88   any

  private void lambda$writeAndClose$0(io.netty.channel.Channel, io.netty.channel.pool.ChannelPool, reactor.core.publisher.FluxSink, io.netty.channel.ChannelPipeline, io.netty.util.concurrent.Future) throws java.lang.Exception;
    Code:
       0: aload         5
       2: invokeinterface #42,  1           // InterfaceMethod io/netty/util/concurrent/Future.isSuccess:()Z
       7: ifeq          22
      10: aload_0
      11: aload_1
      12: aload_2
      13: aload_3
      14: aload         4
      16: invokespecial #27                 // Method processRequestWrite:(Lio/netty/channel/Channel;Lio/netty/channel/pool/ChannelPool;Lreactor/core/publisher/FluxSink;Lio/netty/channel/ChannelPipeline;)V
      19: goto          46
      22: aload_0
      23: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      26: new           #49                 // class io/micronaut/http/client/exceptions/HttpClientException
      29: dup
      30: ldc           #50                 // String HTTP/2 clear text upgrade failed to complete
      32: aload         5
      34: invokeinterface #44,  1           // InterfaceMethod io/netty/util/concurrent/Future.cause:()Ljava/lang/Throwable;
      39: invokespecial #51                 // Method io/micronaut/http/client/exceptions/HttpClientException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
      42: invokestatic  #52                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$200:(Lio/micronaut/http/client/netty/DefaultHttpClient;Lio/micronaut/http/client/exceptions/HttpClientException;)Lio/micronaut/http/client/exceptions/HttpClientException;
      45: athrow
      46: return
}
