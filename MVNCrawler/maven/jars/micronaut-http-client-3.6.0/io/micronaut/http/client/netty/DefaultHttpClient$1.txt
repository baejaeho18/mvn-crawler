Compiled from "DefaultHttpClient.java"
class io.micronaut.http.client.netty.DefaultHttpClient$1 extends io.netty.channel.pool.AbstractChannelPoolMap<io.micronaut.http.client.netty.DefaultHttpClient$RequestKey, io.netty.channel.pool.ChannelPool> {
  final io.micronaut.http.client.HttpClientConfiguration$ConnectionPoolConfiguration val$connectionPoolConfiguration;

  final int val$maxConnections;

  final io.micronaut.http.client.netty.DefaultHttpClient this$0;

  io.micronaut.http.client.netty.DefaultHttpClient$1(io.micronaut.http.client.netty.DefaultHttpClient, io.micronaut.http.client.HttpClientConfiguration$ConnectionPoolConfiguration, int);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
       5: aload_0
       6: aload_2
       7: putfield      #2                  // Field val$connectionPoolConfiguration:Lio/micronaut/http/client/HttpClientConfiguration$ConnectionPoolConfiguration;
      10: aload_0
      11: iload_3
      12: putfield      #3                  // Field val$maxConnections:I
      15: aload_0
      16: invokespecial #4                  // Method io/netty/channel/pool/AbstractChannelPoolMap."<init>":()V
      19: return

  protected io.netty.channel.pool.ChannelPool newPool(io.micronaut.http.client.netty.DefaultHttpClient$RequestKey);
    Code:
       0: aload_0
       1: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
       4: getfield      #5                  // Field io/micronaut/http/client/netty/DefaultHttpClient.bootstrap:Lio/netty/bootstrap/Bootstrap;
       7: aload_0
       8: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      11: getfield      #6                  // Field io/micronaut/http/client/netty/DefaultHttpClient.group:Lio/netty/channel/EventLoopGroup;
      14: invokevirtual #7                  // Method io/netty/bootstrap/Bootstrap.clone:(Lio/netty/channel/EventLoopGroup;)Lio/netty/bootstrap/Bootstrap;
      17: astore_2
      18: aload_0
      19: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      22: aload_2
      23: aload_1
      24: invokevirtual #8                  // Method io/micronaut/http/client/netty/DefaultHttpClient$RequestKey.isSecure:()Z
      27: aload_1
      28: invokevirtual #9                  // Method io/micronaut/http/client/netty/DefaultHttpClient$RequestKey.getHost:()Ljava/lang/String;
      31: aload_1
      32: invokevirtual #10                 // Method io/micronaut/http/client/netty/DefaultHttpClient$RequestKey.getPort:()I
      35: invokestatic  #11                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$000:(Lio/micronaut/http/client/netty/DefaultHttpClient;Lio/netty/bootstrap/Bootstrap;ZLjava/lang/String;I)V
      38: aload_2
      39: aload_1
      40: invokevirtual #12                 // Method io/micronaut/http/client/netty/DefaultHttpClient$RequestKey.getRemoteAddress:()Ljava/net/InetSocketAddress;
      43: invokevirtual #13                 // Method io/netty/bootstrap/Bootstrap.remoteAddress:(Ljava/net/SocketAddress;)Lio/netty/bootstrap/Bootstrap;
      46: pop
      47: aload_0
      48: getfield      #1                  // Field this$0:Lio/micronaut/http/client/netty/DefaultHttpClient;
      51: aload_1
      52: invokestatic  #14                 // Method io/micronaut/http/client/netty/DefaultHttpClient.access$100:(Lio/micronaut/http/client/netty/DefaultHttpClient;Lio/micronaut/http/client/netty/DefaultHttpClient$RequestKey;)Lio/netty/channel/pool/AbstractChannelPoolHandler;
      55: astore_3
      56: aload_0
      57: getfield      #2                  // Field val$connectionPoolConfiguration:Lio/micronaut/http/client/HttpClientConfiguration$ConnectionPoolConfiguration;
      60: invokevirtual #15                 // Method io/micronaut/http/client/HttpClientConfiguration$ConnectionPoolConfiguration.getAcquireTimeout:()Ljava/util/Optional;
      63: invokedynamic #16,  0             // InvokeDynamic #0:apply:()Ljava/util/function/Function;
      68: invokevirtual #17                 // Method java/util/Optional.map:(Ljava/util/function/Function;)Ljava/util/Optional;
      71: ldc2_w        #18                 // long -1l
      74: invokestatic  #20                 // Method java/lang/Long.valueOf:(J)Ljava/lang/Long;
      77: invokevirtual #21                 // Method java/util/Optional.orElse:(Ljava/lang/Object;)Ljava/lang/Object;
      80: checkcast     #22                 // class java/lang/Long
      83: invokevirtual #23                 // Method java/lang/Long.longValue:()J
      86: lstore        4
      88: new           #24                 // class io/netty/channel/pool/FixedChannelPool
      91: dup
      92: aload_2
      93: aload_3
      94: getstatic     #25                 // Field io/netty/channel/pool/ChannelHealthChecker.ACTIVE:Lio/netty/channel/pool/ChannelHealthChecker;
      97: lload         4
      99: ldc2_w        #18                 // long -1l
     102: lcmp
     103: ifle          112
     106: getstatic     #26                 // Field io/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction.FAIL:Lio/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction;
     109: goto          113
     112: aconst_null
     113: lload         4
     115: aload_0
     116: getfield      #3                  // Field val$maxConnections:I
     119: aload_0
     120: getfield      #2                  // Field val$connectionPoolConfiguration:Lio/micronaut/http/client/HttpClientConfiguration$ConnectionPoolConfiguration;
     123: invokevirtual #27                 // Method io/micronaut/http/client/HttpClientConfiguration$ConnectionPoolConfiguration.getMaxPendingAcquires:()I
     126: invokespecial #28                 // Method io/netty/channel/pool/FixedChannelPool."<init>":(Lio/netty/bootstrap/Bootstrap;Lio/netty/channel/pool/ChannelPoolHandler;Lio/netty/channel/pool/ChannelHealthChecker;Lio/netty/channel/pool/FixedChannelPool$AcquireTimeoutAction;JII)V
     129: areturn

  protected io.netty.channel.pool.ChannelPool newPool(java.lang.Object);
    Code:
       0: aload_0
       1: aload_1
       2: checkcast     #29                 // class io/micronaut/http/client/netty/DefaultHttpClient$RequestKey
       5: invokevirtual #30                 // Method newPool:(Lio/micronaut/http/client/netty/DefaultHttpClient$RequestKey;)Lio/netty/channel/pool/ChannelPool;
       8: areturn
}
