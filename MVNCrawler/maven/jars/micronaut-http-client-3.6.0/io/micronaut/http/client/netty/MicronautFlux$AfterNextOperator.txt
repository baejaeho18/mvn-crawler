Compiled from "MicronautFlux.java"
class io.micronaut.http.client.netty.MicronautFlux$AfterNextOperator<T> extends reactor.core.publisher.FluxOperator<T, T> {
  private final java.util.function.Consumer<? super T> afterNext;

  protected io.micronaut.http.client.netty.MicronautFlux$AfterNextOperator(reactor.core.publisher.Flux<? extends T>, java.util.function.Consumer<? super T>);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #2                  // Method reactor/core/publisher/FluxOperator."<init>":(Lreactor/core/publisher/Flux;)V
       5: aload_0
       6: aload_2
       7: putfield      #1                  // Field afterNext:Ljava/util/function/Consumer;
      10: return

  public void subscribe(reactor.core.CoreSubscriber<? super T>);
    Code:
       0: aload_0
       1: getfield      #3                  // Field source:Lreactor/core/publisher/Flux;
       4: new           #4                  // class io/micronaut/http/client/netty/MicronautFlux$AfterNextOperator$1
       7: dup
       8: aload_0
       9: aload_1
      10: invokespecial #5                  // Method io/micronaut/http/client/netty/MicronautFlux$AfterNextOperator$1."<init>":(Lio/micronaut/http/client/netty/MicronautFlux$AfterNextOperator;Lreactor/core/CoreSubscriber;)V
      13: invokevirtual #6                  // Method reactor/core/publisher/Flux.subscribe:(Lreactor/core/CoreSubscriber;)V
      16: return

  static java.util.function.Consumer access$000(io.micronaut.http.client.netty.MicronautFlux$AfterNextOperator);
    Code:
       0: aload_0
       1: getfield      #1                  // Field afterNext:Ljava/util/function/Consumer;
       4: areturn
}
