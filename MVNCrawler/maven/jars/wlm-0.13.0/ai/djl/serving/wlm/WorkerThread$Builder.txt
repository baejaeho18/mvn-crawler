Compiled from "WorkerThread.java"
public class ai.djl.serving.wlm.WorkerThread$Builder {
  private ai.djl.serving.wlm.ModelInfo model;

  private ai.djl.serving.wlm.BatchAggregator aggregator;

  private java.util.concurrent.LinkedBlockingDeque<ai.djl.serving.wlm.util.WorkerJob> jobQueue;

  private boolean fixPoolThread;

  ai.djl.serving.wlm.WorkerThread$Builder();
    Code:
       0: aload_0
       1: invokespecial #4                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: iconst_1
       6: putfield      #1                  // Field fixPoolThread:Z
       9: return

  protected ai.djl.serving.wlm.WorkerThread$Builder self();
    Code:
       0: aload_0
       1: areturn

  protected void preBuildProcessing();
    Code:
       0: aload_0
       1: getfield      #2                  // Field aggregator:Lai/djl/serving/wlm/BatchAggregator;
       4: ifnonnull     55
       7: aload_0
       8: getfield      #1                  // Field fixPoolThread:Z
      11: ifeq          36
      14: aload_0
      15: new           #5                  // class ai/djl/serving/wlm/PermanentBatchAggregator
      18: dup
      19: aload_0
      20: getfield      #3                  // Field model:Lai/djl/serving/wlm/ModelInfo;
      23: aload_0
      24: getfield      #6                  // Field jobQueue:Ljava/util/concurrent/LinkedBlockingDeque;
      27: invokespecial #7                  // Method ai/djl/serving/wlm/PermanentBatchAggregator."<init>":(Lai/djl/serving/wlm/ModelInfo;Ljava/util/concurrent/LinkedBlockingDeque;)V
      30: putfield      #2                  // Field aggregator:Lai/djl/serving/wlm/BatchAggregator;
      33: goto          55
      36: aload_0
      37: new           #8                  // class ai/djl/serving/wlm/TemporaryBatchAggregator
      40: dup
      41: aload_0
      42: getfield      #3                  // Field model:Lai/djl/serving/wlm/ModelInfo;
      45: aload_0
      46: getfield      #6                  // Field jobQueue:Ljava/util/concurrent/LinkedBlockingDeque;
      49: invokespecial #9                  // Method ai/djl/serving/wlm/TemporaryBatchAggregator."<init>":(Lai/djl/serving/wlm/ModelInfo;Ljava/util/concurrent/LinkedBlockingDeque;)V
      52: putfield      #2                  // Field aggregator:Lai/djl/serving/wlm/BatchAggregator;
      55: return

  protected void validate();
    Code:
       0: aload_0
       1: getfield      #3                  // Field model:Lai/djl/serving/wlm/ModelInfo;
       4: ifnonnull     17
       7: new           #10                 // class java/lang/IllegalArgumentException
      10: dup
      11: ldc           #11                 // String model must not be null
      13: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      16: athrow
      17: aload_0
      18: getfield      #6                  // Field jobQueue:Ljava/util/concurrent/LinkedBlockingDeque;
      21: ifnonnull     41
      24: aload_0
      25: getfield      #2                  // Field aggregator:Lai/djl/serving/wlm/BatchAggregator;
      28: ifnonnull     41
      31: new           #10                 // class java/lang/IllegalArgumentException
      34: dup
      35: ldc           #13                 // String one of jobQueue or BatchAggregator have to be set.
      37: invokespecial #12                 // Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
      40: athrow
      41: return

  public ai.djl.serving.wlm.WorkerThread build();
    Code:
       0: aload_0
       1: invokevirtual #14                 // Method validate:()V
       4: aload_0
       5: invokevirtual #15                 // Method preBuildProcessing:()V
       8: new           #16                 // class ai/djl/serving/wlm/WorkerThread
      11: dup
      12: aload_0
      13: aconst_null
      14: invokespecial #17                 // Method ai/djl/serving/wlm/WorkerThread."<init>":(Lai/djl/serving/wlm/WorkerThread$Builder;Lai/djl/serving/wlm/WorkerThread$1;)V
      17: areturn

  public ai.djl.serving.wlm.WorkerThread$Builder setModel(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #3                  // Field model:Lai/djl/serving/wlm/ModelInfo;
       5: aload_0
       6: invokevirtual #18                 // Method self:()Lai/djl/serving/wlm/WorkerThread$Builder;
       9: areturn

  public ai.djl.serving.wlm.WorkerThread$Builder optAggregator(ai.djl.serving.wlm.BatchAggregator);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #2                  // Field aggregator:Lai/djl/serving/wlm/BatchAggregator;
       5: aload_0
       6: invokevirtual #18                 // Method self:()Lai/djl/serving/wlm/WorkerThread$Builder;
       9: areturn

  public ai.djl.serving.wlm.WorkerThread$Builder setJobQueue(java.util.concurrent.LinkedBlockingDeque<ai.djl.serving.wlm.util.WorkerJob>);
    Code:
       0: aload_0
       1: aload_1
       2: putfield      #6                  // Field jobQueue:Ljava/util/concurrent/LinkedBlockingDeque;
       5: aload_0
       6: invokevirtual #18                 // Method self:()Lai/djl/serving/wlm/WorkerThread$Builder;
       9: areturn

  public ai.djl.serving.wlm.WorkerThread$Builder optFixPoolThread(boolean);
    Code:
       0: aload_0
       1: iload_1
       2: putfield      #1                  // Field fixPoolThread:Z
       5: aload_0
       6: invokevirtual #18                 // Method self:()Lai/djl/serving/wlm/WorkerThread$Builder;
       9: areturn

  static ai.djl.serving.wlm.ModelInfo access$000(ai.djl.serving.wlm.WorkerThread$Builder);
    Code:
       0: aload_0
       1: getfield      #3                  // Field model:Lai/djl/serving/wlm/ModelInfo;
       4: areturn

  static ai.djl.serving.wlm.BatchAggregator access$100(ai.djl.serving.wlm.WorkerThread$Builder);
    Code:
       0: aload_0
       1: getfield      #2                  // Field aggregator:Lai/djl/serving/wlm/BatchAggregator;
       4: areturn

  static boolean access$200(ai.djl.serving.wlm.WorkerThread$Builder);
    Code:
       0: aload_0
       1: getfield      #1                  // Field fixPoolThread:Z
       4: ireturn
}
