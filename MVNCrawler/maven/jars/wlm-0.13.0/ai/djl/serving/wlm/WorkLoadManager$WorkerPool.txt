Compiled from "WorkLoadManager.java"
final class ai.djl.serving.wlm.WorkLoadManager$WorkerPool {
  private java.util.List<ai.djl.serving.wlm.WorkerThread> workers;

  private java.util.concurrent.LinkedBlockingDeque<ai.djl.serving.wlm.util.WorkerJob> jobQueue;

  private java.lang.String modelName;

  public ai.djl.serving.wlm.WorkLoadManager$WorkerPool(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: aload_0
       1: invokespecial #1                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: new           #2                  // class java/util/concurrent/CopyOnWriteArrayList
       8: dup
       9: invokespecial #3                  // Method java/util/concurrent/CopyOnWriteArrayList."<init>":()V
      12: putfield      #4                  // Field workers:Ljava/util/List;
      15: aload_0
      16: new           #5                  // class java/util/concurrent/LinkedBlockingDeque
      19: dup
      20: aload_1
      21: invokevirtual #6                  // Method ai/djl/serving/wlm/ModelInfo.getQueueSize:()I
      24: invokespecial #7                  // Method java/util/concurrent/LinkedBlockingDeque."<init>":(I)V
      27: putfield      #8                  // Field jobQueue:Ljava/util/concurrent/LinkedBlockingDeque;
      30: aload_0
      31: aload_1
      32: invokevirtual #9                  // Method ai/djl/serving/wlm/ModelInfo.getModelName:()Ljava/lang/String;
      35: putfield      #10                 // Field modelName:Ljava/lang/String;
      38: return

  public java.util.List<ai.djl.serving.wlm.WorkerThread> getWorkers();
    Code:
       0: aload_0
       1: getfield      #4                  // Field workers:Ljava/util/List;
       4: areturn

  public java.util.concurrent.LinkedBlockingDeque<ai.djl.serving.wlm.util.WorkerJob> getJobQueue();
    Code:
       0: aload_0
       1: getfield      #8                  // Field jobQueue:Ljava/util/concurrent/LinkedBlockingDeque;
       4: areturn

  public void log();
    Code:
       0: invokestatic  #11                 // Method ai/djl/serving/wlm/WorkLoadManager.access$000:()Lorg/slf4j/Logger;
       3: invokeinterface #12,  1           // InterfaceMethod org/slf4j/Logger.isDebugEnabled:()Z
       8: ifeq          49
      11: new           #13                 // class java/lang/StringBuffer
      14: dup
      15: invokespecial #14                 // Method java/lang/StringBuffer."<init>":()V
      18: astore_1
      19: aload_0
      20: getfield      #4                  // Field workers:Ljava/util/List;
      23: aload_1
      24: invokedynamic #15,  0             // InvokeDynamic #0:accept:(Ljava/lang/StringBuffer;)Ljava/util/function/Consumer;
      29: invokeinterface #16,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
      34: invokestatic  #11                 // Method ai/djl/serving/wlm/WorkLoadManager.access$000:()Lorg/slf4j/Logger;
      37: ldc           #17                 // String worker pool for model {}:\n {}
      39: aload_0
      40: getfield      #10                 // Field modelName:Ljava/lang/String;
      43: aload_1
      44: invokeinterface #18,  4           // InterfaceMethod org/slf4j/Logger.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
      49: return

  public void cleanup();
    Code:
       0: aload_0
       1: getfield      #4                  // Field workers:Ljava/util/List;
       4: invokedynamic #19,  0             // InvokeDynamic #1:test:()Ljava/util/function/Predicate;
       9: invokeinterface #20,  2           // InterfaceMethod java/util/List.removeIf:(Ljava/util/function/Predicate;)Z
      14: pop
      15: return

  private static boolean lambda$cleanup$1(ai.djl.serving.wlm.WorkerThread);
    Code:
       0: aload_0
       1: invokevirtual #21                 // Method ai/djl/serving/wlm/WorkerThread.getState:()Lai/djl/serving/wlm/WorkerState;
       4: getstatic     #22                 // Field ai/djl/serving/wlm/WorkerState.WORKER_STOPPED:Lai/djl/serving/wlm/WorkerState;
       7: if_acmpeq     20
      10: aload_0
      11: invokevirtual #21                 // Method ai/djl/serving/wlm/WorkerThread.getState:()Lai/djl/serving/wlm/WorkerState;
      14: getstatic     #23                 // Field ai/djl/serving/wlm/WorkerState.WORKER_ERROR:Lai/djl/serving/wlm/WorkerState;
      17: if_acmpne     24
      20: iconst_1
      21: goto          25
      24: iconst_0
      25: ireturn

  private static void lambda$log$0(java.lang.StringBuffer, ai.djl.serving.wlm.WorkerThread);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #24                 // Method ai/djl/serving/wlm/WorkerThread.getWorkerId:()I
       5: invokevirtual #25                 // Method java/lang/StringBuffer.append:(I)Ljava/lang/StringBuffer;
       8: pop
       9: aload_1
      10: invokevirtual #26                 // Method ai/djl/serving/wlm/WorkerThread.isFixPoolThread:()Z
      13: ifeq          26
      16: aload_0
      17: ldc           #27                 // String -fixedPool\n
      19: invokevirtual #28                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      22: pop
      23: goto          33
      26: aload_0
      27: ldc           #29                 // String -tmpPool\n
      29: invokevirtual #28                 // Method java/lang/StringBuffer.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;
      32: pop
      33: return
}
