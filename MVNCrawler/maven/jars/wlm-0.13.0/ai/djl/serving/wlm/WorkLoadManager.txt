Compiled from "WorkLoadManager.java"
public class ai.djl.serving.wlm.WorkLoadManager {
  private static final org.slf4j.Logger logger;

  private java.util.concurrent.ExecutorService threadPool;

  private java.util.concurrent.ConcurrentHashMap<ai.djl.serving.wlm.ModelInfo, ai.djl.serving.wlm.WorkLoadManager$WorkerPool> workerPools;

  public ai.djl.serving.wlm.WorkLoadManager();
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: invokestatic  #3                  // Method java/util/concurrent/Executors.newCachedThreadPool:()Ljava/util/concurrent/ExecutorService;
       8: putfield      #4                  // Field threadPool:Ljava/util/concurrent/ExecutorService;
      11: aload_0
      12: new           #5                  // class java/util/concurrent/ConcurrentHashMap
      15: dup
      16: invokespecial #6                  // Method java/util/concurrent/ConcurrentHashMap."<init>":()V
      19: putfield      #7                  // Field workerPools:Ljava/util/concurrent/ConcurrentHashMap;
      22: return

  public java.util.List<ai.djl.serving.wlm.WorkerThread> getWorkers(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: aload_0
       1: getfield      #7                  // Field workerPools:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
       8: checkcast     #9                  // class ai/djl/serving/wlm/WorkLoadManager$WorkerPool
      11: astore_3
      12: aload_3
      13: ifnonnull     23
      16: invokestatic  #10                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      19: astore_2
      20: goto          36
      23: aload_3
      24: invokevirtual #11                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getWorkers:()Ljava/util/List;
      27: astore_2
      28: aload_2
      29: ifnonnull     36
      32: invokestatic  #10                 // Method java/util/Collections.emptyList:()Ljava/util/List;
      35: astore_2
      36: aload_2
      37: areturn

  public java.util.concurrent.CompletableFuture<ai.djl.modality.Output> runJob(ai.djl.serving.wlm.Job);
    Code:
       0: new           #12                 // class java/util/concurrent/CompletableFuture
       3: dup
       4: invokespecial #13                 // Method java/util/concurrent/CompletableFuture."<init>":()V
       7: astore_2
       8: aload_1
       9: invokevirtual #14                 // Method ai/djl/serving/wlm/Job.getModel:()Lai/djl/serving/wlm/ModelInfo;
      12: astore_3
      13: aload_3
      14: invokevirtual #15                 // Method ai/djl/serving/wlm/ModelInfo.getMaxWorkers:()I
      17: istore        4
      19: iload         4
      21: ifne          60
      24: aload_2
      25: new           #16                 // class ai/djl/serving/wlm/util/WlmShutdownException
      28: dup
      29: new           #17                 // class java/lang/StringBuilder
      32: dup
      33: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
      36: ldc           #19                 // String All model workers has been shutdown:
      38: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      41: aload_3
      42: invokevirtual #21                 // Method ai/djl/serving/wlm/ModelInfo.getModelName:()Ljava/lang/String;
      45: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
      48: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
      51: invokespecial #23                 // Method ai/djl/serving/wlm/util/WlmShutdownException."<init>":(Ljava/lang/String;)V
      54: invokevirtual #24                 // Method java/util/concurrent/CompletableFuture.completeExceptionally:(Ljava/lang/Throwable;)Z
      57: pop
      58: aload_2
      59: areturn
      60: aload_0
      61: aload_3
      62: invokespecial #25                 // Method getWorkerPoolForModel:(Lai/djl/serving/wlm/ModelInfo;)Lai/djl/serving/wlm/WorkLoadManager$WorkerPool;
      65: astore        5
      67: aload         5
      69: invokevirtual #26                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getJobQueue:()Ljava/util/concurrent/LinkedBlockingDeque;
      72: astore        6
      74: aload         6
      76: new           #27                 // class ai/djl/serving/wlm/util/WorkerJob
      79: dup
      80: aload_1
      81: aload_2
      82: invokespecial #28                 // Method ai/djl/serving/wlm/util/WorkerJob."<init>":(Lai/djl/serving/wlm/Job;Ljava/util/concurrent/CompletableFuture;)V
      85: invokevirtual #29                 // Method java/util/concurrent/LinkedBlockingDeque.offer:(Ljava/lang/Object;)Z
      88: ifne          127
      91: aload_2
      92: new           #30                 // class ai/djl/serving/wlm/util/WlmCapacityException
      95: dup
      96: new           #17                 // class java/lang/StringBuilder
      99: dup
     100: invokespecial #18                 // Method java/lang/StringBuilder."<init>":()V
     103: ldc           #31                 // String Worker queue capacity exceeded for model:
     105: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     108: aload_3
     109: invokevirtual #21                 // Method ai/djl/serving/wlm/ModelInfo.getModelName:()Ljava/lang/String;
     112: invokevirtual #20                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
     115: invokevirtual #22                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;
     118: invokespecial #32                 // Method ai/djl/serving/wlm/util/WlmCapacityException."<init>":(Ljava/lang/String;)V
     121: invokevirtual #24                 // Method java/util/concurrent/CompletableFuture.completeExceptionally:(Ljava/lang/Throwable;)Z
     124: pop
     125: aload_2
     126: areturn
     127: aload_0
     128: aload_3
     129: invokevirtual #33                 // Method getNumRunningWorkers:(Lai/djl/serving/wlm/ModelInfo;)I
     132: istore        7
     134: iload         7
     136: ifeq          160
     139: iload         7
     141: iload         4
     143: if_icmpge     226
     146: aload         6
     148: invokevirtual #34                 // Method java/util/concurrent/LinkedBlockingDeque.size:()I
     151: aload_3
     152: invokevirtual #35                 // Method ai/djl/serving/wlm/ModelInfo.getBatchSize:()I
     155: iconst_2
     156: imul
     157: if_icmple     226
     160: aload_3
     161: invokevirtual #36                 // Method ai/djl/serving/wlm/ModelInfo.getModel:()Lai/djl/repository/zoo/ZooModel;
     164: dup
     165: astore        8
     167: monitorenter
     168: aload_0
     169: aload_3
     170: invokevirtual #33                 // Method getNumRunningWorkers:(Lai/djl/serving/wlm/ModelInfo;)I
     173: istore        7
     175: iload         7
     177: iload         4
     179: if_icmpge     212
     182: getstatic     #1                  // Field logger:Lorg/slf4j/Logger;
     185: ldc           #37                 // String Scaling up workers for model {} to {}
     187: aload_3
     188: iload         7
     190: iconst_1
     191: iadd
     192: invokestatic  #38                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
     195: invokeinterface #39,  4           // InterfaceMethod org/slf4j/Logger.info:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V
     200: aload_0
     201: aload         5
     203: invokevirtual #11                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getWorkers:()Ljava/util/List;
     206: aload_3
     207: iconst_1
     208: iconst_0
     209: invokespecial #40                 // Method addThreads:(Ljava/util/List;Lai/djl/serving/wlm/ModelInfo;IZ)V
     212: aload         8
     214: monitorexit
     215: goto          226
     218: astore        9
     220: aload         8
     222: monitorexit
     223: aload         9
     225: athrow
     226: aload_2
     227: areturn
    Exception table:
       from    to  target type
         168   215   218   any
         218   223   218   any

  public int getNumRunningWorkers(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: iconst_0
       1: istore_2
       2: aload_0
       3: getfield      #7                  // Field workerPools:Ljava/util/concurrent/ConcurrentHashMap;
       6: aload_1
       7: invokevirtual #8                  // Method java/util/concurrent/ConcurrentHashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
      10: checkcast     #9                  // class ai/djl/serving/wlm/WorkLoadManager$WorkerPool
      13: astore_3
      14: aload_3
      15: ifnull        98
      18: aload_3
      19: invokevirtual #41                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.cleanup:()V
      22: aload_3
      23: invokevirtual #11                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getWorkers:()Ljava/util/List;
      26: astore        4
      28: aload         4
      30: invokeinterface #42,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;
      35: astore        5
      37: aload         5
      39: invokeinterface #43,  1           // InterfaceMethod java/util/Iterator.hasNext:()Z
      44: ifeq          98
      47: aload         5
      49: invokeinterface #44,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
      54: checkcast     #45                 // class ai/djl/serving/wlm/WorkerThread
      57: astore        6
      59: aload         6
      61: invokevirtual #46                 // Method ai/djl/serving/wlm/WorkerThread.getState:()Lai/djl/serving/wlm/WorkerState;
      64: getstatic     #47                 // Field ai/djl/serving/wlm/WorkerState.WORKER_STOPPED:Lai/djl/serving/wlm/WorkerState;
      67: if_acmpeq     95
      70: aload         6
      72: invokevirtual #46                 // Method ai/djl/serving/wlm/WorkerThread.getState:()Lai/djl/serving/wlm/WorkerState;
      75: getstatic     #48                 // Field ai/djl/serving/wlm/WorkerState.WORKER_ERROR:Lai/djl/serving/wlm/WorkerState;
      78: if_acmpeq     95
      81: aload         6
      83: invokevirtual #46                 // Method ai/djl/serving/wlm/WorkerThread.getState:()Lai/djl/serving/wlm/WorkerState;
      86: getstatic     #49                 // Field ai/djl/serving/wlm/WorkerState.WORKER_SCALED_DOWN:Lai/djl/serving/wlm/WorkerState;
      89: if_acmpeq     95
      92: iinc          2, 1
      95: goto          37
      98: iload_2
      99: ireturn

  public void modelChanged(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: aload_1
       1: invokevirtual #36                 // Method ai/djl/serving/wlm/ModelInfo.getModel:()Lai/djl/repository/zoo/ZooModel;
       4: dup
       5: astore_2
       6: monitorenter
       7: aload_1
       8: invokevirtual #50                 // Method ai/djl/serving/wlm/ModelInfo.getMinWorkers:()I
      11: istore_3
      12: aload_0
      13: aload_1
      14: invokespecial #25                 // Method getWorkerPoolForModel:(Lai/djl/serving/wlm/ModelInfo;)Lai/djl/serving/wlm/WorkLoadManager$WorkerPool;
      17: astore        4
      19: aload         4
      21: ifnull        136
      24: aload         4
      26: invokevirtual #41                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.cleanup:()V
      29: iload_3
      30: ifne          42
      33: aload_0
      34: getfield      #7                  // Field workerPools:Ljava/util/concurrent/ConcurrentHashMap;
      37: aload_1
      38: invokevirtual #51                 // Method java/util/concurrent/ConcurrentHashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
      41: pop
      42: aload         4
      44: invokevirtual #11                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getWorkers:()Ljava/util/List;
      47: astore        5
      49: aload         5
      51: invokeinterface #52,  1           // InterfaceMethod java/util/List.stream:()Ljava/util/stream/Stream;
      56: invokedynamic #53,  0             // InvokeDynamic #0:test:()Ljava/util/function/Predicate;
      61: invokeinterface #54,  2           // InterfaceMethod java/util/stream/Stream.filter:(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
      66: invokestatic  #55                 // Method java/util/stream/Collectors.toList:()Ljava/util/stream/Collector;
      69: invokeinterface #56,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      74: checkcast     #57                 // class java/util/List
      77: astore        6
      79: aload         6
      81: invokeinterface #58,  1           // InterfaceMethod java/util/List.size:()I
      86: istore        7
      88: iload         7
      90: iload_3
      91: if_icmpge     109
      94: aload_0
      95: aload         5
      97: aload_1
      98: iload_3
      99: iload         7
     101: isub
     102: iconst_1
     103: invokespecial #40                 // Method addThreads:(Ljava/util/List;Lai/djl/serving/wlm/ModelInfo;IZ)V
     106: goto          131
     109: aload         6
     111: iload_3
     112: iload         7
     114: invokeinterface #59,  3           // InterfaceMethod java/util/List.subList:(II)Ljava/util/List;
     119: aload         5
     121: invokedynamic #60,  0             // InvokeDynamic #1:accept:(Ljava/util/List;)Ljava/util/function/Consumer;
     126: invokeinterface #61,  2           // InterfaceMethod java/util/List.forEach:(Ljava/util/function/Consumer;)V
     131: aload         4
     133: invokevirtual #62                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.log:()V
     136: aload_2
     137: monitorexit
     138: goto          148
     141: astore        8
     143: aload_2
     144: monitorexit
     145: aload         8
     147: athrow
     148: return
    Exception table:
       from    to  target type
           7   138   141   any
         141   145   141   any

  public int getQueueLength(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #25                 // Method getWorkerPoolForModel:(Lai/djl/serving/wlm/ModelInfo;)Lai/djl/serving/wlm/WorkLoadManager$WorkerPool;
       5: astore_2
       6: aload_2
       7: invokevirtual #26                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getJobQueue:()Ljava/util/concurrent/LinkedBlockingDeque;
      10: invokevirtual #34                 // Method java/util/concurrent/LinkedBlockingDeque.size:()I
      13: ireturn

  private ai.djl.serving.wlm.WorkLoadManager$WorkerPool getWorkerPoolForModel(ai.djl.serving.wlm.ModelInfo);
    Code:
       0: aload_0
       1: getfield      #7                  // Field workerPools:Ljava/util/concurrent/ConcurrentHashMap;
       4: aload_1
       5: aload_1
       6: invokedynamic #63,  0             // InvokeDynamic #2:apply:(Lai/djl/serving/wlm/ModelInfo;)Ljava/util/function/Function;
      11: invokevirtual #64                 // Method java/util/concurrent/ConcurrentHashMap.computeIfAbsent:(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;
      14: checkcast     #9                  // class ai/djl/serving/wlm/WorkLoadManager$WorkerPool
      17: areturn

  private void addThreads(java.util.List<ai.djl.serving.wlm.WorkerThread>, ai.djl.serving.wlm.ModelInfo, int, boolean);
    Code:
       0: iconst_0
       1: istore        5
       3: iload         5
       5: iload_3
       6: if_icmpge     64
       9: invokestatic  #65                 // Method ai/djl/serving/wlm/WorkerThread.builder:()Lai/djl/serving/wlm/WorkerThread$Builder;
      12: aload_2
      13: invokevirtual #66                 // Method ai/djl/serving/wlm/WorkerThread$Builder.setModel:(Lai/djl/serving/wlm/ModelInfo;)Lai/djl/serving/wlm/WorkerThread$Builder;
      16: aload_0
      17: aload_2
      18: invokespecial #25                 // Method getWorkerPoolForModel:(Lai/djl/serving/wlm/ModelInfo;)Lai/djl/serving/wlm/WorkLoadManager$WorkerPool;
      21: invokevirtual #26                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool.getJobQueue:()Ljava/util/concurrent/LinkedBlockingDeque;
      24: invokevirtual #67                 // Method ai/djl/serving/wlm/WorkerThread$Builder.setJobQueue:(Ljava/util/concurrent/LinkedBlockingDeque;)Lai/djl/serving/wlm/WorkerThread$Builder;
      27: iload         4
      29: invokevirtual #68                 // Method ai/djl/serving/wlm/WorkerThread$Builder.optFixPoolThread:(Z)Lai/djl/serving/wlm/WorkerThread$Builder;
      32: invokevirtual #69                 // Method ai/djl/serving/wlm/WorkerThread$Builder.build:()Lai/djl/serving/wlm/WorkerThread;
      35: astore        6
      37: aload_1
      38: aload         6
      40: invokeinterface #70,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z
      45: pop
      46: aload_0
      47: getfield      #4                  // Field threadPool:Ljava/util/concurrent/ExecutorService;
      50: aload         6
      52: invokeinterface #71,  2           // InterfaceMethod java/util/concurrent/ExecutorService.submit:(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;
      57: pop
      58: iinc          5, 1
      61: goto          3
      64: return

  private static ai.djl.serving.wlm.WorkLoadManager$WorkerPool lambda$getWorkerPoolForModel$1(ai.djl.serving.wlm.ModelInfo, ai.djl.serving.wlm.ModelInfo);
    Code:
       0: new           #9                  // class ai/djl/serving/wlm/WorkLoadManager$WorkerPool
       3: dup
       4: aload_0
       5: invokespecial #72                 // Method ai/djl/serving/wlm/WorkLoadManager$WorkerPool."<init>":(Lai/djl/serving/wlm/ModelInfo;)V
       8: areturn

  private static void lambda$modelChanged$0(java.util.List, ai.djl.serving.wlm.WorkerThread);
    Code:
       0: aload_0
       1: aload_1
       2: invokeinterface #73,  2           // InterfaceMethod java/util/List.remove:(Ljava/lang/Object;)Z
       7: pop
       8: aload_1
       9: getstatic     #49                 // Field ai/djl/serving/wlm/WorkerState.WORKER_SCALED_DOWN:Lai/djl/serving/wlm/WorkerState;
      12: invokevirtual #74                 // Method ai/djl/serving/wlm/WorkerThread.shutdown:(Lai/djl/serving/wlm/WorkerState;)V
      15: return

  static org.slf4j.Logger access$000();
    Code:
       0: getstatic     #1                  // Field logger:Lorg/slf4j/Logger;
       3: areturn

  static {};
    Code:
       0: ldc           #75                 // class ai/djl/serving/wlm/WorkLoadManager
       2: invokestatic  #76                 // Method org/slf4j/LoggerFactory.getLogger:(Ljava/lang/Class;)Lorg/slf4j/Logger;
       5: putstatic     #1                  // Field logger:Lorg/slf4j/Logger;
       8: return
}
