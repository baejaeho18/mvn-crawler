Compiled from "ComparableUtils.java"
public class org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder<A extends java.lang.Comparable<A>> {
  private final A a;

  private org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder(A);
    Code:
       0: aload_0
       1: invokespecial #2                  // Method java/lang/Object."<init>":()V
       4: aload_0
       5: aload_1
       6: putfield      #3                  // Field a:Ljava/lang/Comparable;
       9: return

  public boolean between(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #4                  // Method betweenOrdered:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z
       6: ifne          18
       9: aload_0
      10: aload_2
      11: aload_1
      12: invokespecial #4                  // Method betweenOrdered:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  public boolean betweenExclusive(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: aload_2
       3: invokespecial #5                  // Method betweenOrderedExclusive:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z
       6: ifne          18
       9: aload_0
      10: aload_2
      11: aload_1
      12: invokespecial #5                  // Method betweenOrderedExclusive:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Z
      15: ifeq          22
      18: iconst_1
      19: goto          23
      22: iconst_0
      23: ireturn

  private boolean betweenOrdered(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #6                  // Method greaterThanOrEqualTo:(Ljava/lang/Comparable;)Z
       5: ifeq          20
       8: aload_0
       9: aload_2
      10: invokevirtual #7                  // Method lessThanOrEqualTo:(Ljava/lang/Comparable;)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  private boolean betweenOrderedExclusive(A, A);
    Code:
       0: aload_0
       1: aload_1
       2: invokevirtual #8                  // Method greaterThan:(Ljava/lang/Comparable;)Z
       5: ifeq          20
       8: aload_0
       9: aload_2
      10: invokevirtual #9                  // Method lessThan:(Ljava/lang/Comparable;)Z
      13: ifeq          20
      16: iconst_1
      17: goto          21
      20: iconst_0
      21: ireturn

  public boolean equalTo(A);
    Code:
       0: aload_0
       1: getfield      #3                  // Field a:Ljava/lang/Comparable;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      10: ifne          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public boolean greaterThan(A);
    Code:
       0: aload_0
       1: getfield      #3                  // Field a:Ljava/lang/Comparable;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      10: ifle          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public boolean greaterThanOrEqualTo(A);
    Code:
       0: aload_0
       1: getfield      #3                  // Field a:Ljava/lang/Comparable;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      10: iflt          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public boolean lessThan(A);
    Code:
       0: aload_0
       1: getfield      #3                  // Field a:Ljava/lang/Comparable;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      10: ifge          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  public boolean lessThanOrEqualTo(A);
    Code:
       0: aload_0
       1: getfield      #3                  // Field a:Ljava/lang/Comparable;
       4: aload_1
       5: invokeinterface #10,  2           // InterfaceMethod java/lang/Comparable.compareTo:(Ljava/lang/Object;)I
      10: ifgt          17
      13: iconst_1
      14: goto          18
      17: iconst_0
      18: ireturn

  org.apache.commons.lang3.compare.ComparableUtils$ComparableCheckBuilder(java.lang.Comparable, org.apache.commons.lang3.compare.ComparableUtils$1);
    Code:
       0: aload_0
       1: aload_1
       2: invokespecial #1                  // Method "<init>":(Ljava/lang/Comparable;)V
       5: return
}
