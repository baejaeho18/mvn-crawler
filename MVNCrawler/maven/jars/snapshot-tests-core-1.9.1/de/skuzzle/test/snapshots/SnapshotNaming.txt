Compiled from "SnapshotNaming.java"
public interface de.skuzzle.test.snapshots.SnapshotNaming {
  public static de.skuzzle.test.snapshots.SnapshotNaming defaultNaming();
    Code:
       0: invokedynamic #1,  0              // InvokeDynamic #0:determineSnapshotName:()Lde/skuzzle/test/snapshots/SnapshotNaming;
       5: areturn

  public static de.skuzzle.test.snapshots.SnapshotNaming constant(java.lang.String);
    Code:
       0: aload_0
       1: ldc           #2                  // String snapshotName must not be null
       3: invokestatic  #3                  // Method de/skuzzle/test/snapshots/validation/Arguments.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: invokedynamic #4,  0              // InvokeDynamic #1:determineSnapshotName:(Ljava/lang/String;)Lde/skuzzle/test/snapshots/SnapshotNaming;
      13: areturn

  public static de.skuzzle.test.snapshots.SnapshotNaming withParameters(java.lang.Object, java.lang.Object...);
    Code:
       0: aload_0
       1: ldc           #5                  // String parameter must not be null
       3: invokestatic  #3                  // Method de/skuzzle/test/snapshots/validation/Arguments.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
       6: pop
       7: aload_0
       8: aload_1
       9: invokedynamic #6,  0              // InvokeDynamic #2:determineSnapshotName:(Ljava/lang/Object;[Ljava/lang/Object;)Lde/skuzzle/test/snapshots/SnapshotNaming;
      14: areturn

  public abstract java.lang.String determineSnapshotName(java.lang.reflect.Method, int);

  private static java.lang.String lambda$withParameters$2(java.lang.Object, java.lang.Object[], java.lang.reflect.Method, int);
    Code:
       0: aload_0
       1: invokestatic  #7                  // InterfaceMethod java/util/stream/Stream.of:(Ljava/lang/Object;)Ljava/util/stream/Stream;
       4: aload_1
       5: invokestatic  #8                  // Method java/util/Arrays.stream:([Ljava/lang/Object;)Ljava/util/stream/Stream;
       8: invokestatic  #9                  // InterfaceMethod java/util/stream/Stream.concat:(Ljava/util/stream/Stream;Ljava/util/stream/Stream;)Ljava/util/stream/Stream;
      11: invokedynamic #10,  0             // InvokeDynamic #3:apply:()Ljava/util/function/Function;
      16: invokeinterface #11,  2           // InterfaceMethod java/util/stream/Stream.map:(Ljava/util/function/Function;)Ljava/util/stream/Stream;
      21: ldc           #12                 // String _
      23: invokestatic  #13                 // Method java/util/stream/Collectors.joining:(Ljava/lang/CharSequence;)Ljava/util/stream/Collector;
      26: invokeinterface #14,  2           // InterfaceMethod java/util/stream/Stream.collect:(Ljava/util/stream/Collector;)Ljava/lang/Object;
      31: checkcast     #15                 // class java/lang/String
      34: astore        4
      36: aload_2
      37: invokevirtual #16                 // Method java/lang/reflect/Method.getName:()Ljava/lang/String;
      40: iload_3
      41: aload         4
      43: invokedynamic #17,  0             // InvokeDynamic #4:makeConcatWithConstants:(Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;
      48: areturn

  private static java.lang.String lambda$constant$1(java.lang.String, java.lang.reflect.Method, int);
    Code:
       0: aload_0
       1: areturn

  private static java.lang.String lambda$defaultNaming$0(java.lang.reflect.Method, int);
    Code:
       0: aload_0
       1: invokevirtual #16                 // Method java/lang/reflect/Method.getName:()Ljava/lang/String;
       4: iload_1
       5: invokedynamic #18,  0             // InvokeDynamic #5:makeConcatWithConstants:(Ljava/lang/String;I)Ljava/lang/String;
      10: areturn
}
